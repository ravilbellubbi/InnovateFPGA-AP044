
RFS_SENSOR.elf:     file format elf32-littlenios2
RFS_SENSOR.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000149d4 memsz 0x000149d4 flags r-x
    LOAD off    0x000159f4 vaddr 0x000349f4 paddr 0x000364e4 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00017fd4 vaddr 0x00037fd4 paddr 0x00037fd4 align 2**12
         filesz 0x00000000 memsz 0x000001a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013da4  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a0c  00033fe8  00033fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  000349f4  000364e4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a8  00037fd4  00037fd4  00017fd4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0003817c  0003817c  000174e4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000174e4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001078  00000000  00000000  00017508  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000263dc  00000000  00000000  00018580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a025  00000000  00000000  0003e95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ca72  00000000  00000000  00048981  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002c18  00000000  00000000  000553f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004179  00000000  00000000  0005800c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a61d  00000000  00000000  0005c185  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000767a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d70  00000000  00000000  00076808  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c0d2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0007c0d5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007c0df  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007c0e0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007c0e1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007c0e5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007c0e9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007c0ed  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007c0f6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007c0ff  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0007c108  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000017  00000000  00000000  0007c111  2**0
                  CONTENTS, READONLY
 29 .jdi          00003efc  00000000  00000000  0007c128  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005af36  00000000  00000000  00080024  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00033fe8 l    d  .rodata	00000000 .rodata
000349f4 l    d  .rwdata	00000000 .rwdata
00037fd4 l    d  .bss	00000000 .bss
0003817c l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../RFS_SENSOR_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 light_sensor.c
000364a0 l     O .rwdata	00000004 Light_I2C_Controller_Base
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 rh_temp.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00034842 l     O .rodata	00000010 zeroes.4404
0002953c l     F .text	000000bc __sbprintf
00034852 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0002974c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002b27c l     F .text	00000008 __fp_unlock
0002b290 l     F .text	0000019c __sinit.part.1
0002b42c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000349f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00034e38 l     O .rwdata	00000020 lc_ctype_charset
00034e18 l     O .rwdata	00000020 lc_message_charset
00034e58 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00034884 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002e828 l     F .text	000000fc __sprint_r.part.0
000349b8 l     O .rodata	00000010 blanks.4348
000349a8 l     O .rodata	00000010 zeroes.4349
0002fdb4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
000316b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000317bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000317e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000318d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000319b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00031aa0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00031c74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000364d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00032094 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000321c8 l     F .text	00000034 alt_dev_reg
00035440 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000324bc l     F .text	0000020c altera_avalon_jtag_uart_irq
000326c8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00032d00 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000330c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00033534 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00033674 l     F .text	0000003c alt_get_errno
000336b0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00038014 g     O .bss	00000004 alt_instruction_exception_handler
0002de6c g     F .text	00000074 _mprec_log10
0002df58 g     F .text	0000008c __any_on
00030350 g     F .text	00000054 _isatty_r
00034890 g     O .rodata	00000028 __mprec_tinytens
00031bb0 g     F .text	0000007c alt_main
000271bc g     F .text	000000c0 _puts_r
0003807c g     O .bss	00000100 alt_irq
000303a4 g     F .text	00000060 _lseek_r
00020604 g     F .text	00000068 ACK_check
000364e4 g       *ABS*	00000000 __flash_rwdata_start
00020578 g     F .text	0000008c ACK_single_check
00031254 g     F .text	00000088 .hidden __eqdf2
0003817c g       *ABS*	00000000 __alt_heap_start
000218c4 g     F .text	00000074 I2C_Write_Light
00027180 g     F .text	0000003c printf
000305bc g     F .text	0000009c _wcrtomb_r
0002e6e8 g     F .text	0000005c __sseek
0002b5cc g     F .text	00000010 __sinit
00030464 g     F .text	00000140 __swbuf_r
00022004 g     F .text	000001b4 MPU9250_initialize
0002c094 g     F .text	0000007c _setlocale_r
0002b434 g     F .text	00000068 __sfmoreglue
00038040 g     O .bss	0000000c accelerometer_data
00031c50 g     F .text	00000024 __malloc_unlock
00023d58 g     F .text	00000440 .hidden __divsf3
00021d80 g     F .text	0000005c ReadRegs
0002176c g     F .text	0000004c Light_SetThreshHigh
0002cd64 g     F .text	0000015c memmove
0002066c g     F .text	0000024c OC_I2C_Write
0002b5b4 g     F .text	00000018 _cleanup
0002cfe8 g     F .text	000000a8 _Balloc
000312dc g     F .text	000000dc .hidden __gtdf2
000338c8 g     F .text	00000024 altera_nios2_gen2_irq_init
00022ec0 g     F .text	000000a4 RH_Temp_Init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000302f4 g     F .text	0000005c _fstat_r
00037ff8 g     O .bss	00000004 errno
0002e664 g     F .text	00000008 __seofread
00038000 g     O .bss	00000004 alt_argv
0003e4a0 g       *ABS*	00000000 _gp
0002144c g     F .text	000000f8 Light_Get_ADCData0
00032064 g     F .text	00000030 usleep
00024594 g     F .text	000004e4 .hidden __subsf3
000226a4 g     F .text	000000d4 read_temp
000352c0 g     O .rwdata	00000180 alt_fd_list
00021a18 g     F .text	0000015c Sensor_Report
00023004 g     F .text	0000003c RH_Temp_Sensor_Init
000338ec g     F .text	00000090 alt_find_dev
0002cc1c g     F .text	00000148 memcpy
00020398 g     F .text	0000014c oc_i2c_init_ex
0002b284 g     F .text	0000000c _cleanup_r
0003152c g     F .text	000000dc .hidden __floatsidf
000335f8 g     F .text	0000007c alt_io_redirect
000313b8 g     F .text	000000f4 .hidden __ltdf2
00033fe8 g       *ABS*	00000000 __DTOR_END__
0002727c g     F .text	00000014 puts
00033bb8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000213dc g     F .text	00000070 Light_PowerSwitch
0002e548 g     F .text	00000074 __fpclassifyd
0002ddc8 g     F .text	000000a4 __ratio
0002fd98 g     F .text	0000001c __vfiprintf_internal
000328c0 g     F .text	0000021c altera_avalon_jtag_uart_read
00027150 g     F .text	00000030 _printf_r
000237d4 g     F .text	00000064 .hidden __udivsi3
00031910 g     F .text	000000a4 isatty
000348e0 g     O .rodata	000000c8 __mprec_tens
0002c110 g     F .text	0000000c __locale_charset
00033b28 g     F .text	00000090 alt_icache_flush
00037ff4 g     O .bss	00000004 __malloc_top_pad
000222b8 g     F .text	0000011c calib_mag
000364ac g     O .rwdata	00000004 __mb_cur_max
0002c140 g     F .text	0000000c _localeconv_r
0002d3f4 g     F .text	0000003c __i2b
0002ba50 g     F .text	000004bc __sfvwrite_r
0002e5bc g     F .text	00000054 _sbrk_r
00030404 g     F .text	00000060 _read_r
000364cc g     O .rwdata	00000004 alt_max_fd
0002ffe8 g     F .text	000000f0 _fclose_r
0002b24c g     F .text	00000030 fflush
00037ff0 g     O .bss	00000004 __malloc_max_sbrked_mem
000219a8 g     F .text	00000070 I2C_Read_Light
00026e34 g     F .text	00000110 .hidden __extendsfdf2
00037fd4 g     O .bss	00000004 temperature
00024c8c g     F .text	000008ac .hidden __adddf3
0002db70 g     F .text	0000010c __b2d
00030d1c g     F .text	00000538 .hidden __umoddi3
00031adc g     F .text	000000d4 lseek
000364a4 g     O .rwdata	00000004 _global_impure_ptr
0002dfe4 g     F .text	00000564 _realloc_r
0003817c g       *ABS*	00000000 __bss_end
00033444 g     F .text	000000f0 alt_iic_isr_register
00031f5c g     F .text	00000108 alt_tick
000234dc g     F .text	000000f8 th_dump_chip_info
000307a4 g     F .text	00000578 .hidden __udivdi3
00030250 g     F .text	00000024 _fputwc_r
000348b8 g     O .rodata	00000028 __mprec_bigtens
0002d1d8 g     F .text	00000104 __s2b
00031608 g     F .text	000000a8 .hidden __floatunsidf
0002d8b0 g     F .text	00000060 __mcmp
0002b5ec g     F .text	00000018 __fp_lock_all
000333f8 g     F .text	0000004c alt_ic_irq_enabled
00023364 g     F .text	0000013c th_Read_Measure_Data
00020d58 g     F .text	0000026c OC_I2CL_Write
00031ec0 g     F .text	0000009c alt_alarm_stop
00038010 g     O .bss	00000004 alt_irq_active
0002180c g     F .text	00000064 Light_GetInterrupt
000208b8 g     F .text	00000064 ACK_judge_for_read
000200fc g     F .exceptions	000000d4 alt_irq_handler
00035298 g     O .rwdata	00000028 alt_dev_null
00020290 g     F .text	00000058 Write32_Data
00021378 g     F .text	00000064 Light_GetTiming
00033078 g     F .text	00000048 alt_dcache_flush_all
0002d2dc g     F .text	00000068 __hi0bits
000314ac g     F .text	00000080 .hidden __fixdfsi
00022d18 g     F .text	000000f0 getMotion9
000364e4 g       *ABS*	00000000 __ram_rwdata_end
000364c4 g     O .rwdata	00000008 alt_dev_list
000320d0 g     F .text	000000f8 write
0003804c g     O .bss	0000000c calib_data
000349f4 g       *ABS*	00000000 __ram_rodata_end
00031824 g     F .text	000000b0 fstat
000313b8 g     F .text	000000f4 .hidden __ledf2
0002d628 g     F .text	00000140 __pow5mult
0002e93c g     F .text	0000145c ___vfiprintf_internal_r
00037fe8 g     O .bss	00000004 __nlocale_changed
00023838 g     F .text	00000058 .hidden __umodsi3
0003817c g       *ABS*	00000000 end
00022778 g     F .text	00000130 read_mag
000323fc g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00033fe8 g       *ABS*	00000000 __CTOR_LIST__
0003f400 g       *ABS*	00000000 __alt_stack_pointer
00032d78 g     F .text	0000007c alt_avalon_timer_sc_init
000270ec g     F .text	00000064 .hidden __clzsi2
00032adc g     F .text	00000224 altera_avalon_jtag_uart_write
0002b5dc g     F .text	00000004 __sfp_lock_acquire
0002cb38 g     F .text	000000e4 memchr
00027328 g     F .text	000021f8 ___vfprintf_internal_r
0002b740 g     F .text	00000310 _free_r
0002c11c g     F .text	00000010 __locale_mb_cur_max
00033e34 g     F .text	00000180 __call_exitprocs
00022f64 g     F .text	000000a0 RH_Temp_Read_Device_ID
00037fe4 g     O .bss	00000004 __mlocale_changed
000364b0 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
00038008 g     O .bss	00000004 _alt_tick_rate
0002d768 g     F .text	00000148 __lshift
0003800c g     O .bss	00000004 _alt_nticks
00031cb0 g     F .text	000000fc read
00021d20 g     F .text	00000060 ReadReg
00032234 g     F .text	00000064 alt_sys_init
00024a78 g     F .text	00000124 .hidden __floatsisf
00033d1c g     F .text	00000118 __register_exitproc
00021938 g     F .text	00000070 I2C_Write_Light16
00038058 g     O .bss	0000000c gyroscope_data
0002d430 g     F .text	000001f8 __multiply
00038064 g     O .bss	0000000c magnetometer_ASA
00032768 g     F .text	00000068 altera_avalon_jtag_uart_close
000349f4 g       *ABS*	00000000 __ram_rwdata_start
00033fe8 g       *ABS*	00000000 __ram_rodata_start
00038018 g     O .bss	00000028 __malloc_current_mallinfo
0002dc7c g     F .text	0000014c __d2b
000235d4 g     F .text	00000078 th_write_register
00021ddc g     F .text	00000110 set_acc_scale
00032298 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00033a84 g     F .text	000000a4 alt_get_fd
00032f20 g     F .text	00000158 alt_busy_sleep
0002fed0 g     F .text	00000054 _close_r
000212b4 g     F .text	00000060 Light_Init
00038070 g     O .bss	0000000c magnetometer_data
00033ca0 g     F .text	0000007c memcmp
00032358 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0003817c g       *ABS*	00000000 __alt_stack_base
000323a8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000295f8 g     F .text	00000154 __swsetup_r
00020340 g     F .text	00000058 oc_i2c_init
00021314 g     F .text	00000064 Light_GetID
00025538 g     F .text	000008e8 .hidden __divdf3
0002b49c g     F .text	00000118 __sfp
0002dee0 g     F .text	00000078 __copybits
00034e90 g     O .rwdata	00000408 __malloc_av_
0002b5e8 g     F .text	00000004 __sinit_lock_release
00025e20 g     F .text	00000718 .hidden __muldf3
0002e610 g     F .text	00000054 __sread
0003397c g     F .text	00000108 alt_find_file
000330fc g     F .text	000000a4 alt_dev_llist_insert
0002364c g     F .text	00000090 th_read_register
00031c2c g     F .text	00000024 __malloc_lock
00031e10 g     F .text	000000b0 sbrk
0002b1f0 g     F .text	0000005c _fflush_r
0002ff24 g     F .text	000000c4 _calloc_r
00023040 g     F .text	00000158 RH_Temp_Sensor_Read
00021720 g     F .text	0000004c Light_SetThreshLow
00037fd4 g       *ABS*	00000000 __bss_start
0002cec0 g     F .text	00000128 memset
00021b74 g     F .text	000000c4 main
00038004 g     O .bss	00000004 alt_envp
00037fec g     O .bss	00000004 __malloc_max_total_mem
000322f8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000305a4 g     F .text	00000018 __swbuf
0002e744 g     F .text	00000008 __sclose
0003f400 g       *ABS*	00000000 __alt_heap_limit
000300d8 g     F .text	00000014 fclose
00026f44 g     F .text	000001a8 .hidden __truncdfsf2
0002994c g     F .text	00001688 _dtoa_r
0002c32c g     F .text	0000080c _malloc_r
00030718 g     F .text	00000030 __ascii_wctomb
000364d0 g     O .rwdata	00000004 alt_errno
0002163c g     F .text	000000e4 Get_light
0002bf0c g     F .text	000000c4 _fwalk
00023198 g     F .text	00000134 Read_Configuration
000236dc g     F .text	00000084 .hidden __divsi3
000228a8 g     F .text	00000470 read_all
000204e4 g     F .text	00000094 oc_i2c_uninit
0002b61c g     F .text	00000124 _malloc_trim_r
00033fe8 g       *ABS*	00000000 __CTOR_END__
00024198 g     F .text	000003fc .hidden __mulsf3
0002e74c g     F .text	000000dc strcmp
00033fe8 g       *ABS*	00000000 __flash_rodata_start
00033fe8 g       *ABS*	00000000 __DTOR_LIST__
00031254 g     F .text	00000088 .hidden __nedf2
000321fc g     F .text	00000038 alt_irq_init
00031dac g     F .text	00000064 alt_release_fd
000346fb g     O .rodata	00000100 .hidden __clz_tab
00037fe0 g     O .bss	00000004 _PathLocale
00033c54 g     F .text	00000014 atexit
0002fe70 g     F .text	00000060 _write_r
0002c14c g     F .text	00000018 setlocale
000234a0 g     F .text	0000003c th_reset
000364a8 g     O .rwdata	00000004 _impure_ptr
00037ffc g     O .bss	00000004 alt_argc
0002afd4 g     F .text	0000021c __sflush_r
00033200 g     F .text	00000060 _do_dtors
0002c138 g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
0002db0c g     F .text	00000064 __ulp
0002b604 g     F .text	00000018 __fp_unlock_all
00021544 g     F .text	000000f8 Light_Get_ADCData1
00037fd8 g     O .bss	00000004 gyro_divider
000364bc g     O .rwdata	00000008 alt_fs_list
000202e8 g     F .text	00000058 Read32_Data
00022e08 g     F .text	000000b8 getMotion6
00021eec g     F .text	00000118 set_gyro_scale
0002091c g     F .text	000001ec OC_I2C_Read
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002c164 g     F .text	0000000c localeconv
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00033294 g     F .text	00000050 alt_ic_isr_register
00021870 g     F .text	00000054 Light_SetTiming
000364e4 g       *ABS*	00000000 _edata
0003817c g       *ABS*	00000000 _end
000300ec g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
000327d0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00021c90 g     F .text	00000090 WriteReg
0003336c g     F .text	0000008c alt_ic_irq_disable
0002e66c g     F .text	0000007c __swrite
000364b4 g     O .rwdata	00000004 __malloc_trim_threshold
00020c10 g     F .text	00000148 OC_I2C_Read_Continue
0002c12c g     F .text	0000000c __locale_msgcharset
00033c68 g     F .text	00000038 exit
0002bfd0 g     F .text	000000c4 _fwalk_reent
00024b9c g     F .text	000000f0 .hidden __floatunsisf
0002d910 g     F .text	000001fc __mdiff
00023760 g     F .text	00000074 .hidden __modsi3
0003f400 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002b5e0 g     F .text	00000004 __sfp_lock_release
0002253c g     F .text	00000168 read_gyro
00021c38 g     F .text	00000058 MPU9250_Init
000232cc g     F .text	00000098 Write_Configuration
00020fc4 g     F .text	000002f0 OC_I2CL_Read
00033fb4 g     F .text	00000034 _exit
00032df4 g     F .text	0000012c alt_alarm_start
0002c170 g     F .text	000001bc __smakebuf_r
00027290 g     F .text	00000098 strlen
00033774 g     F .text	00000154 open
000312dc g     F .text	000000dc .hidden __gedf2
00037fdc g     O .bss	00000004 acc_divider
000364b8 g     O .rwdata	00000004 __wctomb
0002e924 g     F .text	00000018 __sprint_r
00033260 g     F .text	00000034 alt_icache_flush_all
000223d4 g     F .text	00000168 read_acc
000364e0 g     O .rwdata	00000004 alt_priority_mask
000221b8 g     F .text	00000100 calib_acc
000332e4 g     F .text	00000088 alt_ic_irq_enable
00020b08 g     F .text	00000108 OC_I2C_Write_Addr
00029520 g     F .text	0000001c __vfprintf_internal
00030748 g     F .text	0000005c _wctomb_r
00026538 g     F .text	000008fc .hidden __subdf3
0002d344 g     F .text	000000b0 __lo0bits
000364d8 g     O .rwdata	00000008 alt_alarm_list
000331a0 g     F .text	00000060 _do_ctors
00030658 g     F .text	000000c0 wcrtomb
000316ec g     F .text	000000d0 close
00023890 g     F .text	000004c8 .hidden __addsf3
000217b8 g     F .text	00000054 Light_SetInterrupt
00031a1c g     F .text	00000084 alt_load
00030274 g     F .text	00000080 fputwc
0002b5e4 g     F .text	00000004 __sinit_lock_acquire
0002d0b8 g     F .text	00000120 __multadd
0002d090 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0c04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00800134 	movhi	r2,4
   20140:	10a01f04 	addi	r2,r2,-32644
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	10a01f04 	addi	r2,r2,-32644
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe0d2c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0d20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a6dd17 	ldw	r2,-25740(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a6dd17 	ldw	r2,-25740(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xfffe0e48>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   2025c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20260:	d6b92814 	ori	gp,gp,58528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20268:	109ff514 	ori	r2,r2,32724

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18e05f14 	ori	r3,r3,33148

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xfffe0e78>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	0031a1c0 	call	31a1c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	0031bb00 	call	31bb0 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xfffe0e8c>

00020290 <Write32_Data>:
#define SLEEP_TIME 250  //us
#define ACK_SLEEP_TIME 250 //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
   20290:	defffb04 	addi	sp,sp,-20
   20294:	df000415 	stw	fp,16(sp)
   20298:	df000404 	addi	fp,sp,16
   2029c:	e13ffd15 	stw	r4,-12(fp)
   202a0:	e17ffe15 	stw	r5,-8(fp)
   202a4:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
   202a8:	e0bffe17 	ldw	r2,-8(fp)
   202ac:	1085883a 	add	r2,r2,r2
   202b0:	1085883a 	add	r2,r2,r2
   202b4:	1007883a 	mov	r3,r2
   202b8:	e0bffd17 	ldw	r2,-12(fp)
   202bc:	1885883a 	add	r2,r3,r2
   202c0:	1007883a 	mov	r3,r2
   202c4:	e0bfff17 	ldw	r2,-4(fp)
   202c8:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
   202cc:	00800044 	movi	r2,1
   202d0:	e0bffc05 	stb	r2,-16(fp)
    return bPass;
   202d4:	e0bffc03 	ldbu	r2,-16(fp)
}
   202d8:	e037883a 	mov	sp,fp
   202dc:	df000017 	ldw	fp,0(sp)
   202e0:	dec00104 	addi	sp,sp,4
   202e4:	f800283a 	ret

000202e8 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
   202e8:	defffb04 	addi	sp,sp,-20
   202ec:	df000415 	stw	fp,16(sp)
   202f0:	df000404 	addi	fp,sp,16
   202f4:	e13ffd15 	stw	r4,-12(fp)
   202f8:	e17ffe15 	stw	r5,-8(fp)
   202fc:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
   20300:	e0bffe17 	ldw	r2,-8(fp)
   20304:	1085883a 	add	r2,r2,r2
   20308:	1085883a 	add	r2,r2,r2
   2030c:	1007883a 	mov	r3,r2
   20310:	e0bffd17 	ldw	r2,-12(fp)
   20314:	1885883a 	add	r2,r3,r2
   20318:	10c00037 	ldwio	r3,0(r2)
   2031c:	e0bfff17 	ldw	r2,-4(fp)
   20320:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
   20324:	00800044 	movi	r2,1
   20328:	e0bffc05 	stb	r2,-16(fp)
    return bPass;
   2032c:	e0bffc03 	ldbu	r2,-16(fp)
}
   20330:	e037883a 	mov	sp,fp
   20334:	df000017 	ldw	fp,0(sp)
   20338:	dec00104 	addi	sp,sp,4
   2033c:	f800283a 	ret

00020340 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
   20340:	defffa04 	addi	sp,sp,-24
   20344:	dfc00515 	stw	ra,20(sp)
   20348:	df000415 	stw	fp,16(sp)
   2034c:	df000404 	addi	fp,sp,16
   20350:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
   20354:	0080bef4 	movhi	r2,763
   20358:	10bc2004 	addi	r2,r2,-3968
   2035c:	e0bffc15 	stw	r2,-16(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
   20360:	008001b4 	movhi	r2,6
   20364:	1086a004 	addi	r2,r2,6784
   20368:	e0bffd15 	stw	r2,-12(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
   2036c:	e1bffd17 	ldw	r6,-12(fp)
   20370:	e17ffc17 	ldw	r5,-16(fp)
   20374:	e13fff17 	ldw	r4,-4(fp)
   20378:	00203980 	call	20398 <oc_i2c_init_ex>
   2037c:	e0bffe05 	stb	r2,-8(fp)

	return bSuccess;
   20380:	e0bffe03 	ldbu	r2,-8(fp)
}
   20384:	e037883a 	mov	sp,fp
   20388:	dfc00117 	ldw	ra,4(sp)
   2038c:	df000017 	ldw	fp,0(sp)
   20390:	dec00204 	addi	sp,sp,8
   20394:	f800283a 	ret

00020398 <oc_i2c_init_ex>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
   20398:	defff704 	addi	sp,sp,-36
   2039c:	dfc00815 	stw	ra,32(sp)
   203a0:	df000715 	stw	fp,28(sp)
   203a4:	df000704 	addi	fp,sp,28
   203a8:	e13ffd15 	stw	r4,-12(fp)
   203ac:	e17ffe15 	stw	r5,-8(fp)
   203b0:	e1bfff15 	stw	r6,-4(fp)
	bool bSuccess=TRUE;
   203b4:	00800044 	movi	r2,1
   203b8:	e0bff905 	stb	r2,-28(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
   203bc:	00bfe004 	movi	r2,-128
   203c0:	e0bff945 	stb	r2,-27(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
   203c4:	e0bfff17 	ldw	r2,-4(fp)
   203c8:	10800164 	muli	r2,r2,5
   203cc:	100b883a 	mov	r5,r2
   203d0:	e13ffe17 	ldw	r4,-8(fp)
   203d4:	00236dc0 	call	236dc <__divsi3>
   203d8:	10bfffc4 	addi	r2,r2,-1
   203dc:	e0bffa15 	stw	r2,-24(fp)
	prescale_low = prescale & 0xFF;
   203e0:	e0bffa17 	ldw	r2,-24(fp)
   203e4:	e0bffb05 	stb	r2,-20(fp)
	prescale_high = (prescale >> 8) & 0xFF;
   203e8:	e0bffa17 	ldw	r2,-24(fp)
   203ec:	1005d23a 	srai	r2,r2,8
   203f0:	e0bffb45 	stb	r2,-19(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
   203f4:	e0bffd17 	ldw	r2,-12(fp)
   203f8:	e0fffb03 	ldbu	r3,-20(fp)
   203fc:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
   20400:	e0bffd17 	ldw	r2,-12(fp)
   20404:	10800104 	addi	r2,r2,4
   20408:	1007883a 	mov	r3,r2
   2040c:	e0bffb43 	ldbu	r2,-19(fp)
   20410:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
   20414:	e0bffd17 	ldw	r2,-12(fp)
   20418:	10800204 	addi	r2,r2,8
   2041c:	1007883a 	mov	r3,r2
   20420:	e0bff943 	ldbu	r2,-27(fp)
   20424:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
   20428:	e0bff903 	ldbu	r2,-28(fp)
   2042c:	10000826 	beq	r2,zero,20450 <oc_i2c_init_ex+0xb8>
    	read_data =IORD(i2c_base, 0);
   20430:	e0bffd17 	ldw	r2,-12(fp)
   20434:	10800037 	ldwio	r2,0(r2)
   20438:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
   2043c:	e0bffc17 	ldw	r2,-16(fp)
   20440:	10c03fcc 	andi	r3,r2,255
   20444:	e0bffb03 	ldbu	r2,-20(fp)
   20448:	18800126 	beq	r3,r2,20450 <oc_i2c_init_ex+0xb8>
            bSuccess = FALSE;
   2044c:	e03ff905 	stb	zero,-28(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
   20450:	e0bff903 	ldbu	r2,-28(fp)
   20454:	10000926 	beq	r2,zero,2047c <oc_i2c_init_ex+0xe4>
    	read_data =IORD(i2c_base, 1);
   20458:	e0bffd17 	ldw	r2,-12(fp)
   2045c:	10800104 	addi	r2,r2,4
   20460:	10800037 	ldwio	r2,0(r2)
   20464:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
   20468:	e0bffc17 	ldw	r2,-16(fp)
   2046c:	10c03fcc 	andi	r3,r2,255
   20470:	e0bffb43 	ldbu	r2,-19(fp)
   20474:	18800126 	beq	r3,r2,2047c <oc_i2c_init_ex+0xe4>
            bSuccess = FALSE;
   20478:	e03ff905 	stb	zero,-28(fp)
        }
    }

    // check control
    if (bSuccess){
   2047c:	e0bff903 	ldbu	r2,-28(fp)
   20480:	10000926 	beq	r2,zero,204a8 <oc_i2c_init_ex+0x110>
    	read_data =IORD(i2c_base, 2);
   20484:	e0bffd17 	ldw	r2,-12(fp)
   20488:	10800204 	addi	r2,r2,8
   2048c:	10800037 	ldwio	r2,0(r2)
   20490:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
   20494:	e0bffc17 	ldw	r2,-16(fp)
   20498:	10c03fcc 	andi	r3,r2,255
   2049c:	e0bff943 	ldbu	r2,-27(fp)
   204a0:	18800126 	beq	r3,r2,204a8 <oc_i2c_init_ex+0x110>
            bSuccess = FALSE;
   204a4:	e03ff905 	stb	zero,-28(fp)
        }
    }

   if (bSuccess)
   204a8:	e0bff903 	ldbu	r2,-28(fp)
   204ac:	10000426 	beq	r2,zero,204c0 <oc_i2c_init_ex+0x128>
       printf("\nI2C core is enabled! \r\n");
   204b0:	010000f4 	movhi	r4,3
   204b4:	210ffa04 	addi	r4,r4,16360
   204b8:	002727c0 	call	2727c <puts>
   204bc:	00000306 	br	204cc <oc_i2c_init_ex+0x134>
   else
       printf("\nI2C core is not enabled successfully! \r\n");
   204c0:	010000f4 	movhi	r4,3
   204c4:	21100004 	addi	r4,r4,16384
   204c8:	002727c0 	call	2727c <puts>

   return bSuccess;
   204cc:	e0bff903 	ldbu	r2,-28(fp)

}
   204d0:	e037883a 	mov	sp,fp
   204d4:	dfc00117 	ldw	ra,4(sp)
   204d8:	df000017 	ldw	fp,0(sp)
   204dc:	dec00204 	addi	sp,sp,8
   204e0:	f800283a 	ret

000204e4 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
   204e4:	defffb04 	addi	sp,sp,-20
   204e8:	dfc00415 	stw	ra,16(sp)
   204ec:	df000315 	stw	fp,12(sp)
   204f0:	df000304 	addi	fp,sp,12
   204f4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
   204f8:	00800044 	movi	r2,1
   204fc:	e0bffd05 	stb	r2,-12(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
   20500:	e03ffd45 	stb	zero,-11(fp)

    IOWR( i2c_base, 2, ControlValue);
   20504:	e0bfff17 	ldw	r2,-4(fp)
   20508:	10800204 	addi	r2,r2,8
   2050c:	1007883a 	mov	r3,r2
   20510:	e0bffd43 	ldbu	r2,-11(fp)
   20514:	18800035 	stwio	r2,0(r3)
   	read_data =IORD(i2c_base, 2);
   20518:	e0bfff17 	ldw	r2,-4(fp)
   2051c:	10800204 	addi	r2,r2,8
   20520:	10800037 	ldwio	r2,0(r2)
   20524:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
   20528:	e0bffe17 	ldw	r2,-8(fp)
   2052c:	10c03fcc 	andi	r3,r2,255
   20530:	e0bffd43 	ldbu	r2,-11(fp)
   20534:	18800126 	beq	r3,r2,2053c <oc_i2c_uninit+0x58>
            bSuccess = FALSE;
   20538:	e03ffd05 	stb	zero,-12(fp)
    }

   if (bSuccess)
   2053c:	e0bffd03 	ldbu	r2,-12(fp)
   20540:	10000426 	beq	r2,zero,20554 <oc_i2c_uninit+0x70>
       printf("\nI2C core  is disabled! \r\n");
   20544:	010000f4 	movhi	r4,3
   20548:	21100b04 	addi	r4,r4,16428
   2054c:	002727c0 	call	2727c <puts>
   20550:	00000306 	br	20560 <oc_i2c_uninit+0x7c>
   else
       printf("\nI2C core is failed to disable! \r\n");
   20554:	010000f4 	movhi	r4,3
   20558:	21101204 	addi	r4,r4,16456
   2055c:	002727c0 	call	2727c <puts>

   return bSuccess;
   20560:	e0bffd03 	ldbu	r2,-12(fp)

}
   20564:	e037883a 	mov	sp,fp
   20568:	dfc00117 	ldw	ra,4(sp)
   2056c:	df000017 	ldw	fp,0(sp)
   20570:	dec00204 	addi	sp,sp,8
   20574:	f800283a 	ret

00020578 <ACK_single_check>:




bool  ACK_single_check(alt_32 i2c_base)
{
   20578:	defffb04 	addi	sp,sp,-20
   2057c:	dfc00415 	stw	ra,16(sp)
   20580:	df000315 	stw	fp,12(sp)
   20584:	df000304 	addi	fp,sp,12
   20588:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
   2058c:	00800044 	movi	r2,1
   20590:	e0bffd05 	stb	r2,-12(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
   20594:	01003e84 	movi	r4,250
   20598:	00320640 	call	32064 <usleep>
    read_data =IORD(i2c_base, 4);
   2059c:	e0bfff17 	ldw	r2,-4(fp)
   205a0:	10800404 	addi	r2,r2,16
   205a4:	10800037 	ldwio	r2,0(r2)
   205a8:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
   205ac:	e0bffe17 	ldw	r2,-8(fp)
   205b0:	1080008c 	andi	r2,r2,2
   205b4:	10000126 	beq	r2,zero,205bc <ACK_single_check+0x44>
            bSuccess = FALSE;
   205b8:	e03ffd05 	stb	zero,-12(fp)
     if (bSuccess){
   205bc:	e0bffd03 	ldbu	r2,-12(fp)
   205c0:	10000a26 	beq	r2,zero,205ec <ACK_single_check+0x74>
            usleep(ACK_SLEEP_TIME);
   205c4:	01003e84 	movi	r4,250
   205c8:	00320640 	call	32064 <usleep>
            read_data =IORD(i2c_base, 4);
   205cc:	e0bfff17 	ldw	r2,-4(fp)
   205d0:	10800404 	addi	r2,r2,16
   205d4:	10800037 	ldwio	r2,0(r2)
   205d8:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
   205dc:	e0bffe17 	ldw	r2,-8(fp)
   205e0:	1080200c 	andi	r2,r2,128
   205e4:	10000126 	beq	r2,zero,205ec <ACK_single_check+0x74>
                    bSuccess = FALSE;
   205e8:	e03ffd05 	stb	zero,-12(fp)
     }
    return bSuccess;
   205ec:	e0bffd03 	ldbu	r2,-12(fp)
}
   205f0:	e037883a 	mov	sp,fp
   205f4:	dfc00117 	ldw	ra,4(sp)
   205f8:	df000017 	ldw	fp,0(sp)
   205fc:	dec00204 	addi	sp,sp,8
   20600:	f800283a 	ret

00020604 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
   20604:	defffb04 	addi	sp,sp,-20
   20608:	dfc00415 	stw	ra,16(sp)
   2060c:	df000315 	stw	fp,12(sp)
   20610:	df000304 	addi	fp,sp,12
   20614:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
   20618:	e03ffd05 	stb	zero,-12(fp)
    int i=0;
   2061c:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
   20620:	00000306 	br	20630 <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
   20624:	e13fff17 	ldw	r4,-4(fp)
   20628:	00205780 	call	20578 <ACK_single_check>
   2062c:	e0bffd05 	stb	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
   20630:	e0bffd03 	ldbu	r2,-12(fp)
   20634:	1080005c 	xori	r2,r2,1
   20638:	10803fcc 	andi	r2,r2,255
   2063c:	10000526 	beq	r2,zero,20654 <ACK_check+0x50>
   20640:	e0bffe17 	ldw	r2,-8(fp)
   20644:	10c00044 	addi	r3,r2,1
   20648:	e0fffe15 	stw	r3,-8(fp)
   2064c:	10800290 	cmplti	r2,r2,10
   20650:	103ff41e 	bne	r2,zero,20624 <__alt_data_end+0xfffe1224>
      //  if (!bSuccess)
    //	printf("no ack2 !!!!!!!!!!!!!!!!!!!!, i=%d\r\n", i);

    }

    return bSuccess;
   20654:	e0bffd03 	ldbu	r2,-12(fp)
}
   20658:	e037883a 	mov	sp,fp
   2065c:	dfc00117 	ldw	ra,4(sp)
   20660:	df000017 	ldw	fp,0(sp)
   20664:	dec00204 	addi	sp,sp,8
   20668:	f800283a 	ret

0002066c <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
   2066c:	defff904 	addi	sp,sp,-28
   20670:	dfc00615 	stw	ra,24(sp)
   20674:	df000515 	stw	fp,20(sp)
   20678:	df000504 	addi	fp,sp,20
   2067c:	e13ffc15 	stw	r4,-16(fp)
   20680:	2807883a 	mov	r3,r5
   20684:	3005883a 	mov	r2,r6
   20688:	e1ffff15 	stw	r7,-4(fp)
   2068c:	e0fffd05 	stb	r3,-12(fp)
   20690:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;

   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
   20694:	e0bffd03 	ldbu	r2,-12(fp)
   20698:	100d883a 	mov	r6,r2
   2069c:	014000c4 	movi	r5,3
   206a0:	e13ffc17 	ldw	r4,-16(fp)
   206a4:	00202900 	call	20290 <Write32_Data>
   206a8:	1080005c 	xori	r2,r2,1
   206ac:	10803fcc 	andi	r2,r2,255
   206b0:	10000526 	beq	r2,zero,206c8 <OC_I2C_Write+0x5c>
       printf("OC_I2C_Write error[0]\r\n");
   206b4:	010000f4 	movhi	r4,3
   206b8:	21101b04 	addi	r4,r4,16492
   206bc:	002727c0 	call	2727c <puts>
       return FALSE;
   206c0:	0005883a 	mov	r2,zero
   206c4:	00007706 	br	208a4 <OC_I2C_Write+0x238>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
   206c8:	01802404 	movi	r6,144
   206cc:	01400104 	movi	r5,4
   206d0:	e13ffc17 	ldw	r4,-16(fp)
   206d4:	00202900 	call	20290 <Write32_Data>
   206d8:	1080005c 	xori	r2,r2,1
   206dc:	10803fcc 	andi	r2,r2,255
   206e0:	10000526 	beq	r2,zero,206f8 <OC_I2C_Write+0x8c>
       printf("OC_I2C_Write error[1]\r\n");
   206e4:	010000f4 	movhi	r4,3
   206e8:	21102104 	addi	r4,r4,16516
   206ec:	002727c0 	call	2727c <puts>
       return FALSE;
   206f0:	0005883a 	mov	r2,zero
   206f4:	00006b06 	br	208a4 <OC_I2C_Write+0x238>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   206f8:	e13ffc17 	ldw	r4,-16(fp)
   206fc:	00206040 	call	20604 <ACK_check>
   20700:	1080005c 	xori	r2,r2,1
   20704:	10803fcc 	andi	r2,r2,255
   20708:	10000526 	beq	r2,zero,20720 <OC_I2C_Write+0xb4>
        printf("OC_I2C_Write error[2]\r\n");
   2070c:	010000f4 	movhi	r4,3
   20710:	21102704 	addi	r4,r4,16540
   20714:	002727c0 	call	2727c <puts>
        return FALSE;
   20718:	0005883a 	mov	r2,zero
   2071c:	00006106 	br	208a4 <OC_I2C_Write+0x238>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
   20720:	e0bffe03 	ldbu	r2,-8(fp)
   20724:	100d883a 	mov	r6,r2
   20728:	014000c4 	movi	r5,3
   2072c:	e13ffc17 	ldw	r4,-16(fp)
   20730:	00202900 	call	20290 <Write32_Data>
   20734:	1080005c 	xori	r2,r2,1
   20738:	10803fcc 	andi	r2,r2,255
   2073c:	10000526 	beq	r2,zero,20754 <OC_I2C_Write+0xe8>
       printf("OC_I2C_Write error[3]\r\n");
   20740:	010000f4 	movhi	r4,3
   20744:	21102d04 	addi	r4,r4,16564
   20748:	002727c0 	call	2727c <puts>
       return FALSE;
   2074c:	0005883a 	mov	r2,zero
   20750:	00005406 	br	208a4 <OC_I2C_Write+0x238>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
   20754:	01800404 	movi	r6,16
   20758:	01400104 	movi	r5,4
   2075c:	e13ffc17 	ldw	r4,-16(fp)
   20760:	00202900 	call	20290 <Write32_Data>
   20764:	1080005c 	xori	r2,r2,1
   20768:	10803fcc 	andi	r2,r2,255
   2076c:	10000526 	beq	r2,zero,20784 <OC_I2C_Write+0x118>
        printf("OC_I2C_Write error[4]\r\n");
   20770:	010000f4 	movhi	r4,3
   20774:	21103304 	addi	r4,r4,16588
   20778:	002727c0 	call	2727c <puts>
        return FALSE;
   2077c:	0005883a 	mov	r2,zero
   20780:	00004806 	br	208a4 <OC_I2C_Write+0x238>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20784:	e13ffc17 	ldw	r4,-16(fp)
   20788:	00206040 	call	20604 <ACK_check>
   2078c:	1080005c 	xori	r2,r2,1
   20790:	10803fcc 	andi	r2,r2,255
   20794:	10000526 	beq	r2,zero,207ac <OC_I2C_Write+0x140>
        printf("OC_I2C_Write error[5]\r\n");
   20798:	010000f4 	movhi	r4,3
   2079c:	21103904 	addi	r4,r4,16612
   207a0:	002727c0 	call	2727c <puts>
        return FALSE;
   207a4:	0005883a 	mov	r2,zero
   207a8:	00003e06 	br	208a4 <OC_I2C_Write+0x238>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
   207ac:	e03ffb15 	stw	zero,-20(fp)
   207b0:	00002a06 	br	2085c <OC_I2C_Write+0x1f0>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
   207b4:	e0bffb17 	ldw	r2,-20(fp)
   207b8:	e0ffff17 	ldw	r3,-4(fp)
   207bc:	1885883a 	add	r2,r3,r2
   207c0:	10800003 	ldbu	r2,0(r2)
   207c4:	10803fcc 	andi	r2,r2,255
   207c8:	100d883a 	mov	r6,r2
   207cc:	014000c4 	movi	r5,3
   207d0:	e13ffc17 	ldw	r4,-16(fp)
   207d4:	00202900 	call	20290 <Write32_Data>
   207d8:	1080005c 	xori	r2,r2,1
   207dc:	10803fcc 	andi	r2,r2,255
   207e0:	10000526 	beq	r2,zero,207f8 <OC_I2C_Write+0x18c>
              printf("OC_I2C_Write error[6]\r\n");
   207e4:	010000f4 	movhi	r4,3
   207e8:	21103f04 	addi	r4,r4,16636
   207ec:	002727c0 	call	2727c <puts>
              return FALSE;
   207f0:	0005883a 	mov	r2,zero
   207f4:	00002b06 	br	208a4 <OC_I2C_Write+0x238>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
   207f8:	01800404 	movi	r6,16
   207fc:	01400104 	movi	r5,4
   20800:	e13ffc17 	ldw	r4,-16(fp)
   20804:	00202900 	call	20290 <Write32_Data>
   20808:	1080005c 	xori	r2,r2,1
   2080c:	10803fcc 	andi	r2,r2,255
   20810:	10000526 	beq	r2,zero,20828 <OC_I2C_Write+0x1bc>
             printf("OC_I2C_Write error[7]\r\n");
   20814:	010000f4 	movhi	r4,3
   20818:	21104504 	addi	r4,r4,16660
   2081c:	002727c0 	call	2727c <puts>
              return FALSE;
   20820:	0005883a 	mov	r2,zero
   20824:	00001f06 	br	208a4 <OC_I2C_Write+0x238>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
   20828:	e13ffc17 	ldw	r4,-16(fp)
   2082c:	00206040 	call	20604 <ACK_check>
   20830:	1080005c 	xori	r2,r2,1
   20834:	10803fcc 	andi	r2,r2,255
   20838:	10000526 	beq	r2,zero,20850 <OC_I2C_Write+0x1e4>
              printf("OC_I2C_Write error[8]\r\n");
   2083c:	010000f4 	movhi	r4,3
   20840:	21104b04 	addi	r4,r4,16684
   20844:	002727c0 	call	2727c <puts>
              return FALSE;
   20848:	0005883a 	mov	r2,zero
   2084c:	00001506 	br	208a4 <OC_I2C_Write+0x238>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
   20850:	e0bffb17 	ldw	r2,-20(fp)
   20854:	10800044 	addi	r2,r2,1
   20858:	e0bffb15 	stw	r2,-20(fp)
   2085c:	e0fffb17 	ldw	r3,-20(fp)
   20860:	e0800217 	ldw	r2,8(fp)
   20864:	18bfd316 	blt	r3,r2,207b4 <__alt_data_end+0xfffe13b4>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
   20868:	01801004 	movi	r6,64
   2086c:	01400104 	movi	r5,4
   20870:	e13ffc17 	ldw	r4,-16(fp)
   20874:	00202900 	call	20290 <Write32_Data>
   20878:	1080005c 	xori	r2,r2,1
   2087c:	10803fcc 	andi	r2,r2,255
   20880:	10000526 	beq	r2,zero,20898 <OC_I2C_Write+0x22c>
         printf("OC_I2C_Write error[9]\r\n");
   20884:	010000f4 	movhi	r4,3
   20888:	21105104 	addi	r4,r4,16708
   2088c:	002727c0 	call	2727c <puts>
         return FALSE;
   20890:	0005883a 	mov	r2,zero
   20894:	00000306 	br	208a4 <OC_I2C_Write+0x238>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
   20898:	01003e84 	movi	r4,250
   2089c:	00320640 	call	32064 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
   208a0:	00800044 	movi	r2,1

}
   208a4:	e037883a 	mov	sp,fp
   208a8:	dfc00117 	ldw	ra,4(sp)
   208ac:	df000017 	ldw	fp,0(sp)
   208b0:	dec00204 	addi	sp,sp,8
   208b4:	f800283a 	ret

000208b8 <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
   208b8:	defffb04 	addi	sp,sp,-20
   208bc:	dfc00415 	stw	ra,16(sp)
   208c0:	df000315 	stw	fp,12(sp)
   208c4:	df000304 	addi	fp,sp,12
   208c8:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
   208cc:	01003e84 	movi	r4,250
   208d0:	00320640 	call	32064 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
   208d4:	e0bffe04 	addi	r2,fp,-8
   208d8:	100d883a 	mov	r6,r2
   208dc:	01400104 	movi	r5,4
   208e0:	e13fff17 	ldw	r4,-4(fp)
   208e4:	00202e80 	call	202e8 <Read32_Data>
   208e8:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess){
   208ec:	e0bffd03 	ldbu	r2,-12(fp)
   208f0:	10000426 	beq	r2,zero,20904 <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
   208f4:	e0bffe17 	ldw	r2,-8(fp)
   208f8:	1080008c 	andi	r2,r2,2
   208fc:	10000126 	beq	r2,zero,20904 <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
   20900:	e03ffd05 	stb	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
   20904:	e0bffd03 	ldbu	r2,-12(fp)

}
   20908:	e037883a 	mov	sp,fp
   2090c:	dfc00117 	ldw	ra,4(sp)
   20910:	df000017 	ldw	fp,0(sp)
   20914:	dec00204 	addi	sp,sp,8
   20918:	f800283a 	ret

0002091c <OC_I2C_Read>:





bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
   2091c:	defff804 	addi	sp,sp,-32
   20920:	dfc00715 	stw	ra,28(sp)
   20924:	df000615 	stw	fp,24(sp)
   20928:	df000604 	addi	fp,sp,24
   2092c:	e13ffc15 	stw	r4,-16(fp)
   20930:	2807883a 	mov	r3,r5
   20934:	3005883a 	mov	r2,r6
   20938:	e1ffff15 	stw	r7,-4(fp)
   2093c:	e0fffd05 	stb	r3,-12(fp)
   20940:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
   20944:	e0bffc17 	ldw	r2,-16(fp)
   20948:	10800304 	addi	r2,r2,12
   2094c:	1007883a 	mov	r3,r2
   20950:	e0bffd03 	ldbu	r2,-12(fp)
   20954:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   20958:	e0bffc17 	ldw	r2,-16(fp)
   2095c:	10800404 	addi	r2,r2,16
   20960:	1007883a 	mov	r3,r2
   20964:	00802404 	movi	r2,144
   20968:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
   2096c:	e13ffc17 	ldw	r4,-16(fp)
   20970:	00206040 	call	20604 <ACK_check>
   20974:	1080005c 	xori	r2,r2,1
   20978:	10803fcc 	andi	r2,r2,255
   2097c:	10000526 	beq	r2,zero,20994 <OC_I2C_Read+0x78>
       printf("OC_I2C_Read error[2]\r\n");
   20980:	010000f4 	movhi	r4,3
   20984:	21105704 	addi	r4,r4,16732
   20988:	002727c0 	call	2727c <puts>
       return FALSE;
   2098c:	0005883a 	mov	r2,zero
   20990:	00005806 	br	20af4 <OC_I2C_Read+0x1d8>
   }
   IOWR(i2c_base, 3,sub_address);
   20994:	e0bffc17 	ldw	r2,-16(fp)
   20998:	10800304 	addi	r2,r2,12
   2099c:	1007883a 	mov	r3,r2
   209a0:	e0bffe03 	ldbu	r2,-8(fp)
   209a4:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   209a8:	e0bffc17 	ldw	r2,-16(fp)
   209ac:	10800404 	addi	r2,r2,16
   209b0:	1007883a 	mov	r3,r2
   209b4:	00800404 	movi	r2,16
   209b8:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   209bc:	e13ffc17 	ldw	r4,-16(fp)
   209c0:	00206040 	call	20604 <ACK_check>
   209c4:	1080005c 	xori	r2,r2,1
   209c8:	10803fcc 	andi	r2,r2,255
   209cc:	10000526 	beq	r2,zero,209e4 <OC_I2C_Read+0xc8>
        printf("OC_I2C_Read error[5]\r\n");
   209d0:	010000f4 	movhi	r4,3
   209d4:	21105d04 	addi	r4,r4,16756
   209d8:	002727c0 	call	2727c <puts>
        return FALSE;
   209dc:	0005883a 	mov	r2,zero
   209e0:	00004406 	br	20af4 <OC_I2C_Read+0x1d8>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
   209e4:	e0bffc17 	ldw	r2,-16(fp)
   209e8:	10800304 	addi	r2,r2,12
   209ec:	1007883a 	mov	r3,r2
   209f0:	e0bffd03 	ldbu	r2,-12(fp)
   209f4:	10800054 	ori	r2,r2,1
   209f8:	10803fcc 	andi	r2,r2,255
   209fc:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   20a00:	e0bffc17 	ldw	r2,-16(fp)
   20a04:	10800404 	addi	r2,r2,16
   20a08:	1007883a 	mov	r3,r2
   20a0c:	00802404 	movi	r2,144
   20a10:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20a14:	e13ffc17 	ldw	r4,-16(fp)
   20a18:	00206040 	call	20604 <ACK_check>
   20a1c:	1080005c 	xori	r2,r2,1
   20a20:	10803fcc 	andi	r2,r2,255
   20a24:	10000526 	beq	r2,zero,20a3c <OC_I2C_Read+0x120>
        printf("OC_I2C_Read error[8]\r\n");
   20a28:	010000f4 	movhi	r4,3
   20a2c:	21106304 	addi	r4,r4,16780
   20a30:	002727c0 	call	2727c <puts>
        return FALSE;
   20a34:	0005883a 	mov	r2,zero
   20a38:	00002e06 	br	20af4 <OC_I2C_Read+0x1d8>
    }

    for(i=0;i<nReadLength;i++){
   20a3c:	e03ffa15 	stw	zero,-24(fp)
   20a40:	00002106 	br	20ac8 <OC_I2C_Read+0x1ac>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   20a44:	e0bffc17 	ldw	r2,-16(fp)
   20a48:	10800404 	addi	r2,r2,16
   20a4c:	1009883a 	mov	r4,r2
   20a50:	e0bffa17 	ldw	r2,-24(fp)
   20a54:	10c00044 	addi	r3,r2,1
   20a58:	e0800217 	ldw	r2,8(fp)
   20a5c:	1880021e 	bne	r3,r2,20a68 <OC_I2C_Read+0x14c>
   20a60:	00800a04 	movi	r2,40
   20a64:	00000106 	br	20a6c <OC_I2C_Read+0x150>
   20a68:	00800804 	movi	r2,32
   20a6c:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   20a70:	e13ffc17 	ldw	r4,-16(fp)
   20a74:	00208b80 	call	208b8 <ACK_judge_for_read>
   20a78:	1080005c 	xori	r2,r2,1
   20a7c:	10803fcc 	andi	r2,r2,255
   20a80:	10000526 	beq	r2,zero,20a98 <OC_I2C_Read+0x17c>
            printf("OC_I2C_Read error[10]\r\n");
   20a84:	010000f4 	movhi	r4,3
   20a88:	21106904 	addi	r4,r4,16804
   20a8c:	002727c0 	call	2727c <puts>
            return FALSE;
   20a90:	0005883a 	mov	r2,zero
   20a94:	00001706 	br	20af4 <OC_I2C_Read+0x1d8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20a98:	e0bffc17 	ldw	r2,-16(fp)
   20a9c:	10800304 	addi	r2,r2,12
   20aa0:	10800037 	ldwio	r2,0(r2)
   20aa4:	e0bffb15 	stw	r2,-20(fp)
//        printf("Data32_%d: %d\n", i, Data32);
        *(pData8+i) =  Data32 & 0xff;
   20aa8:	e0bffa17 	ldw	r2,-24(fp)
   20aac:	e0ffff17 	ldw	r3,-4(fp)
   20ab0:	1885883a 	add	r2,r3,r2
   20ab4:	e0fffb17 	ldw	r3,-20(fp)
   20ab8:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
   20abc:	e0bffa17 	ldw	r2,-24(fp)
   20ac0:	10800044 	addi	r2,r2,1
   20ac4:	e0bffa15 	stw	r2,-24(fp)
   20ac8:	e0fffa17 	ldw	r3,-24(fp)
   20acc:	e0800217 	ldw	r2,8(fp)
   20ad0:	18bfdc16 	blt	r3,r2,20a44 <__alt_data_end+0xfffe1644>
        Data32=IORD( i2c_base, 3);
//        printf("Data32_%d: %d\n", i, Data32);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
   20ad4:	e0bffc17 	ldw	r2,-16(fp)
   20ad8:	10800404 	addi	r2,r2,16
   20adc:	1007883a 	mov	r3,r2
   20ae0:	00801004 	movi	r2,64
   20ae4:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   20ae8:	01003e84 	movi	r4,250
   20aec:	00320640 	call	32064 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   20af0:	00800044 	movi	r2,1

}
   20af4:	e037883a 	mov	sp,fp
   20af8:	dfc00117 	ldw	ra,4(sp)
   20afc:	df000017 	ldw	fp,0(sp)
   20b00:	dec00204 	addi	sp,sp,8
   20b04:	f800283a 	ret

00020b08 <OC_I2C_Write_Addr>:

bool  OC_I2C_Write_Addr(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, bool bStop){
   20b08:	defffa04 	addi	sp,sp,-24
   20b0c:	dfc00515 	stw	ra,20(sp)
   20b10:	df000415 	stw	fp,16(sp)
   20b14:	df000404 	addi	fp,sp,16
   20b18:	e13ffc15 	stw	r4,-16(fp)
   20b1c:	2809883a 	mov	r4,r5
   20b20:	3007883a 	mov	r3,r6
   20b24:	3805883a 	mov	r2,r7
   20b28:	e13ffd05 	stb	r4,-12(fp)
   20b2c:	e0fffe05 	stb	r3,-8(fp)
   20b30:	e0bfff05 	stb	r2,-4(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
   20b34:	e0bffc17 	ldw	r2,-16(fp)
   20b38:	10800304 	addi	r2,r2,12
   20b3c:	1007883a 	mov	r3,r2
   20b40:	e0bffd03 	ldbu	r2,-12(fp)
   20b44:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   20b48:	e0bffc17 	ldw	r2,-16(fp)
   20b4c:	10800404 	addi	r2,r2,16
   20b50:	1007883a 	mov	r3,r2
   20b54:	00802404 	movi	r2,144
   20b58:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
   20b5c:	e13ffc17 	ldw	r4,-16(fp)
   20b60:	00206040 	call	20604 <ACK_check>
   20b64:	1080005c 	xori	r2,r2,1
   20b68:	10803fcc 	andi	r2,r2,255
   20b6c:	10000526 	beq	r2,zero,20b84 <OC_I2C_Write_Addr+0x7c>
       printf("OC_I2C_Read error[2]\r\n");
   20b70:	010000f4 	movhi	r4,3
   20b74:	21105704 	addi	r4,r4,16732
   20b78:	002727c0 	call	2727c <puts>
       return FALSE;
   20b7c:	0005883a 	mov	r2,zero
   20b80:	00001e06 	br	20bfc <OC_I2C_Write_Addr+0xf4>
   }
   IOWR(i2c_base, 3,sub_address);
   20b84:	e0bffc17 	ldw	r2,-16(fp)
   20b88:	10800304 	addi	r2,r2,12
   20b8c:	1007883a 	mov	r3,r2
   20b90:	e0bffe03 	ldbu	r2,-8(fp)
   20b94:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   20b98:	e0bffc17 	ldw	r2,-16(fp)
   20b9c:	10800404 	addi	r2,r2,16
   20ba0:	1007883a 	mov	r3,r2
   20ba4:	00800404 	movi	r2,16
   20ba8:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20bac:	e13ffc17 	ldw	r4,-16(fp)
   20bb0:	00206040 	call	20604 <ACK_check>
   20bb4:	1080005c 	xori	r2,r2,1
   20bb8:	10803fcc 	andi	r2,r2,255
   20bbc:	10000526 	beq	r2,zero,20bd4 <OC_I2C_Write_Addr+0xcc>
        printf("OC_I2C_Read error[5]\r\n");
   20bc0:	010000f4 	movhi	r4,3
   20bc4:	21105d04 	addi	r4,r4,16756
   20bc8:	002727c0 	call	2727c <puts>
        return FALSE;
   20bcc:	0005883a 	mov	r2,zero
   20bd0:	00000a06 	br	20bfc <OC_I2C_Write_Addr+0xf4>
    }

    if (bStop){
   20bd4:	e0bfff03 	ldbu	r2,-4(fp)
   20bd8:	10000726 	beq	r2,zero,20bf8 <OC_I2C_Write_Addr+0xf0>
        IOWR( i2c_base, 4,0x40);
   20bdc:	e0bffc17 	ldw	r2,-16(fp)
   20be0:	10800404 	addi	r2,r2,16
   20be4:	1007883a 	mov	r3,r2
   20be8:	00801004 	movi	r2,64
   20bec:	18800035 	stwio	r2,0(r3)
        usleep(SLEEP_TIME);
   20bf0:	01003e84 	movi	r4,250
   20bf4:	00320640 	call	32064 <usleep>
    }

   return TRUE;
   20bf8:	00800044 	movi	r2,1

}
   20bfc:	e037883a 	mov	sp,fp
   20c00:	dfc00117 	ldw	ra,4(sp)
   20c04:	df000017 	ldw	fp,0(sp)
   20c08:	dec00204 	addi	sp,sp,8
   20c0c:	f800283a 	ret

00020c10 <OC_I2C_Read_Continue>:



bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
   20c10:	defff804 	addi	sp,sp,-32
   20c14:	dfc00715 	stw	ra,28(sp)
   20c18:	df000615 	stw	fp,24(sp)
   20c1c:	df000604 	addi	fp,sp,24
   20c20:	e13ffc15 	stw	r4,-16(fp)
   20c24:	2805883a 	mov	r2,r5
   20c28:	e1bffe15 	stw	r6,-8(fp)
   20c2c:	e1ffff15 	stw	r7,-4(fp)
   20c30:	e0bffd05 	stb	r2,-12(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
   20c34:	e0bffc17 	ldw	r2,-16(fp)
   20c38:	10800304 	addi	r2,r2,12
   20c3c:	1007883a 	mov	r3,r2
   20c40:	e0bffd03 	ldbu	r2,-12(fp)
   20c44:	10800054 	ori	r2,r2,1
   20c48:	10803fcc 	andi	r2,r2,255
   20c4c:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   20c50:	e0bffc17 	ldw	r2,-16(fp)
   20c54:	10800404 	addi	r2,r2,16
   20c58:	1007883a 	mov	r3,r2
   20c5c:	00802404 	movi	r2,144
   20c60:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20c64:	e13ffc17 	ldw	r4,-16(fp)
   20c68:	00206040 	call	20604 <ACK_check>
   20c6c:	1080005c 	xori	r2,r2,1
   20c70:	10803fcc 	andi	r2,r2,255
   20c74:	10000526 	beq	r2,zero,20c8c <OC_I2C_Read_Continue+0x7c>
        printf("OC_I2C_Read error[8]\r\n");
   20c78:	010000f4 	movhi	r4,3
   20c7c:	21106304 	addi	r4,r4,16780
   20c80:	002727c0 	call	2727c <puts>
        return FALSE;
   20c84:	0005883a 	mov	r2,zero
   20c88:	00002e06 	br	20d44 <OC_I2C_Read_Continue+0x134>
    }

    for(i=0;i<nReadLength;i++){
   20c8c:	e03ffa15 	stw	zero,-24(fp)
   20c90:	00002106 	br	20d18 <OC_I2C_Read_Continue+0x108>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   20c94:	e0bffc17 	ldw	r2,-16(fp)
   20c98:	10800404 	addi	r2,r2,16
   20c9c:	1009883a 	mov	r4,r2
   20ca0:	e0bffa17 	ldw	r2,-24(fp)
   20ca4:	10c00044 	addi	r3,r2,1
   20ca8:	e0bfff17 	ldw	r2,-4(fp)
   20cac:	1880021e 	bne	r3,r2,20cb8 <OC_I2C_Read_Continue+0xa8>
   20cb0:	00800a04 	movi	r2,40
   20cb4:	00000106 	br	20cbc <OC_I2C_Read_Continue+0xac>
   20cb8:	00800804 	movi	r2,32
   20cbc:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   20cc0:	e13ffc17 	ldw	r4,-16(fp)
   20cc4:	00208b80 	call	208b8 <ACK_judge_for_read>
   20cc8:	1080005c 	xori	r2,r2,1
   20ccc:	10803fcc 	andi	r2,r2,255
   20cd0:	10000526 	beq	r2,zero,20ce8 <OC_I2C_Read_Continue+0xd8>
            printf("OC_I2C_Read error[10]\r\n");
   20cd4:	010000f4 	movhi	r4,3
   20cd8:	21106904 	addi	r4,r4,16804
   20cdc:	002727c0 	call	2727c <puts>
            return FALSE;
   20ce0:	0005883a 	mov	r2,zero
   20ce4:	00001706 	br	20d44 <OC_I2C_Read_Continue+0x134>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20ce8:	e0bffc17 	ldw	r2,-16(fp)
   20cec:	10800304 	addi	r2,r2,12
   20cf0:	10800037 	ldwio	r2,0(r2)
   20cf4:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
   20cf8:	e0bffa17 	ldw	r2,-24(fp)
   20cfc:	e0fffe17 	ldw	r3,-8(fp)
   20d00:	1885883a 	add	r2,r3,r2
   20d04:	e0fffb17 	ldw	r3,-20(fp)
   20d08:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
   20d0c:	e0bffa17 	ldw	r2,-24(fp)
   20d10:	10800044 	addi	r2,r2,1
   20d14:	e0bffa15 	stw	r2,-24(fp)
   20d18:	e0fffa17 	ldw	r3,-24(fp)
   20d1c:	e0bfff17 	ldw	r2,-4(fp)
   20d20:	18bfdc16 	blt	r3,r2,20c94 <__alt_data_end+0xfffe1894>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
   20d24:	e0bffc17 	ldw	r2,-16(fp)
   20d28:	10800404 	addi	r2,r2,16
   20d2c:	1007883a 	mov	r3,r2
   20d30:	00801004 	movi	r2,64
   20d34:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   20d38:	01003e84 	movi	r4,250
   20d3c:	00320640 	call	32064 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   20d40:	00800044 	movi	r2,1

}
   20d44:	e037883a 	mov	sp,fp
   20d48:	dfc00117 	ldw	ra,4(sp)
   20d4c:	df000017 	ldw	fp,0(sp)
   20d50:	dec00204 	addi	sp,sp,8
   20d54:	f800283a 	ret

00020d58 <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
   20d58:	defff804 	addi	sp,sp,-32
   20d5c:	dfc00715 	stw	ra,28(sp)
   20d60:	df000615 	stw	fp,24(sp)
   20d64:	df000604 	addi	fp,sp,24
   20d68:	e13ffc15 	stw	r4,-16(fp)
   20d6c:	2807883a 	mov	r3,r5
   20d70:	3005883a 	mov	r2,r6
   20d74:	e1ffff15 	stw	r7,-4(fp)
   20d78:	e0fffd05 	stb	r3,-12(fp)
   20d7c:	e0bffe0d 	sth	r2,-8(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
   20d80:	e0bffe0b 	ldhu	r2,-8(fp)
   20d84:	1004d23a 	srli	r2,r2,8
   20d88:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
   20d8c:	e0bffe0b 	ldhu	r2,-8(fp)
   20d90:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   20d94:	e0bffd03 	ldbu	r2,-12(fp)
   20d98:	100d883a 	mov	r6,r2
   20d9c:	014000c4 	movi	r5,3
   20da0:	e13ffc17 	ldw	r4,-16(fp)
   20da4:	00202900 	call	20290 <Write32_Data>
   20da8:	1080005c 	xori	r2,r2,1
   20dac:	10803fcc 	andi	r2,r2,255
   20db0:	10000226 	beq	r2,zero,20dbc <OC_I2CL_Write+0x64>
       return FALSE;
   20db4:	0005883a 	mov	r2,zero
   20db8:	00007d06 	br	20fb0 <OC_I2CL_Write+0x258>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
   20dbc:	01802404 	movi	r6,144
   20dc0:	01400104 	movi	r5,4
   20dc4:	e13ffc17 	ldw	r4,-16(fp)
   20dc8:	00202900 	call	20290 <Write32_Data>
   20dcc:	1080005c 	xori	r2,r2,1
   20dd0:	10803fcc 	andi	r2,r2,255
   20dd4:	10000226 	beq	r2,zero,20de0 <OC_I2CL_Write+0x88>
       return FALSE;
   20dd8:	0005883a 	mov	r2,zero
   20ddc:	00007406 	br	20fb0 <OC_I2CL_Write+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20de0:	e13ffc17 	ldw	r4,-16(fp)
   20de4:	00206040 	call	20604 <ACK_check>
   20de8:	1080005c 	xori	r2,r2,1
   20dec:	10803fcc 	andi	r2,r2,255
   20df0:	10000526 	beq	r2,zero,20e08 <OC_I2CL_Write+0xb0>
        printf("OC_I2CL_Write error[0]\r\n");
   20df4:	010000f4 	movhi	r4,3
   20df8:	21106f04 	addi	r4,r4,16828
   20dfc:	002727c0 	call	2727c <puts>
        return FALSE;
   20e00:	0005883a 	mov	r2,zero
   20e04:	00006a06 	br	20fb0 <OC_I2CL_Write+0x258>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   20e08:	e0bffb03 	ldbu	r2,-20(fp)
   20e0c:	100d883a 	mov	r6,r2
   20e10:	014000c4 	movi	r5,3
   20e14:	e13ffc17 	ldw	r4,-16(fp)
   20e18:	00202900 	call	20290 <Write32_Data>
   20e1c:	1080005c 	xori	r2,r2,1
   20e20:	10803fcc 	andi	r2,r2,255
   20e24:	10000226 	beq	r2,zero,20e30 <OC_I2CL_Write+0xd8>
       return FALSE;
   20e28:	0005883a 	mov	r2,zero
   20e2c:	00006006 	br	20fb0 <OC_I2CL_Write+0x258>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   20e30:	01800404 	movi	r6,16
   20e34:	01400104 	movi	r5,4
   20e38:	e13ffc17 	ldw	r4,-16(fp)
   20e3c:	00202900 	call	20290 <Write32_Data>
   20e40:	1080005c 	xori	r2,r2,1
   20e44:	10803fcc 	andi	r2,r2,255
   20e48:	10000226 	beq	r2,zero,20e54 <OC_I2CL_Write+0xfc>
        return FALSE;
   20e4c:	0005883a 	mov	r2,zero
   20e50:	00005706 	br	20fb0 <OC_I2CL_Write+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20e54:	e13ffc17 	ldw	r4,-16(fp)
   20e58:	00206040 	call	20604 <ACK_check>
   20e5c:	1080005c 	xori	r2,r2,1
   20e60:	10803fcc 	andi	r2,r2,255
   20e64:	10000526 	beq	r2,zero,20e7c <OC_I2CL_Write+0x124>
        printf("OC_I2CL_Write error[1]\r\n");
   20e68:	010000f4 	movhi	r4,3
   20e6c:	21107504 	addi	r4,r4,16852
   20e70:	002727c0 	call	2727c <puts>
        return FALSE;
   20e74:	0005883a 	mov	r2,zero
   20e78:	00004d06 	br	20fb0 <OC_I2CL_Write+0x258>
    }
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
   20e7c:	e0bffb43 	ldbu	r2,-19(fp)
   20e80:	100d883a 	mov	r6,r2
   20e84:	014000c4 	movi	r5,3
   20e88:	e13ffc17 	ldw	r4,-16(fp)
   20e8c:	00202900 	call	20290 <Write32_Data>
   20e90:	1080005c 	xori	r2,r2,1
   20e94:	10803fcc 	andi	r2,r2,255
   20e98:	10000226 	beq	r2,zero,20ea4 <OC_I2CL_Write+0x14c>
       return FALSE;
   20e9c:	0005883a 	mov	r2,zero
   20ea0:	00004306 	br	20fb0 <OC_I2CL_Write+0x258>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
   20ea4:	01800404 	movi	r6,16
   20ea8:	01400104 	movi	r5,4
   20eac:	e13ffc17 	ldw	r4,-16(fp)
   20eb0:	00202900 	call	20290 <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20eb4:	e13ffc17 	ldw	r4,-16(fp)
   20eb8:	00206040 	call	20604 <ACK_check>
   20ebc:	1080005c 	xori	r2,r2,1
   20ec0:	10803fcc 	andi	r2,r2,255
   20ec4:	10000526 	beq	r2,zero,20edc <OC_I2CL_Write+0x184>
        printf("OC_I2CL_Write error[2]\r\n");
   20ec8:	010000f4 	movhi	r4,3
   20ecc:	21107b04 	addi	r4,r4,16876
   20ed0:	002727c0 	call	2727c <puts>
        return FALSE;
   20ed4:	0005883a 	mov	r2,zero
   20ed8:	00003506 	br	20fb0 <OC_I2CL_Write+0x258>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
   20edc:	e03ffa15 	stw	zero,-24(fp)
   20ee0:	00002406 	br	20f74 <OC_I2CL_Write+0x21c>

        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
   20ee4:	e0bffa17 	ldw	r2,-24(fp)
   20ee8:	e0ffff17 	ldw	r3,-4(fp)
   20eec:	1885883a 	add	r2,r3,r2
   20ef0:	10800003 	ldbu	r2,0(r2)
   20ef4:	10803fcc 	andi	r2,r2,255
   20ef8:	100d883a 	mov	r6,r2
   20efc:	014000c4 	movi	r5,3
   20f00:	e13ffc17 	ldw	r4,-16(fp)
   20f04:	00202900 	call	20290 <Write32_Data>
   20f08:	1080005c 	xori	r2,r2,1
   20f0c:	10803fcc 	andi	r2,r2,255
   20f10:	10000226 	beq	r2,zero,20f1c <OC_I2CL_Write+0x1c4>
            return FALSE;
   20f14:	0005883a 	mov	r2,zero
   20f18:	00002506 	br	20fb0 <OC_I2CL_Write+0x258>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
   20f1c:	01800404 	movi	r6,16
   20f20:	01400104 	movi	r5,4
   20f24:	e13ffc17 	ldw	r4,-16(fp)
   20f28:	00202900 	call	20290 <Write32_Data>
   20f2c:	1080005c 	xori	r2,r2,1
   20f30:	10803fcc 	andi	r2,r2,255
   20f34:	10000226 	beq	r2,zero,20f40 <OC_I2CL_Write+0x1e8>
            return FALSE;
   20f38:	0005883a 	mov	r2,zero
   20f3c:	00001c06 	br	20fb0 <OC_I2CL_Write+0x258>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
   20f40:	e13ffc17 	ldw	r4,-16(fp)
   20f44:	00206040 	call	20604 <ACK_check>
   20f48:	1080005c 	xori	r2,r2,1
   20f4c:	10803fcc 	andi	r2,r2,255
   20f50:	10000526 	beq	r2,zero,20f68 <OC_I2CL_Write+0x210>
             printf("OC_I2CL_Write error[3]\r\n");
   20f54:	010000f4 	movhi	r4,3
   20f58:	21108104 	addi	r4,r4,16900
   20f5c:	002727c0 	call	2727c <puts>
             return FALSE;
   20f60:	0005883a 	mov	r2,zero
   20f64:	00001206 	br	20fb0 <OC_I2CL_Write+0x258>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
   20f68:	e0bffa17 	ldw	r2,-24(fp)
   20f6c:	10800044 	addi	r2,r2,1
   20f70:	e0bffa15 	stw	r2,-24(fp)
   20f74:	e0fffa17 	ldw	r3,-24(fp)
   20f78:	e0800217 	ldw	r2,8(fp)
   20f7c:	18bfd916 	blt	r3,r2,20ee4 <__alt_data_end+0xfffe1ae4>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
   20f80:	01801004 	movi	r6,64
   20f84:	01400104 	movi	r5,4
   20f88:	e13ffc17 	ldw	r4,-16(fp)
   20f8c:	00202900 	call	20290 <Write32_Data>
   20f90:	1080005c 	xori	r2,r2,1
   20f94:	10803fcc 	andi	r2,r2,255
   20f98:	10000226 	beq	r2,zero,20fa4 <OC_I2CL_Write+0x24c>
         return FALSE;
   20f9c:	0005883a 	mov	r2,zero
   20fa0:	00000306 	br	20fb0 <OC_I2CL_Write+0x258>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
   20fa4:	01003e84 	movi	r4,250
   20fa8:	00320640 	call	32064 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
   20fac:	00800044 	movi	r2,1
}
   20fb0:	e037883a 	mov	sp,fp
   20fb4:	dfc00117 	ldw	ra,4(sp)
   20fb8:	df000017 	ldw	fp,0(sp)
   20fbc:	dec00204 	addi	sp,sp,8
   20fc0:	f800283a 	ret

00020fc4 <OC_I2CL_Read>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
   20fc4:	defff704 	addi	sp,sp,-36
   20fc8:	dfc00815 	stw	ra,32(sp)
   20fcc:	df000715 	stw	fp,28(sp)
   20fd0:	df000704 	addi	fp,sp,28
   20fd4:	e13ffc15 	stw	r4,-16(fp)
   20fd8:	2807883a 	mov	r3,r5
   20fdc:	3005883a 	mov	r2,r6
   20fe0:	e1ffff15 	stw	r7,-4(fp)
   20fe4:	e0fffd05 	stb	r3,-12(fp)
   20fe8:	e0bffe0d 	sth	r2,-8(fp)
    int i;

    alt_u8 AddrHigh, AddrLow;
    alt_u8 DataHigh, DataLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
   20fec:	e0bffe0b 	ldhu	r2,-8(fp)
   20ff0:	1004d23a 	srli	r2,r2,8
   20ff4:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
   20ff8:	e0bffe0b 	ldhu	r2,-8(fp)
   20ffc:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   21000:	e0bffd03 	ldbu	r2,-12(fp)
   21004:	100d883a 	mov	r6,r2
   21008:	014000c4 	movi	r5,3
   2100c:	e13ffc17 	ldw	r4,-16(fp)
   21010:	00202900 	call	20290 <Write32_Data>
   21014:	1080005c 	xori	r2,r2,1
   21018:	10803fcc 	andi	r2,r2,255
   2101c:	10000226 	beq	r2,zero,21028 <OC_I2CL_Read+0x64>
       return FALSE;
   21020:	0005883a 	mov	r2,zero
   21024:	00009e06 	br	212a0 <OC_I2CL_Read+0x2dc>

   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
   21028:	01802404 	movi	r6,144
   2102c:	01400104 	movi	r5,4
   21030:	e13ffc17 	ldw	r4,-16(fp)
   21034:	00202900 	call	20290 <Write32_Data>
   21038:	1080005c 	xori	r2,r2,1
   2103c:	10803fcc 	andi	r2,r2,255
   21040:	10000226 	beq	r2,zero,2104c <OC_I2CL_Read+0x88>
       return FALSE;
   21044:	0005883a 	mov	r2,zero
   21048:	00009506 	br	212a0 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   2104c:	e13ffc17 	ldw	r4,-16(fp)
   21050:	00206040 	call	20604 <ACK_check>
   21054:	1080005c 	xori	r2,r2,1
   21058:	10803fcc 	andi	r2,r2,255
   2105c:	10000526 	beq	r2,zero,21074 <OC_I2CL_Read+0xb0>
        printf("OC_I2CL_Read error[0]\r\n");
   21060:	010000f4 	movhi	r4,3
   21064:	21108704 	addi	r4,r4,16924
   21068:	002727c0 	call	2727c <puts>
        return FALSE;
   2106c:	0005883a 	mov	r2,zero
   21070:	00008b06 	br	212a0 <OC_I2CL_Read+0x2dc>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   21074:	e0bffa03 	ldbu	r2,-24(fp)
   21078:	100d883a 	mov	r6,r2
   2107c:	014000c4 	movi	r5,3
   21080:	e13ffc17 	ldw	r4,-16(fp)
   21084:	00202900 	call	20290 <Write32_Data>
   21088:	1080005c 	xori	r2,r2,1
   2108c:	10803fcc 	andi	r2,r2,255
   21090:	10000226 	beq	r2,zero,2109c <OC_I2CL_Read+0xd8>
       return FALSE;
   21094:	0005883a 	mov	r2,zero
   21098:	00008106 	br	212a0 <OC_I2CL_Read+0x2dc>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   2109c:	01800404 	movi	r6,16
   210a0:	01400104 	movi	r5,4
   210a4:	e13ffc17 	ldw	r4,-16(fp)
   210a8:	00202900 	call	20290 <Write32_Data>
   210ac:	1080005c 	xori	r2,r2,1
   210b0:	10803fcc 	andi	r2,r2,255
   210b4:	10000226 	beq	r2,zero,210c0 <OC_I2CL_Read+0xfc>
        return FALSE;
   210b8:	0005883a 	mov	r2,zero
   210bc:	00007806 	br	212a0 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   210c0:	e13ffc17 	ldw	r4,-16(fp)
   210c4:	00206040 	call	20604 <ACK_check>
   210c8:	1080005c 	xori	r2,r2,1
   210cc:	10803fcc 	andi	r2,r2,255
   210d0:	10000526 	beq	r2,zero,210e8 <OC_I2CL_Read+0x124>
        printf("OC_I2CL_Read error[1]\r\n");
   210d4:	010000f4 	movhi	r4,3
   210d8:	21108d04 	addi	r4,r4,16948
   210dc:	002727c0 	call	2727c <puts>
        return FALSE;
   210e0:	0005883a 	mov	r2,zero
   210e4:	00006e06 	br	212a0 <OC_I2CL_Read+0x2dc>
    }
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
   210e8:	e0bffa43 	ldbu	r2,-23(fp)
   210ec:	100d883a 	mov	r6,r2
   210f0:	014000c4 	movi	r5,3
   210f4:	e13ffc17 	ldw	r4,-16(fp)
   210f8:	00202900 	call	20290 <Write32_Data>
   210fc:	1080005c 	xori	r2,r2,1
   21100:	10803fcc 	andi	r2,r2,255
   21104:	10000226 	beq	r2,zero,21110 <OC_I2CL_Read+0x14c>
       return FALSE;
   21108:	0005883a 	mov	r2,zero
   2110c:	00006406 	br	212a0 <OC_I2CL_Read+0x2dc>
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   21110:	01800404 	movi	r6,16
   21114:	01400104 	movi	r5,4
   21118:	e13ffc17 	ldw	r4,-16(fp)
   2111c:	00202900 	call	20290 <Write32_Data>
   21120:	1080005c 	xori	r2,r2,1
   21124:	10803fcc 	andi	r2,r2,255
   21128:	10000226 	beq	r2,zero,21134 <OC_I2CL_Read+0x170>
        return FALSE;
   2112c:	0005883a 	mov	r2,zero
   21130:	00005b06 	br	212a0 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   21134:	e13ffc17 	ldw	r4,-16(fp)
   21138:	00206040 	call	20604 <ACK_check>
   2113c:	1080005c 	xori	r2,r2,1
   21140:	10803fcc 	andi	r2,r2,255
   21144:	10000526 	beq	r2,zero,2115c <OC_I2CL_Read+0x198>
        printf("OC_I2CL_Read error[2]\r\n");
   21148:	010000f4 	movhi	r4,3
   2114c:	21109304 	addi	r4,r4,16972
   21150:	002727c0 	call	2727c <puts>
        return FALSE;
   21154:	0005883a 	mov	r2,zero
   21158:	00005106 	br	212a0 <OC_I2CL_Read+0x2dc>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
   2115c:	e0bffd03 	ldbu	r2,-12(fp)
   21160:	10800054 	ori	r2,r2,1
   21164:	10803fcc 	andi	r2,r2,255
   21168:	100d883a 	mov	r6,r2
   2116c:	014000c4 	movi	r5,3
   21170:	e13ffc17 	ldw	r4,-16(fp)
   21174:	00202900 	call	20290 <Write32_Data>
   21178:	1080005c 	xori	r2,r2,1
   2117c:	10803fcc 	andi	r2,r2,255
   21180:	10000226 	beq	r2,zero,2118c <OC_I2CL_Read+0x1c8>
         return FALSE;
   21184:	0005883a 	mov	r2,zero
   21188:	00004506 	br	212a0 <OC_I2CL_Read+0x2dc>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
   2118c:	01802404 	movi	r6,144
   21190:	01400104 	movi	r5,4
   21194:	e13ffc17 	ldw	r4,-16(fp)
   21198:	00202900 	call	20290 <Write32_Data>
   2119c:	1080005c 	xori	r2,r2,1
   211a0:	10803fcc 	andi	r2,r2,255
   211a4:	10000226 	beq	r2,zero,211b0 <OC_I2CL_Read+0x1ec>
         return FALSE;
   211a8:	0005883a 	mov	r2,zero
   211ac:	00003c06 	br	212a0 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   211b0:	e13ffc17 	ldw	r4,-16(fp)
   211b4:	00206040 	call	20604 <ACK_check>
   211b8:	1080005c 	xori	r2,r2,1
   211bc:	10803fcc 	andi	r2,r2,255
   211c0:	10000526 	beq	r2,zero,211d8 <OC_I2CL_Read+0x214>
        printf("OC_I2CL_Read error[3]\r\n");
   211c4:	010000f4 	movhi	r4,3
   211c8:	21109904 	addi	r4,r4,16996
   211cc:	002727c0 	call	2727c <puts>
        return FALSE;
   211d0:	0005883a 	mov	r2,zero
   211d4:	00003206 	br	212a0 <OC_I2CL_Read+0x2dc>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
   211d8:	e03ff915 	stw	zero,-28(fp)
   211dc:	00002106 	br	21264 <OC_I2CL_Read+0x2a0>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   211e0:	e0bffc17 	ldw	r2,-16(fp)
   211e4:	10800404 	addi	r2,r2,16
   211e8:	1009883a 	mov	r4,r2
   211ec:	e0bff917 	ldw	r2,-28(fp)
   211f0:	10c00044 	addi	r3,r2,1
   211f4:	e0800217 	ldw	r2,8(fp)
   211f8:	1880021e 	bne	r3,r2,21204 <OC_I2CL_Read+0x240>
   211fc:	00800a04 	movi	r2,40
   21200:	00000106 	br	21208 <OC_I2CL_Read+0x244>
   21204:	00800804 	movi	r2,32
   21208:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   2120c:	e13ffc17 	ldw	r4,-16(fp)
   21210:	00208b80 	call	208b8 <ACK_judge_for_read>
   21214:	1080005c 	xori	r2,r2,1
   21218:	10803fcc 	andi	r2,r2,255
   2121c:	10000526 	beq	r2,zero,21234 <OC_I2CL_Read+0x270>
            printf("OC_I2CL_Read error[4]\r\n");
   21220:	010000f4 	movhi	r4,3
   21224:	21109f04 	addi	r4,r4,17020
   21228:	002727c0 	call	2727c <puts>
            return FALSE;
   2122c:	0005883a 	mov	r2,zero
   21230:	00001b06 	br	212a0 <OC_I2CL_Read+0x2dc>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   21234:	e0bffc17 	ldw	r2,-16(fp)
   21238:	10800304 	addi	r2,r2,12
   2123c:	10800037 	ldwio	r2,0(r2)
   21240:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
   21244:	e0bff917 	ldw	r2,-28(fp)
   21248:	e0ffff17 	ldw	r3,-4(fp)
   2124c:	1885883a 	add	r2,r3,r2
   21250:	e0fffb17 	ldw	r3,-20(fp)
   21254:	10c00005 	stb	r3,0(r2)
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
   21258:	e0bff917 	ldw	r2,-28(fp)
   2125c:	10800044 	addi	r2,r2,1
   21260:	e0bff915 	stw	r2,-28(fp)
   21264:	e0fff917 	ldw	r3,-28(fp)
   21268:	e0800217 	ldw	r2,8(fp)
   2126c:	18bfdc16 	blt	r3,r2,211e0 <__alt_data_end+0xfffe1de0>
    DataLow =  Data32 & 0xff;

    pData16 = (DataHigh << 8) | DataLow;
#endif

   if (!Write32_Data( i2c_base, 4,0x40))
   21270:	01801004 	movi	r6,64
   21274:	01400104 	movi	r5,4
   21278:	e13ffc17 	ldw	r4,-16(fp)
   2127c:	00202900 	call	20290 <Write32_Data>
   21280:	1080005c 	xori	r2,r2,1
   21284:	10803fcc 	andi	r2,r2,255
   21288:	10000226 	beq	r2,zero,21294 <OC_I2CL_Read+0x2d0>
       return FALSE;
   2128c:	0005883a 	mov	r2,zero
   21290:	00000306 	br	212a0 <OC_I2CL_Read+0x2dc>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
   21294:	01003e84 	movi	r4,250
   21298:	00320640 	call	32064 <usleep>

   return TRUE;
   2129c:	00800044 	movi	r2,1

}
   212a0:	e037883a 	mov	sp,fp
   212a4:	dfc00117 	ldw	ra,4(sp)
   212a8:	df000017 	ldw	fp,0(sp)
   212ac:	dec00204 	addi	sp,sp,8
   212b0:	f800283a 	ret

000212b4 <Light_Init>:

////////////////////////////////////////
// export API
static alt_u32 Light_I2C_Controller_Base = LIGHT_I2C_OPENCORES_BASE;

void Light_Init(alt_u32 I2C_Controller_Base){
   212b4:	defffb04 	addi	sp,sp,-20
   212b8:	dfc00415 	stw	ra,16(sp)
   212bc:	df000315 	stw	fp,12(sp)
   212c0:	df000304 	addi	fp,sp,12
   212c4:	e13fff15 	stw	r4,-4(fp)
	const int Ref_CLK = 50*1000*1000; // 50MHz
   212c8:	0080bef4 	movhi	r2,763
   212cc:	10bc2004 	addi	r2,r2,-3968
   212d0:	e0bffd15 	stw	r2,-12(fp)
	const int I2C_CLK = 400*1000; // 400KHz
   212d4:	008001b4 	movhi	r2,6
   212d8:	1086a004 	addi	r2,r2,6784
   212dc:	e0bffe15 	stw	r2,-8(fp)

	Light_I2C_Controller_Base = I2C_Controller_Base;
   212e0:	e0bfff17 	ldw	r2,-4(fp)
   212e4:	d0a00015 	stw	r2,-32768(gp)
	oc_i2c_init_ex(Light_I2C_Controller_Base, Ref_CLK, I2C_CLK);
   212e8:	d0a00017 	ldw	r2,-32768(gp)
   212ec:	e1bffe17 	ldw	r6,-8(fp)
   212f0:	e17ffd17 	ldw	r5,-12(fp)
   212f4:	1009883a 	mov	r4,r2
   212f8:	00203980 	call	20398 <oc_i2c_init_ex>
}
   212fc:	0001883a 	nop
   21300:	e037883a 	mov	sp,fp
   21304:	dfc00117 	ldw	ra,4(sp)
   21308:	df000017 	ldw	fp,0(sp)
   2130c:	dec00204 	addi	sp,sp,8
   21310:	f800283a 	ret

00021314 <Light_GetID>:

void Light_GetID(alt_u8 *data)
{
   21314:	defffc04 	addi	sp,sp,-16
   21318:	dfc00315 	stw	ra,12(sp)
   2131c:	df000215 	stw	fp,8(sp)
   21320:	df000204 	addi	fp,sp,8
   21324:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | ID_REG ;
   21328:	00bfe284 	movi	r2,-118
   2132c:	e0bffe05 	stb	r2,-8(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
   21330:	e0bffe03 	ldbu	r2,-8(fp)
   21334:	e1bfff17 	ldw	r6,-4(fp)
   21338:	100b883a 	mov	r5,r2
   2133c:	01001484 	movi	r4,82
   21340:	00219a80 	call	219a8 <I2C_Read_Light>
   21344:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)  *data = 0;
   21348:	e0bffe43 	ldbu	r2,-7(fp)
   2134c:	1080005c 	xori	r2,r2,1
   21350:	10803fcc 	andi	r2,r2,255
   21354:	10000226 	beq	r2,zero,21360 <Light_GetID+0x4c>
   21358:	e0bfff17 	ldw	r2,-4(fp)
   2135c:	10000005 	stb	zero,0(r2)

}
   21360:	0001883a 	nop
   21364:	e037883a 	mov	sp,fp
   21368:	dfc00117 	ldw	ra,4(sp)
   2136c:	df000017 	ldw	fp,0(sp)
   21370:	dec00204 	addi	sp,sp,8
   21374:	f800283a 	ret

00021378 <Light_GetTiming>:

void Light_GetTiming(alt_u8 *data)
{
   21378:	defffc04 	addi	sp,sp,-16
   2137c:	dfc00315 	stw	ra,12(sp)
   21380:	df000215 	stw	fp,8(sp)
   21384:	df000204 	addi	fp,sp,8
   21388:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | TIMING_REG ;
   2138c:	00bfe044 	movi	r2,-127
   21390:	e0bffe05 	stb	r2,-8(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
   21394:	e0bffe03 	ldbu	r2,-8(fp)
   21398:	e1bfff17 	ldw	r6,-4(fp)
   2139c:	100b883a 	mov	r5,r2
   213a0:	01001484 	movi	r4,82
   213a4:	00219a80 	call	219a8 <I2C_Read_Light>
   213a8:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)  *data = 0;
   213ac:	e0bffe43 	ldbu	r2,-7(fp)
   213b0:	1080005c 	xori	r2,r2,1
   213b4:	10803fcc 	andi	r2,r2,255
   213b8:	10000226 	beq	r2,zero,213c4 <Light_GetTiming+0x4c>
   213bc:	e0bfff17 	ldw	r2,-4(fp)
   213c0:	10000005 	stb	zero,0(r2)

}
   213c4:	0001883a 	nop
   213c8:	e037883a 	mov	sp,fp
   213cc:	dfc00117 	ldw	ra,4(sp)
   213d0:	df000017 	ldw	fp,0(sp)
   213d4:	dec00204 	addi	sp,sp,8
   213d8:	f800283a 	ret

000213dc <Light_PowerSwitch>:

bool Light_PowerSwitch(bool bSwitch)
{
   213dc:	defffc04 	addi	sp,sp,-16
   213e0:	dfc00315 	stw	ra,12(sp)
   213e4:	df000215 	stw	fp,8(sp)
   213e8:	df000204 	addi	fp,sp,8
   213ec:	2005883a 	mov	r2,r4
   213f0:	e0bfff05 	stb	r2,-4(fp)
    bool bPass;
    alt_u8 data = 0;
   213f4:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 CommandCode = COMMAND_CMD | CONTROL_REG ;
   213f8:	00bfe004 	movi	r2,-128
   213fc:	e0bffe45 	stb	r2,-7(fp)

    data = bSwitch ? 0x03 : 0x00 ;
   21400:	e0bfff03 	ldbu	r2,-4(fp)
   21404:	10000226 	beq	r2,zero,21410 <Light_PowerSwitch+0x34>
   21408:	008000c4 	movi	r2,3
   2140c:	00000106 	br	21414 <Light_PowerSwitch+0x38>
   21410:	0005883a 	mov	r2,zero
   21414:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Write_Light( DEVICE_ADDR,CommandCode , data);
   21418:	e0bffe43 	ldbu	r2,-7(fp)
   2141c:	e0fffe03 	ldbu	r3,-8(fp)
   21420:	180d883a 	mov	r6,r3
   21424:	100b883a 	mov	r5,r2
   21428:	01001484 	movi	r4,82
   2142c:	00218c40 	call	218c4 <I2C_Write_Light>
   21430:	e0bffe85 	stb	r2,-6(fp)

    return bPass;
   21434:	e0bffe83 	ldbu	r2,-6(fp)
}
   21438:	e037883a 	mov	sp,fp
   2143c:	dfc00117 	ldw	ra,4(sp)
   21440:	df000017 	ldw	fp,0(sp)
   21444:	dec00204 	addi	sp,sp,8
   21448:	f800283a 	ret

0002144c <Light_Get_ADCData0>:

bool Light_Get_ADCData0(alt_u16 *pChannelData)
{
   2144c:	defffc04 	addi	sp,sp,-16
   21450:	dfc00315 	stw	ra,12(sp)
   21454:	df000215 	stw	fp,8(sp)
   21458:	df000204 	addi	fp,sp,8
   2145c:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 Data0Low, Data0High;
    alt_u8 CommandCode = COMMAND_CMD |  DATA0LOW ;
   21460:	00bfe304 	movi	r2,-116
   21464:	e0bffe05 	stb	r2,-8(fp)
    //alt_u8 CommandCode = 0x8C;

    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0Low);
   21468:	e0bffe03 	ldbu	r2,-8(fp)
   2146c:	e0fffe84 	addi	r3,fp,-6
   21470:	180d883a 	mov	r6,r3
   21474:	100b883a 	mov	r5,r2
   21478:	01001484 	movi	r4,82
   2147c:	00219a80 	call	219a8 <I2C_Read_Light>
   21480:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)
   21484:	e0bffe43 	ldbu	r2,-7(fp)
   21488:	1080005c 	xori	r2,r2,1
   2148c:	10803fcc 	andi	r2,r2,255
   21490:	10000226 	beq	r2,zero,2149c <Light_Get_ADCData0+0x50>
    {
         return FALSE;
   21494:	0005883a 	mov	r2,zero
   21498:	00002506 	br	21530 <Light_Get_ADCData0+0xe4>
    }
    else *pChannelData = Data0Low;
   2149c:	e0bffe83 	ldbu	r2,-6(fp)
   214a0:	10c03fcc 	andi	r3,r2,255
   214a4:	e0bfff17 	ldw	r2,-4(fp)
   214a8:	10c0000d 	sth	r3,0(r2)

    if(bPass)
   214ac:	e0bffe43 	ldbu	r2,-7(fp)
   214b0:	10001426 	beq	r2,zero,21504 <Light_Get_ADCData0+0xb8>
    {
        CommandCode = COMMAND_CMD |  DATA0HIGH ;
   214b4:	00bfe344 	movi	r2,-115
   214b8:	e0bffe05 	stb	r2,-8(fp)
        //CommandCode = 0x8D;

        bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0High);
   214bc:	e0bffe03 	ldbu	r2,-8(fp)
   214c0:	e0fffec4 	addi	r3,fp,-5
   214c4:	180d883a 	mov	r6,r3
   214c8:	100b883a 	mov	r5,r2
   214cc:	01001484 	movi	r4,82
   214d0:	00219a80 	call	219a8 <I2C_Read_Light>
   214d4:	e0bffe45 	stb	r2,-7(fp)
        if(!bPass)
   214d8:	e0bffe43 	ldbu	r2,-7(fp)
   214dc:	1080005c 	xori	r2,r2,1
   214e0:	10803fcc 	andi	r2,r2,255
   214e4:	10000226 	beq	r2,zero,214f0 <Light_Get_ADCData0+0xa4>
        {
            return FALSE;
   214e8:	0005883a 	mov	r2,zero
   214ec:	00001006 	br	21530 <Light_Get_ADCData0+0xe4>
        }
        else *(pChannelData+1) = Data0High;
   214f0:	e0bfff17 	ldw	r2,-4(fp)
   214f4:	10800084 	addi	r2,r2,2
   214f8:	e0fffec3 	ldbu	r3,-5(fp)
   214fc:	18c03fcc 	andi	r3,r3,255
   21500:	10c0000d 	sth	r3,0(r2)
    }

    *pChannelData = (Data0High << 8) | Data0Low;
   21504:	e0bffec3 	ldbu	r2,-5(fp)
   21508:	10803fcc 	andi	r2,r2,255
   2150c:	1004923a 	slli	r2,r2,8
   21510:	1007883a 	mov	r3,r2
   21514:	e0bffe83 	ldbu	r2,-6(fp)
   21518:	10803fcc 	andi	r2,r2,255
   2151c:	1884b03a 	or	r2,r3,r2
   21520:	1007883a 	mov	r3,r2
   21524:	e0bfff17 	ldw	r2,-4(fp)
   21528:	10c0000d 	sth	r3,0(r2)

    return TRUE;
   2152c:	00800044 	movi	r2,1
}
   21530:	e037883a 	mov	sp,fp
   21534:	dfc00117 	ldw	ra,4(sp)
   21538:	df000017 	ldw	fp,0(sp)
   2153c:	dec00204 	addi	sp,sp,8
   21540:	f800283a 	ret

00021544 <Light_Get_ADCData1>:

bool Light_Get_ADCData1(alt_u16 *pChannelData)
{
   21544:	defffc04 	addi	sp,sp,-16
   21548:	dfc00315 	stw	ra,12(sp)
   2154c:	df000215 	stw	fp,8(sp)
   21550:	df000204 	addi	fp,sp,8
   21554:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 Data1Low, Data1High;
    alt_u8 CommandCode = COMMAND_CMD |  DATA1LOW ;
   21558:	00bfe384 	movi	r2,-114
   2155c:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data1Low);
   21560:	e0bffe03 	ldbu	r2,-8(fp)
   21564:	e0fffe84 	addi	r3,fp,-6
   21568:	180d883a 	mov	r6,r3
   2156c:	100b883a 	mov	r5,r2
   21570:	01001484 	movi	r4,82
   21574:	00219a80 	call	219a8 <I2C_Read_Light>
   21578:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)
   2157c:	e0bffe43 	ldbu	r2,-7(fp)
   21580:	1080005c 	xori	r2,r2,1
   21584:	10803fcc 	andi	r2,r2,255
   21588:	10000226 	beq	r2,zero,21594 <Light_Get_ADCData1+0x50>
    {
         return FALSE;
   2158c:	0005883a 	mov	r2,zero
   21590:	00002506 	br	21628 <Light_Get_ADCData1+0xe4>
    }
    else *pChannelData = Data1Low;
   21594:	e0bffe83 	ldbu	r2,-6(fp)
   21598:	10c03fcc 	andi	r3,r2,255
   2159c:	e0bfff17 	ldw	r2,-4(fp)
   215a0:	10c0000d 	sth	r3,0(r2)

    if(bPass)
   215a4:	e0bffe43 	ldbu	r2,-7(fp)
   215a8:	10001426 	beq	r2,zero,215fc <Light_Get_ADCData1+0xb8>
    {
        CommandCode = COMMAND_CMD |  DATA1HIGH ;
   215ac:	00bfe3c4 	movi	r2,-113
   215b0:	e0bffe05 	stb	r2,-8(fp)

        bPass = I2C_Read_Light(DEVICE_ADDR,CommandCode , &Data1High);
   215b4:	e0bffe03 	ldbu	r2,-8(fp)
   215b8:	e0fffec4 	addi	r3,fp,-5
   215bc:	180d883a 	mov	r6,r3
   215c0:	100b883a 	mov	r5,r2
   215c4:	01001484 	movi	r4,82
   215c8:	00219a80 	call	219a8 <I2C_Read_Light>
   215cc:	e0bffe45 	stb	r2,-7(fp)
        if(!bPass)
   215d0:	e0bffe43 	ldbu	r2,-7(fp)
   215d4:	1080005c 	xori	r2,r2,1
   215d8:	10803fcc 	andi	r2,r2,255
   215dc:	10000226 	beq	r2,zero,215e8 <Light_Get_ADCData1+0xa4>
        {
            return FALSE;
   215e0:	0005883a 	mov	r2,zero
   215e4:	00001006 	br	21628 <Light_Get_ADCData1+0xe4>
        }
        else *(pChannelData+1) = Data1High;
   215e8:	e0bfff17 	ldw	r2,-4(fp)
   215ec:	10800084 	addi	r2,r2,2
   215f0:	e0fffec3 	ldbu	r3,-5(fp)
   215f4:	18c03fcc 	andi	r3,r3,255
   215f8:	10c0000d 	sth	r3,0(r2)
    }

    *pChannelData = (Data1High << 8) | Data1Low;
   215fc:	e0bffec3 	ldbu	r2,-5(fp)
   21600:	10803fcc 	andi	r2,r2,255
   21604:	1004923a 	slli	r2,r2,8
   21608:	1007883a 	mov	r3,r2
   2160c:	e0bffe83 	ldbu	r2,-6(fp)
   21610:	10803fcc 	andi	r2,r2,255
   21614:	1884b03a 	or	r2,r3,r2
   21618:	1007883a 	mov	r3,r2
   2161c:	e0bfff17 	ldw	r2,-4(fp)
   21620:	10c0000d 	sth	r3,0(r2)

    return TRUE;
   21624:	00800044 	movi	r2,1
}
   21628:	e037883a 	mov	sp,fp
   2162c:	dfc00117 	ldw	ra,4(sp)
   21630:	df000017 	ldw	fp,0(sp)
   21634:	dec00204 	addi	sp,sp,8
   21638:	f800283a 	ret

0002163c <Get_light>:

bool Get_light(alt_u16 *light0, alt_u16 *light1)
{
   2163c:	defffa04 	addi	sp,sp,-24
   21640:	dfc00515 	stw	ra,20(sp)
   21644:	df000415 	stw	fp,16(sp)
   21648:	df000404 	addi	fp,sp,16
   2164c:	e13ffe15 	stw	r4,-8(fp)
   21650:	e17fff15 	stw	r5,-4(fp)
    bool bPass = FALSE;
   21654:	e03ffc05 	stb	zero,-16(fp)
    alt_u8 device_Id = 0;
   21658:	e03ffc45 	stb	zero,-15(fp)

    alt_u16 ChannelData0;
    alt_u16 ChannelData1;

    //get light sensor Id
    Light_GetID(&device_Id);
   2165c:	e0bffc44 	addi	r2,fp,-15
   21660:	1009883a 	mov	r4,r2
   21664:	00213140 	call	21314 <Light_GetID>
    if(device_Id == 0)
   21668:	e0bffc43 	ldbu	r2,-15(fp)
   2166c:	10803fcc 	andi	r2,r2,255
   21670:	1000051e 	bne	r2,zero,21688 <Get_light+0x4c>
    {
        printf("read id fail \n");
   21674:	010000f4 	movhi	r4,3
   21678:	2110a504 	addi	r4,r4,17044
   2167c:	002727c0 	call	2727c <puts>
        return FALSE;
   21680:	0005883a 	mov	r2,zero
   21684:	00002106 	br	2170c <Get_light+0xd0>
    	//printf("Light Sensor ID=%xh\r\n", device_Id); //
    }


    //get adc channel 0 data
    bPass = Light_Get_ADCData0(&ChannelData0);
   21688:	e0bffc84 	addi	r2,fp,-14
   2168c:	1009883a 	mov	r4,r2
   21690:	002144c0 	call	2144c <Light_Get_ADCData0>
   21694:	e0bffc05 	stb	r2,-16(fp)
    if(!bPass)
   21698:	e0bffc03 	ldbu	r2,-16(fp)
   2169c:	1080005c 	xori	r2,r2,1
   216a0:	10803fcc 	andi	r2,r2,255
   216a4:	10000526 	beq	r2,zero,216bc <Get_light+0x80>
    {
        printf("Get ADC Channle 0 data fail \n");
   216a8:	010000f4 	movhi	r4,3
   216ac:	2110a904 	addi	r4,r4,17060
   216b0:	002727c0 	call	2727c <puts>
        return FALSE;
   216b4:	0005883a 	mov	r2,zero
   216b8:	00001406 	br	2170c <Get_light+0xd0>
    }
    *light0 = ChannelData0;
   216bc:	e0fffc8b 	ldhu	r3,-14(fp)
   216c0:	e0bffe17 	ldw	r2,-8(fp)
   216c4:	10c0000d 	sth	r3,0(r2)

    //get adc channel 1 data
    bPass = Light_Get_ADCData1(&ChannelData1);
   216c8:	e0bffd04 	addi	r2,fp,-12
   216cc:	1009883a 	mov	r4,r2
   216d0:	00215440 	call	21544 <Light_Get_ADCData1>
   216d4:	e0bffc05 	stb	r2,-16(fp)
    if(!bPass)
   216d8:	e0bffc03 	ldbu	r2,-16(fp)
   216dc:	1080005c 	xori	r2,r2,1
   216e0:	10803fcc 	andi	r2,r2,255
   216e4:	10000526 	beq	r2,zero,216fc <Get_light+0xc0>
    {
        printf("Get ADC Channle 1 data fail \n");
   216e8:	010000f4 	movhi	r4,3
   216ec:	2110b104 	addi	r4,r4,17092
   216f0:	002727c0 	call	2727c <puts>
        return FALSE;
   216f4:	0005883a 	mov	r2,zero
   216f8:	00000406 	br	2170c <Get_light+0xd0>
    }
    *light1 = ChannelData1;
   216fc:	e0fffd0b 	ldhu	r3,-12(fp)
   21700:	e0bfff17 	ldw	r2,-4(fp)
   21704:	10c0000d 	sth	r3,0(r2)
    return TRUE;
   21708:	00800044 	movi	r2,1
}
   2170c:	e037883a 	mov	sp,fp
   21710:	dfc00117 	ldw	ra,4(sp)
   21714:	df000017 	ldw	fp,0(sp)
   21718:	dec00204 	addi	sp,sp,8
   2171c:	f800283a 	ret

00021720 <Light_SetThreshLow>:


bool Light_SetThreshLow(alt_u8 *pData)
{
   21720:	defffc04 	addi	sp,sp,-16
   21724:	dfc00315 	stw	ra,12(sp)
   21728:	df000215 	stw	fp,8(sp)
   2172c:	df000204 	addi	fp,sp,8
   21730:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | COMMAND_WORD | THRESHLOWLOW_REG ;
   21734:	00bfe884 	movi	r2,-94
   21738:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Write_Light16( DEVICE_ADDR, CommandCode, pData);
   2173c:	e0bffe03 	ldbu	r2,-8(fp)
   21740:	e1bfff17 	ldw	r6,-4(fp)
   21744:	100b883a 	mov	r5,r2
   21748:	01001484 	movi	r4,82
   2174c:	00219380 	call	21938 <I2C_Write_Light16>
   21750:	e0bffe45 	stb	r2,-7(fp)
//
//        data = *(pData+1);
//        bPass = I2C_Write_Light(LIGHT_SENSOR_SCL_BASE, LIGHT_SENSOR_SDA_BASE, DEVICE_ADDR,CommandCode , data);
//    }

    return bPass;
   21754:	e0bffe43 	ldbu	r2,-7(fp)
}
   21758:	e037883a 	mov	sp,fp
   2175c:	dfc00117 	ldw	ra,4(sp)
   21760:	df000017 	ldw	fp,0(sp)
   21764:	dec00204 	addi	sp,sp,8
   21768:	f800283a 	ret

0002176c <Light_SetThreshHigh>:

bool Light_SetThreshHigh(alt_u8 *pData)
{
   2176c:	defffc04 	addi	sp,sp,-16
   21770:	dfc00315 	stw	ra,12(sp)
   21774:	df000215 	stw	fp,8(sp)
   21778:	df000204 	addi	fp,sp,8
   2177c:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | COMMAND_WORD | THRESHHIGHLOW_REG ;
   21780:	00bfe904 	movi	r2,-92
   21784:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Write_Light16( DEVICE_ADDR, CommandCode, pData);
   21788:	e0bffe03 	ldbu	r2,-8(fp)
   2178c:	e1bfff17 	ldw	r6,-4(fp)
   21790:	100b883a 	mov	r5,r2
   21794:	01001484 	movi	r4,82
   21798:	00219380 	call	21938 <I2C_Write_Light16>
   2179c:	e0bffe45 	stb	r2,-7(fp)
//
//        data = *(pData+1);
//        bPass = I2C_Write_Light(LIGHT_SENSOR_SCL_BASE, LIGHT_SENSOR_SDA_BASE, DEVICE_ADDR,CommandCode , data);
//    }

    return bPass;
   217a0:	e0bffe43 	ldbu	r2,-7(fp)
}
   217a4:	e037883a 	mov	sp,fp
   217a8:	dfc00117 	ldw	ra,4(sp)
   217ac:	df000017 	ldw	fp,0(sp)
   217b0:	dec00204 	addi	sp,sp,8
   217b4:	f800283a 	ret

000217b8 <Light_SetInterrupt>:

bool Light_SetInterrupt(alt_u8 data)
{
   217b8:	defffc04 	addi	sp,sp,-16
   217bc:	dfc00315 	stw	ra,12(sp)
   217c0:	df000215 	stw	fp,8(sp)
   217c4:	df000204 	addi	fp,sp,8
   217c8:	2005883a 	mov	r2,r4
   217cc:	e0bfff05 	stb	r2,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | INTERRUPT_REG ;
   217d0:	00bfe184 	movi	r2,-122
   217d4:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Write_Light(DEVICE_ADDR,CommandCode , data);
   217d8:	e0bffe03 	ldbu	r2,-8(fp)
   217dc:	e0ffff03 	ldbu	r3,-4(fp)
   217e0:	180d883a 	mov	r6,r3
   217e4:	100b883a 	mov	r5,r2
   217e8:	01001484 	movi	r4,82
   217ec:	00218c40 	call	218c4 <I2C_Write_Light>
   217f0:	e0bffe45 	stb	r2,-7(fp)

    return bPass;
   217f4:	e0bffe43 	ldbu	r2,-7(fp)
}
   217f8:	e037883a 	mov	sp,fp
   217fc:	dfc00117 	ldw	ra,4(sp)
   21800:	df000017 	ldw	fp,0(sp)
   21804:	dec00204 	addi	sp,sp,8
   21808:	f800283a 	ret

0002180c <Light_GetInterrupt>:

void Light_GetInterrupt(alt_u8 *data)
{
   2180c:	defffc04 	addi	sp,sp,-16
   21810:	dfc00315 	stw	ra,12(sp)
   21814:	df000215 	stw	fp,8(sp)
   21818:	df000204 	addi	fp,sp,8
   2181c:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | INTERRUPT_REG ;
   21820:	00bfe184 	movi	r2,-122
   21824:	e0bffe05 	stb	r2,-8(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
   21828:	e0bffe03 	ldbu	r2,-8(fp)
   2182c:	e1bfff17 	ldw	r6,-4(fp)
   21830:	100b883a 	mov	r5,r2
   21834:	01001484 	movi	r4,82
   21838:	00219a80 	call	219a8 <I2C_Read_Light>
   2183c:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)  *data = 0;
   21840:	e0bffe43 	ldbu	r2,-7(fp)
   21844:	1080005c 	xori	r2,r2,1
   21848:	10803fcc 	andi	r2,r2,255
   2184c:	10000226 	beq	r2,zero,21858 <Light_GetInterrupt+0x4c>
   21850:	e0bfff17 	ldw	r2,-4(fp)
   21854:	10000005 	stb	zero,0(r2)
}
   21858:	0001883a 	nop
   2185c:	e037883a 	mov	sp,fp
   21860:	dfc00117 	ldw	ra,4(sp)
   21864:	df000017 	ldw	fp,0(sp)
   21868:	dec00204 	addi	sp,sp,8
   2186c:	f800283a 	ret

00021870 <Light_SetTiming>:

bool Light_SetTiming(alt_u8 data)
{
   21870:	defffc04 	addi	sp,sp,-16
   21874:	dfc00315 	stw	ra,12(sp)
   21878:	df000215 	stw	fp,8(sp)
   2187c:	df000204 	addi	fp,sp,8
   21880:	2005883a 	mov	r2,r4
   21884:	e0bfff05 	stb	r2,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | TIMING_REG ;
   21888:	00bfe044 	movi	r2,-127
   2188c:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Write_Light( DEVICE_ADDR,CommandCode , data);
   21890:	e0bffe03 	ldbu	r2,-8(fp)
   21894:	e0ffff03 	ldbu	r3,-4(fp)
   21898:	180d883a 	mov	r6,r3
   2189c:	100b883a 	mov	r5,r2
   218a0:	01001484 	movi	r4,82
   218a4:	00218c40 	call	218c4 <I2C_Write_Light>
   218a8:	e0bffe45 	stb	r2,-7(fp)

    return bPass;
   218ac:	e0bffe43 	ldbu	r2,-7(fp)
}
   218b0:	e037883a 	mov	sp,fp
   218b4:	dfc00117 	ldw	ra,4(sp)
   218b8:	df000017 	ldw	fp,0(sp)
   218bc:	dec00204 	addi	sp,sp,8
   218c0:	f800283a 	ret

000218c4 <I2C_Write_Light>:

/////////////////////////////////////////////
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
   218c4:	defff904 	addi	sp,sp,-28
   218c8:	dfc00615 	stw	ra,24(sp)
   218cc:	df000515 	stw	fp,20(sp)
   218d0:	df000504 	addi	fp,sp,20
   218d4:	2807883a 	mov	r3,r5
   218d8:	3005883a 	mov	r2,r6
   218dc:	e13ffd05 	stb	r4,-12(fp)
   218e0:	e0fffe05 	stb	r3,-8(fp)
   218e4:	e0bfff05 	stb	r2,-4(fp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
   218e8:	d0a00017 	ldw	r2,-32768(gp)
   218ec:	1011883a 	mov	r8,r2
   218f0:	e0bffd03 	ldbu	r2,-12(fp)
   218f4:	10c03fcc 	andi	r3,r2,255
   218f8:	e13ffe03 	ldbu	r4,-8(fp)
   218fc:	e17fff04 	addi	r5,fp,-4
   21900:	00800044 	movi	r2,1
   21904:	d8800015 	stw	r2,0(sp)
   21908:	280f883a 	mov	r7,r5
   2190c:	200d883a 	mov	r6,r4
   21910:	180b883a 	mov	r5,r3
   21914:	4009883a 	mov	r4,r8
   21918:	002066c0 	call	2066c <OC_I2C_Write>
   2191c:	e0bffc05 	stb	r2,-16(fp)

    return bSuccess;
   21920:	e0bffc03 	ldbu	r2,-16(fp)


}
   21924:	e037883a 	mov	sp,fp
   21928:	dfc00117 	ldw	ra,4(sp)
   2192c:	df000017 	ldw	fp,0(sp)
   21930:	dec00204 	addi	sp,sp,8
   21934:	f800283a 	ret

00021938 <I2C_Write_Light16>:

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
   21938:	defff904 	addi	sp,sp,-28
   2193c:	dfc00615 	stw	ra,24(sp)
   21940:	df000515 	stw	fp,20(sp)
   21944:	df000504 	addi	fp,sp,20
   21948:	2007883a 	mov	r3,r4
   2194c:	2805883a 	mov	r2,r5
   21950:	e1bfff15 	stw	r6,-4(fp)
   21954:	e0fffd05 	stb	r3,-12(fp)
   21958:	e0bffe05 	stb	r2,-8(fp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
   2195c:	d0a00017 	ldw	r2,-32768(gp)
   21960:	1011883a 	mov	r8,r2
   21964:	e0bffd03 	ldbu	r2,-12(fp)
   21968:	10c03fcc 	andi	r3,r2,255
   2196c:	e13ffe03 	ldbu	r4,-8(fp)
   21970:	00800084 	movi	r2,2
   21974:	d8800015 	stw	r2,0(sp)
   21978:	e1ffff17 	ldw	r7,-4(fp)
   2197c:	200d883a 	mov	r6,r4
   21980:	180b883a 	mov	r5,r3
   21984:	4009883a 	mov	r4,r8
   21988:	002066c0 	call	2066c <OC_I2C_Write>
   2198c:	e0bffc05 	stb	r2,-16(fp)

    return bSuccess;
   21990:	e0bffc03 	ldbu	r2,-16(fp)


}
   21994:	e037883a 	mov	sp,fp
   21998:	dfc00117 	ldw	ra,4(sp)
   2199c:	df000017 	ldw	fp,0(sp)
   219a0:	dec00204 	addi	sp,sp,8
   219a4:	f800283a 	ret

000219a8 <I2C_Read_Light>:

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
   219a8:	defff904 	addi	sp,sp,-28
   219ac:	dfc00615 	stw	ra,24(sp)
   219b0:	df000515 	stw	fp,20(sp)
   219b4:	df000504 	addi	fp,sp,20
   219b8:	2007883a 	mov	r3,r4
   219bc:	2805883a 	mov	r2,r5
   219c0:	e1bfff15 	stw	r6,-4(fp)
   219c4:	e0fffd05 	stb	r3,-12(fp)
   219c8:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
   219cc:	d0a00017 	ldw	r2,-32768(gp)
   219d0:	1011883a 	mov	r8,r2
   219d4:	e0bffd03 	ldbu	r2,-12(fp)
   219d8:	10c03fcc 	andi	r3,r2,255
   219dc:	e13ffe03 	ldbu	r4,-8(fp)
   219e0:	00800044 	movi	r2,1
   219e4:	d8800015 	stw	r2,0(sp)
   219e8:	e1ffff17 	ldw	r7,-4(fp)
   219ec:	200d883a 	mov	r6,r4
   219f0:	180b883a 	mov	r5,r3
   219f4:	4009883a 	mov	r4,r8
   219f8:	002091c0 	call	2091c <OC_I2C_Read>
   219fc:	e0bffc05 	stb	r2,-16(fp)

    return bSuccess;
   21a00:	e0bffc03 	ldbu	r2,-16(fp)
}
   21a04:	e037883a 	mov	sp,fp
   21a08:	dfc00117 	ldw	ra,4(sp)
   21a0c:	df000017 	ldw	fp,0(sp)
   21a10:	dec00204 	addi	sp,sp,8
   21a14:	f800283a 	ret

00021a18 <Sensor_Report>:
#include "light_sensor.h"
#include "rh_temp.h"
#include "mpu9250.h"


void Sensor_Report(void){
   21a18:	deffec04 	addi	sp,sp,-80
   21a1c:	dfc01315 	stw	ra,76(sp)
   21a20:	df001215 	stw	fp,72(sp)
   21a24:	df001204 	addi	fp,sp,72
  	bool bPass;

  	////////////////////////////////
  	// report light sensor
  	alt_u16 light0 = 0, light1 = 0;
   21a28:	e03ff38d 	sth	zero,-50(fp)
   21a2c:	e03ff40d 	sth	zero,-48(fp)
  	bPass = Get_light(&light0, &light1);
   21a30:	e0fff404 	addi	r3,fp,-48
   21a34:	e0bff384 	addi	r2,fp,-50
   21a38:	180b883a 	mov	r5,r3
   21a3c:	1009883a 	mov	r4,r2
   21a40:	002163c0 	call	2163c <Get_light>
   21a44:	e0bff305 	stb	r2,-52(fp)
  	if(bPass){
   21a48:	e0bff303 	ldbu	r2,-52(fp)
   21a4c:	10000a26 	beq	r2,zero,21a78 <Sensor_Report+0x60>
  		printf("light0 = %d, light1 = %d\r\n", light0, light1);
   21a50:	e0bff38b 	ldhu	r2,-50(fp)
   21a54:	10bfffcc 	andi	r2,r2,65535
   21a58:	e0fff40b 	ldhu	r3,-48(fp)
   21a5c:	18ffffcc 	andi	r3,r3,65535
   21a60:	180d883a 	mov	r6,r3
   21a64:	100b883a 	mov	r5,r2
   21a68:	010000f4 	movhi	r4,3
   21a6c:	2110b904 	addi	r4,r4,17124
   21a70:	00271800 	call	27180 <printf>
   21a74:	00000306 	br	21a84 <Sensor_Report+0x6c>
  	}
  	else{
  		printf("get light0 and light1 values failed!\r\n");
   21a78:	010000f4 	movhi	r4,3
   21a7c:	2110c004 	addi	r4,r4,17152
   21a80:	002727c0 	call	2727c <puts>
  	}

  	////////////////////////////////
  	// report HDC1000 temperature & humidity sensor
  	float fTemperature, fHumidity;
  	bPass = RH_Temp_Sensor_Read(&fTemperature, &fHumidity);
   21a84:	e0fff604 	addi	r3,fp,-40
   21a88:	e0bff504 	addi	r2,fp,-44
   21a8c:	180b883a 	mov	r5,r3
   21a90:	1009883a 	mov	r4,r2
   21a94:	00230400 	call	23040 <RH_Temp_Sensor_Read>
   21a98:	e0bff305 	stb	r2,-52(fp)
  	if (bPass){
   21a9c:	e0bff303 	ldbu	r2,-52(fp)
   21aa0:	10001526 	beq	r2,zero,21af8 <Sensor_Report+0xe0>
		printf("Temperature: %.3f*C\r\n", fTemperature);
   21aa4:	e0bff517 	ldw	r2,-44(fp)
   21aa8:	1009883a 	mov	r4,r2
   21aac:	0026e340 	call	26e34 <__extendsfdf2>
   21ab0:	100d883a 	mov	r6,r2
   21ab4:	180f883a 	mov	r7,r3
   21ab8:	300b883a 	mov	r5,r6
   21abc:	380d883a 	mov	r6,r7
   21ac0:	010000f4 	movhi	r4,3
   21ac4:	2110ca04 	addi	r4,r4,17192
   21ac8:	00271800 	call	27180 <printf>
    	printf("Humidity: %.3f%%\r\n",fHumidity);
   21acc:	e0bff617 	ldw	r2,-40(fp)
   21ad0:	1009883a 	mov	r4,r2
   21ad4:	0026e340 	call	26e34 <__extendsfdf2>
   21ad8:	100d883a 	mov	r6,r2
   21adc:	180f883a 	mov	r7,r3
   21ae0:	300b883a 	mov	r5,r6
   21ae4:	380d883a 	mov	r6,r7
   21ae8:	010000f4 	movhi	r4,3
   21aec:	2110d004 	addi	r4,r4,17216
   21af0:	00271800 	call	27180 <printf>
   21af4:	00000306 	br	21b04 <Sensor_Report+0xec>
  	}else{
  		printf("Failed to ready Temperature/Humidity sensor!\r\n");
   21af8:	010000f4 	movhi	r4,3
   21afc:	2110d504 	addi	r4,r4,17236
   21b00:	002727c0 	call	2727c <puts>
  	////////////////////////////////
  	// report mpu9250 9-axis sensor
  	float ax, ay, az;
  	float gx, gy, gz;
  	float mx, my, mz;
  	getMotion9(&ax, &ay, &az, &gx, &gy, &gz, &mx, &my, &mz);
   21b04:	e1bffa04 	addi	r6,fp,-24
   21b08:	e17ff904 	addi	r5,fp,-28
   21b0c:	e13ff804 	addi	r4,fp,-32
   21b10:	e0fff704 	addi	r3,fp,-36
   21b14:	e0bfff04 	addi	r2,fp,-4
   21b18:	d8800415 	stw	r2,16(sp)
   21b1c:	e0bffe04 	addi	r2,fp,-8
   21b20:	d8800315 	stw	r2,12(sp)
   21b24:	e0bffd04 	addi	r2,fp,-12
   21b28:	d8800215 	stw	r2,8(sp)
   21b2c:	e0bffc04 	addi	r2,fp,-16
   21b30:	d8800115 	stw	r2,4(sp)
   21b34:	e0bffb04 	addi	r2,fp,-20
   21b38:	d8800015 	stw	r2,0(sp)
   21b3c:	300f883a 	mov	r7,r6
   21b40:	280d883a 	mov	r6,r5
   21b44:	200b883a 	mov	r5,r4
   21b48:	1809883a 	mov	r4,r3
   21b4c:	0022d180 	call	22d18 <getMotion9>
  	//printf("9-axis info:\r\n");
  	//printf("ax = %.3f, ay = %.3f, az = %.3f\r\n", ax, ay, az);
  	//printf("gx = %.3f, gy = %.3f, gz = %.3f\r\n", gx, gy, gz);
  	//printf("mx = %.3f, my = %.3f, mz = %.3f\r\n", mx, my, mz);

  	printf("\r\n");
   21b50:	010000f4 	movhi	r4,3
   21b54:	2110e104 	addi	r4,r4,17284
   21b58:	002727c0 	call	2727c <puts>
}
   21b5c:	0001883a 	nop
   21b60:	e037883a 	mov	sp,fp
   21b64:	dfc00117 	ldw	ra,4(sp)
   21b68:	df000017 	ldw	fp,0(sp)
   21b6c:	dec00204 	addi	sp,sp,8
   21b70:	f800283a 	ret

00021b74 <main>:

int main()
{
   21b74:	defffd04 	addi	sp,sp,-12
   21b78:	dfc00215 	stw	ra,8(sp)
   21b7c:	df000115 	stw	fp,4(sp)
   21b80:	df000104 	addi	fp,sp,4
	printf("Welcome to DE10_NANO RFS_SENSOR DEMO!\r\n");
   21b84:	010000f4 	movhi	r4,3
   21b88:	2110e204 	addi	r4,r4,17288
   21b8c:	002727c0 	call	2727c <puts>

  	bool bPass = FALSE;
   21b90:	e03fff05 	stb	zero,-4(fp)

  	////////////////////////////////////
  	// init light sensor i2c and power on
  	Light_Init(LIGHT_I2C_OPENCORES_BASE);
   21b94:	01000134 	movhi	r4,4
   21b98:	21040804 	addi	r4,r4,4128
   21b9c:	00212b40 	call	212b4 <Light_Init>
  	bPass = Light_PowerSwitch(TRUE);
   21ba0:	01000044 	movi	r4,1
   21ba4:	00213dc0 	call	213dc <Light_PowerSwitch>
   21ba8:	e0bfff05 	stb	r2,-4(fp)
  	if(bPass)
   21bac:	e0bfff03 	ldbu	r2,-4(fp)
   21bb0:	10000426 	beq	r2,zero,21bc4 <main+0x50>
  		printf("light sensor power up successful!\r\n");
   21bb4:	010000f4 	movhi	r4,3
   21bb8:	2110ec04 	addi	r4,r4,17328
   21bbc:	002727c0 	call	2727c <puts>
   21bc0:	00000306 	br	21bd0 <main+0x5c>
  	else
  		printf("light sensor power up failed!\r\n");
   21bc4:	010000f4 	movhi	r4,3
   21bc8:	2110f504 	addi	r4,r4,17364
   21bcc:	002727c0 	call	2727c <puts>

  	////////////////////////////////////
  	// init HDC1000: temperature and humidity sensor
  	RH_Temp_Init(RH_TEMP_I2C_OPENCORES_BASE);
   21bd0:	01000134 	movhi	r4,4
   21bd4:	21040004 	addi	r4,r4,4096
   21bd8:	0022ec00 	call	22ec0 <RH_Temp_Init>
  	bPass = RH_Temp_Sensor_Init();
   21bdc:	00230040 	call	23004 <RH_Temp_Sensor_Init>
   21be0:	e0bfff05 	stb	r2,-4(fp)
  	if(bPass)
   21be4:	e0bfff03 	ldbu	r2,-4(fp)
   21be8:	10000426 	beq	r2,zero,21bfc <main+0x88>
  		printf("Init HDC1000 successful!\r\n");
   21bec:	010000f4 	movhi	r4,3
   21bf0:	2110fd04 	addi	r4,r4,17396
   21bf4:	002727c0 	call	2727c <puts>
   21bf8:	00000306 	br	21c08 <main+0x94>
  	else
  		printf("Init HDC1000 failed!\r\n");
   21bfc:	010000f4 	movhi	r4,3
   21c00:	21110404 	addi	r4,r4,17424
   21c04:	002727c0 	call	2727c <puts>



  	////////////////////////////////////
  	//init MPU9250 9-axis sensor
  	MPU9250_Init(MPU_I2C_OPENCORES_BASE);
   21c08:	01000134 	movhi	r4,4
   21c0c:	21041004 	addi	r4,r4,4160
   21c10:	0021c380 	call	21c38 <MPU9250_Init>
  	MPU9250_initialize();
   21c14:	00220040 	call	22004 <MPU9250_initialize>
  	printf("\r\n");
   21c18:	010000f4 	movhi	r4,3
   21c1c:	2110e104 	addi	r4,r4,17284
   21c20:	002727c0 	call	2727c <puts>


  	while(1){ // report every second
  		Sensor_Report();
   21c24:	0021a180 	call	21a18 <Sensor_Report>
  		usleep(1000*1000);
   21c28:	010003f4 	movhi	r4,15
   21c2c:	21109004 	addi	r4,r4,16960
   21c30:	00320640 	call	32064 <usleep>

  	}
   21c34:	003ffb06 	br	21c24 <__alt_data_end+0xfffe2824>

00021c38 <MPU9250_Init>:
#include "terasic_includes.h"

#define G_SI 9.80665

void MPU9250_Init(alt_u32 I2C_Controller_Base)
{
   21c38:	defffb04 	addi	sp,sp,-20
   21c3c:	dfc00415 	stw	ra,16(sp)
   21c40:	df000315 	stw	fp,12(sp)
   21c44:	df000304 	addi	fp,sp,12
   21c48:	e13fff15 	stw	r4,-4(fp)
	const int ref_clk = 50*1000*1000; // 50Mhz
   21c4c:	0080bef4 	movhi	r2,763
   21c50:	10bc2004 	addi	r2,r2,-3968
   21c54:	e0bffd15 	stw	r2,-12(fp)
	const int i2c_clk = 400*1000; // 400KHz
   21c58:	008001b4 	movhi	r2,6
   21c5c:	1086a004 	addi	r2,r2,6784
   21c60:	e0bffe15 	stw	r2,-8(fp)
//	MPU9250_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);
   21c64:	e0bfff17 	ldw	r2,-4(fp)
   21c68:	e1bffe17 	ldw	r6,-8(fp)
   21c6c:	e17ffd17 	ldw	r5,-12(fp)
   21c70:	1009883a 	mov	r4,r2
   21c74:	00203980 	call	20398 <oc_i2c_init_ex>
}
   21c78:	0001883a 	nop
   21c7c:	e037883a 	mov	sp,fp
   21c80:	dfc00117 	ldw	ra,4(sp)
   21c84:	df000017 	ldw	fp,0(sp)
   21c88:	dec00204 	addi	sp,sp,8
   21c8c:	f800283a 	ret

00021c90 <WriteReg>:
                                    REGISTER READ & WRITE
usage: use these methods to read and write MPU9250 registers over SPI
-----------------------------------------------------------------------------------------------*/

unsigned int WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
   21c90:	defffb04 	addi	sp,sp,-20
   21c94:	dfc00415 	stw	ra,16(sp)
   21c98:	df000315 	stw	fp,12(sp)
   21c9c:	df000304 	addi	fp,sp,12
   21ca0:	2007883a 	mov	r3,r4
   21ca4:	2805883a 	mov	r2,r5
   21ca8:	e0fffe05 	stb	r3,-8(fp)
   21cac:	e0bfff05 	stb	r2,-4(fp)
#if 1
	if (WriteAddr & READ_FLAG)
   21cb0:	e0bffe03 	ldbu	r2,-8(fp)
   21cb4:	10803fcc 	andi	r2,r2,255
   21cb8:	1080201c 	xori	r2,r2,128
   21cbc:	10bfe004 	addi	r2,r2,-128
   21cc0:	1000070e 	bge	r2,zero,21ce0 <WriteReg+0x50>
		return ReadReg(WriteAddr, WriteData);
   21cc4:	e0bffe03 	ldbu	r2,-8(fp)
   21cc8:	e0ffff03 	ldbu	r3,-4(fp)
   21ccc:	18c03fcc 	andi	r3,r3,255
   21cd0:	180b883a 	mov	r5,r3
   21cd4:	1009883a 	mov	r4,r2
   21cd8:	0021d200 	call	21d20 <ReadReg>
   21cdc:	00000b06 	br	21d0c <WriteReg+0x7c>
	OC_I2C_Write(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &WriteData, sizeof(WriteData));
   21ce0:	e0fffe03 	ldbu	r3,-8(fp)
   21ce4:	e13fff04 	addi	r4,fp,-4
   21ce8:	00800044 	movi	r2,1
   21cec:	d8800015 	stw	r2,0(sp)
   21cf0:	200f883a 	mov	r7,r4
   21cf4:	180d883a 	mov	r6,r3
   21cf8:	01403404 	movi	r5,208
   21cfc:	01000134 	movhi	r4,4
   21d00:	21041004 	addi	r4,r4,4160
   21d04:	002066c0 	call	2066c <OC_I2C_Write>
	return 0x00;
   21d08:	0005883a 	mov	r2,zero

	SPIdev::transfer("/dev/spidev0.1", tx, rx, 2);

    return rx[1];
#endif
}
   21d0c:	e037883a 	mov	sp,fp
   21d10:	dfc00117 	ldw	ra,4(sp)
   21d14:	df000017 	ldw	fp,0(sp)
   21d18:	dec00204 	addi	sp,sp,8
   21d1c:	f800283a 	ret

00021d20 <ReadReg>:

//-----------------------------------------------------------------------------------------------

unsigned int  ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
   21d20:	defffa04 	addi	sp,sp,-24
   21d24:	dfc00515 	stw	ra,20(sp)
   21d28:	df000415 	stw	fp,16(sp)
   21d2c:	df000404 	addi	fp,sp,16
   21d30:	2007883a 	mov	r3,r4
   21d34:	2805883a 	mov	r2,r5
   21d38:	e0fffe05 	stb	r3,-8(fp)
   21d3c:	e0bfff05 	stb	r2,-4(fp)
#if 1
	unsigned char ReadData;
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &ReadData, sizeof(ReadData));
   21d40:	e0fffe03 	ldbu	r3,-8(fp)
   21d44:	00800044 	movi	r2,1
   21d48:	d8800015 	stw	r2,0(sp)
   21d4c:	e1fffd04 	addi	r7,fp,-12
   21d50:	180d883a 	mov	r6,r3
   21d54:	01403404 	movi	r5,208
   21d58:	01000134 	movhi	r4,4
   21d5c:	21041004 	addi	r4,r4,4160
   21d60:	002091c0 	call	2091c <OC_I2C_Read>
	return ReadData;
   21d64:	e0bffd03 	ldbu	r2,-12(fp)
   21d68:	10803fcc 	andi	r2,r2,255
#else
    return WriteReg(WriteAddr | READ_FLAG, WriteData);
#endif
}
   21d6c:	e037883a 	mov	sp,fp
   21d70:	dfc00117 	ldw	ra,4(sp)
   21d74:	df000017 	ldw	fp,0(sp)
   21d78:	dec00204 	addi	sp,sp,8
   21d7c:	f800283a 	ret

00021d80 <ReadRegs>:

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
   21d80:	defffa04 	addi	sp,sp,-24
   21d84:	dfc00515 	stw	ra,20(sp)
   21d88:	df000415 	stw	fp,16(sp)
   21d8c:	df000404 	addi	fp,sp,16
   21d90:	2005883a 	mov	r2,r4
   21d94:	e17ffe15 	stw	r5,-8(fp)
   21d98:	e1bfff15 	stw	r6,-4(fp)
   21d9c:	e0bffd05 	stb	r2,-12(fp)
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
   21da0:	e0fffd03 	ldbu	r3,-12(fp)
   21da4:	e0bfff17 	ldw	r2,-4(fp)
   21da8:	d8800015 	stw	r2,0(sp)
   21dac:	e1fffe17 	ldw	r7,-8(fp)
   21db0:	180d883a 	mov	r6,r3
   21db4:	01403404 	movi	r5,208
   21db8:	01000134 	movhi	r4,4
   21dbc:	21041004 	addi	r4,r4,4160
   21dc0:	002091c0 	call	2091c <OC_I2C_Read>
    for(i=0; i<Bytes; i++)
    	ReadBuf[i] = rx[i + 1];

    usleep(50);
#endif
}
   21dc4:	0001883a 	nop
   21dc8:	e037883a 	mov	sp,fp
   21dcc:	dfc00117 	ldw	ra,4(sp)
   21dd0:	df000017 	ldw	fp,0(sp)
   21dd4:	dec00204 	addi	sp,sp,8
   21dd8:	f800283a 	ret

00021ddc <set_acc_scale>:
BITS_FS_16G
returns the range set (2,4,8 or 16)
-----------------------------------------------------------------------------------------------*/

unsigned int set_acc_scale(int scale)
{
   21ddc:	defffc04 	addi	sp,sp,-16
   21de0:	dfc00315 	stw	ra,12(sp)
   21de4:	df000215 	stw	fp,8(sp)
   21de8:	df000204 	addi	fp,sp,8
   21dec:	e13fff15 	stw	r4,-4(fp)
	unsigned int temp_scale;
//	I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, scale);
    WriteReg(MPUREG_ACCEL_CONFIG, scale);
   21df0:	e0bfff17 	ldw	r2,-4(fp)
   21df4:	10803fcc 	andi	r2,r2,255
   21df8:	100b883a 	mov	r5,r2
   21dfc:	01000704 	movi	r4,28
   21e00:	0021c900 	call	21c90 <WriteReg>

    switch (scale){
   21e04:	e0bfff17 	ldw	r2,-4(fp)
   21e08:	10c00220 	cmpeqi	r3,r2,8
   21e0c:	18000c1e 	bne	r3,zero,21e40 <set_acc_scale+0x64>
   21e10:	10c00248 	cmpgei	r3,r2,9
   21e14:	1800021e 	bne	r3,zero,21e20 <set_acc_scale+0x44>
   21e18:	10000626 	beq	r2,zero,21e34 <set_acc_scale+0x58>
   21e1c:	00001106 	br	21e64 <set_acc_scale+0x88>
   21e20:	10c00420 	cmpeqi	r3,r2,16
   21e24:	1800091e 	bne	r3,zero,21e4c <set_acc_scale+0x70>
   21e28:	10800620 	cmpeqi	r2,r2,24
   21e2c:	10000a1e 	bne	r2,zero,21e58 <set_acc_scale+0x7c>
   21e30:	00000c06 	br	21e64 <set_acc_scale+0x88>
        case BITS_FS_2G:
            acc_divider=16384;
   21e34:	0091a034 	movhi	r2,18048
   21e38:	d0a6cf15 	stw	r2,-25796(gp)
        break;
   21e3c:	00000906 	br	21e64 <set_acc_scale+0x88>
        case BITS_FS_4G:
            acc_divider=8192;
   21e40:	00918034 	movhi	r2,17920
   21e44:	d0a6cf15 	stw	r2,-25796(gp)
        break;
   21e48:	00000606 	br	21e64 <set_acc_scale+0x88>
        case BITS_FS_8G:
            acc_divider=4096;
   21e4c:	00916034 	movhi	r2,17792
   21e50:	d0a6cf15 	stw	r2,-25796(gp)
        break;
   21e54:	00000306 	br	21e64 <set_acc_scale+0x88>
        case BITS_FS_16G:
            acc_divider=2048;
   21e58:	00914034 	movhi	r2,17664
   21e5c:	d0a6cf15 	stw	r2,-25796(gp)
        break;
   21e60:	0001883a 	nop
    }
//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
	temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
   21e64:	000b883a 	mov	r5,zero
   21e68:	01002704 	movi	r4,156
   21e6c:	0021c900 	call	21c90 <WriteReg>
   21e70:	e0bffe15 	stw	r2,-8(fp)

    switch (temp_scale){
   21e74:	e0bffe17 	ldw	r2,-8(fp)
   21e78:	10c00220 	cmpeqi	r3,r2,8
   21e7c:	18000c1e 	bne	r3,zero,21eb0 <set_acc_scale+0xd4>
   21e80:	10c00268 	cmpgeui	r3,r2,9
   21e84:	1800021e 	bne	r3,zero,21e90 <set_acc_scale+0xb4>
   21e88:	10000626 	beq	r2,zero,21ea4 <set_acc_scale+0xc8>
   21e8c:	00001106 	br	21ed4 <set_acc_scale+0xf8>
   21e90:	10c00420 	cmpeqi	r3,r2,16
   21e94:	1800091e 	bne	r3,zero,21ebc <set_acc_scale+0xe0>
   21e98:	10800620 	cmpeqi	r2,r2,24
   21e9c:	10000a1e 	bne	r2,zero,21ec8 <set_acc_scale+0xec>
   21ea0:	00000c06 	br	21ed4 <set_acc_scale+0xf8>
        case BITS_FS_2G:
            temp_scale=2;
   21ea4:	00800084 	movi	r2,2
   21ea8:	e0bffe15 	stw	r2,-8(fp)
        break;
   21eac:	00000906 	br	21ed4 <set_acc_scale+0xf8>
        case BITS_FS_4G:
            temp_scale=4;
   21eb0:	00800104 	movi	r2,4
   21eb4:	e0bffe15 	stw	r2,-8(fp)
        break;
   21eb8:	00000606 	br	21ed4 <set_acc_scale+0xf8>
        case BITS_FS_8G:
            temp_scale=8;
   21ebc:	00800204 	movi	r2,8
   21ec0:	e0bffe15 	stw	r2,-8(fp)
        break;
   21ec4:	00000306 	br	21ed4 <set_acc_scale+0xf8>
        case BITS_FS_16G:
            temp_scale=16;
   21ec8:	00800404 	movi	r2,16
   21ecc:	e0bffe15 	stw	r2,-8(fp)
        break;
   21ed0:	0001883a 	nop
    }
    return temp_scale;
   21ed4:	e0bffe17 	ldw	r2,-8(fp)
}
   21ed8:	e037883a 	mov	sp,fp
   21edc:	dfc00117 	ldw	ra,4(sp)
   21ee0:	df000017 	ldw	fp,0(sp)
   21ee4:	dec00204 	addi	sp,sp,8
   21ee8:	f800283a 	ret

00021eec <set_gyro_scale>:
BITS_FS_2000DPS
returns the range set (250,500,1000 or 2000)
-----------------------------------------------------------------------------------------------*/

unsigned int set_gyro_scale(int scale)
{
   21eec:	defffc04 	addi	sp,sp,-16
   21ef0:	dfc00315 	stw	ra,12(sp)
   21ef4:	df000215 	stw	fp,8(sp)
   21ef8:	df000204 	addi	fp,sp,8
   21efc:	e13fff15 	stw	r4,-4(fp)
    unsigned int temp_scale;
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, scale);
    WriteReg(MPUREG_GYRO_CONFIG, scale);
   21f00:	e0bfff17 	ldw	r2,-4(fp)
   21f04:	10803fcc 	andi	r2,r2,255
   21f08:	100b883a 	mov	r5,r2
   21f0c:	010006c4 	movi	r4,27
   21f10:	0021c900 	call	21c90 <WriteReg>
    switch (scale){
   21f14:	e0bfff17 	ldw	r2,-4(fp)
   21f18:	10c00220 	cmpeqi	r3,r2,8
   21f1c:	18000c1e 	bne	r3,zero,21f50 <set_gyro_scale+0x64>
   21f20:	10c00248 	cmpgei	r3,r2,9
   21f24:	1800021e 	bne	r3,zero,21f30 <set_gyro_scale+0x44>
   21f28:	10000626 	beq	r2,zero,21f44 <set_gyro_scale+0x58>
   21f2c:	00001306 	br	21f7c <set_gyro_scale+0x90>
   21f30:	10c00420 	cmpeqi	r3,r2,16
   21f34:	1800091e 	bne	r3,zero,21f5c <set_gyro_scale+0x70>
   21f38:	10800620 	cmpeqi	r2,r2,24
   21f3c:	10000b1e 	bne	r2,zero,21f6c <set_gyro_scale+0x80>
   21f40:	00000e06 	br	21f7c <set_gyro_scale+0x90>
        case BITS_FS_250DPS:
            gyro_divider=131;
   21f44:	0090c0f4 	movhi	r2,17155
   21f48:	d0a6ce15 	stw	r2,-25800(gp)
        break;
   21f4c:	00000b06 	br	21f7c <set_gyro_scale+0x90>
        case BITS_FS_500DPS:
            gyro_divider=65.5;
   21f50:	0090a0f4 	movhi	r2,17027
   21f54:	d0a6ce15 	stw	r2,-25800(gp)
        break;
   21f58:	00000806 	br	21f7c <set_gyro_scale+0x90>
        case BITS_FS_1000DPS:
            gyro_divider=32.8;
   21f5c:	009080f4 	movhi	r2,16899
   21f60:	108cccc4 	addi	r2,r2,13107
   21f64:	d0a6ce15 	stw	r2,-25800(gp)
        break;
   21f68:	00000406 	br	21f7c <set_gyro_scale+0x90>
        case BITS_FS_2000DPS:
            gyro_divider=16.4;
   21f6c:	009060f4 	movhi	r2,16771
   21f70:	108cccc4 	addi	r2,r2,13107
   21f74:	d0a6ce15 	stw	r2,-25800(gp)
        break;
   21f78:	0001883a 	nop
    }
//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_GYRO_CONFIG|READ_FLAG, 0x00);
   21f7c:	000b883a 	mov	r5,zero
   21f80:	010026c4 	movi	r4,155
   21f84:	0021c900 	call	21c90 <WriteReg>
   21f88:	e0bffe15 	stw	r2,-8(fp)
    switch (temp_scale){
   21f8c:	e0bffe17 	ldw	r2,-8(fp)
   21f90:	10c00220 	cmpeqi	r3,r2,8
   21f94:	18000c1e 	bne	r3,zero,21fc8 <set_gyro_scale+0xdc>
   21f98:	10c00268 	cmpgeui	r3,r2,9
   21f9c:	1800021e 	bne	r3,zero,21fa8 <set_gyro_scale+0xbc>
   21fa0:	10000626 	beq	r2,zero,21fbc <set_gyro_scale+0xd0>
   21fa4:	00001106 	br	21fec <set_gyro_scale+0x100>
   21fa8:	10c00420 	cmpeqi	r3,r2,16
   21fac:	1800091e 	bne	r3,zero,21fd4 <set_gyro_scale+0xe8>
   21fb0:	10800620 	cmpeqi	r2,r2,24
   21fb4:	10000a1e 	bne	r2,zero,21fe0 <set_gyro_scale+0xf4>
   21fb8:	00000c06 	br	21fec <set_gyro_scale+0x100>
        case BITS_FS_250DPS:
            temp_scale=250;
   21fbc:	00803e84 	movi	r2,250
   21fc0:	e0bffe15 	stw	r2,-8(fp)
        break;
   21fc4:	00000906 	br	21fec <set_gyro_scale+0x100>
        case BITS_FS_500DPS:
            temp_scale=500;
   21fc8:	00807d04 	movi	r2,500
   21fcc:	e0bffe15 	stw	r2,-8(fp)
        break;
   21fd0:	00000606 	br	21fec <set_gyro_scale+0x100>
        case BITS_FS_1000DPS:
            temp_scale=1000;
   21fd4:	0080fa04 	movi	r2,1000
   21fd8:	e0bffe15 	stw	r2,-8(fp)
        break;
   21fdc:	00000306 	br	21fec <set_gyro_scale+0x100>
        case BITS_FS_2000DPS:
            temp_scale=2000;
   21fe0:	0081f404 	movi	r2,2000
   21fe4:	e0bffe15 	stw	r2,-8(fp)
        break;
   21fe8:	0001883a 	nop
    }
    return temp_scale;
   21fec:	e0bffe17 	ldw	r2,-8(fp)
}
   21ff0:	e037883a 	mov	sp,fp
   21ff4:	dfc00117 	ldw	ra,4(sp)
   21ff8:	df000017 	ldw	fp,0(sp)
   21ffc:	dec00204 	addi	sp,sp,8
   22000:	f800283a 	ret

00022004 <MPU9250_initialize>:
-----------------------------------------------------------------------------------------------*/

#define MPU_InitRegNum 16

bool MPU9250_initialize()
{
   22004:	defff404 	addi	sp,sp,-48
   22008:	dfc00b15 	stw	ra,44(sp)
   2200c:	df000a15 	stw	fp,40(sp)
   22010:	df000a04 	addi	fp,sp,40
	alt_u8 i = 0;
   22014:	e03ff605 	stb	zero,-40(fp)
	int low_pass_filter = 0x01;
   22018:	00800044 	movi	r2,1
   2201c:	e0bff715 	stw	r2,-36(fp)
	alt_u8 MPU_Init_Data[MPU_InitRegNum][2] =
   22020:	00800044 	movi	r2,1
   22024:	e0bff805 	stb	r2,-32(fp)
   22028:	00801ac4 	movi	r2,107
   2202c:	e0bff845 	stb	r2,-31(fp)
   22030:	e03ff885 	stb	zero,-30(fp)
   22034:	00801b04 	movi	r2,108
   22038:	e0bff8c5 	stb	r2,-29(fp)
   2203c:	e0bff717 	ldw	r2,-36(fp)
   22040:	e0bff905 	stb	r2,-28(fp)
   22044:	00800684 	movi	r2,26
   22048:	e0bff945 	stb	r2,-27(fp)
   2204c:	00800604 	movi	r2,24
   22050:	e0bff985 	stb	r2,-26(fp)
   22054:	008006c4 	movi	r2,27
   22058:	e0bff9c5 	stb	r2,-25(fp)
   2205c:	00800204 	movi	r2,8
   22060:	e0bffa05 	stb	r2,-24(fp)
   22064:	00800704 	movi	r2,28
   22068:	e0bffa45 	stb	r2,-23(fp)
   2206c:	00800244 	movi	r2,9
   22070:	e0bffa85 	stb	r2,-22(fp)
   22074:	00800744 	movi	r2,29
   22078:	e0bffac5 	stb	r2,-21(fp)
   2207c:	00800c04 	movi	r2,48
   22080:	e0bffb05 	stb	r2,-20(fp)
   22084:	00800dc4 	movi	r2,55
   22088:	e0bffb45 	stb	r2,-19(fp)
   2208c:	00800804 	movi	r2,32
   22090:	e0bffb85 	stb	r2,-18(fp)
   22094:	00801a84 	movi	r2,106
   22098:	e0bffbc5 	stb	r2,-17(fp)
   2209c:	00800344 	movi	r2,13
   220a0:	e0bffc05 	stb	r2,-16(fp)
   220a4:	00800904 	movi	r2,36
   220a8:	e0bffc45 	stb	r2,-15(fp)
   220ac:	00800304 	movi	r2,12
   220b0:	e0bffc85 	stb	r2,-14(fp)
   220b4:	00800944 	movi	r2,37
   220b8:	e0bffcc5 	stb	r2,-13(fp)
   220bc:	008002c4 	movi	r2,11
   220c0:	e0bffd05 	stb	r2,-12(fp)
   220c4:	00800984 	movi	r2,38
   220c8:	e0bffd45 	stb	r2,-11(fp)
   220cc:	00800044 	movi	r2,1
   220d0:	e0bffd85 	stb	r2,-10(fp)
   220d4:	008018c4 	movi	r2,99
   220d8:	e0bffdc5 	stb	r2,-9(fp)
   220dc:	00bfe044 	movi	r2,-127
   220e0:	e0bffe05 	stb	r2,-8(fp)
   220e4:	008009c4 	movi	r2,39
   220e8:	e0bffe45 	stb	r2,-7(fp)
   220ec:	00800284 	movi	r2,10
   220f0:	e0bffe85 	stb	r2,-6(fp)
   220f4:	00800984 	movi	r2,38
   220f8:	e0bffec5 	stb	r2,-5(fp)
   220fc:	00800484 	movi	r2,18
   22100:	e0bfff05 	stb	r2,-4(fp)
   22104:	008018c4 	movi	r2,99
   22108:	e0bfff45 	stb	r2,-3(fp)
   2210c:	00bfe044 	movi	r2,-127
   22110:	e0bfff85 	stb	r2,-2(fp)
   22114:	008009c4 	movi	r2,39
   22118:	e0bfffc5 	stb	r2,-1(fp)
	        {AK8963_CNTL1, MPUREG_I2C_SLV0_REG}, //I2C slave 0 register address from where to begin data transfer
	        {0x12, MPUREG_I2C_SLV0_DO}, // Register value to continuous measurement in 16bit
	        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte
	};

	for(i = 0; i < MPU_InitRegNum; i++)
   2211c:	e03ff605 	stb	zero,-40(fp)
   22120:	00001706 	br	22180 <MPU9250_initialize+0x17c>
	{
//		I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
		WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
   22124:	e0bff603 	ldbu	r2,-40(fp)
   22128:	1085883a 	add	r2,r2,r2
   2212c:	e0fff604 	addi	r3,fp,-40
   22130:	1885883a 	add	r2,r3,r2
   22134:	10800244 	addi	r2,r2,9
   22138:	10800003 	ldbu	r2,0(r2)
   2213c:	10c03fcc 	andi	r3,r2,255
   22140:	e0bff603 	ldbu	r2,-40(fp)
   22144:	1085883a 	add	r2,r2,r2
   22148:	e13ff604 	addi	r4,fp,-40
   2214c:	2085883a 	add	r2,r4,r2
   22150:	10800204 	addi	r2,r2,8
   22154:	10800003 	ldbu	r2,0(r2)
   22158:	10803fcc 	andi	r2,r2,255
   2215c:	100b883a 	mov	r5,r2
   22160:	1809883a 	mov	r4,r3
   22164:	0021c900 	call	21c90 <WriteReg>
	    usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
   22168:	010000b4 	movhi	r4,2
   2216c:	2121a804 	addi	r4,r4,-31072
   22170:	00320640 	call	32064 <usleep>
	        {AK8963_CNTL1, MPUREG_I2C_SLV0_REG}, //I2C slave 0 register address from where to begin data transfer
	        {0x12, MPUREG_I2C_SLV0_DO}, // Register value to continuous measurement in 16bit
	        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte
	};

	for(i = 0; i < MPU_InitRegNum; i++)
   22174:	e0bff603 	ldbu	r2,-40(fp)
   22178:	10800044 	addi	r2,r2,1
   2217c:	e0bff605 	stb	r2,-40(fp)
   22180:	e0bff603 	ldbu	r2,-40(fp)
   22184:	10800430 	cmpltui	r2,r2,16
   22188:	103fe61e 	bne	r2,zero,22124 <__alt_data_end+0xfffe2d24>
//		I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
		WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
	    usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
	}

	set_acc_scale(BITS_FS_16G);
   2218c:	01000604 	movi	r4,24
   22190:	0021ddc0 	call	21ddc <set_acc_scale>
	set_gyro_scale(BITS_FS_2000DPS);
   22194:	01000604 	movi	r4,24
   22198:	0021eec0 	call	21eec <set_gyro_scale>

	calib_mag();
   2219c:	00222b80 	call	222b8 <calib_mag>

	return 0;
   221a0:	0005883a 	mov	r2,zero
}
   221a4:	e037883a 	mov	sp,fp
   221a8:	dfc00117 	ldw	ra,4(sp)
   221ac:	df000017 	ldw	fp,0(sp)
   221b0:	dec00204 	addi	sp,sp,8
   221b4:	f800283a 	ret

000221b8 <calib_acc>:
2 -> Z axis
returns Factory Trim value
-----------------------------------------------------------------------------------------------*/

void calib_acc()
{
   221b8:	defffc04 	addi	sp,sp,-16
   221bc:	dfc00315 	stw	ra,12(sp)
   221c0:	df000215 	stw	fp,8(sp)
   221c4:	df000204 	addi	fp,sp,8
	alt_u8 response[4];
    int temp_scale;
    //READ CURRENT ACC SCALE

//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
   221c8:	000b883a 	mov	r5,zero
   221cc:	01002704 	movi	r4,156
   221d0:	0021c900 	call	21c90 <WriteReg>
   221d4:	e0bffe15 	stw	r2,-8(fp)
    set_acc_scale(BITS_FS_8G);
   221d8:	01000404 	movi	r4,16
   221dc:	0021ddc0 	call	21ddc <set_acc_scale>
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_SELF_TEST_X, response, 4);
    ReadRegs(MPUREG_SELF_TEST_X,response,4);
   221e0:	e0bfff04 	addi	r2,fp,-4
   221e4:	01800104 	movi	r6,4
   221e8:	100b883a 	mov	r5,r2
   221ec:	01000344 	movi	r4,13
   221f0:	0021d800 	call	21d80 <ReadRegs>
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
   221f4:	e0bfff03 	ldbu	r2,-4(fp)
   221f8:	10c03fcc 	andi	r3,r2,255
   221fc:	00802a74 	movhi	r2,169
   22200:	1097d804 	addi	r2,r2,24416
   22204:	1884703a 	and	r2,r3,r2
   22208:	1007d0fa 	srai	r3,r2,3
   2220c:	e0bfffc3 	ldbu	r2,-1(fp)
   22210:	10803fcc 	andi	r2,r2,255
   22214:	10a4000c 	andi	r2,r2,36864
   22218:	1005d13a 	srai	r2,r2,4
   2221c:	1886b03a 	or	r3,r3,r2
   22220:	00800134 	movhi	r2,4
   22224:	10a01304 	addi	r2,r2,-32692
   22228:	10c00015 	stw	r3,0(r2)
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
   2222c:	e0bfff43 	ldbu	r2,-3(fp)
   22230:	10c03fcc 	andi	r3,r2,255
   22234:	00802a74 	movhi	r2,169
   22238:	1097d804 	addi	r2,r2,24416
   2223c:	1884703a 	and	r2,r3,r2
   22240:	1007d0fa 	srai	r3,r2,3
   22244:	e0bfffc3 	ldbu	r2,-1(fp)
   22248:	10803fcc 	andi	r2,r2,255
   2224c:	1080900c 	andi	r2,r2,576
   22250:	1005d0ba 	srai	r2,r2,2
   22254:	1886b03a 	or	r3,r3,r2
   22258:	00800134 	movhi	r2,4
   2225c:	10a01304 	addi	r2,r2,-32692
   22260:	10c00115 	stw	r3,4(r2)
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
   22264:	e0bfff83 	ldbu	r2,-2(fp)
   22268:	10c03fcc 	andi	r3,r2,255
   2226c:	00802a74 	movhi	r2,169
   22270:	1097d804 	addi	r2,r2,24416
   22274:	1884703a 	and	r2,r3,r2
   22278:	1007d0fa 	srai	r3,r2,3
   2227c:	e0bfffc3 	ldbu	r2,-1(fp)
   22280:	10803fcc 	andi	r2,r2,255
   22284:	1080024c 	andi	r2,r2,9
   22288:	1886b03a 	or	r3,r3,r2
   2228c:	00800134 	movhi	r2,4
   22290:	10a01304 	addi	r2,r2,-32692
   22294:	10c00215 	stw	r3,8(r2)

    set_acc_scale(temp_scale);
   22298:	e13ffe17 	ldw	r4,-8(fp)
   2229c:	0021ddc0 	call	21ddc <set_acc_scale>
}
   222a0:	0001883a 	nop
   222a4:	e037883a 	mov	sp,fp
   222a8:	dfc00117 	ldw	ra,4(sp)
   222ac:	df000017 	ldw	fp,0(sp)
   222b0:	dec00204 	addi	sp,sp,8
   222b4:	f800283a 	ret

000222b8 <calib_mag>:

//-----------------------------------------------------------------------------------------------

void calib_mag()
{
   222b8:	defffb04 	addi	sp,sp,-20
   222bc:	dfc00415 	stw	ra,16(sp)
   222c0:	df000315 	stw	fp,12(sp)
   222c4:	df000304 	addi	fp,sp,12
	alt_u8 response[3];
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
   222c8:	01402304 	movi	r5,140
   222cc:	01000944 	movi	r4,37
   222d0:	0021c900 	call	21c90 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_ASAX); //I2C slave 0 register address from where to begin data transfer
   222d4:	01400404 	movi	r5,16
   222d8:	01000984 	movi	r4,38
   222dc:	0021c900 	call	21c90 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x83); //Read 3 bytes from the magnetometer
   222e0:	014020c4 	movi	r5,131
   222e4:	010009c4 	movi	r4,39
   222e8:	0021c900 	call	21c90 <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_REG, AK8963_ASAX);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x83);


    //WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81);    //Enable I2C and set bytes
    usleep(10000);
   222ec:	0109c404 	movi	r4,10000
   222f0:	00320640 	call	32064 <usleep>
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 3);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);
   222f4:	e0bfff04 	addi	r2,fp,-4
   222f8:	018000c4 	movi	r6,3
   222fc:	100b883a 	mov	r5,r2
   22300:	01001244 	movi	r4,73
   22304:	0021d800 	call	21d80 <ReadRegs>

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
   22308:	e03ffd15 	stw	zero,-12(fp)
   2230c:	00002806 	br	223b0 <calib_mag+0xf8>
        data=response[i];
   22310:	e0ffff04 	addi	r3,fp,-4
   22314:	e0bffd17 	ldw	r2,-12(fp)
   22318:	1885883a 	add	r2,r3,r2
   2231c:	10800003 	ldbu	r2,0(r2)
   22320:	10803fcc 	andi	r2,r2,255
   22324:	1009883a 	mov	r4,r2
   22328:	0024b9c0 	call	24b9c <__floatunsisf>
   2232c:	1007883a 	mov	r3,r2
   22330:	e0fffe15 	stw	r3,-8(fp)
        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
   22334:	0150c034 	movhi	r5,17152
   22338:	e13ffe17 	ldw	r4,-8(fp)
   2233c:	00245940 	call	24594 <__subsf3>
   22340:	1007883a 	mov	r3,r2
   22344:	1805883a 	mov	r2,r3
   22348:	0150e034 	movhi	r5,17280
   2234c:	1009883a 	mov	r4,r2
   22350:	0023d580 	call	23d58 <__divsf3>
   22354:	1007883a 	mov	r3,r2
   22358:	1805883a 	mov	r2,r3
   2235c:	014fe034 	movhi	r5,16256
   22360:	1009883a 	mov	r4,r2
   22364:	00238900 	call	23890 <__addsf3>
   22368:	1007883a 	mov	r3,r2
   2236c:	1805883a 	mov	r2,r3
   22370:	014f86b4 	movhi	r5,15898
   22374:	29666684 	addi	r5,r5,-26214
   22378:	1009883a 	mov	r4,r2
   2237c:	00241980 	call	24198 <__mulsf3>
   22380:	1007883a 	mov	r3,r2
   22384:	1809883a 	mov	r4,r3
   22388:	00800134 	movhi	r2,4
   2238c:	10a01904 	addi	r2,r2,-32668
   22390:	e0fffd17 	ldw	r3,-12(fp)
   22394:	18c7883a 	add	r3,r3,r3
   22398:	18c7883a 	add	r3,r3,r3
   2239c:	10c5883a 	add	r2,r2,r3
   223a0:	11000015 	stw	r4,0(r2)
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 3);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
   223a4:	e0bffd17 	ldw	r2,-12(fp)
   223a8:	10800044 	addi	r2,r2,1
   223ac:	e0bffd15 	stw	r2,-12(fp)
   223b0:	e0bffd17 	ldw	r2,-12(fp)
   223b4:	108000d0 	cmplti	r2,r2,3
   223b8:	103fd51e 	bne	r2,zero,22310 <__alt_data_end+0xfffe2f10>
        data=response[i];
        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
    }
}
   223bc:	0001883a 	nop
   223c0:	e037883a 	mov	sp,fp
   223c4:	dfc00117 	ldw	ra,4(sp)
   223c8:	df000017 	ldw	fp,0(sp)
   223cc:	dec00204 	addi	sp,sp,8
   223d0:	f800283a 	ret

000223d4 <read_acc>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void read_acc()
{
   223d4:	defff704 	addi	sp,sp,-36
   223d8:	dfc00815 	stw	ra,32(sp)
   223dc:	df000715 	stw	fp,28(sp)
   223e0:	dc400615 	stw	r17,24(sp)
   223e4:	dc000515 	stw	r16,20(sp)
   223e8:	df000704 	addi	fp,sp,28
	alt_16 bit_data;
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 6);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
   223ec:	e0bffc04 	addi	r2,fp,-16
   223f0:	01800184 	movi	r6,6
   223f4:	100b883a 	mov	r5,r2
   223f8:	01000ec4 	movi	r4,59
   223fc:	0021d800 	call	21d80 <ReadRegs>
    for(i=0; i<3; i++) {
   22400:	e03ff915 	stw	zero,-28(fp)
   22404:	00004206 	br	22510 <read_acc+0x13c>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   22408:	e0bff917 	ldw	r2,-28(fp)
   2240c:	1085883a 	add	r2,r2,r2
   22410:	1007883a 	mov	r3,r2
   22414:	e0bffc04 	addi	r2,fp,-16
   22418:	10c5883a 	add	r2,r2,r3
   2241c:	10800003 	ldbu	r2,0(r2)
   22420:	10803fcc 	andi	r2,r2,255
   22424:	1004923a 	slli	r2,r2,8
   22428:	1009883a 	mov	r4,r2
   2242c:	e0bff917 	ldw	r2,-28(fp)
   22430:	1085883a 	add	r2,r2,r2
   22434:	10800044 	addi	r2,r2,1
   22438:	e0fffc04 	addi	r3,fp,-16
   2243c:	1885883a 	add	r2,r3,r2
   22440:	10800003 	ldbu	r2,0(r2)
   22444:	10803fcc 	andi	r2,r2,255
   22448:	2084b03a 	or	r2,r4,r2
   2244c:	e0bffa0d 	sth	r2,-24(fp)
        data = (float)bit_data;
   22450:	e0bffa0f 	ldh	r2,-24(fp)
   22454:	1009883a 	mov	r4,r2
   22458:	0024a780 	call	24a78 <__floatsisf>
   2245c:	1007883a 	mov	r3,r2
   22460:	e0fffb15 	stw	r3,-20(fp)
        accelerometer_data[i] = G_SI * data / acc_divider;
   22464:	e13ffb17 	ldw	r4,-20(fp)
   22468:	0026e340 	call	26e34 <__extendsfdf2>
   2246c:	1011883a 	mov	r8,r2
   22470:	1813883a 	mov	r9,r3
   22474:	018ea4f4 	movhi	r6,14995
   22478:	31a8c144 	addi	r6,r6,-23803
   2247c:	01d00934 	movhi	r7,16420
   22480:	39e74044 	addi	r7,r7,-25343
   22484:	4009883a 	mov	r4,r8
   22488:	480b883a 	mov	r5,r9
   2248c:	0025e200 	call	25e20 <__muldf3>
   22490:	1009883a 	mov	r4,r2
   22494:	180b883a 	mov	r5,r3
   22498:	2021883a 	mov	r16,r4
   2249c:	2823883a 	mov	r17,r5
   224a0:	d0a6cf17 	ldw	r2,-25796(gp)
   224a4:	1009883a 	mov	r4,r2
   224a8:	0026e340 	call	26e34 <__extendsfdf2>
   224ac:	1009883a 	mov	r4,r2
   224b0:	180b883a 	mov	r5,r3
   224b4:	200d883a 	mov	r6,r4
   224b8:	280f883a 	mov	r7,r5
   224bc:	8009883a 	mov	r4,r16
   224c0:	880b883a 	mov	r5,r17
   224c4:	00255380 	call	25538 <__divdf3>
   224c8:	1009883a 	mov	r4,r2
   224cc:	180b883a 	mov	r5,r3
   224d0:	2005883a 	mov	r2,r4
   224d4:	2807883a 	mov	r3,r5
   224d8:	1009883a 	mov	r4,r2
   224dc:	180b883a 	mov	r5,r3
   224e0:	0026f440 	call	26f44 <__truncdfsf2>
   224e4:	1009883a 	mov	r4,r2
   224e8:	00800134 	movhi	r2,4
   224ec:	10a01004 	addi	r2,r2,-32704
   224f0:	e0fff917 	ldw	r3,-28(fp)
   224f4:	18c7883a 	add	r3,r3,r3
   224f8:	18c7883a 	add	r3,r3,r3
   224fc:	10c5883a 	add	r2,r2,r3
   22500:	11000015 	stw	r4,0(r2)
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 6);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
    for(i=0; i<3; i++) {
   22504:	e0bff917 	ldw	r2,-28(fp)
   22508:	10800044 	addi	r2,r2,1
   2250c:	e0bff915 	stw	r2,-28(fp)
   22510:	e0bff917 	ldw	r2,-28(fp)
   22514:	108000d0 	cmplti	r2,r2,3
   22518:	103fbb1e 	bne	r2,zero,22408 <__alt_data_end+0xfffe3008>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    }

}
   2251c:	0001883a 	nop
   22520:	e6fffe04 	addi	sp,fp,-8
   22524:	dfc00317 	ldw	ra,12(sp)
   22528:	df000217 	ldw	fp,8(sp)
   2252c:	dc400117 	ldw	r17,4(sp)
   22530:	dc000017 	ldw	r16,0(sp)
   22534:	dec00404 	addi	sp,sp,16
   22538:	f800283a 	ret

0002253c <read_gyro>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void read_gyro()
{
   2253c:	defff704 	addi	sp,sp,-36
   22540:	dfc00815 	stw	ra,32(sp)
   22544:	df000715 	stw	fp,28(sp)
   22548:	dc400615 	stw	r17,24(sp)
   2254c:	dc000515 	stw	r16,20(sp)
   22550:	df000704 	addi	fp,sp,28
	alt_16 bit_data;
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_XOUT_H, response, 6);
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
   22554:	e0bffc04 	addi	r2,fp,-16
   22558:	01800184 	movi	r6,6
   2255c:	100b883a 	mov	r5,r2
   22560:	010010c4 	movi	r4,67
   22564:	0021d800 	call	21d80 <ReadRegs>
    for(i=0; i<3; i++) {
   22568:	e03ff915 	stw	zero,-28(fp)
   2256c:	00004206 	br	22678 <read_gyro+0x13c>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   22570:	e0bff917 	ldw	r2,-28(fp)
   22574:	1085883a 	add	r2,r2,r2
   22578:	1007883a 	mov	r3,r2
   2257c:	e0bffc04 	addi	r2,fp,-16
   22580:	10c5883a 	add	r2,r2,r3
   22584:	10800003 	ldbu	r2,0(r2)
   22588:	10803fcc 	andi	r2,r2,255
   2258c:	1004923a 	slli	r2,r2,8
   22590:	1009883a 	mov	r4,r2
   22594:	e0bff917 	ldw	r2,-28(fp)
   22598:	1085883a 	add	r2,r2,r2
   2259c:	10800044 	addi	r2,r2,1
   225a0:	e0fffc04 	addi	r3,fp,-16
   225a4:	1885883a 	add	r2,r3,r2
   225a8:	10800003 	ldbu	r2,0(r2)
   225ac:	10803fcc 	andi	r2,r2,255
   225b0:	2084b03a 	or	r2,r4,r2
   225b4:	e0bffa0d 	sth	r2,-24(fp)
        data = (float)bit_data;
   225b8:	e0bffa0f 	ldh	r2,-24(fp)
   225bc:	1009883a 	mov	r4,r2
   225c0:	0024a780 	call	24a78 <__floatsisf>
   225c4:	1007883a 	mov	r3,r2
   225c8:	e0fffb15 	stw	r3,-20(fp)
        gyroscope_data[i] = (M_PI / 180) * data / gyro_divider;
   225cc:	e13ffb17 	ldw	r4,-20(fp)
   225d0:	0026e340 	call	26e34 <__extendsfdf2>
   225d4:	1011883a 	mov	r8,r2
   225d8:	1813883a 	mov	r9,r3
   225dc:	01a894f4 	movhi	r6,41555
   225e0:	31a74e44 	addi	r6,r6,-25287
   225e4:	01cfe4b4 	movhi	r7,16274
   225e8:	39f7d184 	addi	r7,r7,-8378
   225ec:	4009883a 	mov	r4,r8
   225f0:	480b883a 	mov	r5,r9
   225f4:	0025e200 	call	25e20 <__muldf3>
   225f8:	1009883a 	mov	r4,r2
   225fc:	180b883a 	mov	r5,r3
   22600:	2021883a 	mov	r16,r4
   22604:	2823883a 	mov	r17,r5
   22608:	d0a6ce17 	ldw	r2,-25800(gp)
   2260c:	1009883a 	mov	r4,r2
   22610:	0026e340 	call	26e34 <__extendsfdf2>
   22614:	1009883a 	mov	r4,r2
   22618:	180b883a 	mov	r5,r3
   2261c:	200d883a 	mov	r6,r4
   22620:	280f883a 	mov	r7,r5
   22624:	8009883a 	mov	r4,r16
   22628:	880b883a 	mov	r5,r17
   2262c:	00255380 	call	25538 <__divdf3>
   22630:	1009883a 	mov	r4,r2
   22634:	180b883a 	mov	r5,r3
   22638:	2005883a 	mov	r2,r4
   2263c:	2807883a 	mov	r3,r5
   22640:	1009883a 	mov	r4,r2
   22644:	180b883a 	mov	r5,r3
   22648:	0026f440 	call	26f44 <__truncdfsf2>
   2264c:	1009883a 	mov	r4,r2
   22650:	00800134 	movhi	r2,4
   22654:	10a01604 	addi	r2,r2,-32680
   22658:	e0fff917 	ldw	r3,-28(fp)
   2265c:	18c7883a 	add	r3,r3,r3
   22660:	18c7883a 	add	r3,r3,r3
   22664:	10c5883a 	add	r2,r2,r3
   22668:	11000015 	stw	r4,0(r2)
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_XOUT_H, response, 6);
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
    for(i=0; i<3; i++) {
   2266c:	e0bff917 	ldw	r2,-28(fp)
   22670:	10800044 	addi	r2,r2,1
   22674:	e0bff915 	stw	r2,-28(fp)
   22678:	e0bff917 	ldw	r2,-28(fp)
   2267c:	108000d0 	cmplti	r2,r2,3
   22680:	103fbb1e 	bne	r2,zero,22570 <__alt_data_end+0xfffe3170>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i] = (M_PI / 180) * data / gyro_divider;
    }

}
   22684:	0001883a 	nop
   22688:	e6fffe04 	addi	sp,fp,-8
   2268c:	dfc00317 	ldw	ra,12(sp)
   22690:	df000217 	ldw	fp,8(sp)
   22694:	dc400117 	ldw	r17,4(sp)
   22698:	dc000017 	ldw	r16,0(sp)
   2269c:	dec00404 	addi	sp,sp,16
   226a0:	f800283a 	ret

000226a4 <read_temp>:
usage: call this function to read temperature data.
returns the value in °C
-----------------------------------------------------------------------------------------------*/

void read_temp()
{
   226a4:	defffb04 	addi	sp,sp,-20
   226a8:	dfc00415 	stw	ra,16(sp)
   226ac:	df000315 	stw	fp,12(sp)
   226b0:	df000304 	addi	fp,sp,12
	alt_u8 response[2];
	alt_16 bit_data;
    float data;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_TEMP_OUT_H, response, 2);
    ReadRegs(MPUREG_TEMP_OUT_H,response,2);
   226b4:	e0bfff04 	addi	r2,fp,-4
   226b8:	01800084 	movi	r6,2
   226bc:	100b883a 	mov	r5,r2
   226c0:	01001044 	movi	r4,65
   226c4:	0021d800 	call	21d80 <ReadRegs>

    bit_data=((alt_16)response[0]<<8)|response[1];
   226c8:	e0bfff03 	ldbu	r2,-4(fp)
   226cc:	10803fcc 	andi	r2,r2,255
   226d0:	1004923a 	slli	r2,r2,8
   226d4:	1007883a 	mov	r3,r2
   226d8:	e0bfff43 	ldbu	r2,-3(fp)
   226dc:	10803fcc 	andi	r2,r2,255
   226e0:	1884b03a 	or	r2,r3,r2
   226e4:	e0bffd0d 	sth	r2,-12(fp)
    data=(float)bit_data;
   226e8:	e0bffd0f 	ldh	r2,-12(fp)
   226ec:	1009883a 	mov	r4,r2
   226f0:	0024a780 	call	24a78 <__floatsisf>
   226f4:	1007883a 	mov	r3,r2
   226f8:	e0fffe15 	stw	r3,-8(fp)
    temperature=(data/340)+36.53;
   226fc:	0150eab4 	movhi	r5,17322
   22700:	e13ffe17 	ldw	r4,-8(fp)
   22704:	0023d580 	call	23d58 <__divsf3>
   22708:	1007883a 	mov	r3,r2
   2270c:	1805883a 	mov	r2,r3
   22710:	1009883a 	mov	r4,r2
   22714:	0026e340 	call	26e34 <__extendsfdf2>
   22718:	1011883a 	mov	r8,r2
   2271c:	1813883a 	mov	r9,r3
   22720:	01828f74 	movhi	r6,2621
   22724:	319c2904 	addi	r6,r6,28836
   22728:	01d010b4 	movhi	r7,16450
   2272c:	39d0f5c4 	addi	r7,r7,17367
   22730:	4009883a 	mov	r4,r8
   22734:	480b883a 	mov	r5,r9
   22738:	0024c8c0 	call	24c8c <__adddf3>
   2273c:	1009883a 	mov	r4,r2
   22740:	180b883a 	mov	r5,r3
   22744:	2005883a 	mov	r2,r4
   22748:	2807883a 	mov	r3,r5
   2274c:	1009883a 	mov	r4,r2
   22750:	180b883a 	mov	r5,r3
   22754:	0026f440 	call	26f44 <__truncdfsf2>
   22758:	1007883a 	mov	r3,r2
   2275c:	d0e6cd15 	stw	r3,-25804(gp)
}
   22760:	0001883a 	nop
   22764:	e037883a 	mov	sp,fp
   22768:	dfc00117 	ldw	ra,4(sp)
   2276c:	df000017 	ldw	fp,0(sp)
   22770:	dec00204 	addi	sp,sp,8
   22774:	f800283a 	ret

00022778 <read_mag>:

//-----------------------------------------------------------------------------------------------

void read_mag()
{
   22778:	defff904 	addi	sp,sp,-28
   2277c:	dfc00615 	stw	ra,24(sp)
   22780:	df000515 	stw	fp,20(sp)
   22784:	df000504 	addi	fp,sp,20
	alt_u8 response[7];
	alt_16 bit_data;
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
   22788:	01402304 	movi	r5,140
   2278c:	01000944 	movi	r4,37
   22790:	0021c900 	call	21c90 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
   22794:	014000c4 	movi	r5,3
   22798:	01000984 	movi	r4,38
   2279c:	0021c900 	call	21c90 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 6 bytes from the magnetometer
   227a0:	014021c4 	movi	r5,135
   227a4:	010009c4 	movi	r4,39
   227a8:	0021c900 	call	21c90 <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR|READ_FLAG);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_REG, AK8963_HXL);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x87);

    usleep(10000);
   227ac:	0109c404 	movi	r4,10000
   227b0:	00320640 	call	32064 <usleep>
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 7);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
   227b4:	e0bffe04 	addi	r2,fp,-8
   227b8:	018001c4 	movi	r6,7
   227bc:	100b883a 	mov	r5,r2
   227c0:	01001244 	movi	r4,73
   227c4:	0021d800 	call	21d80 <ReadRegs>
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
   227c8:	e03ffb15 	stw	zero,-20(fp)
   227cc:	00002d06 	br	22884 <read_mag+0x10c>
        bit_data=((alt_16)response[i*2+1]<<8)|response[i*2];
   227d0:	e0bffb17 	ldw	r2,-20(fp)
   227d4:	1085883a 	add	r2,r2,r2
   227d8:	10800044 	addi	r2,r2,1
   227dc:	e0fffe04 	addi	r3,fp,-8
   227e0:	1885883a 	add	r2,r3,r2
   227e4:	10800003 	ldbu	r2,0(r2)
   227e8:	10803fcc 	andi	r2,r2,255
   227ec:	1004923a 	slli	r2,r2,8
   227f0:	1007883a 	mov	r3,r2
   227f4:	e0bffb17 	ldw	r2,-20(fp)
   227f8:	1085883a 	add	r2,r2,r2
   227fc:	1009883a 	mov	r4,r2
   22800:	e0bffe04 	addi	r2,fp,-8
   22804:	1105883a 	add	r2,r2,r4
   22808:	10800003 	ldbu	r2,0(r2)
   2280c:	10803fcc 	andi	r2,r2,255
   22810:	1884b03a 	or	r2,r3,r2
   22814:	e0bffc0d 	sth	r2,-16(fp)
        data=(float)bit_data;
   22818:	e0bffc0f 	ldh	r2,-16(fp)
   2281c:	1009883a 	mov	r4,r2
   22820:	0024a780 	call	24a78 <__floatsisf>
   22824:	1007883a 	mov	r3,r2
   22828:	e0fffd15 	stw	r3,-12(fp)
        magnetometer_data[i]=data*magnetometer_ASA[i];
   2282c:	00800134 	movhi	r2,4
   22830:	10a01904 	addi	r2,r2,-32668
   22834:	e0fffb17 	ldw	r3,-20(fp)
   22838:	18c7883a 	add	r3,r3,r3
   2283c:	18c7883a 	add	r3,r3,r3
   22840:	10c5883a 	add	r2,r2,r3
   22844:	10c00017 	ldw	r3,0(r2)
   22848:	e17ffd17 	ldw	r5,-12(fp)
   2284c:	1809883a 	mov	r4,r3
   22850:	00241980 	call	24198 <__mulsf3>
   22854:	1007883a 	mov	r3,r2
   22858:	1809883a 	mov	r4,r3
   2285c:	00800134 	movhi	r2,4
   22860:	10a01c04 	addi	r2,r2,-32656
   22864:	e0fffb17 	ldw	r3,-20(fp)
   22868:	18c7883a 	add	r3,r3,r3
   2286c:	18c7883a 	add	r3,r3,r3
   22870:	10c5883a 	add	r2,r2,r3
   22874:	11000015 	stw	r4,0(r2)

    usleep(10000);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 7);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
   22878:	e0bffb17 	ldw	r2,-20(fp)
   2287c:	10800044 	addi	r2,r2,1
   22880:	e0bffb15 	stw	r2,-20(fp)
   22884:	e0bffb17 	ldw	r2,-20(fp)
   22888:	108000d0 	cmplti	r2,r2,3
   2288c:	103fd01e 	bne	r2,zero,227d0 <__alt_data_end+0xfffe33d0>
        bit_data=((alt_16)response[i*2+1]<<8)|response[i*2];
        data=(float)bit_data;
        magnetometer_data[i]=data*magnetometer_ASA[i];
    }
}
   22890:	0001883a 	nop
   22894:	e037883a 	mov	sp,fp
   22898:	dfc00117 	ldw	ra,4(sp)
   2289c:	df000017 	ldw	fp,0(sp)
   228a0:	dec00204 	addi	sp,sp,8
   228a4:	f800283a 	ret

000228a8 <read_all>:

//-----------------------------------------------------------------------------------------------

void read_all()
{
   228a8:	defff204 	addi	sp,sp,-56
   228ac:	dfc00d15 	stw	ra,52(sp)
   228b0:	df000c15 	stw	fp,48(sp)
   228b4:	dc800b15 	stw	r18,44(sp)
   228b8:	dc400a15 	stw	r17,40(sp)
   228bc:	dc000915 	stw	r16,36(sp)
   228c0:	df000c04 	addi	fp,sp,48
	alt_16 bit_data;
    float data;
    int i;

    //Send I2C command at first
    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
   228c4:	01402304 	movi	r5,140
   228c8:	01000944 	movi	r4,37
   228cc:	0021c900 	call	21c90 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
   228d0:	014000c4 	movi	r5,3
   228d4:	01000984 	movi	r4,38
   228d8:	0021c900 	call	21c90 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 7 bytes from the magnetometer
   228dc:	014021c4 	movi	r5,135
   228e0:	010009c4 	movi	r4,39
   228e4:	0021c900 	call	21c90 <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x87);


    //wait(0.001);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 21);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
   228e8:	e0bff704 	addi	r2,fp,-36
   228ec:	01800544 	movi	r6,21
   228f0:	100b883a 	mov	r5,r2
   228f4:	01000ec4 	movi	r4,59
   228f8:	0021d800 	call	21d80 <ReadRegs>
    //Get accelerometer value
    for(i=0; i<3; i++) {
   228fc:	e03ff415 	stw	zero,-48(fp)
   22900:	00004206 	br	22a0c <read_all+0x164>
        bit_data = ((alt_16)response[i*2] << 8)|response[i*2+1];
   22904:	e0bff417 	ldw	r2,-48(fp)
   22908:	1085883a 	add	r2,r2,r2
   2290c:	1007883a 	mov	r3,r2
   22910:	e0bff704 	addi	r2,fp,-36
   22914:	10c5883a 	add	r2,r2,r3
   22918:	10800003 	ldbu	r2,0(r2)
   2291c:	10803fcc 	andi	r2,r2,255
   22920:	1004923a 	slli	r2,r2,8
   22924:	1009883a 	mov	r4,r2
   22928:	e0bff417 	ldw	r2,-48(fp)
   2292c:	1085883a 	add	r2,r2,r2
   22930:	10800044 	addi	r2,r2,1
   22934:	e0fff704 	addi	r3,fp,-36
   22938:	1885883a 	add	r2,r3,r2
   2293c:	10800003 	ldbu	r2,0(r2)
   22940:	10803fcc 	andi	r2,r2,255
   22944:	2084b03a 	or	r2,r4,r2
   22948:	e0bff50d 	sth	r2,-44(fp)
        data = (float)bit_data;
   2294c:	e0bff50f 	ldh	r2,-44(fp)
   22950:	1009883a 	mov	r4,r2
   22954:	0024a780 	call	24a78 <__floatsisf>
   22958:	1007883a 	mov	r3,r2
   2295c:	e0fff615 	stw	r3,-40(fp)
        accelerometer_data[i] = G_SI * data / acc_divider;
   22960:	e13ff617 	ldw	r4,-40(fp)
   22964:	0026e340 	call	26e34 <__extendsfdf2>
   22968:	1011883a 	mov	r8,r2
   2296c:	1813883a 	mov	r9,r3
   22970:	018ea4f4 	movhi	r6,14995
   22974:	31a8c144 	addi	r6,r6,-23803
   22978:	01d00934 	movhi	r7,16420
   2297c:	39e74044 	addi	r7,r7,-25343
   22980:	4009883a 	mov	r4,r8
   22984:	480b883a 	mov	r5,r9
   22988:	0025e200 	call	25e20 <__muldf3>
   2298c:	1009883a 	mov	r4,r2
   22990:	180b883a 	mov	r5,r3
   22994:	2021883a 	mov	r16,r4
   22998:	2823883a 	mov	r17,r5
   2299c:	d0a6cf17 	ldw	r2,-25796(gp)
   229a0:	1009883a 	mov	r4,r2
   229a4:	0026e340 	call	26e34 <__extendsfdf2>
   229a8:	1009883a 	mov	r4,r2
   229ac:	180b883a 	mov	r5,r3
   229b0:	200d883a 	mov	r6,r4
   229b4:	280f883a 	mov	r7,r5
   229b8:	8009883a 	mov	r4,r16
   229bc:	880b883a 	mov	r5,r17
   229c0:	00255380 	call	25538 <__divdf3>
   229c4:	1009883a 	mov	r4,r2
   229c8:	180b883a 	mov	r5,r3
   229cc:	2005883a 	mov	r2,r4
   229d0:	2807883a 	mov	r3,r5
   229d4:	1009883a 	mov	r4,r2
   229d8:	180b883a 	mov	r5,r3
   229dc:	0026f440 	call	26f44 <__truncdfsf2>
   229e0:	1009883a 	mov	r4,r2
   229e4:	00800134 	movhi	r2,4
   229e8:	10a01004 	addi	r2,r2,-32704
   229ec:	e0fff417 	ldw	r3,-48(fp)
   229f0:	18c7883a 	add	r3,r3,r3
   229f4:	18c7883a 	add	r3,r3,r3
   229f8:	10c5883a 	add	r2,r2,r3
   229fc:	11000015 	stw	r4,0(r2)

    //wait(0.001);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 21);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
    //Get accelerometer value
    for(i=0; i<3; i++) {
   22a00:	e0bff417 	ldw	r2,-48(fp)
   22a04:	10800044 	addi	r2,r2,1
   22a08:	e0bff415 	stw	r2,-48(fp)
   22a0c:	e0bff417 	ldw	r2,-48(fp)
   22a10:	108000d0 	cmplti	r2,r2,3
   22a14:	103fbb1e 	bne	r2,zero,22904 <__alt_data_end+0xfffe3504>
        bit_data = ((alt_16)response[i*2] << 8)|response[i*2+1];
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    }
    //Get temperature
    bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   22a18:	e0bff417 	ldw	r2,-48(fp)
   22a1c:	1085883a 	add	r2,r2,r2
   22a20:	1007883a 	mov	r3,r2
   22a24:	e0bff704 	addi	r2,fp,-36
   22a28:	10c5883a 	add	r2,r2,r3
   22a2c:	10800003 	ldbu	r2,0(r2)
   22a30:	10803fcc 	andi	r2,r2,255
   22a34:	1004923a 	slli	r2,r2,8
   22a38:	1009883a 	mov	r4,r2
   22a3c:	e0bff417 	ldw	r2,-48(fp)
   22a40:	1085883a 	add	r2,r2,r2
   22a44:	10800044 	addi	r2,r2,1
   22a48:	e0fff704 	addi	r3,fp,-36
   22a4c:	1885883a 	add	r2,r3,r2
   22a50:	10800003 	ldbu	r2,0(r2)
   22a54:	10803fcc 	andi	r2,r2,255
   22a58:	2084b03a 	or	r2,r4,r2
   22a5c:	e0bff50d 	sth	r2,-44(fp)
    data = (float)bit_data;
   22a60:	e0bff50f 	ldh	r2,-44(fp)
   22a64:	1009883a 	mov	r4,r2
   22a68:	0024a780 	call	24a78 <__floatsisf>
   22a6c:	1007883a 	mov	r3,r2
   22a70:	e0fff615 	stw	r3,-40(fp)
    temperature = ((data - 21) / 333.87) + 21;
   22a74:	01506a34 	movhi	r5,16808
   22a78:	e13ff617 	ldw	r4,-40(fp)
   22a7c:	00245940 	call	24594 <__subsf3>
   22a80:	1007883a 	mov	r3,r2
   22a84:	1805883a 	mov	r2,r3
   22a88:	1009883a 	mov	r4,r2
   22a8c:	0026e340 	call	26e34 <__extendsfdf2>
   22a90:	1011883a 	mov	r8,r2
   22a94:	1813883a 	mov	r9,r3
   22a98:	01a147f4 	movhi	r6,34079
   22a9c:	31ae1484 	addi	r6,r6,-18350
   22aa0:	01d01d74 	movhi	r7,16501
   22aa4:	39f77ac4 	addi	r7,r7,-8725
   22aa8:	4009883a 	mov	r4,r8
   22aac:	480b883a 	mov	r5,r9
   22ab0:	00255380 	call	25538 <__divdf3>
   22ab4:	1009883a 	mov	r4,r2
   22ab8:	180b883a 	mov	r5,r3
   22abc:	2005883a 	mov	r2,r4
   22ac0:	2807883a 	mov	r3,r5
   22ac4:	000d883a 	mov	r6,zero
   22ac8:	01d00d74 	movhi	r7,16437
   22acc:	1009883a 	mov	r4,r2
   22ad0:	180b883a 	mov	r5,r3
   22ad4:	0024c8c0 	call	24c8c <__adddf3>
   22ad8:	1009883a 	mov	r4,r2
   22adc:	180b883a 	mov	r5,r3
   22ae0:	2005883a 	mov	r2,r4
   22ae4:	2807883a 	mov	r3,r5
   22ae8:	1009883a 	mov	r4,r2
   22aec:	180b883a 	mov	r5,r3
   22af0:	0026f440 	call	26f44 <__truncdfsf2>
   22af4:	1007883a 	mov	r3,r2
   22af8:	d0e6cd15 	stw	r3,-25804(gp)
    //Get gyroscope value
    for(i=4; i<7; i++) {
   22afc:	00800104 	movi	r2,4
   22b00:	e0bff415 	stw	r2,-48(fp)
   22b04:	00004306 	br	22c14 <read_all+0x36c>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   22b08:	e0bff417 	ldw	r2,-48(fp)
   22b0c:	1085883a 	add	r2,r2,r2
   22b10:	1007883a 	mov	r3,r2
   22b14:	e0bff704 	addi	r2,fp,-36
   22b18:	10c5883a 	add	r2,r2,r3
   22b1c:	10800003 	ldbu	r2,0(r2)
   22b20:	10803fcc 	andi	r2,r2,255
   22b24:	1004923a 	slli	r2,r2,8
   22b28:	1009883a 	mov	r4,r2
   22b2c:	e0bff417 	ldw	r2,-48(fp)
   22b30:	1085883a 	add	r2,r2,r2
   22b34:	10800044 	addi	r2,r2,1
   22b38:	e0fff704 	addi	r3,fp,-36
   22b3c:	1885883a 	add	r2,r3,r2
   22b40:	10800003 	ldbu	r2,0(r2)
   22b44:	10803fcc 	andi	r2,r2,255
   22b48:	2084b03a 	or	r2,r4,r2
   22b4c:	e0bff50d 	sth	r2,-44(fp)
        data = (float)bit_data;
   22b50:	e0bff50f 	ldh	r2,-44(fp)
   22b54:	1009883a 	mov	r4,r2
   22b58:	0024a780 	call	24a78 <__floatsisf>
   22b5c:	1007883a 	mov	r3,r2
   22b60:	e0fff615 	stw	r3,-40(fp)
        gyroscope_data[i-4] = (M_PI / 180) * data / gyro_divider;
   22b64:	e0bff417 	ldw	r2,-48(fp)
   22b68:	143fff04 	addi	r16,r2,-4
   22b6c:	e13ff617 	ldw	r4,-40(fp)
   22b70:	0026e340 	call	26e34 <__extendsfdf2>
   22b74:	1011883a 	mov	r8,r2
   22b78:	1813883a 	mov	r9,r3
   22b7c:	01a894f4 	movhi	r6,41555
   22b80:	31a74e44 	addi	r6,r6,-25287
   22b84:	01cfe4b4 	movhi	r7,16274
   22b88:	39f7d184 	addi	r7,r7,-8378
   22b8c:	4009883a 	mov	r4,r8
   22b90:	480b883a 	mov	r5,r9
   22b94:	0025e200 	call	25e20 <__muldf3>
   22b98:	1009883a 	mov	r4,r2
   22b9c:	180b883a 	mov	r5,r3
   22ba0:	2023883a 	mov	r17,r4
   22ba4:	2825883a 	mov	r18,r5
   22ba8:	d0a6ce17 	ldw	r2,-25800(gp)
   22bac:	1009883a 	mov	r4,r2
   22bb0:	0026e340 	call	26e34 <__extendsfdf2>
   22bb4:	1009883a 	mov	r4,r2
   22bb8:	180b883a 	mov	r5,r3
   22bbc:	200d883a 	mov	r6,r4
   22bc0:	280f883a 	mov	r7,r5
   22bc4:	8809883a 	mov	r4,r17
   22bc8:	900b883a 	mov	r5,r18
   22bcc:	00255380 	call	25538 <__divdf3>
   22bd0:	1009883a 	mov	r4,r2
   22bd4:	180b883a 	mov	r5,r3
   22bd8:	2005883a 	mov	r2,r4
   22bdc:	2807883a 	mov	r3,r5
   22be0:	1009883a 	mov	r4,r2
   22be4:	180b883a 	mov	r5,r3
   22be8:	0026f440 	call	26f44 <__truncdfsf2>
   22bec:	1009883a 	mov	r4,r2
   22bf0:	00800134 	movhi	r2,4
   22bf4:	10a01604 	addi	r2,r2,-32680
   22bf8:	8407883a 	add	r3,r16,r16
   22bfc:	18c7883a 	add	r3,r3,r3
   22c00:	10c5883a 	add	r2,r2,r3
   22c04:	11000015 	stw	r4,0(r2)
    //Get temperature
    bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
    data = (float)bit_data;
    temperature = ((data - 21) / 333.87) + 21;
    //Get gyroscope value
    for(i=4; i<7; i++) {
   22c08:	e0bff417 	ldw	r2,-48(fp)
   22c0c:	10800044 	addi	r2,r2,1
   22c10:	e0bff415 	stw	r2,-48(fp)
   22c14:	e0bff417 	ldw	r2,-48(fp)
   22c18:	108001d0 	cmplti	r2,r2,7
   22c1c:	103fba1e 	bne	r2,zero,22b08 <__alt_data_end+0xfffe3708>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (M_PI / 180) * data / gyro_divider;
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
   22c20:	008001c4 	movi	r2,7
   22c24:	e0bff415 	stw	r2,-48(fp)
   22c28:	00002f06 	br	22ce8 <read_all+0x440>
        bit_data = ((alt_16)response[i*2+1] << 8) | response[i*2];
   22c2c:	e0bff417 	ldw	r2,-48(fp)
   22c30:	1085883a 	add	r2,r2,r2
   22c34:	10800044 	addi	r2,r2,1
   22c38:	e0fff704 	addi	r3,fp,-36
   22c3c:	1885883a 	add	r2,r3,r2
   22c40:	10800003 	ldbu	r2,0(r2)
   22c44:	10803fcc 	andi	r2,r2,255
   22c48:	1004923a 	slli	r2,r2,8
   22c4c:	1007883a 	mov	r3,r2
   22c50:	e0bff417 	ldw	r2,-48(fp)
   22c54:	1085883a 	add	r2,r2,r2
   22c58:	1009883a 	mov	r4,r2
   22c5c:	e0bff704 	addi	r2,fp,-36
   22c60:	1105883a 	add	r2,r2,r4
   22c64:	10800003 	ldbu	r2,0(r2)
   22c68:	10803fcc 	andi	r2,r2,255
   22c6c:	1884b03a 	or	r2,r3,r2
   22c70:	e0bff50d 	sth	r2,-44(fp)
        data = (float)bit_data;
   22c74:	e0bff50f 	ldh	r2,-44(fp)
   22c78:	1009883a 	mov	r4,r2
   22c7c:	0024a780 	call	24a78 <__floatsisf>
   22c80:	1007883a 	mov	r3,r2
   22c84:	e0fff615 	stw	r3,-40(fp)
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
   22c88:	e0bff417 	ldw	r2,-48(fp)
   22c8c:	143ffe44 	addi	r16,r2,-7
   22c90:	e0bff417 	ldw	r2,-48(fp)
   22c94:	10fffe44 	addi	r3,r2,-7
   22c98:	00800134 	movhi	r2,4
   22c9c:	10a01904 	addi	r2,r2,-32668
   22ca0:	18c7883a 	add	r3,r3,r3
   22ca4:	18c7883a 	add	r3,r3,r3
   22ca8:	10c5883a 	add	r2,r2,r3
   22cac:	10c00017 	ldw	r3,0(r2)
   22cb0:	e17ff617 	ldw	r5,-40(fp)
   22cb4:	1809883a 	mov	r4,r3
   22cb8:	00241980 	call	24198 <__mulsf3>
   22cbc:	1007883a 	mov	r3,r2
   22cc0:	1809883a 	mov	r4,r3
   22cc4:	00800134 	movhi	r2,4
   22cc8:	10a01c04 	addi	r2,r2,-32656
   22ccc:	8407883a 	add	r3,r16,r16
   22cd0:	18c7883a 	add	r3,r3,r3
   22cd4:	10c5883a 	add	r2,r2,r3
   22cd8:	11000015 	stw	r4,0(r2)
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (M_PI / 180) * data / gyro_divider;
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
   22cdc:	e0bff417 	ldw	r2,-48(fp)
   22ce0:	10800044 	addi	r2,r2,1
   22ce4:	e0bff415 	stw	r2,-48(fp)
   22ce8:	e0bff417 	ldw	r2,-48(fp)
   22cec:	10800290 	cmplti	r2,r2,10
   22cf0:	103fce1e 	bne	r2,zero,22c2c <__alt_data_end+0xfffe382c>
        bit_data = ((alt_16)response[i*2+1] << 8) | response[i*2];
        data = (float)bit_data;
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
    }
}
   22cf4:	0001883a 	nop
   22cf8:	e6fffd04 	addi	sp,fp,-12
   22cfc:	dfc00417 	ldw	ra,16(sp)
   22d00:	df000317 	ldw	fp,12(sp)
   22d04:	dc800217 	ldw	r18,8(sp)
   22d08:	dc400117 	ldw	r17,4(sp)
   22d0c:	dc000017 	ldw	r16,0(sp)
   22d10:	dec00504 	addi	sp,sp,20
   22d14:	f800283a 	ret

00022d18 <getMotion9>:
usage: call this functions to read and get values
returns accel, gyro and mag values
-----------------------------------------------------------------------------------------------*/

void getMotion9(float *ax, float *ay, float *az, float *gx, float *gy, float *gz, float *mx, float *my, float *mz)
{
   22d18:	defffa04 	addi	sp,sp,-24
   22d1c:	dfc00515 	stw	ra,20(sp)
   22d20:	df000415 	stw	fp,16(sp)
   22d24:	df000404 	addi	fp,sp,16
   22d28:	e13ffc15 	stw	r4,-16(fp)
   22d2c:	e17ffd15 	stw	r5,-12(fp)
   22d30:	e1bffe15 	stw	r6,-8(fp)
   22d34:	e1ffff15 	stw	r7,-4(fp)
    read_all();
   22d38:	00228a80 	call	228a8 <read_all>
    *ax = accelerometer_data[0];
   22d3c:	00800134 	movhi	r2,4
   22d40:	10a01004 	addi	r2,r2,-32704
   22d44:	10c00017 	ldw	r3,0(r2)
   22d48:	e0bffc17 	ldw	r2,-16(fp)
   22d4c:	10c00015 	stw	r3,0(r2)
    *ay = accelerometer_data[1];
   22d50:	00800134 	movhi	r2,4
   22d54:	10a01004 	addi	r2,r2,-32704
   22d58:	10c00117 	ldw	r3,4(r2)
   22d5c:	e0bffd17 	ldw	r2,-12(fp)
   22d60:	10c00015 	stw	r3,0(r2)
    *az = accelerometer_data[2];
   22d64:	00800134 	movhi	r2,4
   22d68:	10a01004 	addi	r2,r2,-32704
   22d6c:	10c00217 	ldw	r3,8(r2)
   22d70:	e0bffe17 	ldw	r2,-8(fp)
   22d74:	10c00015 	stw	r3,0(r2)
    *gx = gyroscope_data[0];
   22d78:	00800134 	movhi	r2,4
   22d7c:	10a01604 	addi	r2,r2,-32680
   22d80:	10c00017 	ldw	r3,0(r2)
   22d84:	e0bfff17 	ldw	r2,-4(fp)
   22d88:	10c00015 	stw	r3,0(r2)
    *gy = gyroscope_data[1];
   22d8c:	00800134 	movhi	r2,4
   22d90:	10a01604 	addi	r2,r2,-32680
   22d94:	10c00117 	ldw	r3,4(r2)
   22d98:	e0800217 	ldw	r2,8(fp)
   22d9c:	10c00015 	stw	r3,0(r2)
    *gz = gyroscope_data[2];
   22da0:	00800134 	movhi	r2,4
   22da4:	10a01604 	addi	r2,r2,-32680
   22da8:	10c00217 	ldw	r3,8(r2)
   22dac:	e0800317 	ldw	r2,12(fp)
   22db0:	10c00015 	stw	r3,0(r2)
    *mx = magnetometer_data[0];
   22db4:	00800134 	movhi	r2,4
   22db8:	10a01c04 	addi	r2,r2,-32656
   22dbc:	10c00017 	ldw	r3,0(r2)
   22dc0:	e0800417 	ldw	r2,16(fp)
   22dc4:	10c00015 	stw	r3,0(r2)
    *my = magnetometer_data[1];
   22dc8:	00800134 	movhi	r2,4
   22dcc:	10a01c04 	addi	r2,r2,-32656
   22dd0:	10c00117 	ldw	r3,4(r2)
   22dd4:	e0800517 	ldw	r2,20(fp)
   22dd8:	10c00015 	stw	r3,0(r2)
    *mz = magnetometer_data[2];
   22ddc:	00800134 	movhi	r2,4
   22de0:	10a01c04 	addi	r2,r2,-32656
   22de4:	10c00217 	ldw	r3,8(r2)
   22de8:	e0800617 	ldw	r2,24(fp)
   22dec:	10c00015 	stw	r3,0(r2)
}
   22df0:	0001883a 	nop
   22df4:	e037883a 	mov	sp,fp
   22df8:	dfc00117 	ldw	ra,4(sp)
   22dfc:	df000017 	ldw	fp,0(sp)
   22e00:	dec00204 	addi	sp,sp,8
   22e04:	f800283a 	ret

00022e08 <getMotion6>:

//-----------------------------------------------------------------------------------------------

void getMotion6(float *ax, float *ay, float *az, float *gx, float *gy, float *gz)
{
   22e08:	defffa04 	addi	sp,sp,-24
   22e0c:	dfc00515 	stw	ra,20(sp)
   22e10:	df000415 	stw	fp,16(sp)
   22e14:	df000404 	addi	fp,sp,16
   22e18:	e13ffc15 	stw	r4,-16(fp)
   22e1c:	e17ffd15 	stw	r5,-12(fp)
   22e20:	e1bffe15 	stw	r6,-8(fp)
   22e24:	e1ffff15 	stw	r7,-4(fp)
    read_acc();
   22e28:	00223d40 	call	223d4 <read_acc>
    read_gyro();
   22e2c:	002253c0 	call	2253c <read_gyro>
    *ax = accelerometer_data[0];
   22e30:	00800134 	movhi	r2,4
   22e34:	10a01004 	addi	r2,r2,-32704
   22e38:	10c00017 	ldw	r3,0(r2)
   22e3c:	e0bffc17 	ldw	r2,-16(fp)
   22e40:	10c00015 	stw	r3,0(r2)
    *ay = accelerometer_data[1];
   22e44:	00800134 	movhi	r2,4
   22e48:	10a01004 	addi	r2,r2,-32704
   22e4c:	10c00117 	ldw	r3,4(r2)
   22e50:	e0bffd17 	ldw	r2,-12(fp)
   22e54:	10c00015 	stw	r3,0(r2)
    *az = accelerometer_data[2];
   22e58:	00800134 	movhi	r2,4
   22e5c:	10a01004 	addi	r2,r2,-32704
   22e60:	10c00217 	ldw	r3,8(r2)
   22e64:	e0bffe17 	ldw	r2,-8(fp)
   22e68:	10c00015 	stw	r3,0(r2)
    *gx = gyroscope_data[0];
   22e6c:	00800134 	movhi	r2,4
   22e70:	10a01604 	addi	r2,r2,-32680
   22e74:	10c00017 	ldw	r3,0(r2)
   22e78:	e0bfff17 	ldw	r2,-4(fp)
   22e7c:	10c00015 	stw	r3,0(r2)
    *gy = gyroscope_data[1];
   22e80:	00800134 	movhi	r2,4
   22e84:	10a01604 	addi	r2,r2,-32680
   22e88:	10c00117 	ldw	r3,4(r2)
   22e8c:	e0800217 	ldw	r2,8(fp)
   22e90:	10c00015 	stw	r3,0(r2)
    *gz = gyroscope_data[2];
   22e94:	00800134 	movhi	r2,4
   22e98:	10a01604 	addi	r2,r2,-32680
   22e9c:	10c00217 	ldw	r3,8(r2)
   22ea0:	e0800317 	ldw	r2,12(fp)
   22ea4:	10c00015 	stw	r3,0(r2)
}
   22ea8:	0001883a 	nop
   22eac:	e037883a 	mov	sp,fp
   22eb0:	dfc00117 	ldw	ra,4(sp)
   22eb4:	df000017 	ldw	fp,0(sp)
   22eb8:	dec00204 	addi	sp,sp,8
   22ebc:	f800283a 	ret

00022ec0 <RH_Temp_Init>:

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16);
bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16);

void RH_Temp_Init(alt_u32 I2C_Controller_Base)
{
   22ec0:	defffa04 	addi	sp,sp,-24
   22ec4:	dfc00515 	stw	ra,20(sp)
   22ec8:	df000415 	stw	fp,16(sp)
   22ecc:	df000404 	addi	fp,sp,16
   22ed0:	e13fff15 	stw	r4,-4(fp)
	const int ref_clk = 50*1000*1000; // 50Mhz
   22ed4:	0080bef4 	movhi	r2,763
   22ed8:	10bc2004 	addi	r2,r2,-3968
   22edc:	e0bffc15 	stw	r2,-16(fp)
	const int i2c_clk = 400*1000; // 400KHz
   22ee0:	008001b4 	movhi	r2,6
   22ee4:	1086a004 	addi	r2,r2,6784
   22ee8:	e0bffd15 	stw	r2,-12(fp)
//	MPU9250_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);
   22eec:	e0bfff17 	ldw	r2,-4(fp)
   22ef0:	e1bffd17 	ldw	r6,-12(fp)
   22ef4:	e17ffc17 	ldw	r5,-16(fp)
   22ef8:	1009883a 	mov	r4,r2
   22efc:	00203980 	call	20398 <oc_i2c_init_ex>

    // reset
	bool bPass;
    bPass = th_reset(RH_TEMP_I2C_OPENCORES_BASE);
   22f00:	01000134 	movhi	r4,4
   22f04:	21040004 	addi	r4,r4,4096
   22f08:	00234a00 	call	234a0 <th_reset>
   22f0c:	e0bffe05 	stb	r2,-8(fp)
    if (!bPass){
   22f10:	e0bffe03 	ldbu	r2,-8(fp)
   22f14:	1080005c 	xori	r2,r2,1
   22f18:	10803fcc 	andi	r2,r2,255
   22f1c:	10000b26 	beq	r2,zero,22f4c <RH_Temp_Init+0x8c>
    	bPass = th_reset(RH_TEMP_I2C_OPENCORES_BASE); // try again
   22f20:	01000134 	movhi	r4,4
   22f24:	21040004 	addi	r4,r4,4096
   22f28:	00234a00 	call	234a0 <th_reset>
   22f2c:	e0bffe05 	stb	r2,-8(fp)
    	if (!bPass){
   22f30:	e0bffe03 	ldbu	r2,-8(fp)
   22f34:	1080005c 	xori	r2,r2,1
   22f38:	10803fcc 	andi	r2,r2,255
   22f3c:	10000326 	beq	r2,zero,22f4c <RH_Temp_Init+0x8c>
    		printf("Failed to reset!\r\n");
   22f40:	010000f4 	movhi	r4,3
   22f44:	21110a04 	addi	r4,r4,17448
   22f48:	002727c0 	call	2727c <puts>
    }

    //th_dump_chip_info(RH_TEMP_I2C_OPENCORES_BASE);


}
   22f4c:	0001883a 	nop
   22f50:	e037883a 	mov	sp,fp
   22f54:	dfc00117 	ldw	ra,4(sp)
   22f58:	df000017 	ldw	fp,0(sp)
   22f5c:	dec00204 	addi	sp,sp,8
   22f60:	f800283a 	ret

00022f64 <RH_Temp_Read_Device_ID>:

bool RH_Temp_Read_Device_ID(alt_u16 *pID16){
   22f64:	defffb04 	addi	sp,sp,-20
   22f68:	dfc00415 	stw	ra,16(sp)
   22f6c:	df000315 	stw	fp,12(sp)
   22f70:	df000304 	addi	fp,sp,12
   22f74:	e13fff15 	stw	r4,-4(fp)
	bool bPass;
	alt_u8 szData8[2];

	bPass =  OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, R_DEVICE_ID, szData8, sizeof(szData8));
   22f78:	e0fffe44 	addi	r3,fp,-7
   22f7c:	00800084 	movi	r2,2
   22f80:	d8800015 	stw	r2,0(sp)
   22f84:	180f883a 	mov	r7,r3
   22f88:	01803fc4 	movi	r6,255
   22f8c:	01402004 	movi	r5,128
   22f90:	01000134 	movhi	r4,4
   22f94:	21040004 	addi	r4,r4,4096
   22f98:	002091c0 	call	2091c <OC_I2C_Read>
   22f9c:	e0bffe05 	stb	r2,-8(fp)
	if (bPass){
   22fa0:	e0bffe03 	ldbu	r2,-8(fp)
   22fa4:	10001126 	beq	r2,zero,22fec <RH_Temp_Read_Device_ID+0x88>
		*pID16 = (szData8[0] << 8) | szData8[1];
   22fa8:	e0bffe43 	ldbu	r2,-7(fp)
   22fac:	10803fcc 	andi	r2,r2,255
   22fb0:	1004923a 	slli	r2,r2,8
   22fb4:	1007883a 	mov	r3,r2
   22fb8:	e0bffe83 	ldbu	r2,-6(fp)
   22fbc:	10803fcc 	andi	r2,r2,255
   22fc0:	1884b03a 	or	r2,r3,r2
   22fc4:	1007883a 	mov	r3,r2
   22fc8:	e0bfff17 	ldw	r2,-4(fp)
   22fcc:	10c0000d 	sth	r3,0(r2)
		printf("Device ID=%04xh\r\n", *pID16);
   22fd0:	e0bfff17 	ldw	r2,-4(fp)
   22fd4:	1080000b 	ldhu	r2,0(r2)
   22fd8:	10bfffcc 	andi	r2,r2,65535
   22fdc:	100b883a 	mov	r5,r2
   22fe0:	010000f4 	movhi	r4,3
   22fe4:	21110f04 	addi	r4,r4,17468
   22fe8:	00271800 	call	27180 <printf>
	}
	return bPass;
   22fec:	e0bffe03 	ldbu	r2,-8(fp)


}
   22ff0:	e037883a 	mov	sp,fp
   22ff4:	dfc00117 	ldw	ra,4(sp)
   22ff8:	df000017 	ldw	fp,0(sp)
   22ffc:	dec00204 	addi	sp,sp,8
   23000:	f800283a 	ret

00023004 <RH_Temp_Sensor_Init>:


bool RH_Temp_Sensor_Init()
{
   23004:	defffd04 	addi	sp,sp,-12
   23008:	dfc00215 	stw	ra,8(sp)
   2300c:	df000115 	stw	fp,4(sp)
   23010:	df000104 	addi	fp,sp,4


    //Temperature and Humidity are acquired in sequence, Temperature first.
    //Temperature Measurement Resolution: 14 bits
    //Humidity Measurement Resolution: 14 bits
	bPass =  Write_Configuration(1,0,0);
   23014:	000d883a 	mov	r6,zero
   23018:	000b883a 	mov	r5,zero
   2301c:	01000044 	movi	r4,1
   23020:	00232cc0 	call	232cc <Write_Configuration>
   23024:	e0bfff05 	stb	r2,-4(fp)
//    else
//    {
//    	printf("RH_Temp Sensor Set Configuration Failed!\r\n");
//    }

    return bPass;
   23028:	e0bfff03 	ldbu	r2,-4(fp)

}
   2302c:	e037883a 	mov	sp,fp
   23030:	dfc00117 	ldw	ra,4(sp)
   23034:	df000017 	ldw	fp,0(sp)
   23038:	dec00204 	addi	sp,sp,8
   2303c:	f800283a 	ret

00023040 <RH_Temp_Sensor_Read>:

bool RH_Temp_Sensor_Read(float *fTemperature, float *fHumidity){
   23040:	defffa04 	addi	sp,sp,-24
   23044:	dfc00515 	stw	ra,20(sp)
   23048:	df000415 	stw	fp,16(sp)
   2304c:	df000404 	addi	fp,sp,16
   23050:	e13ffe15 	stw	r4,-8(fp)
   23054:	e17fff15 	stw	r5,-4(fp)
	bool bPass;
	alt_u8 szValue8[4];
	alt_u16 Value16;
	//int i;

	bPass =  th_Read_Measure_Data(R_TEMPERATURE, szValue8, sizeof(szValue8));
   23058:	e0bffd04 	addi	r2,fp,-12
   2305c:	01800104 	movi	r6,4
   23060:	100b883a 	mov	r5,r2
   23064:	0009883a 	mov	r4,zero
   23068:	00233640 	call	23364 <th_Read_Measure_Data>
   2306c:	e0bffc05 	stb	r2,-16(fp)
	if (bPass){
   23070:	e0bffc03 	ldbu	r2,-16(fp)
   23074:	10004226 	beq	r2,zero,23180 <RH_Temp_Sensor_Read+0x140>
		//for(i=0;i<4;i++)
		//	printf("%02XH ", szValue8[i]);

		// temperature
		Value16 = (szValue8[0] << 8) | szValue8[1];
   23078:	e0bffd03 	ldbu	r2,-12(fp)
   2307c:	10803fcc 	andi	r2,r2,255
   23080:	1004923a 	slli	r2,r2,8
   23084:	1007883a 	mov	r3,r2
   23088:	e0bffd43 	ldbu	r2,-11(fp)
   2308c:	10803fcc 	andi	r2,r2,255
   23090:	1884b03a 	or	r2,r3,r2
   23094:	e0bffc8d 	sth	r2,-14(fp)
		*fTemperature = (float)Value16/397.188 -40.0;
   23098:	e0bffc8b 	ldhu	r2,-14(fp)
   2309c:	1009883a 	mov	r4,r2
   230a0:	0024b9c0 	call	24b9c <__floatunsisf>
   230a4:	1007883a 	mov	r3,r2
   230a8:	1809883a 	mov	r4,r3
   230ac:	0026e340 	call	26e34 <__extendsfdf2>
   230b0:	1011883a 	mov	r8,r2
   230b4:	1813883a 	mov	r9,r3
   230b8:	018312b4 	movhi	r6,3146
   230bc:	31ae9784 	addi	r6,r6,-17826
   230c0:	01d01e74 	movhi	r7,16505
   230c4:	39f4c084 	addi	r7,r7,-11518
   230c8:	4009883a 	mov	r4,r8
   230cc:	480b883a 	mov	r5,r9
   230d0:	00255380 	call	25538 <__divdf3>
   230d4:	1009883a 	mov	r4,r2
   230d8:	180b883a 	mov	r5,r3
   230dc:	2005883a 	mov	r2,r4
   230e0:	2807883a 	mov	r3,r5
   230e4:	000d883a 	mov	r6,zero
   230e8:	01d01134 	movhi	r7,16452
   230ec:	1009883a 	mov	r4,r2
   230f0:	180b883a 	mov	r5,r3
   230f4:	00265380 	call	26538 <__subdf3>
   230f8:	1009883a 	mov	r4,r2
   230fc:	180b883a 	mov	r5,r3
   23100:	2005883a 	mov	r2,r4
   23104:	2807883a 	mov	r3,r5
   23108:	1009883a 	mov	r4,r2
   2310c:	180b883a 	mov	r5,r3
   23110:	0026f440 	call	26f44 <__truncdfsf2>
   23114:	1007883a 	mov	r3,r2
   23118:	e0bffe17 	ldw	r2,-8(fp)
   2311c:	10c00015 	stw	r3,0(r2)

		// humidity
		Value16 = (szValue8[2] << 8) | szValue8[3];
   23120:	e0bffd83 	ldbu	r2,-10(fp)
   23124:	10803fcc 	andi	r2,r2,255
   23128:	1004923a 	slli	r2,r2,8
   2312c:	1007883a 	mov	r3,r2
   23130:	e0bffdc3 	ldbu	r2,-9(fp)
   23134:	10803fcc 	andi	r2,r2,255
   23138:	1884b03a 	or	r2,r3,r2
   2313c:	e0bffc8d 	sth	r2,-14(fp)
		*fHumidity = (float)((float)Value16/65536)*100;
   23140:	e0bffc8b 	ldhu	r2,-14(fp)
   23144:	1009883a 	mov	r4,r2
   23148:	0024b9c0 	call	24b9c <__floatunsisf>
   2314c:	1007883a 	mov	r3,r2
   23150:	0151e034 	movhi	r5,18304
   23154:	1809883a 	mov	r4,r3
   23158:	0023d580 	call	23d58 <__divsf3>
   2315c:	1007883a 	mov	r3,r2
   23160:	1805883a 	mov	r2,r3
   23164:	0150b234 	movhi	r5,17096
   23168:	1009883a 	mov	r4,r2
   2316c:	00241980 	call	24198 <__mulsf3>
   23170:	1009883a 	mov	r4,r2
   23174:	2007883a 	mov	r3,r4
   23178:	e0bfff17 	ldw	r2,-4(fp)
   2317c:	10c00015 	stw	r3,0(r2)
	}

	return bPass;
   23180:	e0bffc03 	ldbu	r2,-16(fp)

}
   23184:	e037883a 	mov	sp,fp
   23188:	dfc00117 	ldw	ra,4(sp)
   2318c:	df000017 	ldw	fp,0(sp)
   23190:	dec00204 	addi	sp,sp,8
   23194:	f800283a 	ret

00023198 <Read_Configuration>:



bool Read_Configuration(void)
{
   23198:	defffd04 	addi	sp,sp,-12
   2319c:	dfc00215 	stw	ra,8(sp)
   231a0:	df000115 	stw	fp,4(sp)
   231a4:	df000104 	addi	fp,sp,4
	bool bPass;
	alt_u16 data;

	bPass = th_read_register(R_CONFIGURATION, &data);
   231a8:	e0bfff84 	addi	r2,fp,-2
   231ac:	100b883a 	mov	r5,r2
   231b0:	01000084 	movi	r4,2
   231b4:	002364c0 	call	2364c <th_read_register>
   231b8:	e0bfff05 	stb	r2,-4(fp)


	if(bPass){
   231bc:	e0bfff03 	ldbu	r2,-4(fp)
   231c0:	10003926 	beq	r2,zero,232a8 <Read_Configuration+0x110>

		printf("Read Configuration Data = 0x%04X \r\n",data);
   231c4:	e0bfff8b 	ldhu	r2,-2(fp)
   231c8:	10bfffcc 	andi	r2,r2,65535
   231cc:	100b883a 	mov	r5,r2
   231d0:	010000f4 	movhi	r4,3
   231d4:	21111404 	addi	r4,r4,17488
   231d8:	00271800 	call	27180 <printf>

		if(((data>>12)&0x0001) == 0) printf("Acquisition mode:Temperature or Humidity is acquired.\r\n ");
   231dc:	e0bfff8b 	ldhu	r2,-2(fp)
   231e0:	10bfffcc 	andi	r2,r2,65535
   231e4:	1004d33a 	srli	r2,r2,12
   231e8:	10bfffcc 	andi	r2,r2,65535
   231ec:	1080004c 	andi	r2,r2,1
   231f0:	1000041e 	bne	r2,zero,23204 <Read_Configuration+0x6c>
   231f4:	010000f4 	movhi	r4,3
   231f8:	21111d04 	addi	r4,r4,17524
   231fc:	00271800 	call	27180 <printf>
   23200:	00000306 	br	23210 <Read_Configuration+0x78>
		else printf("Acquisition mode:Temperature and Humidity are acquired in sequence,Temperature first.\r\n ");
   23204:	010000f4 	movhi	r4,3
   23208:	21112c04 	addi	r4,r4,17584
   2320c:	00271800 	call	27180 <printf>

		if(((data>>10)&0x0001) == 0) printf("Temperature Measurement Resolution: 14 bit.\r\n ");
   23210:	e0bfff8b 	ldhu	r2,-2(fp)
   23214:	10bfffcc 	andi	r2,r2,65535
   23218:	1004d2ba 	srli	r2,r2,10
   2321c:	10bfffcc 	andi	r2,r2,65535
   23220:	1080004c 	andi	r2,r2,1
   23224:	1000041e 	bne	r2,zero,23238 <Read_Configuration+0xa0>
   23228:	010000f4 	movhi	r4,3
   2322c:	21114304 	addi	r4,r4,17676
   23230:	00271800 	call	27180 <printf>
   23234:	00000306 	br	23244 <Read_Configuration+0xac>
		else  printf("Temperature Measurement Resolution: 11 bit.\r\n ");
   23238:	010000f4 	movhi	r4,3
   2323c:	21114f04 	addi	r4,r4,17724
   23240:	00271800 	call	27180 <printf>

		if(((data>> 8)&0x0003) == 0) printf("Humidity Measurement Resolution: 14 bit.\r\n ");
   23244:	e0bfff8b 	ldhu	r2,-2(fp)
   23248:	10bfffcc 	andi	r2,r2,65535
   2324c:	1004d23a 	srli	r2,r2,8
   23250:	10bfffcc 	andi	r2,r2,65535
   23254:	108000cc 	andi	r2,r2,3
   23258:	1000041e 	bne	r2,zero,2326c <Read_Configuration+0xd4>
   2325c:	010000f4 	movhi	r4,3
   23260:	21115b04 	addi	r4,r4,17772
   23264:	00271800 	call	27180 <printf>
   23268:	00001206 	br	232b4 <Read_Configuration+0x11c>
		else if(((data>> 8)&0x0003) == 1) printf("Humidity Measurement Resolution: 11 bit.\r\n ");
   2326c:	e0bfff8b 	ldhu	r2,-2(fp)
   23270:	10bfffcc 	andi	r2,r2,65535
   23274:	1004d23a 	srli	r2,r2,8
   23278:	10bfffcc 	andi	r2,r2,65535
   2327c:	108000cc 	andi	r2,r2,3
   23280:	10800058 	cmpnei	r2,r2,1
   23284:	1000041e 	bne	r2,zero,23298 <Read_Configuration+0x100>
   23288:	010000f4 	movhi	r4,3
   2328c:	21116604 	addi	r4,r4,17816
   23290:	00271800 	call	27180 <printf>
   23294:	00000706 	br	232b4 <Read_Configuration+0x11c>
		else  printf("Humidity Measurement Resolution: 8 bit.\r\n ");
   23298:	010000f4 	movhi	r4,3
   2329c:	21117104 	addi	r4,r4,17860
   232a0:	00271800 	call	27180 <printf>
   232a4:	00000306 	br	232b4 <Read_Configuration+0x11c>

	}else{
		printf("Failed to read configure data.\r\n");
   232a8:	010000f4 	movhi	r4,3
   232ac:	21117c04 	addi	r4,r4,17904
   232b0:	002727c0 	call	2727c <puts>
	}

	return bPass;
   232b4:	e0bfff03 	ldbu	r2,-4(fp)
}
   232b8:	e037883a 	mov	sp,fp
   232bc:	dfc00117 	ldw	ra,4(sp)
   232c0:	df000017 	ldw	fp,0(sp)
   232c4:	dec00204 	addi	sp,sp,8
   232c8:	f800283a 	ret

000232cc <Write_Configuration>:



bool Write_Configuration(alt_u8 acquisition_mode , alt_u8 temp_resolution,alt_u8 humidity_resolution)
{
   232cc:	defffa04 	addi	sp,sp,-24
   232d0:	dfc00515 	stw	ra,20(sp)
   232d4:	df000415 	stw	fp,16(sp)
   232d8:	df000404 	addi	fp,sp,16
   232dc:	2807883a 	mov	r3,r5
   232e0:	3005883a 	mov	r2,r6
   232e4:	e13ffd05 	stb	r4,-12(fp)
   232e8:	e0fffe05 	stb	r3,-8(fp)
   232ec:	e0bfff05 	stb	r2,-4(fp)
	bool bPass;
	alt_u16 Data16;


	Data16 = ((acquisition_mode&0x0001) <<12) + ((temp_resolution&0x0001)<<10) + ((humidity_resolution&0x0003)<<8);
   232f0:	e0bffd03 	ldbu	r2,-12(fp)
   232f4:	1080004c 	andi	r2,r2,1
   232f8:	1004933a 	slli	r2,r2,12
   232fc:	1007883a 	mov	r3,r2
   23300:	e0bffe03 	ldbu	r2,-8(fp)
   23304:	1080004c 	andi	r2,r2,1
   23308:	100492ba 	slli	r2,r2,10
   2330c:	1885883a 	add	r2,r3,r2
   23310:	1007883a 	mov	r3,r2
   23314:	e0bfff03 	ldbu	r2,-4(fp)
   23318:	108000cc 	andi	r2,r2,3
   2331c:	1004923a 	slli	r2,r2,8
   23320:	1885883a 	add	r2,r3,r2
   23324:	e0bffc0d 	sth	r2,-16(fp)

	//printf("Write Configure Register: %04xh\r\n", Data16);

	bPass = th_write_register(R_CONFIGURATION, Data16);
   23328:	e0bffc0b 	ldhu	r2,-16(fp)
   2332c:	100b883a 	mov	r5,r2
   23330:	01000084 	movi	r4,2
   23334:	00235d40 	call	235d4 <th_write_register>
   23338:	e0bffc85 	stb	r2,-14(fp)

	if (bPass)
   2333c:	e0bffc83 	ldbu	r2,-14(fp)
   23340:	10000226 	beq	r2,zero,2334c <Write_Configuration+0x80>
		usleep(20*1000); // wait ready
   23344:	01138804 	movi	r4,20000
   23348:	00320640 	call	32064 <usleep>

	return bPass;
   2334c:	e0bffc83 	ldbu	r2,-14(fp)
}
   23350:	e037883a 	mov	sp,fp
   23354:	dfc00117 	ldw	ra,4(sp)
   23358:	df000017 	ldw	fp,0(sp)
   2335c:	dec00204 	addi	sp,sp,8
   23360:	f800283a 	ret

00023364 <th_Read_Measure_Data>:


bool th_Read_Measure_Data(int nRegisterNo, alt_u8 *pData8, int nReadLength)
{
   23364:	defff804 	addi	sp,sp,-32
   23368:	dfc00715 	stw	ra,28(sp)
   2336c:	df000615 	stw	fp,24(sp)
   23370:	dc000515 	stw	r16,20(sp)
   23374:	df000604 	addi	fp,sp,24
   23378:	e13ffc15 	stw	r4,-16(fp)
   2337c:	e17ffd15 	stw	r5,-12(fp)
   23380:	e1bffe15 	stw	r6,-8(fp)
	bool bPass;
	const bool bSTOP = TRUE; // need stop so the ready pin can assert when measure is done
   23384:	00800044 	movi	r2,1
   23388:	e0bffa85 	stb	r2,-22(fp)

	// write address
	bPass = OC_I2C_Write_Addr(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR,nRegisterNo, bSTOP);
   2338c:	e0bffc17 	ldw	r2,-16(fp)
   23390:	10803fcc 	andi	r2,r2,255
   23394:	e0fffa83 	ldbu	r3,-22(fp)
   23398:	180f883a 	mov	r7,r3
   2339c:	100d883a 	mov	r6,r2
   233a0:	01402004 	movi	r5,128
   233a4:	01000134 	movhi	r4,4
   233a8:	21040004 	addi	r4,r4,4096
   233ac:	0020b080 	call	20b08 <OC_I2C_Write_Addr>
   233b0:	e0bffa05 	stb	r2,-24(fp)

	// check hardware pin DRDYn to make sure measure is done
	if (bPass){ // check ready hardware pin - DRDYn
   233b4:	e0bffa03 	ldbu	r2,-24(fp)
   233b8:	10002926 	beq	r2,zero,23460 <th_Read_Measure_Data+0xfc>
		//
		bool bTimeout = false;
   233bc:	e03ffa45 	stb	zero,-23(fp)
		alt_u32 TimeStart;

		bPass = false;
   233c0:	e03ffa05 	stb	zero,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   233c4:	d0a6db17 	ldw	r2,-25748(gp)
		TimeStart = alt_nticks();
   233c8:	e0bffb15 	stw	r2,-20(fp)
		bTimeout = false;
   233cc:	e03ffa45 	stb	zero,-23(fp)
		while(!bPass && !bTimeout){
   233d0:	00001206 	br	2341c <th_Read_Measure_Data+0xb8>
			if ((IORD(RH_TEMP_DRDY_N_BASE, 0x00) & 0x01) == 0x00)
   233d4:	00800134 	movhi	r2,4
   233d8:	10842004 	addi	r2,r2,4224
   233dc:	10800037 	ldwio	r2,0(r2)
   233e0:	1080004c 	andi	r2,r2,1
   233e4:	1000031e 	bne	r2,zero,233f4 <th_Read_Measure_Data+0x90>
				bPass = TRUE;
   233e8:	00800044 	movi	r2,1
   233ec:	e0bffa05 	stb	r2,-24(fp)
   233f0:	00000a06 	br	2341c <th_Read_Measure_Data+0xb8>
   233f4:	d0e6db17 	ldw	r3,-25748(gp)
			else if ((alt_nticks() - TimeStart) > alt_ticks_per_second()/10) // 0.1 second for timeout
   233f8:	e0bffb17 	ldw	r2,-20(fp)
   233fc:	18a1c83a 	sub	r16,r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23400:	d0a6da17 	ldw	r2,-25752(gp)
   23404:	01400284 	movi	r5,10
   23408:	1009883a 	mov	r4,r2
   2340c:	00237d40 	call	237d4 <__udivsi3>
   23410:	1400022e 	bgeu	r2,r16,2341c <th_Read_Measure_Data+0xb8>
				bTimeout = TRUE;
   23414:	00800044 	movi	r2,1
   23418:	e0bffa45 	stb	r2,-23(fp)
		alt_u32 TimeStart;

		bPass = false;
		TimeStart = alt_nticks();
		bTimeout = false;
		while(!bPass && !bTimeout){
   2341c:	e0bffa03 	ldbu	r2,-24(fp)
   23420:	1080005c 	xori	r2,r2,1
   23424:	10803fcc 	andi	r2,r2,255
   23428:	10000426 	beq	r2,zero,2343c <th_Read_Measure_Data+0xd8>
   2342c:	e0bffa43 	ldbu	r2,-23(fp)
   23430:	1080005c 	xori	r2,r2,1
   23434:	10803fcc 	andi	r2,r2,255
   23438:	103fe61e 	bne	r2,zero,233d4 <__alt_data_end+0xfffe3fd4>
			if ((IORD(RH_TEMP_DRDY_N_BASE, 0x00) & 0x01) == 0x00)
				bPass = TRUE;
			else if ((alt_nticks() - TimeStart) > alt_ticks_per_second()/10) // 0.1 second for timeout
				bTimeout = TRUE;
		}
		if (!bPass)
   2343c:	e0bffa03 	ldbu	r2,-24(fp)
   23440:	1080005c 	xori	r2,r2,1
   23444:	10803fcc 	andi	r2,r2,255
   23448:	10000326 	beq	r2,zero,23458 <th_Read_Measure_Data+0xf4>
			printf("Warning: DRDYn pin not ready (high)!\r\n");
   2344c:	010000f4 	movhi	r4,3
   23450:	21118404 	addi	r4,r4,17936
   23454:	002727c0 	call	2727c <puts>
		bPass = TRUE;
   23458:	00800044 	movi	r2,1
   2345c:	e0bffa05 	stb	r2,-24(fp)
	}

	// read measured data
	if (bPass){
   23460:	e0bffa03 	ldbu	r2,-24(fp)
   23464:	10000726 	beq	r2,zero,23484 <th_Read_Measure_Data+0x120>
		bPass =  OC_I2C_Read_Continue(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR, pData8, nReadLength);
   23468:	e1fffe17 	ldw	r7,-8(fp)
   2346c:	e1bffd17 	ldw	r6,-12(fp)
   23470:	01402004 	movi	r5,128
   23474:	01000134 	movhi	r4,4
   23478:	21040004 	addi	r4,r4,4096
   2347c:	0020c100 	call	20c10 <OC_I2C_Read_Continue>
   23480:	e0bffa05 	stb	r2,-24(fp)

	}



	return bPass;
   23484:	e0bffa03 	ldbu	r2,-24(fp)
}
   23488:	e6ffff04 	addi	sp,fp,-4
   2348c:	dfc00217 	ldw	ra,8(sp)
   23490:	df000117 	ldw	fp,4(sp)
   23494:	dc000017 	ldw	r16,0(sp)
   23498:	dec00304 	addi	sp,sp,12
   2349c:	f800283a 	ret

000234a0 <th_reset>:


bool th_reset(alt_u32 I2C_Controller_Base){
   234a0:	defffc04 	addi	sp,sp,-16
   234a4:	dfc00315 	stw	ra,12(sp)
   234a8:	df000215 	stw	fp,8(sp)
   234ac:	df000204 	addi	fp,sp,8
   234b0:	e13fff15 	stw	r4,-4(fp)
	bool bPass;

	bPass = th_write_register(R_CONFIGURATION, 0x8000);
   234b4:	01600014 	movui	r5,32768
   234b8:	01000084 	movi	r4,2
   234bc:	00235d40 	call	235d4 <th_write_register>
   234c0:	e0bffe05 	stb	r2,-8(fp)
	return bPass;
   234c4:	e0bffe03 	ldbu	r2,-8(fp)
}
   234c8:	e037883a 	mov	sp,fp
   234cc:	dfc00117 	ldw	ra,4(sp)
   234d0:	df000017 	ldw	fp,0(sp)
   234d4:	dec00204 	addi	sp,sp,8
   234d8:	f800283a 	ret

000234dc <th_dump_chip_info>:


bool th_dump_chip_info(alt_u32 I2C_Controller_Base){
   234dc:	defffc04 	addi	sp,sp,-16
   234e0:	dfc00315 	stw	ra,12(sp)
   234e4:	df000215 	stw	fp,8(sp)
   234e8:	df000204 	addi	fp,sp,8
   234ec:	e13fff15 	stw	r4,-4(fp)
	alt_u16 Data16;
	bool bPass;

	// R_DEVICE_ID
	bPass = th_read_register(R_DEVICE_ID, &Data16);
   234f0:	e0bffe84 	addi	r2,fp,-6
   234f4:	100b883a 	mov	r5,r2
   234f8:	01003fc4 	movi	r4,255
   234fc:	002364c0 	call	2364c <th_read_register>
   23500:	e0bffe05 	stb	r2,-8(fp)
	if (bPass){
   23504:	e0bffe03 	ldbu	r2,-8(fp)
   23508:	10000726 	beq	r2,zero,23528 <th_dump_chip_info+0x4c>
		printf("DEVICE ID=%04xh(0x1000 expected)\r\n", Data16);
   2350c:	e0bffe8b 	ldhu	r2,-6(fp)
   23510:	10bfffcc 	andi	r2,r2,65535
   23514:	100b883a 	mov	r5,r2
   23518:	010000f4 	movhi	r4,3
   2351c:	21118e04 	addi	r4,r4,17976
   23520:	00271800 	call	27180 <printf>
   23524:	00000306 	br	23534 <th_dump_chip_info+0x58>
	}else{
		printf("Failed to read DEVICE ID\r\n");
   23528:	010000f4 	movhi	r4,3
   2352c:	21119704 	addi	r4,r4,18012
   23530:	002727c0 	call	2727c <puts>
	}

	// R_DEVICE_ID
	bPass = th_read_register(R_MANUFACTURER_ID, &Data16);
   23534:	e0bffe84 	addi	r2,fp,-6
   23538:	100b883a 	mov	r5,r2
   2353c:	01003f84 	movi	r4,254
   23540:	002364c0 	call	2364c <th_read_register>
   23544:	e0bffe05 	stb	r2,-8(fp)
	if (bPass){
   23548:	e0bffe03 	ldbu	r2,-8(fp)
   2354c:	10000726 	beq	r2,zero,2356c <th_dump_chip_info+0x90>
		printf("MANUFACTURER ID=%04xh(0x5449 expected)\r\n", Data16);
   23550:	e0bffe8b 	ldhu	r2,-6(fp)
   23554:	10bfffcc 	andi	r2,r2,65535
   23558:	100b883a 	mov	r5,r2
   2355c:	010000f4 	movhi	r4,3
   23560:	21119e04 	addi	r4,r4,18040
   23564:	00271800 	call	27180 <printf>
   23568:	00000306 	br	23578 <th_dump_chip_info+0x9c>
	}else{
		printf("Failed to read MANUFACTURER ID\r\n");
   2356c:	010000f4 	movhi	r4,3
   23570:	2111a904 	addi	r4,r4,18084
   23574:	002727c0 	call	2727c <puts>
	}

	// configure Data
	bPass =  th_read_register(R_CONFIGURATION, &Data16);
   23578:	e0bffe84 	addi	r2,fp,-6
   2357c:	100b883a 	mov	r5,r2
   23580:	01000084 	movi	r4,2
   23584:	002364c0 	call	2364c <th_read_register>
   23588:	e0bffe05 	stb	r2,-8(fp)
	if (bPass){
   2358c:	e0bffe03 	ldbu	r2,-8(fp)
   23590:	10000726 	beq	r2,zero,235b0 <th_dump_chip_info+0xd4>
		printf("Configure Data=%04xh\r\n", Data16);
   23594:	e0bffe8b 	ldhu	r2,-6(fp)
   23598:	10bfffcc 	andi	r2,r2,65535
   2359c:	100b883a 	mov	r5,r2
   235a0:	010000f4 	movhi	r4,3
   235a4:	2111b104 	addi	r4,r4,18116
   235a8:	00271800 	call	27180 <printf>
   235ac:	00000306 	br	235bc <th_dump_chip_info+0xe0>
	}else{
		printf("Failed to read configure data\r\n");
   235b0:	010000f4 	movhi	r4,3
   235b4:	2111b704 	addi	r4,r4,18140
   235b8:	002727c0 	call	2727c <puts>
	}

	return bPass;
   235bc:	e0bffe03 	ldbu	r2,-8(fp)
}
   235c0:	e037883a 	mov	sp,fp
   235c4:	dfc00117 	ldw	ra,4(sp)
   235c8:	df000017 	ldw	fp,0(sp)
   235cc:	dec00204 	addi	sp,sp,8
   235d0:	f800283a 	ret

000235d4 <th_write_register>:


bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
   235d4:	defffa04 	addi	sp,sp,-24
   235d8:	dfc00515 	stw	ra,20(sp)
   235dc:	df000415 	stw	fp,16(sp)
   235e0:	df000404 	addi	fp,sp,16
   235e4:	2007883a 	mov	r3,r4
   235e8:	2805883a 	mov	r2,r5
   235ec:	e0fffe05 	stb	r3,-8(fp)
   235f0:	e0bfff0d 	sth	r2,-4(fp)
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
   235f4:	e0bfff0b 	ldhu	r2,-4(fp)
   235f8:	1004d23a 	srli	r2,r2,8
   235fc:	e0bffd45 	stb	r2,-11(fp)
	szData8[1] = Data16 & 0xFF;
   23600:	e0bfff0b 	ldhu	r2,-4(fp)
   23604:	e0bffd85 	stb	r2,-10(fp)
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
   23608:	e0fffe03 	ldbu	r3,-8(fp)
   2360c:	e13ffd44 	addi	r4,fp,-11
   23610:	00800084 	movi	r2,2
   23614:	d8800015 	stw	r2,0(sp)
   23618:	200f883a 	mov	r7,r4
   2361c:	180d883a 	mov	r6,r3
   23620:	01402004 	movi	r5,128
   23624:	01000134 	movhi	r4,4
   23628:	21040004 	addi	r4,r4,4096
   2362c:	002066c0 	call	2066c <OC_I2C_Write>
   23630:	e0bffd05 	stb	r2,-12(fp)

	return bPass;
   23634:	e0bffd03 	ldbu	r2,-12(fp)

}
   23638:	e037883a 	mov	sp,fp
   2363c:	dfc00117 	ldw	ra,4(sp)
   23640:	df000017 	ldw	fp,0(sp)
   23644:	dec00204 	addi	sp,sp,8
   23648:	f800283a 	ret

0002364c <th_read_register>:


bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16){
   2364c:	defffa04 	addi	sp,sp,-24
   23650:	dfc00515 	stw	ra,20(sp)
   23654:	df000415 	stw	fp,16(sp)
   23658:	df000404 	addi	fp,sp,16
   2365c:	2005883a 	mov	r2,r4
   23660:	e17fff15 	stw	r5,-4(fp)
   23664:	e0bffe05 	stb	r2,-8(fp)
	bool bPass;
	alt_u8 szData8[2];

	bPass = OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
   23668:	e0fffe03 	ldbu	r3,-8(fp)
   2366c:	e13ffd44 	addi	r4,fp,-11
   23670:	00800084 	movi	r2,2
   23674:	d8800015 	stw	r2,0(sp)
   23678:	200f883a 	mov	r7,r4
   2367c:	180d883a 	mov	r6,r3
   23680:	01402004 	movi	r5,128
   23684:	01000134 	movhi	r4,4
   23688:	21040004 	addi	r4,r4,4096
   2368c:	002091c0 	call	2091c <OC_I2C_Read>
   23690:	e0bffd05 	stb	r2,-12(fp)
	if (bPass){
   23694:	e0bffd03 	ldbu	r2,-12(fp)
   23698:	10000a26 	beq	r2,zero,236c4 <th_read_register+0x78>
		*pData16 = (szData8[0] << 8) | szData8[1];
   2369c:	e0bffd43 	ldbu	r2,-11(fp)
   236a0:	10803fcc 	andi	r2,r2,255
   236a4:	1004923a 	slli	r2,r2,8
   236a8:	1007883a 	mov	r3,r2
   236ac:	e0bffd83 	ldbu	r2,-10(fp)
   236b0:	10803fcc 	andi	r2,r2,255
   236b4:	1884b03a 	or	r2,r3,r2
   236b8:	1007883a 	mov	r3,r2
   236bc:	e0bfff17 	ldw	r2,-4(fp)
   236c0:	10c0000d 	sth	r3,0(r2)
	}

	return bPass;
   236c4:	e0bffd03 	ldbu	r2,-12(fp)


}
   236c8:	e037883a 	mov	sp,fp
   236cc:	dfc00117 	ldw	ra,4(sp)
   236d0:	df000017 	ldw	fp,0(sp)
   236d4:	dec00204 	addi	sp,sp,8
   236d8:	f800283a 	ret

000236dc <__divsi3>:
   236dc:	20001b16 	blt	r4,zero,2374c <__divsi3+0x70>
   236e0:	000f883a 	mov	r7,zero
   236e4:	28001616 	blt	r5,zero,23740 <__divsi3+0x64>
   236e8:	200d883a 	mov	r6,r4
   236ec:	29001a2e 	bgeu	r5,r4,23758 <__divsi3+0x7c>
   236f0:	00800804 	movi	r2,32
   236f4:	00c00044 	movi	r3,1
   236f8:	00000106 	br	23700 <__divsi3+0x24>
   236fc:	10000d26 	beq	r2,zero,23734 <__divsi3+0x58>
   23700:	294b883a 	add	r5,r5,r5
   23704:	10bfffc4 	addi	r2,r2,-1
   23708:	18c7883a 	add	r3,r3,r3
   2370c:	293ffb36 	bltu	r5,r4,236fc <__alt_data_end+0xfffe42fc>
   23710:	0005883a 	mov	r2,zero
   23714:	18000726 	beq	r3,zero,23734 <__divsi3+0x58>
   23718:	0005883a 	mov	r2,zero
   2371c:	31400236 	bltu	r6,r5,23728 <__divsi3+0x4c>
   23720:	314dc83a 	sub	r6,r6,r5
   23724:	10c4b03a 	or	r2,r2,r3
   23728:	1806d07a 	srli	r3,r3,1
   2372c:	280ad07a 	srli	r5,r5,1
   23730:	183ffa1e 	bne	r3,zero,2371c <__alt_data_end+0xfffe431c>
   23734:	38000126 	beq	r7,zero,2373c <__divsi3+0x60>
   23738:	0085c83a 	sub	r2,zero,r2
   2373c:	f800283a 	ret
   23740:	014bc83a 	sub	r5,zero,r5
   23744:	39c0005c 	xori	r7,r7,1
   23748:	003fe706 	br	236e8 <__alt_data_end+0xfffe42e8>
   2374c:	0109c83a 	sub	r4,zero,r4
   23750:	01c00044 	movi	r7,1
   23754:	003fe306 	br	236e4 <__alt_data_end+0xfffe42e4>
   23758:	00c00044 	movi	r3,1
   2375c:	003fee06 	br	23718 <__alt_data_end+0xfffe4318>

00023760 <__modsi3>:
   23760:	20001716 	blt	r4,zero,237c0 <__modsi3+0x60>
   23764:	000f883a 	mov	r7,zero
   23768:	2005883a 	mov	r2,r4
   2376c:	28001216 	blt	r5,zero,237b8 <__modsi3+0x58>
   23770:	2900162e 	bgeu	r5,r4,237cc <__modsi3+0x6c>
   23774:	01800804 	movi	r6,32
   23778:	00c00044 	movi	r3,1
   2377c:	00000106 	br	23784 <__modsi3+0x24>
   23780:	30000a26 	beq	r6,zero,237ac <__modsi3+0x4c>
   23784:	294b883a 	add	r5,r5,r5
   23788:	31bfffc4 	addi	r6,r6,-1
   2378c:	18c7883a 	add	r3,r3,r3
   23790:	293ffb36 	bltu	r5,r4,23780 <__alt_data_end+0xfffe4380>
   23794:	18000526 	beq	r3,zero,237ac <__modsi3+0x4c>
   23798:	1806d07a 	srli	r3,r3,1
   2379c:	11400136 	bltu	r2,r5,237a4 <__modsi3+0x44>
   237a0:	1145c83a 	sub	r2,r2,r5
   237a4:	280ad07a 	srli	r5,r5,1
   237a8:	183ffb1e 	bne	r3,zero,23798 <__alt_data_end+0xfffe4398>
   237ac:	38000126 	beq	r7,zero,237b4 <__modsi3+0x54>
   237b0:	0085c83a 	sub	r2,zero,r2
   237b4:	f800283a 	ret
   237b8:	014bc83a 	sub	r5,zero,r5
   237bc:	003fec06 	br	23770 <__alt_data_end+0xfffe4370>
   237c0:	0109c83a 	sub	r4,zero,r4
   237c4:	01c00044 	movi	r7,1
   237c8:	003fe706 	br	23768 <__alt_data_end+0xfffe4368>
   237cc:	00c00044 	movi	r3,1
   237d0:	003ff106 	br	23798 <__alt_data_end+0xfffe4398>

000237d4 <__udivsi3>:
   237d4:	200d883a 	mov	r6,r4
   237d8:	2900152e 	bgeu	r5,r4,23830 <__udivsi3+0x5c>
   237dc:	28001416 	blt	r5,zero,23830 <__udivsi3+0x5c>
   237e0:	00800804 	movi	r2,32
   237e4:	00c00044 	movi	r3,1
   237e8:	00000206 	br	237f4 <__udivsi3+0x20>
   237ec:	10000e26 	beq	r2,zero,23828 <__udivsi3+0x54>
   237f0:	28000516 	blt	r5,zero,23808 <__udivsi3+0x34>
   237f4:	294b883a 	add	r5,r5,r5
   237f8:	10bfffc4 	addi	r2,r2,-1
   237fc:	18c7883a 	add	r3,r3,r3
   23800:	293ffa36 	bltu	r5,r4,237ec <__alt_data_end+0xfffe43ec>
   23804:	18000826 	beq	r3,zero,23828 <__udivsi3+0x54>
   23808:	0005883a 	mov	r2,zero
   2380c:	31400236 	bltu	r6,r5,23818 <__udivsi3+0x44>
   23810:	314dc83a 	sub	r6,r6,r5
   23814:	10c4b03a 	or	r2,r2,r3
   23818:	1806d07a 	srli	r3,r3,1
   2381c:	280ad07a 	srli	r5,r5,1
   23820:	183ffa1e 	bne	r3,zero,2380c <__alt_data_end+0xfffe440c>
   23824:	f800283a 	ret
   23828:	0005883a 	mov	r2,zero
   2382c:	f800283a 	ret
   23830:	00c00044 	movi	r3,1
   23834:	003ff406 	br	23808 <__alt_data_end+0xfffe4408>

00023838 <__umodsi3>:
   23838:	2005883a 	mov	r2,r4
   2383c:	2900122e 	bgeu	r5,r4,23888 <__umodsi3+0x50>
   23840:	28001116 	blt	r5,zero,23888 <__umodsi3+0x50>
   23844:	01800804 	movi	r6,32
   23848:	00c00044 	movi	r3,1
   2384c:	00000206 	br	23858 <__umodsi3+0x20>
   23850:	30000c26 	beq	r6,zero,23884 <__umodsi3+0x4c>
   23854:	28000516 	blt	r5,zero,2386c <__umodsi3+0x34>
   23858:	294b883a 	add	r5,r5,r5
   2385c:	31bfffc4 	addi	r6,r6,-1
   23860:	18c7883a 	add	r3,r3,r3
   23864:	293ffa36 	bltu	r5,r4,23850 <__alt_data_end+0xfffe4450>
   23868:	18000626 	beq	r3,zero,23884 <__umodsi3+0x4c>
   2386c:	1806d07a 	srli	r3,r3,1
   23870:	11400136 	bltu	r2,r5,23878 <__umodsi3+0x40>
   23874:	1145c83a 	sub	r2,r2,r5
   23878:	280ad07a 	srli	r5,r5,1
   2387c:	183ffb1e 	bne	r3,zero,2386c <__alt_data_end+0xfffe446c>
   23880:	f800283a 	ret
   23884:	f800283a 	ret
   23888:	00c00044 	movi	r3,1
   2388c:	003ff706 	br	2386c <__alt_data_end+0xfffe446c>

00023890 <__addsf3>:
   23890:	defffc04 	addi	sp,sp,-16
   23894:	2004d7fa 	srli	r2,r4,31
   23898:	280cd5fa 	srli	r6,r5,23
   2389c:	dc000015 	stw	r16,0(sp)
   238a0:	00c02034 	movhi	r3,128
   238a4:	2020d5fa 	srli	r16,r4,23
   238a8:	280ed7fa 	srli	r7,r5,31
   238ac:	18ffffc4 	addi	r3,r3,-1
   238b0:	dc400115 	stw	r17,4(sp)
   238b4:	1908703a 	and	r4,r3,r4
   238b8:	194a703a 	and	r5,r3,r5
   238bc:	dfc00315 	stw	ra,12(sp)
   238c0:	dc800215 	stw	r18,8(sp)
   238c4:	14403fcc 	andi	r17,r2,255
   238c8:	84003fcc 	andi	r16,r16,255
   238cc:	200890fa 	slli	r4,r4,3
   238d0:	31803fcc 	andi	r6,r6,255
   238d4:	280a90fa 	slli	r5,r5,3
   238d8:	89c05026 	beq	r17,r7,23a1c <__addsf3+0x18c>
   238dc:	8185c83a 	sub	r2,r16,r6
   238e0:	00807a0e 	bge	zero,r2,23acc <__addsf3+0x23c>
   238e4:	30001e1e 	bne	r6,zero,23960 <__addsf3+0xd0>
   238e8:	28006d1e 	bne	r5,zero,23aa0 <__addsf3+0x210>
   238ec:	208001cc 	andi	r2,r4,7
   238f0:	10000426 	beq	r2,zero,23904 <__addsf3+0x74>
   238f4:	208003cc 	andi	r2,r4,15
   238f8:	00c00104 	movi	r3,4
   238fc:	10c00126 	beq	r2,r3,23904 <__addsf3+0x74>
   23900:	20c9883a 	add	r4,r4,r3
   23904:	2081002c 	andhi	r2,r4,1024
   23908:	10003926 	beq	r2,zero,239f0 <__addsf3+0x160>
   2390c:	84000044 	addi	r16,r16,1
   23910:	00803fc4 	movi	r2,255
   23914:	80807826 	beq	r16,r2,23af8 <__addsf3+0x268>
   23918:	200891ba 	slli	r4,r4,6
   2391c:	8805883a 	mov	r2,r17
   23920:	2008d27a 	srli	r4,r4,9
   23924:	84003fcc 	andi	r16,r16,255
   23928:	800695fa 	slli	r3,r16,23
   2392c:	10803fcc 	andi	r2,r2,255
   23930:	04002034 	movhi	r16,128
   23934:	843fffc4 	addi	r16,r16,-1
   23938:	100497fa 	slli	r2,r2,31
   2393c:	2408703a 	and	r4,r4,r16
   23940:	20e0b03a 	or	r16,r4,r3
   23944:	8084b03a 	or	r2,r16,r2
   23948:	dfc00317 	ldw	ra,12(sp)
   2394c:	dc800217 	ldw	r18,8(sp)
   23950:	dc400117 	ldw	r17,4(sp)
   23954:	dc000017 	ldw	r16,0(sp)
   23958:	dec00404 	addi	sp,sp,16
   2395c:	f800283a 	ret
   23960:	00c03fc4 	movi	r3,255
   23964:	80ffe126 	beq	r16,r3,238ec <__alt_data_end+0xfffe44ec>
   23968:	29410034 	orhi	r5,r5,1024
   2396c:	00c006c4 	movi	r3,27
   23970:	18807516 	blt	r3,r2,23b48 <__addsf3+0x2b8>
   23974:	00c00804 	movi	r3,32
   23978:	1887c83a 	sub	r3,r3,r2
   2397c:	28c6983a 	sll	r3,r5,r3
   23980:	288ad83a 	srl	r5,r5,r2
   23984:	1804c03a 	cmpne	r2,r3,zero
   23988:	288ab03a 	or	r5,r5,r2
   2398c:	2149c83a 	sub	r4,r4,r5
   23990:	2081002c 	andhi	r2,r4,1024
   23994:	10001426 	beq	r2,zero,239e8 <__addsf3+0x158>
   23998:	04810034 	movhi	r18,1024
   2399c:	94bfffc4 	addi	r18,r18,-1
   239a0:	24a4703a 	and	r18,r4,r18
   239a4:	9009883a 	mov	r4,r18
   239a8:	00270ec0 	call	270ec <__clzsi2>
   239ac:	10bffec4 	addi	r2,r2,-5
   239b0:	90a4983a 	sll	r18,r18,r2
   239b4:	14005416 	blt	r2,r16,23b08 <__addsf3+0x278>
   239b8:	1405c83a 	sub	r2,r2,r16
   239bc:	11000044 	addi	r4,r2,1
   239c0:	00800804 	movi	r2,32
   239c4:	1105c83a 	sub	r2,r2,r4
   239c8:	9084983a 	sll	r2,r18,r2
   239cc:	9124d83a 	srl	r18,r18,r4
   239d0:	0021883a 	mov	r16,zero
   239d4:	1008c03a 	cmpne	r4,r2,zero
   239d8:	9108b03a 	or	r4,r18,r4
   239dc:	003fc306 	br	238ec <__alt_data_end+0xfffe44ec>
   239e0:	1000db26 	beq	r2,zero,23d50 <__addsf3+0x4c0>
   239e4:	1009883a 	mov	r4,r2
   239e8:	208001cc 	andi	r2,r4,7
   239ec:	103fc11e 	bne	r2,zero,238f4 <__alt_data_end+0xfffe44f4>
   239f0:	2006d0fa 	srli	r3,r4,3
   239f4:	01003fc4 	movi	r4,255
   239f8:	8805883a 	mov	r2,r17
   239fc:	8100241e 	bne	r16,r4,23a90 <__addsf3+0x200>
   23a00:	18006e26 	beq	r3,zero,23bbc <__addsf3+0x32c>
   23a04:	19001034 	orhi	r4,r3,64
   23a08:	00c02034 	movhi	r3,128
   23a0c:	18ffffc4 	addi	r3,r3,-1
   23a10:	043fffc4 	movi	r16,-1
   23a14:	20c8703a 	and	r4,r4,r3
   23a18:	003fc206 	br	23924 <__alt_data_end+0xfffe4524>
   23a1c:	8187c83a 	sub	r3,r16,r6
   23a20:	00c03e0e 	bge	zero,r3,23b1c <__addsf3+0x28c>
   23a24:	30002326 	beq	r6,zero,23ab4 <__addsf3+0x224>
   23a28:	01803fc4 	movi	r6,255
   23a2c:	81bfaf26 	beq	r16,r6,238ec <__alt_data_end+0xfffe44ec>
   23a30:	29410034 	orhi	r5,r5,1024
   23a34:	018006c4 	movi	r6,27
   23a38:	30c07416 	blt	r6,r3,23c0c <__addsf3+0x37c>
   23a3c:	01800804 	movi	r6,32
   23a40:	30cdc83a 	sub	r6,r6,r3
   23a44:	298c983a 	sll	r6,r5,r6
   23a48:	28cad83a 	srl	r5,r5,r3
   23a4c:	3006c03a 	cmpne	r3,r6,zero
   23a50:	28cab03a 	or	r5,r5,r3
   23a54:	2149883a 	add	r4,r4,r5
   23a58:	20c1002c 	andhi	r3,r4,1024
   23a5c:	183fe226 	beq	r3,zero,239e8 <__alt_data_end+0xfffe45e8>
   23a60:	84000044 	addi	r16,r16,1
   23a64:	00c03fc4 	movi	r3,255
   23a68:	80c05426 	beq	r16,r3,23bbc <__addsf3+0x32c>
   23a6c:	00bf0034 	movhi	r2,64512
   23a70:	10bfffc4 	addi	r2,r2,-1
   23a74:	20c0004c 	andi	r3,r4,1
   23a78:	2088703a 	and	r4,r4,r2
   23a7c:	2008d07a 	srli	r4,r4,1
   23a80:	20c8b03a 	or	r4,r4,r3
   23a84:	003f9906 	br	238ec <__alt_data_end+0xfffe44ec>
   23a88:	0007883a 	mov	r3,zero
   23a8c:	0005883a 	mov	r2,zero
   23a90:	01002034 	movhi	r4,128
   23a94:	213fffc4 	addi	r4,r4,-1
   23a98:	1908703a 	and	r4,r3,r4
   23a9c:	003fa106 	br	23924 <__alt_data_end+0xfffe4524>
   23aa0:	10bfffc4 	addi	r2,r2,-1
   23aa4:	103fb926 	beq	r2,zero,2398c <__alt_data_end+0xfffe458c>
   23aa8:	00c03fc4 	movi	r3,255
   23aac:	80ffaf1e 	bne	r16,r3,2396c <__alt_data_end+0xfffe456c>
   23ab0:	003f8e06 	br	238ec <__alt_data_end+0xfffe44ec>
   23ab4:	283f8d26 	beq	r5,zero,238ec <__alt_data_end+0xfffe44ec>
   23ab8:	18ffffc4 	addi	r3,r3,-1
   23abc:	183fe526 	beq	r3,zero,23a54 <__alt_data_end+0xfffe4654>
   23ac0:	01803fc4 	movi	r6,255
   23ac4:	81bfdb1e 	bne	r16,r6,23a34 <__alt_data_end+0xfffe4634>
   23ac8:	003f8806 	br	238ec <__alt_data_end+0xfffe44ec>
   23acc:	1000201e 	bne	r2,zero,23b50 <__addsf3+0x2c0>
   23ad0:	80800044 	addi	r2,r16,1
   23ad4:	10803fcc 	andi	r2,r2,255
   23ad8:	01800044 	movi	r6,1
   23adc:	3080450e 	bge	r6,r2,23bf4 <__addsf3+0x364>
   23ae0:	2165c83a 	sub	r18,r4,r5
   23ae4:	90c1002c 	andhi	r3,r18,1024
   23ae8:	18002b26 	beq	r3,zero,23b98 <__addsf3+0x308>
   23aec:	2925c83a 	sub	r18,r5,r4
   23af0:	3823883a 	mov	r17,r7
   23af4:	003fab06 	br	239a4 <__alt_data_end+0xfffe45a4>
   23af8:	8805883a 	mov	r2,r17
   23afc:	043fffc4 	movi	r16,-1
   23b00:	0009883a 	mov	r4,zero
   23b04:	003f8706 	br	23924 <__alt_data_end+0xfffe4524>
   23b08:	013f0034 	movhi	r4,64512
   23b0c:	213fffc4 	addi	r4,r4,-1
   23b10:	80a1c83a 	sub	r16,r16,r2
   23b14:	9108703a 	and	r4,r18,r4
   23b18:	003f7406 	br	238ec <__alt_data_end+0xfffe44ec>
   23b1c:	1800411e 	bne	r3,zero,23c24 <__addsf3+0x394>
   23b20:	80c00044 	addi	r3,r16,1
   23b24:	19c03fcc 	andi	r7,r3,255
   23b28:	01800044 	movi	r6,1
   23b2c:	31c0260e 	bge	r6,r7,23bc8 <__addsf3+0x338>
   23b30:	01803fc4 	movi	r6,255
   23b34:	19802126 	beq	r3,r6,23bbc <__addsf3+0x32c>
   23b38:	2149883a 	add	r4,r4,r5
   23b3c:	2008d07a 	srli	r4,r4,1
   23b40:	1821883a 	mov	r16,r3
   23b44:	003f6906 	br	238ec <__alt_data_end+0xfffe44ec>
   23b48:	01400044 	movi	r5,1
   23b4c:	003f8f06 	br	2398c <__alt_data_end+0xfffe458c>
   23b50:	8000151e 	bne	r16,zero,23ba8 <__addsf3+0x318>
   23b54:	20002f26 	beq	r4,zero,23c14 <__addsf3+0x384>
   23b58:	0084303a 	nor	r2,zero,r2
   23b5c:	10000a26 	beq	r2,zero,23b88 <__addsf3+0x2f8>
   23b60:	00c03fc4 	movi	r3,255
   23b64:	30c02b26 	beq	r6,r3,23c14 <__addsf3+0x384>
   23b68:	00c006c4 	movi	r3,27
   23b6c:	18806d16 	blt	r3,r2,23d24 <__addsf3+0x494>
   23b70:	00c00804 	movi	r3,32
   23b74:	1887c83a 	sub	r3,r3,r2
   23b78:	20c6983a 	sll	r3,r4,r3
   23b7c:	2084d83a 	srl	r2,r4,r2
   23b80:	1808c03a 	cmpne	r4,r3,zero
   23b84:	1108b03a 	or	r4,r2,r4
   23b88:	2909c83a 	sub	r4,r5,r4
   23b8c:	3021883a 	mov	r16,r6
   23b90:	3823883a 	mov	r17,r7
   23b94:	003f7e06 	br	23990 <__alt_data_end+0xfffe4590>
   23b98:	903f821e 	bne	r18,zero,239a4 <__alt_data_end+0xfffe45a4>
   23b9c:	0005883a 	mov	r2,zero
   23ba0:	0021883a 	mov	r16,zero
   23ba4:	003fba06 	br	23a90 <__alt_data_end+0xfffe4690>
   23ba8:	00c03fc4 	movi	r3,255
   23bac:	30c01926 	beq	r6,r3,23c14 <__addsf3+0x384>
   23bb0:	0085c83a 	sub	r2,zero,r2
   23bb4:	21010034 	orhi	r4,r4,1024
   23bb8:	003feb06 	br	23b68 <__alt_data_end+0xfffe4768>
   23bbc:	043fffc4 	movi	r16,-1
   23bc0:	0009883a 	mov	r4,zero
   23bc4:	003f5706 	br	23924 <__alt_data_end+0xfffe4524>
   23bc8:	80004a1e 	bne	r16,zero,23cf4 <__addsf3+0x464>
   23bcc:	20005926 	beq	r4,zero,23d34 <__addsf3+0x4a4>
   23bd0:	283f4626 	beq	r5,zero,238ec <__alt_data_end+0xfffe44ec>
   23bd4:	2149883a 	add	r4,r4,r5
   23bd8:	2081002c 	andhi	r2,r4,1024
   23bdc:	103f8226 	beq	r2,zero,239e8 <__alt_data_end+0xfffe45e8>
   23be0:	00bf0034 	movhi	r2,64512
   23be4:	10bfffc4 	addi	r2,r2,-1
   23be8:	3021883a 	mov	r16,r6
   23bec:	2088703a 	and	r4,r4,r2
   23bf0:	003f3e06 	br	238ec <__alt_data_end+0xfffe44ec>
   23bf4:	8000121e 	bne	r16,zero,23c40 <__addsf3+0x3b0>
   23bf8:	2000261e 	bne	r4,zero,23c94 <__addsf3+0x404>
   23bfc:	283fa226 	beq	r5,zero,23a88 <__alt_data_end+0xfffe4688>
   23c00:	2809883a 	mov	r4,r5
   23c04:	3823883a 	mov	r17,r7
   23c08:	003f3806 	br	238ec <__alt_data_end+0xfffe44ec>
   23c0c:	01400044 	movi	r5,1
   23c10:	003f9006 	br	23a54 <__alt_data_end+0xfffe4654>
   23c14:	2809883a 	mov	r4,r5
   23c18:	3021883a 	mov	r16,r6
   23c1c:	3823883a 	mov	r17,r7
   23c20:	003f3206 	br	238ec <__alt_data_end+0xfffe44ec>
   23c24:	80000c1e 	bne	r16,zero,23c58 <__addsf3+0x3c8>
   23c28:	20002f26 	beq	r4,zero,23ce8 <__addsf3+0x458>
   23c2c:	00c6303a 	nor	r3,zero,r3
   23c30:	18002b1e 	bne	r3,zero,23ce0 <__addsf3+0x450>
   23c34:	2149883a 	add	r4,r4,r5
   23c38:	3021883a 	mov	r16,r6
   23c3c:	003f8606 	br	23a58 <__alt_data_end+0xfffe4658>
   23c40:	20001b1e 	bne	r4,zero,23cb0 <__addsf3+0x420>
   23c44:	28003926 	beq	r5,zero,23d2c <__addsf3+0x49c>
   23c48:	2809883a 	mov	r4,r5
   23c4c:	3823883a 	mov	r17,r7
   23c50:	04003fc4 	movi	r16,255
   23c54:	003f2506 	br	238ec <__alt_data_end+0xfffe44ec>
   23c58:	01c03fc4 	movi	r7,255
   23c5c:	31c02226 	beq	r6,r7,23ce8 <__addsf3+0x458>
   23c60:	00c7c83a 	sub	r3,zero,r3
   23c64:	21010034 	orhi	r4,r4,1024
   23c68:	01c006c4 	movi	r7,27
   23c6c:	38c03616 	blt	r7,r3,23d48 <__addsf3+0x4b8>
   23c70:	01c00804 	movi	r7,32
   23c74:	38cfc83a 	sub	r7,r7,r3
   23c78:	21ce983a 	sll	r7,r4,r7
   23c7c:	20c6d83a 	srl	r3,r4,r3
   23c80:	3808c03a 	cmpne	r4,r7,zero
   23c84:	1906b03a 	or	r3,r3,r4
   23c88:	1949883a 	add	r4,r3,r5
   23c8c:	3021883a 	mov	r16,r6
   23c90:	003f7106 	br	23a58 <__alt_data_end+0xfffe4658>
   23c94:	283f1526 	beq	r5,zero,238ec <__alt_data_end+0xfffe44ec>
   23c98:	2145c83a 	sub	r2,r4,r5
   23c9c:	10c1002c 	andhi	r3,r2,1024
   23ca0:	183f4f26 	beq	r3,zero,239e0 <__alt_data_end+0xfffe45e0>
   23ca4:	2909c83a 	sub	r4,r5,r4
   23ca8:	3823883a 	mov	r17,r7
   23cac:	003f0f06 	br	238ec <__alt_data_end+0xfffe44ec>
   23cb0:	28001a26 	beq	r5,zero,23d1c <__addsf3+0x48c>
   23cb4:	2008d0fa 	srli	r4,r4,3
   23cb8:	2080102c 	andhi	r2,r4,64
   23cbc:	10000526 	beq	r2,zero,23cd4 <__addsf3+0x444>
   23cc0:	280ad0fa 	srli	r5,r5,3
   23cc4:	2880102c 	andhi	r2,r5,64
   23cc8:	1000021e 	bne	r2,zero,23cd4 <__addsf3+0x444>
   23ccc:	2809883a 	mov	r4,r5
   23cd0:	3823883a 	mov	r17,r7
   23cd4:	200890fa 	slli	r4,r4,3
   23cd8:	04003fc4 	movi	r16,255
   23cdc:	003f0306 	br	238ec <__alt_data_end+0xfffe44ec>
   23ce0:	01c03fc4 	movi	r7,255
   23ce4:	31ffe01e 	bne	r6,r7,23c68 <__alt_data_end+0xfffe4868>
   23ce8:	2809883a 	mov	r4,r5
   23cec:	3021883a 	mov	r16,r6
   23cf0:	003efe06 	br	238ec <__alt_data_end+0xfffe44ec>
   23cf4:	20001126 	beq	r4,zero,23d3c <__addsf3+0x4ac>
   23cf8:	28000826 	beq	r5,zero,23d1c <__addsf3+0x48c>
   23cfc:	2008d0fa 	srli	r4,r4,3
   23d00:	2080102c 	andhi	r2,r4,64
   23d04:	103ff326 	beq	r2,zero,23cd4 <__alt_data_end+0xfffe48d4>
   23d08:	280ad0fa 	srli	r5,r5,3
   23d0c:	2880102c 	andhi	r2,r5,64
   23d10:	103ff01e 	bne	r2,zero,23cd4 <__alt_data_end+0xfffe48d4>
   23d14:	2809883a 	mov	r4,r5
   23d18:	003fee06 	br	23cd4 <__alt_data_end+0xfffe48d4>
   23d1c:	04003fc4 	movi	r16,255
   23d20:	003ef206 	br	238ec <__alt_data_end+0xfffe44ec>
   23d24:	01000044 	movi	r4,1
   23d28:	003f9706 	br	23b88 <__alt_data_end+0xfffe4788>
   23d2c:	0005883a 	mov	r2,zero
   23d30:	003f3406 	br	23a04 <__alt_data_end+0xfffe4604>
   23d34:	2809883a 	mov	r4,r5
   23d38:	003eec06 	br	238ec <__alt_data_end+0xfffe44ec>
   23d3c:	2809883a 	mov	r4,r5
   23d40:	04003fc4 	movi	r16,255
   23d44:	003ee906 	br	238ec <__alt_data_end+0xfffe44ec>
   23d48:	00c00044 	movi	r3,1
   23d4c:	003fce06 	br	23c88 <__alt_data_end+0xfffe4888>
   23d50:	0005883a 	mov	r2,zero
   23d54:	003f4e06 	br	23a90 <__alt_data_end+0xfffe4690>

00023d58 <__divsf3>:
   23d58:	defff504 	addi	sp,sp,-44
   23d5c:	200cd5fa 	srli	r6,r4,23
   23d60:	dcc00415 	stw	r19,16(sp)
   23d64:	2026d7fa 	srli	r19,r4,31
   23d68:	00c02034 	movhi	r3,128
   23d6c:	dd800715 	stw	r22,28(sp)
   23d70:	dd000515 	stw	r20,20(sp)
   23d74:	dc800315 	stw	r18,12(sp)
   23d78:	18ffffc4 	addi	r3,r3,-1
   23d7c:	dfc00a15 	stw	ra,40(sp)
   23d80:	df000915 	stw	fp,36(sp)
   23d84:	ddc00815 	stw	r23,32(sp)
   23d88:	dd400615 	stw	r21,24(sp)
   23d8c:	dc400215 	stw	r17,8(sp)
   23d90:	dc000115 	stw	r16,4(sp)
   23d94:	35003fcc 	andi	r20,r6,255
   23d98:	1924703a 	and	r18,r3,r4
   23d9c:	9d803fcc 	andi	r22,r19,255
   23da0:	a0005226 	beq	r20,zero,23eec <__divsf3+0x194>
   23da4:	00803fc4 	movi	r2,255
   23da8:	a0802e26 	beq	r20,r2,23e64 <__divsf3+0x10c>
   23dac:	91002034 	orhi	r4,r18,128
   23db0:	202490fa 	slli	r18,r4,3
   23db4:	a53fe044 	addi	r20,r20,-127
   23db8:	0021883a 	mov	r16,zero
   23dbc:	002f883a 	mov	r23,zero
   23dc0:	280cd5fa 	srli	r6,r5,23
   23dc4:	282ad7fa 	srli	r21,r5,31
   23dc8:	00c02034 	movhi	r3,128
   23dcc:	18ffffc4 	addi	r3,r3,-1
   23dd0:	31803fcc 	andi	r6,r6,255
   23dd4:	1962703a 	and	r17,r3,r5
   23dd8:	af003fcc 	andi	fp,r21,255
   23ddc:	30004a26 	beq	r6,zero,23f08 <__divsf3+0x1b0>
   23de0:	00803fc4 	movi	r2,255
   23de4:	30804526 	beq	r6,r2,23efc <__divsf3+0x1a4>
   23de8:	89402034 	orhi	r5,r17,128
   23dec:	282290fa 	slli	r17,r5,3
   23df0:	31bfe044 	addi	r6,r6,-127
   23df4:	000b883a 	mov	r5,zero
   23df8:	2c20b03a 	or	r16,r5,r16
   23dfc:	802090ba 	slli	r16,r16,2
   23e00:	008000b4 	movhi	r2,2
   23e04:	108f8904 	addi	r2,r2,15908
   23e08:	80a1883a 	add	r16,r16,r2
   23e0c:	81000017 	ldw	r4,0(r16)
   23e10:	9d46f03a 	xor	r3,r19,r21
   23e14:	180f883a 	mov	r7,r3
   23e18:	18803fcc 	andi	r2,r3,255
   23e1c:	a18dc83a 	sub	r6,r20,r6
   23e20:	2000683a 	jmp	r4
   23e24:	00024008 	cmpgei	zero,zero,2304
   23e28:	00023e8c 	andi	zero,zero,2298
   23e2c:	00023ffc 	xorhi	zero,zero,2303
   23e30:	00023e78 	rdprs	zero,zero,2297
   23e34:	00023ffc 	xorhi	zero,zero,2303
   23e38:	00023fd4 	movui	zero,2303
   23e3c:	00023ffc 	xorhi	zero,zero,2303
   23e40:	00023e78 	rdprs	zero,zero,2297
   23e44:	00023e8c 	andi	zero,zero,2298
   23e48:	00023e8c 	andi	zero,zero,2298
   23e4c:	00023fd4 	movui	zero,2303
   23e50:	00023e78 	rdprs	zero,zero,2297
   23e54:	000240e8 	cmpgeui	zero,zero,2307
   23e58:	000240e8 	cmpgeui	zero,zero,2307
   23e5c:	000240e8 	cmpgeui	zero,zero,2307
   23e60:	0002409c 	xori	zero,zero,2306
   23e64:	9000581e 	bne	r18,zero,23fc8 <__divsf3+0x270>
   23e68:	04000204 	movi	r16,8
   23e6c:	05c00084 	movi	r23,2
   23e70:	003fd306 	br	23dc0 <__alt_data_end+0xfffe49c0>
   23e74:	0023883a 	mov	r17,zero
   23e78:	e02d883a 	mov	r22,fp
   23e7c:	282f883a 	mov	r23,r5
   23e80:	00800084 	movi	r2,2
   23e84:	b8808f1e 	bne	r23,r2,240c4 <__divsf3+0x36c>
   23e88:	b005883a 	mov	r2,r22
   23e8c:	11c0004c 	andi	r7,r2,1
   23e90:	013fffc4 	movi	r4,-1
   23e94:	000d883a 	mov	r6,zero
   23e98:	21003fcc 	andi	r4,r4,255
   23e9c:	200895fa 	slli	r4,r4,23
   23ea0:	38803fcc 	andi	r2,r7,255
   23ea4:	00c02034 	movhi	r3,128
   23ea8:	100497fa 	slli	r2,r2,31
   23eac:	18ffffc4 	addi	r3,r3,-1
   23eb0:	30c6703a 	and	r3,r6,r3
   23eb4:	1906b03a 	or	r3,r3,r4
   23eb8:	1884b03a 	or	r2,r3,r2
   23ebc:	dfc00a17 	ldw	ra,40(sp)
   23ec0:	df000917 	ldw	fp,36(sp)
   23ec4:	ddc00817 	ldw	r23,32(sp)
   23ec8:	dd800717 	ldw	r22,28(sp)
   23ecc:	dd400617 	ldw	r21,24(sp)
   23ed0:	dd000517 	ldw	r20,20(sp)
   23ed4:	dcc00417 	ldw	r19,16(sp)
   23ed8:	dc800317 	ldw	r18,12(sp)
   23edc:	dc400217 	ldw	r17,8(sp)
   23ee0:	dc000117 	ldw	r16,4(sp)
   23ee4:	dec00b04 	addi	sp,sp,44
   23ee8:	f800283a 	ret
   23eec:	90002b1e 	bne	r18,zero,23f9c <__divsf3+0x244>
   23ef0:	04000104 	movi	r16,4
   23ef4:	05c00044 	movi	r23,1
   23ef8:	003fb106 	br	23dc0 <__alt_data_end+0xfffe49c0>
   23efc:	8800251e 	bne	r17,zero,23f94 <__divsf3+0x23c>
   23f00:	01400084 	movi	r5,2
   23f04:	00000206 	br	23f10 <__divsf3+0x1b8>
   23f08:	88001a1e 	bne	r17,zero,23f74 <__divsf3+0x21c>
   23f0c:	01400044 	movi	r5,1
   23f10:	8160b03a 	or	r16,r16,r5
   23f14:	802090ba 	slli	r16,r16,2
   23f18:	00c000b4 	movhi	r3,2
   23f1c:	18cfcd04 	addi	r3,r3,16180
   23f20:	80e1883a 	add	r16,r16,r3
   23f24:	80c00017 	ldw	r3,0(r16)
   23f28:	9d44f03a 	xor	r2,r19,r21
   23f2c:	a18dc83a 	sub	r6,r20,r6
   23f30:	1800683a 	jmp	r3
   23f34:	00023e8c 	andi	zero,zero,2298
   23f38:	00023e8c 	andi	zero,zero,2298
   23f3c:	000240d8 	cmpnei	zero,zero,2307
   23f40:	00023e74 	movhi	zero,2297
   23f44:	000240d8 	cmpnei	zero,zero,2307
   23f48:	00023fd4 	movui	zero,2303
   23f4c:	000240d8 	cmpnei	zero,zero,2307
   23f50:	00023e74 	movhi	zero,2297
   23f54:	00023e8c 	andi	zero,zero,2298
   23f58:	00023e8c 	andi	zero,zero,2298
   23f5c:	00023fd4 	movui	zero,2303
   23f60:	00023e74 	movhi	zero,2297
   23f64:	000240e8 	cmpgeui	zero,zero,2307
   23f68:	000240e8 	cmpgeui	zero,zero,2307
   23f6c:	000240e8 	cmpgeui	zero,zero,2307
   23f70:	00024100 	call	2410 <__alt_mem_onchip_memory2-0x1dbf0>
   23f74:	8809883a 	mov	r4,r17
   23f78:	00270ec0 	call	270ec <__clzsi2>
   23f7c:	10fffec4 	addi	r3,r2,-5
   23f80:	10801d84 	addi	r2,r2,118
   23f84:	88e2983a 	sll	r17,r17,r3
   23f88:	008dc83a 	sub	r6,zero,r2
   23f8c:	000b883a 	mov	r5,zero
   23f90:	003f9906 	br	23df8 <__alt_data_end+0xfffe49f8>
   23f94:	014000c4 	movi	r5,3
   23f98:	003f9706 	br	23df8 <__alt_data_end+0xfffe49f8>
   23f9c:	9009883a 	mov	r4,r18
   23fa0:	d9400015 	stw	r5,0(sp)
   23fa4:	00270ec0 	call	270ec <__clzsi2>
   23fa8:	10fffec4 	addi	r3,r2,-5
   23fac:	11801d84 	addi	r6,r2,118
   23fb0:	90e4983a 	sll	r18,r18,r3
   23fb4:	01a9c83a 	sub	r20,zero,r6
   23fb8:	0021883a 	mov	r16,zero
   23fbc:	002f883a 	mov	r23,zero
   23fc0:	d9400017 	ldw	r5,0(sp)
   23fc4:	003f7e06 	br	23dc0 <__alt_data_end+0xfffe49c0>
   23fc8:	04000304 	movi	r16,12
   23fcc:	05c000c4 	movi	r23,3
   23fd0:	003f7b06 	br	23dc0 <__alt_data_end+0xfffe49c0>
   23fd4:	01802034 	movhi	r6,128
   23fd8:	000f883a 	mov	r7,zero
   23fdc:	31bfffc4 	addi	r6,r6,-1
   23fe0:	013fffc4 	movi	r4,-1
   23fe4:	003fac06 	br	23e98 <__alt_data_end+0xfffe4a98>
   23fe8:	01400044 	movi	r5,1
   23fec:	2909c83a 	sub	r4,r5,r4
   23ff0:	00c006c4 	movi	r3,27
   23ff4:	19004b0e 	bge	r3,r4,24124 <__divsf3+0x3cc>
   23ff8:	114e703a 	and	r7,r2,r5
   23ffc:	0009883a 	mov	r4,zero
   24000:	000d883a 	mov	r6,zero
   24004:	003fa406 	br	23e98 <__alt_data_end+0xfffe4a98>
   24008:	9006917a 	slli	r3,r18,5
   2400c:	8822917a 	slli	r17,r17,5
   24010:	1c40372e 	bgeu	r3,r17,240f0 <__divsf3+0x398>
   24014:	31bfffc4 	addi	r6,r6,-1
   24018:	010006c4 	movi	r4,27
   2401c:	000b883a 	mov	r5,zero
   24020:	180f883a 	mov	r7,r3
   24024:	294b883a 	add	r5,r5,r5
   24028:	18c7883a 	add	r3,r3,r3
   2402c:	38000116 	blt	r7,zero,24034 <__divsf3+0x2dc>
   24030:	1c400236 	bltu	r3,r17,2403c <__divsf3+0x2e4>
   24034:	1c47c83a 	sub	r3,r3,r17
   24038:	29400054 	ori	r5,r5,1
   2403c:	213fffc4 	addi	r4,r4,-1
   24040:	203ff71e 	bne	r4,zero,24020 <__alt_data_end+0xfffe4c20>
   24044:	1806c03a 	cmpne	r3,r3,zero
   24048:	1962b03a 	or	r17,r3,r5
   2404c:	31001fc4 	addi	r4,r6,127
   24050:	013fe50e 	bge	zero,r4,23fe8 <__alt_data_end+0xfffe4be8>
   24054:	88c001cc 	andi	r3,r17,7
   24058:	18000426 	beq	r3,zero,2406c <__divsf3+0x314>
   2405c:	88c003cc 	andi	r3,r17,15
   24060:	01400104 	movi	r5,4
   24064:	19400126 	beq	r3,r5,2406c <__divsf3+0x314>
   24068:	8963883a 	add	r17,r17,r5
   2406c:	88c2002c 	andhi	r3,r17,2048
   24070:	18000426 	beq	r3,zero,24084 <__divsf3+0x32c>
   24074:	00fe0034 	movhi	r3,63488
   24078:	18ffffc4 	addi	r3,r3,-1
   2407c:	31002004 	addi	r4,r6,128
   24080:	88e2703a 	and	r17,r17,r3
   24084:	00c03f84 	movi	r3,254
   24088:	193f8016 	blt	r3,r4,23e8c <__alt_data_end+0xfffe4a8c>
   2408c:	880c91ba 	slli	r6,r17,6
   24090:	11c0004c 	andi	r7,r2,1
   24094:	300cd27a 	srli	r6,r6,9
   24098:	003f7f06 	br	23e98 <__alt_data_end+0xfffe4a98>
   2409c:	9080102c 	andhi	r2,r18,64
   240a0:	10000226 	beq	r2,zero,240ac <__divsf3+0x354>
   240a4:	8880102c 	andhi	r2,r17,64
   240a8:	10001826 	beq	r2,zero,2410c <__divsf3+0x3b4>
   240ac:	00802034 	movhi	r2,128
   240b0:	91801034 	orhi	r6,r18,64
   240b4:	10bfffc4 	addi	r2,r2,-1
   240b8:	980f883a 	mov	r7,r19
   240bc:	308c703a 	and	r6,r6,r2
   240c0:	003fc706 	br	23fe0 <__alt_data_end+0xfffe4be0>
   240c4:	008000c4 	movi	r2,3
   240c8:	b8802d26 	beq	r23,r2,24180 <__divsf3+0x428>
   240cc:	00c00044 	movi	r3,1
   240d0:	b005883a 	mov	r2,r22
   240d4:	b8ffdd1e 	bne	r23,r3,2404c <__alt_data_end+0xfffe4c4c>
   240d8:	11c0004c 	andi	r7,r2,1
   240dc:	0009883a 	mov	r4,zero
   240e0:	000d883a 	mov	r6,zero
   240e4:	003f6c06 	br	23e98 <__alt_data_end+0xfffe4a98>
   240e8:	9023883a 	mov	r17,r18
   240ec:	003f6406 	br	23e80 <__alt_data_end+0xfffe4a80>
   240f0:	1c47c83a 	sub	r3,r3,r17
   240f4:	01000684 	movi	r4,26
   240f8:	01400044 	movi	r5,1
   240fc:	003fc806 	br	24020 <__alt_data_end+0xfffe4c20>
   24100:	9080102c 	andhi	r2,r18,64
   24104:	103fe926 	beq	r2,zero,240ac <__alt_data_end+0xfffe4cac>
   24108:	0023883a 	mov	r17,zero
   2410c:	00802034 	movhi	r2,128
   24110:	89801034 	orhi	r6,r17,64
   24114:	10bfffc4 	addi	r2,r2,-1
   24118:	a80f883a 	mov	r7,r21
   2411c:	308c703a 	and	r6,r6,r2
   24120:	003faf06 	br	23fe0 <__alt_data_end+0xfffe4be0>
   24124:	01c00804 	movi	r7,32
   24128:	390fc83a 	sub	r7,r7,r4
   2412c:	89ce983a 	sll	r7,r17,r7
   24130:	890ad83a 	srl	r5,r17,r4
   24134:	380ec03a 	cmpne	r7,r7,zero
   24138:	29cab03a 	or	r5,r5,r7
   2413c:	28c001cc 	andi	r3,r5,7
   24140:	18000426 	beq	r3,zero,24154 <__divsf3+0x3fc>
   24144:	28c003cc 	andi	r3,r5,15
   24148:	01000104 	movi	r4,4
   2414c:	19000126 	beq	r3,r4,24154 <__divsf3+0x3fc>
   24150:	290b883a 	add	r5,r5,r4
   24154:	28c1002c 	andhi	r3,r5,1024
   24158:	18000426 	beq	r3,zero,2416c <__divsf3+0x414>
   2415c:	11c0004c 	andi	r7,r2,1
   24160:	01000044 	movi	r4,1
   24164:	000d883a 	mov	r6,zero
   24168:	003f4b06 	br	23e98 <__alt_data_end+0xfffe4a98>
   2416c:	280a91ba 	slli	r5,r5,6
   24170:	11c0004c 	andi	r7,r2,1
   24174:	0009883a 	mov	r4,zero
   24178:	280cd27a 	srli	r6,r5,9
   2417c:	003f4606 	br	23e98 <__alt_data_end+0xfffe4a98>
   24180:	00802034 	movhi	r2,128
   24184:	89801034 	orhi	r6,r17,64
   24188:	10bfffc4 	addi	r2,r2,-1
   2418c:	b00f883a 	mov	r7,r22
   24190:	308c703a 	and	r6,r6,r2
   24194:	003f9206 	br	23fe0 <__alt_data_end+0xfffe4be0>

00024198 <__mulsf3>:
   24198:	defff504 	addi	sp,sp,-44
   2419c:	dc000115 	stw	r16,4(sp)
   241a0:	2020d5fa 	srli	r16,r4,23
   241a4:	dd400615 	stw	r21,24(sp)
   241a8:	202ad7fa 	srli	r21,r4,31
   241ac:	dc800315 	stw	r18,12(sp)
   241b0:	04802034 	movhi	r18,128
   241b4:	df000915 	stw	fp,36(sp)
   241b8:	dd000515 	stw	r20,20(sp)
   241bc:	94bfffc4 	addi	r18,r18,-1
   241c0:	dfc00a15 	stw	ra,40(sp)
   241c4:	ddc00815 	stw	r23,32(sp)
   241c8:	dd800715 	stw	r22,28(sp)
   241cc:	dcc00415 	stw	r19,16(sp)
   241d0:	dc400215 	stw	r17,8(sp)
   241d4:	84003fcc 	andi	r16,r16,255
   241d8:	9124703a 	and	r18,r18,r4
   241dc:	a829883a 	mov	r20,r21
   241e0:	af003fcc 	andi	fp,r21,255
   241e4:	80005426 	beq	r16,zero,24338 <__mulsf3+0x1a0>
   241e8:	00803fc4 	movi	r2,255
   241ec:	80802f26 	beq	r16,r2,242ac <__mulsf3+0x114>
   241f0:	91002034 	orhi	r4,r18,128
   241f4:	202490fa 	slli	r18,r4,3
   241f8:	843fe044 	addi	r16,r16,-127
   241fc:	0023883a 	mov	r17,zero
   24200:	002f883a 	mov	r23,zero
   24204:	2804d5fa 	srli	r2,r5,23
   24208:	282cd7fa 	srli	r22,r5,31
   2420c:	01002034 	movhi	r4,128
   24210:	213fffc4 	addi	r4,r4,-1
   24214:	10803fcc 	andi	r2,r2,255
   24218:	2166703a 	and	r19,r4,r5
   2421c:	b1803fcc 	andi	r6,r22,255
   24220:	10004c26 	beq	r2,zero,24354 <__mulsf3+0x1bc>
   24224:	00c03fc4 	movi	r3,255
   24228:	10c04726 	beq	r2,r3,24348 <__mulsf3+0x1b0>
   2422c:	99002034 	orhi	r4,r19,128
   24230:	202690fa 	slli	r19,r4,3
   24234:	10bfe044 	addi	r2,r2,-127
   24238:	0007883a 	mov	r3,zero
   2423c:	80a1883a 	add	r16,r16,r2
   24240:	010003c4 	movi	r4,15
   24244:	1c44b03a 	or	r2,r3,r17
   24248:	b56af03a 	xor	r21,r22,r21
   2424c:	81c00044 	addi	r7,r16,1
   24250:	20806b36 	bltu	r4,r2,24400 <__mulsf3+0x268>
   24254:	100490ba 	slli	r2,r2,2
   24258:	010000b4 	movhi	r4,2
   2425c:	21109b04 	addi	r4,r4,17004
   24260:	1105883a 	add	r2,r2,r4
   24264:	10800017 	ldw	r2,0(r2)
   24268:	1000683a 	jmp	r2
   2426c:	00024400 	call	2440 <__alt_mem_onchip_memory2-0x1dbc0>
   24270:	000242c0 	call	242c <__alt_mem_onchip_memory2-0x1dbd4>
   24274:	000242c0 	call	242c <__alt_mem_onchip_memory2-0x1dbd4>
   24278:	000242bc 	xorhi	zero,zero,2314
   2427c:	000243e4 	muli	zero,zero,2319
   24280:	000243e4 	muli	zero,zero,2319
   24284:	000243d0 	cmplti	zero,zero,2319
   24288:	000242bc 	xorhi	zero,zero,2314
   2428c:	000243e4 	muli	zero,zero,2319
   24290:	000243d0 	cmplti	zero,zero,2319
   24294:	000243e4 	muli	zero,zero,2319
   24298:	000242bc 	xorhi	zero,zero,2314
   2429c:	000243f0 	cmpltui	zero,zero,2319
   242a0:	000243f0 	cmpltui	zero,zero,2319
   242a4:	000243f0 	cmpltui	zero,zero,2319
   242a8:	000244cc 	andi	zero,zero,2323
   242ac:	90003b1e 	bne	r18,zero,2439c <__mulsf3+0x204>
   242b0:	04400204 	movi	r17,8
   242b4:	05c00084 	movi	r23,2
   242b8:	003fd206 	br	24204 <__alt_data_end+0xfffe4e04>
   242bc:	302b883a 	mov	r21,r6
   242c0:	00800084 	movi	r2,2
   242c4:	18802626 	beq	r3,r2,24360 <__mulsf3+0x1c8>
   242c8:	008000c4 	movi	r2,3
   242cc:	1880ab26 	beq	r3,r2,2457c <__mulsf3+0x3e4>
   242d0:	00800044 	movi	r2,1
   242d4:	1880a21e 	bne	r3,r2,24560 <__mulsf3+0x3c8>
   242d8:	a829883a 	mov	r20,r21
   242dc:	0007883a 	mov	r3,zero
   242e0:	0009883a 	mov	r4,zero
   242e4:	18803fcc 	andi	r2,r3,255
   242e8:	100695fa 	slli	r3,r2,23
   242ec:	a0803fcc 	andi	r2,r20,255
   242f0:	100a97fa 	slli	r5,r2,31
   242f4:	00802034 	movhi	r2,128
   242f8:	10bfffc4 	addi	r2,r2,-1
   242fc:	2084703a 	and	r2,r4,r2
   24300:	10c4b03a 	or	r2,r2,r3
   24304:	1144b03a 	or	r2,r2,r5
   24308:	dfc00a17 	ldw	ra,40(sp)
   2430c:	df000917 	ldw	fp,36(sp)
   24310:	ddc00817 	ldw	r23,32(sp)
   24314:	dd800717 	ldw	r22,28(sp)
   24318:	dd400617 	ldw	r21,24(sp)
   2431c:	dd000517 	ldw	r20,20(sp)
   24320:	dcc00417 	ldw	r19,16(sp)
   24324:	dc800317 	ldw	r18,12(sp)
   24328:	dc400217 	ldw	r17,8(sp)
   2432c:	dc000117 	ldw	r16,4(sp)
   24330:	dec00b04 	addi	sp,sp,44
   24334:	f800283a 	ret
   24338:	90000d1e 	bne	r18,zero,24370 <__mulsf3+0x1d8>
   2433c:	04400104 	movi	r17,4
   24340:	05c00044 	movi	r23,1
   24344:	003faf06 	br	24204 <__alt_data_end+0xfffe4e04>
   24348:	9806c03a 	cmpne	r3,r19,zero
   2434c:	18c00084 	addi	r3,r3,2
   24350:	003fba06 	br	2423c <__alt_data_end+0xfffe4e3c>
   24354:	9800141e 	bne	r19,zero,243a8 <__mulsf3+0x210>
   24358:	00c00044 	movi	r3,1
   2435c:	003fb706 	br	2423c <__alt_data_end+0xfffe4e3c>
   24360:	a829883a 	mov	r20,r21
   24364:	00ffffc4 	movi	r3,-1
   24368:	0009883a 	mov	r4,zero
   2436c:	003fdd06 	br	242e4 <__alt_data_end+0xfffe4ee4>
   24370:	9009883a 	mov	r4,r18
   24374:	d9400015 	stw	r5,0(sp)
   24378:	00270ec0 	call	270ec <__clzsi2>
   2437c:	10fffec4 	addi	r3,r2,-5
   24380:	10801d84 	addi	r2,r2,118
   24384:	90e4983a 	sll	r18,r18,r3
   24388:	00a1c83a 	sub	r16,zero,r2
   2438c:	0023883a 	mov	r17,zero
   24390:	002f883a 	mov	r23,zero
   24394:	d9400017 	ldw	r5,0(sp)
   24398:	003f9a06 	br	24204 <__alt_data_end+0xfffe4e04>
   2439c:	04400304 	movi	r17,12
   243a0:	05c000c4 	movi	r23,3
   243a4:	003f9706 	br	24204 <__alt_data_end+0xfffe4e04>
   243a8:	9809883a 	mov	r4,r19
   243ac:	d9800015 	stw	r6,0(sp)
   243b0:	00270ec0 	call	270ec <__clzsi2>
   243b4:	10fffec4 	addi	r3,r2,-5
   243b8:	10801d84 	addi	r2,r2,118
   243bc:	98e6983a 	sll	r19,r19,r3
   243c0:	0085c83a 	sub	r2,zero,r2
   243c4:	0007883a 	mov	r3,zero
   243c8:	d9800017 	ldw	r6,0(sp)
   243cc:	003f9b06 	br	2423c <__alt_data_end+0xfffe4e3c>
   243d0:	01002034 	movhi	r4,128
   243d4:	0029883a 	mov	r20,zero
   243d8:	213fffc4 	addi	r4,r4,-1
   243dc:	00ffffc4 	movi	r3,-1
   243e0:	003fc006 	br	242e4 <__alt_data_end+0xfffe4ee4>
   243e4:	9027883a 	mov	r19,r18
   243e8:	b807883a 	mov	r3,r23
   243ec:	003fb406 	br	242c0 <__alt_data_end+0xfffe4ec0>
   243f0:	9027883a 	mov	r19,r18
   243f4:	e02b883a 	mov	r21,fp
   243f8:	b807883a 	mov	r3,r23
   243fc:	003fb006 	br	242c0 <__alt_data_end+0xfffe4ec0>
   24400:	9004d43a 	srli	r2,r18,16
   24404:	9810d43a 	srli	r8,r19,16
   24408:	94bfffcc 	andi	r18,r18,65535
   2440c:	993fffcc 	andi	r4,r19,65535
   24410:	910d383a 	mul	r6,r18,r4
   24414:	20a7383a 	mul	r19,r4,r2
   24418:	9225383a 	mul	r18,r18,r8
   2441c:	3006d43a 	srli	r3,r6,16
   24420:	1211383a 	mul	r8,r2,r8
   24424:	94e5883a 	add	r18,r18,r19
   24428:	1c87883a 	add	r3,r3,r18
   2442c:	1cc0022e 	bgeu	r3,r19,24438 <__mulsf3+0x2a0>
   24430:	00800074 	movhi	r2,1
   24434:	4091883a 	add	r8,r8,r2
   24438:	1804943a 	slli	r2,r3,16
   2443c:	31bfffcc 	andi	r6,r6,65535
   24440:	1806d43a 	srli	r3,r3,16
   24444:	1185883a 	add	r2,r2,r6
   24448:	102691ba 	slli	r19,r2,6
   2444c:	1a07883a 	add	r3,r3,r8
   24450:	1004d6ba 	srli	r2,r2,26
   24454:	180891ba 	slli	r4,r3,6
   24458:	9826c03a 	cmpne	r19,r19,zero
   2445c:	9884b03a 	or	r2,r19,r2
   24460:	1126b03a 	or	r19,r2,r4
   24464:	9882002c 	andhi	r2,r19,2048
   24468:	10000426 	beq	r2,zero,2447c <__mulsf3+0x2e4>
   2446c:	9804d07a 	srli	r2,r19,1
   24470:	9900004c 	andi	r4,r19,1
   24474:	3821883a 	mov	r16,r7
   24478:	1126b03a 	or	r19,r2,r4
   2447c:	80c01fc4 	addi	r3,r16,127
   24480:	00c0210e 	bge	zero,r3,24508 <__mulsf3+0x370>
   24484:	988001cc 	andi	r2,r19,7
   24488:	10000426 	beq	r2,zero,2449c <__mulsf3+0x304>
   2448c:	988003cc 	andi	r2,r19,15
   24490:	01000104 	movi	r4,4
   24494:	11000126 	beq	r2,r4,2449c <__mulsf3+0x304>
   24498:	9927883a 	add	r19,r19,r4
   2449c:	9882002c 	andhi	r2,r19,2048
   244a0:	10000426 	beq	r2,zero,244b4 <__mulsf3+0x31c>
   244a4:	00be0034 	movhi	r2,63488
   244a8:	10bfffc4 	addi	r2,r2,-1
   244ac:	80c02004 	addi	r3,r16,128
   244b0:	98a6703a 	and	r19,r19,r2
   244b4:	00803f84 	movi	r2,254
   244b8:	10ffa916 	blt	r2,r3,24360 <__alt_data_end+0xfffe4f60>
   244bc:	980891ba 	slli	r4,r19,6
   244c0:	a829883a 	mov	r20,r21
   244c4:	2008d27a 	srli	r4,r4,9
   244c8:	003f8606 	br	242e4 <__alt_data_end+0xfffe4ee4>
   244cc:	9080102c 	andhi	r2,r18,64
   244d0:	10000826 	beq	r2,zero,244f4 <__mulsf3+0x35c>
   244d4:	9880102c 	andhi	r2,r19,64
   244d8:	1000061e 	bne	r2,zero,244f4 <__mulsf3+0x35c>
   244dc:	00802034 	movhi	r2,128
   244e0:	99001034 	orhi	r4,r19,64
   244e4:	10bfffc4 	addi	r2,r2,-1
   244e8:	b029883a 	mov	r20,r22
   244ec:	2088703a 	and	r4,r4,r2
   244f0:	003fba06 	br	243dc <__alt_data_end+0xfffe4fdc>
   244f4:	00802034 	movhi	r2,128
   244f8:	91001034 	orhi	r4,r18,64
   244fc:	10bfffc4 	addi	r2,r2,-1
   24500:	2088703a 	and	r4,r4,r2
   24504:	003fb506 	br	243dc <__alt_data_end+0xfffe4fdc>
   24508:	00800044 	movi	r2,1
   2450c:	10c7c83a 	sub	r3,r2,r3
   24510:	008006c4 	movi	r2,27
   24514:	10ff7016 	blt	r2,r3,242d8 <__alt_data_end+0xfffe4ed8>
   24518:	00800804 	movi	r2,32
   2451c:	10c5c83a 	sub	r2,r2,r3
   24520:	9884983a 	sll	r2,r19,r2
   24524:	98c6d83a 	srl	r3,r19,r3
   24528:	1004c03a 	cmpne	r2,r2,zero
   2452c:	1884b03a 	or	r2,r3,r2
   24530:	10c001cc 	andi	r3,r2,7
   24534:	18000426 	beq	r3,zero,24548 <__mulsf3+0x3b0>
   24538:	10c003cc 	andi	r3,r2,15
   2453c:	01000104 	movi	r4,4
   24540:	19000126 	beq	r3,r4,24548 <__mulsf3+0x3b0>
   24544:	1105883a 	add	r2,r2,r4
   24548:	10c1002c 	andhi	r3,r2,1024
   2454c:	18000626 	beq	r3,zero,24568 <__mulsf3+0x3d0>
   24550:	a829883a 	mov	r20,r21
   24554:	00c00044 	movi	r3,1
   24558:	0009883a 	mov	r4,zero
   2455c:	003f6106 	br	242e4 <__alt_data_end+0xfffe4ee4>
   24560:	3821883a 	mov	r16,r7
   24564:	003fc506 	br	2447c <__alt_data_end+0xfffe507c>
   24568:	100491ba 	slli	r2,r2,6
   2456c:	a829883a 	mov	r20,r21
   24570:	0007883a 	mov	r3,zero
   24574:	1008d27a 	srli	r4,r2,9
   24578:	003f5a06 	br	242e4 <__alt_data_end+0xfffe4ee4>
   2457c:	00802034 	movhi	r2,128
   24580:	99001034 	orhi	r4,r19,64
   24584:	10bfffc4 	addi	r2,r2,-1
   24588:	a829883a 	mov	r20,r21
   2458c:	2088703a 	and	r4,r4,r2
   24590:	003f9206 	br	243dc <__alt_data_end+0xfffe4fdc>

00024594 <__subsf3>:
   24594:	defffc04 	addi	sp,sp,-16
   24598:	280cd5fa 	srli	r6,r5,23
   2459c:	dc000015 	stw	r16,0(sp)
   245a0:	01c02034 	movhi	r7,128
   245a4:	2020d5fa 	srli	r16,r4,23
   245a8:	39ffffc4 	addi	r7,r7,-1
   245ac:	3906703a 	and	r3,r7,r4
   245b0:	dc400115 	stw	r17,4(sp)
   245b4:	394e703a 	and	r7,r7,r5
   245b8:	2022d7fa 	srli	r17,r4,31
   245bc:	dfc00315 	stw	ra,12(sp)
   245c0:	dc800215 	stw	r18,8(sp)
   245c4:	31803fcc 	andi	r6,r6,255
   245c8:	01003fc4 	movi	r4,255
   245cc:	84003fcc 	andi	r16,r16,255
   245d0:	180690fa 	slli	r3,r3,3
   245d4:	2804d7fa 	srli	r2,r5,31
   245d8:	380e90fa 	slli	r7,r7,3
   245dc:	31006d26 	beq	r6,r4,24794 <__subsf3+0x200>
   245e0:	1080005c 	xori	r2,r2,1
   245e4:	8189c83a 	sub	r4,r16,r6
   245e8:	14404f26 	beq	r2,r17,24728 <__subsf3+0x194>
   245ec:	0100770e 	bge	zero,r4,247cc <__subsf3+0x238>
   245f0:	30001e1e 	bne	r6,zero,2466c <__subsf3+0xd8>
   245f4:	38006a1e 	bne	r7,zero,247a0 <__subsf3+0x20c>
   245f8:	188001cc 	andi	r2,r3,7
   245fc:	10000426 	beq	r2,zero,24610 <__subsf3+0x7c>
   24600:	188003cc 	andi	r2,r3,15
   24604:	01000104 	movi	r4,4
   24608:	11000126 	beq	r2,r4,24610 <__subsf3+0x7c>
   2460c:	1907883a 	add	r3,r3,r4
   24610:	1881002c 	andhi	r2,r3,1024
   24614:	10003926 	beq	r2,zero,246fc <__subsf3+0x168>
   24618:	84000044 	addi	r16,r16,1
   2461c:	00803fc4 	movi	r2,255
   24620:	80807526 	beq	r16,r2,247f8 <__subsf3+0x264>
   24624:	180691ba 	slli	r3,r3,6
   24628:	8880004c 	andi	r2,r17,1
   2462c:	180ad27a 	srli	r5,r3,9
   24630:	84003fcc 	andi	r16,r16,255
   24634:	800695fa 	slli	r3,r16,23
   24638:	10803fcc 	andi	r2,r2,255
   2463c:	01002034 	movhi	r4,128
   24640:	213fffc4 	addi	r4,r4,-1
   24644:	100497fa 	slli	r2,r2,31
   24648:	2920703a 	and	r16,r5,r4
   2464c:	80e0b03a 	or	r16,r16,r3
   24650:	8084b03a 	or	r2,r16,r2
   24654:	dfc00317 	ldw	ra,12(sp)
   24658:	dc800217 	ldw	r18,8(sp)
   2465c:	dc400117 	ldw	r17,4(sp)
   24660:	dc000017 	ldw	r16,0(sp)
   24664:	dec00404 	addi	sp,sp,16
   24668:	f800283a 	ret
   2466c:	00803fc4 	movi	r2,255
   24670:	80bfe126 	beq	r16,r2,245f8 <__alt_data_end+0xfffe51f8>
   24674:	39c10034 	orhi	r7,r7,1024
   24678:	008006c4 	movi	r2,27
   2467c:	11007416 	blt	r2,r4,24850 <__subsf3+0x2bc>
   24680:	00800804 	movi	r2,32
   24684:	1105c83a 	sub	r2,r2,r4
   24688:	3884983a 	sll	r2,r7,r2
   2468c:	390ed83a 	srl	r7,r7,r4
   24690:	1008c03a 	cmpne	r4,r2,zero
   24694:	390eb03a 	or	r7,r7,r4
   24698:	19c7c83a 	sub	r3,r3,r7
   2469c:	1881002c 	andhi	r2,r3,1024
   246a0:	10001426 	beq	r2,zero,246f4 <__subsf3+0x160>
   246a4:	04810034 	movhi	r18,1024
   246a8:	94bfffc4 	addi	r18,r18,-1
   246ac:	1ca4703a 	and	r18,r3,r18
   246b0:	9009883a 	mov	r4,r18
   246b4:	00270ec0 	call	270ec <__clzsi2>
   246b8:	10bffec4 	addi	r2,r2,-5
   246bc:	90a4983a 	sll	r18,r18,r2
   246c0:	14005116 	blt	r2,r16,24808 <__subsf3+0x274>
   246c4:	1405c83a 	sub	r2,r2,r16
   246c8:	10c00044 	addi	r3,r2,1
   246cc:	00800804 	movi	r2,32
   246d0:	10c5c83a 	sub	r2,r2,r3
   246d4:	9084983a 	sll	r2,r18,r2
   246d8:	90e4d83a 	srl	r18,r18,r3
   246dc:	0021883a 	mov	r16,zero
   246e0:	1006c03a 	cmpne	r3,r2,zero
   246e4:	90c6b03a 	or	r3,r18,r3
   246e8:	003fc306 	br	245f8 <__alt_data_end+0xfffe51f8>
   246ec:	2000e026 	beq	r4,zero,24a70 <__subsf3+0x4dc>
   246f0:	2007883a 	mov	r3,r4
   246f4:	188001cc 	andi	r2,r3,7
   246f8:	103fc11e 	bne	r2,zero,24600 <__alt_data_end+0xfffe5200>
   246fc:	180ad0fa 	srli	r5,r3,3
   24700:	00c03fc4 	movi	r3,255
   24704:	8880004c 	andi	r2,r17,1
   24708:	80c0031e 	bne	r16,r3,24718 <__subsf3+0x184>
   2470c:	28006d26 	beq	r5,zero,248c4 <__subsf3+0x330>
   24710:	29401034 	orhi	r5,r5,64
   24714:	043fffc4 	movi	r16,-1
   24718:	00c02034 	movhi	r3,128
   2471c:	18ffffc4 	addi	r3,r3,-1
   24720:	28ca703a 	and	r5,r5,r3
   24724:	003fc206 	br	24630 <__alt_data_end+0xfffe5230>
   24728:	01003c0e 	bge	zero,r4,2481c <__subsf3+0x288>
   2472c:	30002126 	beq	r6,zero,247b4 <__subsf3+0x220>
   24730:	01403fc4 	movi	r5,255
   24734:	817fb026 	beq	r16,r5,245f8 <__alt_data_end+0xfffe51f8>
   24738:	39c10034 	orhi	r7,r7,1024
   2473c:	014006c4 	movi	r5,27
   24740:	29007416 	blt	r5,r4,24914 <__subsf3+0x380>
   24744:	01400804 	movi	r5,32
   24748:	290bc83a 	sub	r5,r5,r4
   2474c:	394a983a 	sll	r5,r7,r5
   24750:	390ed83a 	srl	r7,r7,r4
   24754:	2808c03a 	cmpne	r4,r5,zero
   24758:	390eb03a 	or	r7,r7,r4
   2475c:	19c7883a 	add	r3,r3,r7
   24760:	1901002c 	andhi	r4,r3,1024
   24764:	20003826 	beq	r4,zero,24848 <__subsf3+0x2b4>
   24768:	84000044 	addi	r16,r16,1
   2476c:	01003fc4 	movi	r4,255
   24770:	81005426 	beq	r16,r4,248c4 <__subsf3+0x330>
   24774:	1023883a 	mov	r17,r2
   24778:	00bf0034 	movhi	r2,64512
   2477c:	10bfffc4 	addi	r2,r2,-1
   24780:	1900004c 	andi	r4,r3,1
   24784:	1886703a 	and	r3,r3,r2
   24788:	1806d07a 	srli	r3,r3,1
   2478c:	1906b03a 	or	r3,r3,r4
   24790:	003f9906 	br	245f8 <__alt_data_end+0xfffe51f8>
   24794:	383f9226 	beq	r7,zero,245e0 <__alt_data_end+0xfffe51e0>
   24798:	10803fcc 	andi	r2,r2,255
   2479c:	003f9106 	br	245e4 <__alt_data_end+0xfffe51e4>
   247a0:	213fffc4 	addi	r4,r4,-1
   247a4:	203fbc26 	beq	r4,zero,24698 <__alt_data_end+0xfffe5298>
   247a8:	00803fc4 	movi	r2,255
   247ac:	80bfb21e 	bne	r16,r2,24678 <__alt_data_end+0xfffe5278>
   247b0:	003f9106 	br	245f8 <__alt_data_end+0xfffe51f8>
   247b4:	383f9026 	beq	r7,zero,245f8 <__alt_data_end+0xfffe51f8>
   247b8:	213fffc4 	addi	r4,r4,-1
   247bc:	203fe726 	beq	r4,zero,2475c <__alt_data_end+0xfffe535c>
   247c0:	01403fc4 	movi	r5,255
   247c4:	817fdd1e 	bne	r16,r5,2473c <__alt_data_end+0xfffe533c>
   247c8:	003f8b06 	br	245f8 <__alt_data_end+0xfffe51f8>
   247cc:	2000221e 	bne	r4,zero,24858 <__subsf3+0x2c4>
   247d0:	81000044 	addi	r4,r16,1
   247d4:	21003fcc 	andi	r4,r4,255
   247d8:	01400044 	movi	r5,1
   247dc:	2900470e 	bge	r5,r4,248fc <__subsf3+0x368>
   247e0:	19e5c83a 	sub	r18,r3,r7
   247e4:	9141002c 	andhi	r5,r18,1024
   247e8:	28002d26 	beq	r5,zero,248a0 <__subsf3+0x30c>
   247ec:	38e5c83a 	sub	r18,r7,r3
   247f0:	1023883a 	mov	r17,r2
   247f4:	003fae06 	br	246b0 <__alt_data_end+0xfffe52b0>
   247f8:	8880004c 	andi	r2,r17,1
   247fc:	043fffc4 	movi	r16,-1
   24800:	000b883a 	mov	r5,zero
   24804:	003f8a06 	br	24630 <__alt_data_end+0xfffe5230>
   24808:	00ff0034 	movhi	r3,64512
   2480c:	18ffffc4 	addi	r3,r3,-1
   24810:	80a1c83a 	sub	r16,r16,r2
   24814:	90c6703a 	and	r3,r18,r3
   24818:	003f7706 	br	245f8 <__alt_data_end+0xfffe51f8>
   2481c:	2000431e 	bne	r4,zero,2492c <__subsf3+0x398>
   24820:	81000044 	addi	r4,r16,1
   24824:	21803fcc 	andi	r6,r4,255
   24828:	01400044 	movi	r5,1
   2482c:	2980280e 	bge	r5,r6,248d0 <__subsf3+0x33c>
   24830:	01403fc4 	movi	r5,255
   24834:	21402326 	beq	r4,r5,248c4 <__subsf3+0x330>
   24838:	19c7883a 	add	r3,r3,r7
   2483c:	1806d07a 	srli	r3,r3,1
   24840:	2021883a 	mov	r16,r4
   24844:	003f6c06 	br	245f8 <__alt_data_end+0xfffe51f8>
   24848:	1023883a 	mov	r17,r2
   2484c:	003fa906 	br	246f4 <__alt_data_end+0xfffe52f4>
   24850:	01c00044 	movi	r7,1
   24854:	003f9006 	br	24698 <__alt_data_end+0xfffe5298>
   24858:	8000151e 	bne	r16,zero,248b0 <__subsf3+0x31c>
   2485c:	18002f26 	beq	r3,zero,2491c <__subsf3+0x388>
   24860:	0108303a 	nor	r4,zero,r4
   24864:	20000a26 	beq	r4,zero,24890 <__subsf3+0x2fc>
   24868:	01403fc4 	movi	r5,255
   2486c:	31402b26 	beq	r6,r5,2491c <__subsf3+0x388>
   24870:	014006c4 	movi	r5,27
   24874:	29006e16 	blt	r5,r4,24a30 <__subsf3+0x49c>
   24878:	01400804 	movi	r5,32
   2487c:	290bc83a 	sub	r5,r5,r4
   24880:	194a983a 	sll	r5,r3,r5
   24884:	1908d83a 	srl	r4,r3,r4
   24888:	2806c03a 	cmpne	r3,r5,zero
   2488c:	20c6b03a 	or	r3,r4,r3
   24890:	38c7c83a 	sub	r3,r7,r3
   24894:	3021883a 	mov	r16,r6
   24898:	1023883a 	mov	r17,r2
   2489c:	003f7f06 	br	2469c <__alt_data_end+0xfffe529c>
   248a0:	903f831e 	bne	r18,zero,246b0 <__alt_data_end+0xfffe52b0>
   248a4:	0005883a 	mov	r2,zero
   248a8:	0021883a 	mov	r16,zero
   248ac:	003f9a06 	br	24718 <__alt_data_end+0xfffe5318>
   248b0:	01403fc4 	movi	r5,255
   248b4:	31401926 	beq	r6,r5,2491c <__subsf3+0x388>
   248b8:	0109c83a 	sub	r4,zero,r4
   248bc:	18c10034 	orhi	r3,r3,1024
   248c0:	003feb06 	br	24870 <__alt_data_end+0xfffe5470>
   248c4:	043fffc4 	movi	r16,-1
   248c8:	000b883a 	mov	r5,zero
   248cc:	003f5806 	br	24630 <__alt_data_end+0xfffe5230>
   248d0:	8000481e 	bne	r16,zero,249f4 <__subsf3+0x460>
   248d4:	18006226 	beq	r3,zero,24a60 <__subsf3+0x4cc>
   248d8:	383f4726 	beq	r7,zero,245f8 <__alt_data_end+0xfffe51f8>
   248dc:	19c7883a 	add	r3,r3,r7
   248e0:	1881002c 	andhi	r2,r3,1024
   248e4:	103f8326 	beq	r2,zero,246f4 <__alt_data_end+0xfffe52f4>
   248e8:	00bf0034 	movhi	r2,64512
   248ec:	10bfffc4 	addi	r2,r2,-1
   248f0:	2821883a 	mov	r16,r5
   248f4:	1886703a 	and	r3,r3,r2
   248f8:	003f3f06 	br	245f8 <__alt_data_end+0xfffe51f8>
   248fc:	80001c1e 	bne	r16,zero,24970 <__subsf3+0x3dc>
   24900:	1800261e 	bne	r3,zero,2499c <__subsf3+0x408>
   24904:	38004c26 	beq	r7,zero,24a38 <__subsf3+0x4a4>
   24908:	3807883a 	mov	r3,r7
   2490c:	1023883a 	mov	r17,r2
   24910:	003f3906 	br	245f8 <__alt_data_end+0xfffe51f8>
   24914:	01c00044 	movi	r7,1
   24918:	003f9006 	br	2475c <__alt_data_end+0xfffe535c>
   2491c:	3807883a 	mov	r3,r7
   24920:	3021883a 	mov	r16,r6
   24924:	1023883a 	mov	r17,r2
   24928:	003f3306 	br	245f8 <__alt_data_end+0xfffe51f8>
   2492c:	8000161e 	bne	r16,zero,24988 <__subsf3+0x3f4>
   24930:	18002d26 	beq	r3,zero,249e8 <__subsf3+0x454>
   24934:	0108303a 	nor	r4,zero,r4
   24938:	20000a26 	beq	r4,zero,24964 <__subsf3+0x3d0>
   2493c:	01403fc4 	movi	r5,255
   24940:	31402926 	beq	r6,r5,249e8 <__subsf3+0x454>
   24944:	014006c4 	movi	r5,27
   24948:	29004716 	blt	r5,r4,24a68 <__subsf3+0x4d4>
   2494c:	01400804 	movi	r5,32
   24950:	290bc83a 	sub	r5,r5,r4
   24954:	194a983a 	sll	r5,r3,r5
   24958:	1908d83a 	srl	r4,r3,r4
   2495c:	2806c03a 	cmpne	r3,r5,zero
   24960:	20c6b03a 	or	r3,r4,r3
   24964:	19c7883a 	add	r3,r3,r7
   24968:	3021883a 	mov	r16,r6
   2496c:	003f7c06 	br	24760 <__alt_data_end+0xfffe5360>
   24970:	1800111e 	bne	r3,zero,249b8 <__subsf3+0x424>
   24974:	38003326 	beq	r7,zero,24a44 <__subsf3+0x4b0>
   24978:	3807883a 	mov	r3,r7
   2497c:	1023883a 	mov	r17,r2
   24980:	04003fc4 	movi	r16,255
   24984:	003f1c06 	br	245f8 <__alt_data_end+0xfffe51f8>
   24988:	01403fc4 	movi	r5,255
   2498c:	31401626 	beq	r6,r5,249e8 <__subsf3+0x454>
   24990:	0109c83a 	sub	r4,zero,r4
   24994:	18c10034 	orhi	r3,r3,1024
   24998:	003fea06 	br	24944 <__alt_data_end+0xfffe5544>
   2499c:	383f1626 	beq	r7,zero,245f8 <__alt_data_end+0xfffe51f8>
   249a0:	19c9c83a 	sub	r4,r3,r7
   249a4:	2141002c 	andhi	r5,r4,1024
   249a8:	283f5026 	beq	r5,zero,246ec <__alt_data_end+0xfffe52ec>
   249ac:	38c7c83a 	sub	r3,r7,r3
   249b0:	1023883a 	mov	r17,r2
   249b4:	003f1006 	br	245f8 <__alt_data_end+0xfffe51f8>
   249b8:	38001b26 	beq	r7,zero,24a28 <__subsf3+0x494>
   249bc:	1806d0fa 	srli	r3,r3,3
   249c0:	1900102c 	andhi	r4,r3,64
   249c4:	20000526 	beq	r4,zero,249dc <__subsf3+0x448>
   249c8:	380ed0fa 	srli	r7,r7,3
   249cc:	3900102c 	andhi	r4,r7,64
   249d0:	2000021e 	bne	r4,zero,249dc <__subsf3+0x448>
   249d4:	3807883a 	mov	r3,r7
   249d8:	1023883a 	mov	r17,r2
   249dc:	180690fa 	slli	r3,r3,3
   249e0:	04003fc4 	movi	r16,255
   249e4:	003f0406 	br	245f8 <__alt_data_end+0xfffe51f8>
   249e8:	3807883a 	mov	r3,r7
   249ec:	3021883a 	mov	r16,r6
   249f0:	003f0106 	br	245f8 <__alt_data_end+0xfffe51f8>
   249f4:	18001726 	beq	r3,zero,24a54 <__subsf3+0x4c0>
   249f8:	38000b26 	beq	r7,zero,24a28 <__subsf3+0x494>
   249fc:	1806d0fa 	srli	r3,r3,3
   24a00:	1900102c 	andhi	r4,r3,64
   24a04:	20000426 	beq	r4,zero,24a18 <__subsf3+0x484>
   24a08:	380ed0fa 	srli	r7,r7,3
   24a0c:	3900102c 	andhi	r4,r7,64
   24a10:	2000011e 	bne	r4,zero,24a18 <__subsf3+0x484>
   24a14:	3807883a 	mov	r3,r7
   24a18:	180690fa 	slli	r3,r3,3
   24a1c:	1023883a 	mov	r17,r2
   24a20:	04003fc4 	movi	r16,255
   24a24:	003ef406 	br	245f8 <__alt_data_end+0xfffe51f8>
   24a28:	04003fc4 	movi	r16,255
   24a2c:	003ef206 	br	245f8 <__alt_data_end+0xfffe51f8>
   24a30:	00c00044 	movi	r3,1
   24a34:	003f9606 	br	24890 <__alt_data_end+0xfffe5490>
   24a38:	000b883a 	mov	r5,zero
   24a3c:	0005883a 	mov	r2,zero
   24a40:	003f3506 	br	24718 <__alt_data_end+0xfffe5318>
   24a44:	01402034 	movhi	r5,128
   24a48:	297fffc4 	addi	r5,r5,-1
   24a4c:	0005883a 	mov	r2,zero
   24a50:	003f2f06 	br	24710 <__alt_data_end+0xfffe5310>
   24a54:	3807883a 	mov	r3,r7
   24a58:	04003fc4 	movi	r16,255
   24a5c:	003ee606 	br	245f8 <__alt_data_end+0xfffe51f8>
   24a60:	3807883a 	mov	r3,r7
   24a64:	003ee406 	br	245f8 <__alt_data_end+0xfffe51f8>
   24a68:	00c00044 	movi	r3,1
   24a6c:	003fbd06 	br	24964 <__alt_data_end+0xfffe5564>
   24a70:	0005883a 	mov	r2,zero
   24a74:	003f2806 	br	24718 <__alt_data_end+0xfffe5318>

00024a78 <__floatsisf>:
   24a78:	defffd04 	addi	sp,sp,-12
   24a7c:	dfc00215 	stw	ra,8(sp)
   24a80:	dc400115 	stw	r17,4(sp)
   24a84:	dc000015 	stw	r16,0(sp)
   24a88:	20003526 	beq	r4,zero,24b60 <__floatsisf+0xe8>
   24a8c:	2021883a 	mov	r16,r4
   24a90:	2022d7fa 	srli	r17,r4,31
   24a94:	20003616 	blt	r4,zero,24b70 <__floatsisf+0xf8>
   24a98:	8009883a 	mov	r4,r16
   24a9c:	00270ec0 	call	270ec <__clzsi2>
   24aa0:	00c02784 	movi	r3,158
   24aa4:	1887c83a 	sub	r3,r3,r2
   24aa8:	01002584 	movi	r4,150
   24aac:	20c01416 	blt	r4,r3,24b00 <__floatsisf+0x88>
   24ab0:	20c9c83a 	sub	r4,r4,r3
   24ab4:	8120983a 	sll	r16,r16,r4
   24ab8:	00802034 	movhi	r2,128
   24abc:	10bfffc4 	addi	r2,r2,-1
   24ac0:	8809883a 	mov	r4,r17
   24ac4:	80a0703a 	and	r16,r16,r2
   24ac8:	18803fcc 	andi	r2,r3,255
   24acc:	100695fa 	slli	r3,r2,23
   24ad0:	20803fcc 	andi	r2,r4,255
   24ad4:	100897fa 	slli	r4,r2,31
   24ad8:	00802034 	movhi	r2,128
   24adc:	10bfffc4 	addi	r2,r2,-1
   24ae0:	8084703a 	and	r2,r16,r2
   24ae4:	10c4b03a 	or	r2,r2,r3
   24ae8:	1104b03a 	or	r2,r2,r4
   24aec:	dfc00217 	ldw	ra,8(sp)
   24af0:	dc400117 	ldw	r17,4(sp)
   24af4:	dc000017 	ldw	r16,0(sp)
   24af8:	dec00304 	addi	sp,sp,12
   24afc:	f800283a 	ret
   24b00:	01002644 	movi	r4,153
   24b04:	20c01c16 	blt	r4,r3,24b78 <__floatsisf+0x100>
   24b08:	20c9c83a 	sub	r4,r4,r3
   24b0c:	8120983a 	sll	r16,r16,r4
   24b10:	013f0034 	movhi	r4,64512
   24b14:	213fffc4 	addi	r4,r4,-1
   24b18:	814001cc 	andi	r5,r16,7
   24b1c:	8108703a 	and	r4,r16,r4
   24b20:	28000426 	beq	r5,zero,24b34 <__floatsisf+0xbc>
   24b24:	840003cc 	andi	r16,r16,15
   24b28:	01400104 	movi	r5,4
   24b2c:	81400126 	beq	r16,r5,24b34 <__floatsisf+0xbc>
   24b30:	2149883a 	add	r4,r4,r5
   24b34:	2141002c 	andhi	r5,r4,1024
   24b38:	28000526 	beq	r5,zero,24b50 <__floatsisf+0xd8>
   24b3c:	00c027c4 	movi	r3,159
   24b40:	1887c83a 	sub	r3,r3,r2
   24b44:	00bf0034 	movhi	r2,64512
   24b48:	10bfffc4 	addi	r2,r2,-1
   24b4c:	2088703a 	and	r4,r4,r2
   24b50:	202091ba 	slli	r16,r4,6
   24b54:	8809883a 	mov	r4,r17
   24b58:	8020d27a 	srli	r16,r16,9
   24b5c:	003fda06 	br	24ac8 <__alt_data_end+0xfffe56c8>
   24b60:	0009883a 	mov	r4,zero
   24b64:	0007883a 	mov	r3,zero
   24b68:	0021883a 	mov	r16,zero
   24b6c:	003fd606 	br	24ac8 <__alt_data_end+0xfffe56c8>
   24b70:	0121c83a 	sub	r16,zero,r4
   24b74:	003fc806 	br	24a98 <__alt_data_end+0xfffe5698>
   24b78:	01002e44 	movi	r4,185
   24b7c:	20c9c83a 	sub	r4,r4,r3
   24b80:	01400144 	movi	r5,5
   24b84:	8108983a 	sll	r4,r16,r4
   24b88:	288bc83a 	sub	r5,r5,r2
   24b8c:	8160d83a 	srl	r16,r16,r5
   24b90:	2008c03a 	cmpne	r4,r4,zero
   24b94:	8120b03a 	or	r16,r16,r4
   24b98:	003fdd06 	br	24b10 <__alt_data_end+0xfffe5710>

00024b9c <__floatunsisf>:
   24b9c:	defffe04 	addi	sp,sp,-8
   24ba0:	dfc00115 	stw	ra,4(sp)
   24ba4:	dc000015 	stw	r16,0(sp)
   24ba8:	20002c26 	beq	r4,zero,24c5c <__floatunsisf+0xc0>
   24bac:	2021883a 	mov	r16,r4
   24bb0:	00270ec0 	call	270ec <__clzsi2>
   24bb4:	00c02784 	movi	r3,158
   24bb8:	1887c83a 	sub	r3,r3,r2
   24bbc:	01002584 	movi	r4,150
   24bc0:	20c00f16 	blt	r4,r3,24c00 <__floatunsisf+0x64>
   24bc4:	20c9c83a 	sub	r4,r4,r3
   24bc8:	8108983a 	sll	r4,r16,r4
   24bcc:	00802034 	movhi	r2,128
   24bd0:	10bfffc4 	addi	r2,r2,-1
   24bd4:	2088703a 	and	r4,r4,r2
   24bd8:	18803fcc 	andi	r2,r3,255
   24bdc:	100695fa 	slli	r3,r2,23
   24be0:	00802034 	movhi	r2,128
   24be4:	10bfffc4 	addi	r2,r2,-1
   24be8:	2084703a 	and	r2,r4,r2
   24bec:	10c4b03a 	or	r2,r2,r3
   24bf0:	dfc00117 	ldw	ra,4(sp)
   24bf4:	dc000017 	ldw	r16,0(sp)
   24bf8:	dec00204 	addi	sp,sp,8
   24bfc:	f800283a 	ret
   24c00:	01002644 	movi	r4,153
   24c04:	20c01816 	blt	r4,r3,24c68 <__floatunsisf+0xcc>
   24c08:	20c9c83a 	sub	r4,r4,r3
   24c0c:	8108983a 	sll	r4,r16,r4
   24c10:	017f0034 	movhi	r5,64512
   24c14:	297fffc4 	addi	r5,r5,-1
   24c18:	218001cc 	andi	r6,r4,7
   24c1c:	214a703a 	and	r5,r4,r5
   24c20:	30000426 	beq	r6,zero,24c34 <__floatunsisf+0x98>
   24c24:	210003cc 	andi	r4,r4,15
   24c28:	01800104 	movi	r6,4
   24c2c:	21800126 	beq	r4,r6,24c34 <__floatunsisf+0x98>
   24c30:	298b883a 	add	r5,r5,r6
   24c34:	2901002c 	andhi	r4,r5,1024
   24c38:	20000526 	beq	r4,zero,24c50 <__floatunsisf+0xb4>
   24c3c:	00c027c4 	movi	r3,159
   24c40:	1887c83a 	sub	r3,r3,r2
   24c44:	00bf0034 	movhi	r2,64512
   24c48:	10bfffc4 	addi	r2,r2,-1
   24c4c:	288a703a 	and	r5,r5,r2
   24c50:	280891ba 	slli	r4,r5,6
   24c54:	2008d27a 	srli	r4,r4,9
   24c58:	003fdf06 	br	24bd8 <__alt_data_end+0xfffe57d8>
   24c5c:	0007883a 	mov	r3,zero
   24c60:	0009883a 	mov	r4,zero
   24c64:	003fdc06 	br	24bd8 <__alt_data_end+0xfffe57d8>
   24c68:	01402e44 	movi	r5,185
   24c6c:	28cbc83a 	sub	r5,r5,r3
   24c70:	01000144 	movi	r4,5
   24c74:	2089c83a 	sub	r4,r4,r2
   24c78:	814a983a 	sll	r5,r16,r5
   24c7c:	8108d83a 	srl	r4,r16,r4
   24c80:	2820c03a 	cmpne	r16,r5,zero
   24c84:	2408b03a 	or	r4,r4,r16
   24c88:	003fe106 	br	24c10 <__alt_data_end+0xfffe5810>

00024c8c <__adddf3>:
   24c8c:	02c00434 	movhi	r11,16
   24c90:	5affffc4 	addi	r11,r11,-1
   24c94:	2806d7fa 	srli	r3,r5,31
   24c98:	2ad4703a 	and	r10,r5,r11
   24c9c:	3ad2703a 	and	r9,r7,r11
   24ca0:	3804d53a 	srli	r2,r7,20
   24ca4:	3018d77a 	srli	r12,r6,29
   24ca8:	280ad53a 	srli	r5,r5,20
   24cac:	501490fa 	slli	r10,r10,3
   24cb0:	2010d77a 	srli	r8,r4,29
   24cb4:	481290fa 	slli	r9,r9,3
   24cb8:	380ed7fa 	srli	r7,r7,31
   24cbc:	defffb04 	addi	sp,sp,-20
   24cc0:	dc800215 	stw	r18,8(sp)
   24cc4:	dc400115 	stw	r17,4(sp)
   24cc8:	dc000015 	stw	r16,0(sp)
   24ccc:	dfc00415 	stw	ra,16(sp)
   24cd0:	dcc00315 	stw	r19,12(sp)
   24cd4:	1c803fcc 	andi	r18,r3,255
   24cd8:	2c01ffcc 	andi	r16,r5,2047
   24cdc:	5210b03a 	or	r8,r10,r8
   24ce0:	202290fa 	slli	r17,r4,3
   24ce4:	1081ffcc 	andi	r2,r2,2047
   24ce8:	4b12b03a 	or	r9,r9,r12
   24cec:	300c90fa 	slli	r6,r6,3
   24cf0:	91c07526 	beq	r18,r7,24ec8 <__adddf3+0x23c>
   24cf4:	8087c83a 	sub	r3,r16,r2
   24cf8:	00c0ab0e 	bge	zero,r3,24fa8 <__adddf3+0x31c>
   24cfc:	10002a1e 	bne	r2,zero,24da8 <__adddf3+0x11c>
   24d00:	4984b03a 	or	r2,r9,r6
   24d04:	1000961e 	bne	r2,zero,24f60 <__adddf3+0x2d4>
   24d08:	888001cc 	andi	r2,r17,7
   24d0c:	10000726 	beq	r2,zero,24d2c <__adddf3+0xa0>
   24d10:	888003cc 	andi	r2,r17,15
   24d14:	00c00104 	movi	r3,4
   24d18:	10c00426 	beq	r2,r3,24d2c <__adddf3+0xa0>
   24d1c:	88c7883a 	add	r3,r17,r3
   24d20:	1c63803a 	cmpltu	r17,r3,r17
   24d24:	4451883a 	add	r8,r8,r17
   24d28:	1823883a 	mov	r17,r3
   24d2c:	4080202c 	andhi	r2,r8,128
   24d30:	10005926 	beq	r2,zero,24e98 <__adddf3+0x20c>
   24d34:	84000044 	addi	r16,r16,1
   24d38:	0081ffc4 	movi	r2,2047
   24d3c:	8080ba26 	beq	r16,r2,25028 <__adddf3+0x39c>
   24d40:	00bfe034 	movhi	r2,65408
   24d44:	10bfffc4 	addi	r2,r2,-1
   24d48:	4090703a 	and	r8,r8,r2
   24d4c:	4004977a 	slli	r2,r8,29
   24d50:	4010927a 	slli	r8,r8,9
   24d54:	8822d0fa 	srli	r17,r17,3
   24d58:	8401ffcc 	andi	r16,r16,2047
   24d5c:	4010d33a 	srli	r8,r8,12
   24d60:	9007883a 	mov	r3,r18
   24d64:	1444b03a 	or	r2,r2,r17
   24d68:	8401ffcc 	andi	r16,r16,2047
   24d6c:	8020953a 	slli	r16,r16,20
   24d70:	18c03fcc 	andi	r3,r3,255
   24d74:	01000434 	movhi	r4,16
   24d78:	213fffc4 	addi	r4,r4,-1
   24d7c:	180697fa 	slli	r3,r3,31
   24d80:	4110703a 	and	r8,r8,r4
   24d84:	4410b03a 	or	r8,r8,r16
   24d88:	40c6b03a 	or	r3,r8,r3
   24d8c:	dfc00417 	ldw	ra,16(sp)
   24d90:	dcc00317 	ldw	r19,12(sp)
   24d94:	dc800217 	ldw	r18,8(sp)
   24d98:	dc400117 	ldw	r17,4(sp)
   24d9c:	dc000017 	ldw	r16,0(sp)
   24da0:	dec00504 	addi	sp,sp,20
   24da4:	f800283a 	ret
   24da8:	0081ffc4 	movi	r2,2047
   24dac:	80bfd626 	beq	r16,r2,24d08 <__alt_data_end+0xfffe5908>
   24db0:	4a402034 	orhi	r9,r9,128
   24db4:	00800e04 	movi	r2,56
   24db8:	10c09f16 	blt	r2,r3,25038 <__adddf3+0x3ac>
   24dbc:	008007c4 	movi	r2,31
   24dc0:	10c0c216 	blt	r2,r3,250cc <__adddf3+0x440>
   24dc4:	00800804 	movi	r2,32
   24dc8:	10c5c83a 	sub	r2,r2,r3
   24dcc:	488a983a 	sll	r5,r9,r2
   24dd0:	30c8d83a 	srl	r4,r6,r3
   24dd4:	3084983a 	sll	r2,r6,r2
   24dd8:	48c6d83a 	srl	r3,r9,r3
   24ddc:	290cb03a 	or	r6,r5,r4
   24de0:	1004c03a 	cmpne	r2,r2,zero
   24de4:	308cb03a 	or	r6,r6,r2
   24de8:	898dc83a 	sub	r6,r17,r6
   24dec:	89a3803a 	cmpltu	r17,r17,r6
   24df0:	40d1c83a 	sub	r8,r8,r3
   24df4:	4451c83a 	sub	r8,r8,r17
   24df8:	3023883a 	mov	r17,r6
   24dfc:	4080202c 	andhi	r2,r8,128
   24e00:	10002326 	beq	r2,zero,24e90 <__adddf3+0x204>
   24e04:	04c02034 	movhi	r19,128
   24e08:	9cffffc4 	addi	r19,r19,-1
   24e0c:	44e6703a 	and	r19,r8,r19
   24e10:	98007626 	beq	r19,zero,24fec <__adddf3+0x360>
   24e14:	9809883a 	mov	r4,r19
   24e18:	00270ec0 	call	270ec <__clzsi2>
   24e1c:	10fffe04 	addi	r3,r2,-8
   24e20:	010007c4 	movi	r4,31
   24e24:	20c07716 	blt	r4,r3,25004 <__adddf3+0x378>
   24e28:	00800804 	movi	r2,32
   24e2c:	10c5c83a 	sub	r2,r2,r3
   24e30:	8884d83a 	srl	r2,r17,r2
   24e34:	98d0983a 	sll	r8,r19,r3
   24e38:	88e2983a 	sll	r17,r17,r3
   24e3c:	1204b03a 	or	r2,r2,r8
   24e40:	1c007416 	blt	r3,r16,25014 <__adddf3+0x388>
   24e44:	1c21c83a 	sub	r16,r3,r16
   24e48:	82000044 	addi	r8,r16,1
   24e4c:	00c007c4 	movi	r3,31
   24e50:	1a009116 	blt	r3,r8,25098 <__adddf3+0x40c>
   24e54:	00c00804 	movi	r3,32
   24e58:	1a07c83a 	sub	r3,r3,r8
   24e5c:	8a08d83a 	srl	r4,r17,r8
   24e60:	88e2983a 	sll	r17,r17,r3
   24e64:	10c6983a 	sll	r3,r2,r3
   24e68:	1210d83a 	srl	r8,r2,r8
   24e6c:	8804c03a 	cmpne	r2,r17,zero
   24e70:	1906b03a 	or	r3,r3,r4
   24e74:	18a2b03a 	or	r17,r3,r2
   24e78:	0021883a 	mov	r16,zero
   24e7c:	003fa206 	br	24d08 <__alt_data_end+0xfffe5908>
   24e80:	1890b03a 	or	r8,r3,r2
   24e84:	40017d26 	beq	r8,zero,2547c <__adddf3+0x7f0>
   24e88:	1011883a 	mov	r8,r2
   24e8c:	1823883a 	mov	r17,r3
   24e90:	888001cc 	andi	r2,r17,7
   24e94:	103f9e1e 	bne	r2,zero,24d10 <__alt_data_end+0xfffe5910>
   24e98:	4004977a 	slli	r2,r8,29
   24e9c:	8822d0fa 	srli	r17,r17,3
   24ea0:	4010d0fa 	srli	r8,r8,3
   24ea4:	9007883a 	mov	r3,r18
   24ea8:	1444b03a 	or	r2,r2,r17
   24eac:	0101ffc4 	movi	r4,2047
   24eb0:	81002426 	beq	r16,r4,24f44 <__adddf3+0x2b8>
   24eb4:	8120703a 	and	r16,r16,r4
   24eb8:	01000434 	movhi	r4,16
   24ebc:	213fffc4 	addi	r4,r4,-1
   24ec0:	4110703a 	and	r8,r8,r4
   24ec4:	003fa806 	br	24d68 <__alt_data_end+0xfffe5968>
   24ec8:	8089c83a 	sub	r4,r16,r2
   24ecc:	01005e0e 	bge	zero,r4,25048 <__adddf3+0x3bc>
   24ed0:	10002b26 	beq	r2,zero,24f80 <__adddf3+0x2f4>
   24ed4:	0081ffc4 	movi	r2,2047
   24ed8:	80bf8b26 	beq	r16,r2,24d08 <__alt_data_end+0xfffe5908>
   24edc:	4a402034 	orhi	r9,r9,128
   24ee0:	00800e04 	movi	r2,56
   24ee4:	1100a40e 	bge	r2,r4,25178 <__adddf3+0x4ec>
   24ee8:	498cb03a 	or	r6,r9,r6
   24eec:	300ac03a 	cmpne	r5,r6,zero
   24ef0:	0013883a 	mov	r9,zero
   24ef4:	2c4b883a 	add	r5,r5,r17
   24ef8:	2c63803a 	cmpltu	r17,r5,r17
   24efc:	4a11883a 	add	r8,r9,r8
   24f00:	8a11883a 	add	r8,r17,r8
   24f04:	2823883a 	mov	r17,r5
   24f08:	4080202c 	andhi	r2,r8,128
   24f0c:	103fe026 	beq	r2,zero,24e90 <__alt_data_end+0xfffe5a90>
   24f10:	84000044 	addi	r16,r16,1
   24f14:	0081ffc4 	movi	r2,2047
   24f18:	8080d226 	beq	r16,r2,25264 <__adddf3+0x5d8>
   24f1c:	00bfe034 	movhi	r2,65408
   24f20:	10bfffc4 	addi	r2,r2,-1
   24f24:	4090703a 	and	r8,r8,r2
   24f28:	880ad07a 	srli	r5,r17,1
   24f2c:	400897fa 	slli	r4,r8,31
   24f30:	88c0004c 	andi	r3,r17,1
   24f34:	28e2b03a 	or	r17,r5,r3
   24f38:	4010d07a 	srli	r8,r8,1
   24f3c:	2462b03a 	or	r17,r4,r17
   24f40:	003f7106 	br	24d08 <__alt_data_end+0xfffe5908>
   24f44:	4088b03a 	or	r4,r8,r2
   24f48:	20014526 	beq	r4,zero,25460 <__adddf3+0x7d4>
   24f4c:	01000434 	movhi	r4,16
   24f50:	42000234 	orhi	r8,r8,8
   24f54:	213fffc4 	addi	r4,r4,-1
   24f58:	4110703a 	and	r8,r8,r4
   24f5c:	003f8206 	br	24d68 <__alt_data_end+0xfffe5968>
   24f60:	18ffffc4 	addi	r3,r3,-1
   24f64:	1800491e 	bne	r3,zero,2508c <__adddf3+0x400>
   24f68:	898bc83a 	sub	r5,r17,r6
   24f6c:	8963803a 	cmpltu	r17,r17,r5
   24f70:	4251c83a 	sub	r8,r8,r9
   24f74:	4451c83a 	sub	r8,r8,r17
   24f78:	2823883a 	mov	r17,r5
   24f7c:	003f9f06 	br	24dfc <__alt_data_end+0xfffe59fc>
   24f80:	4984b03a 	or	r2,r9,r6
   24f84:	103f6026 	beq	r2,zero,24d08 <__alt_data_end+0xfffe5908>
   24f88:	213fffc4 	addi	r4,r4,-1
   24f8c:	2000931e 	bne	r4,zero,251dc <__adddf3+0x550>
   24f90:	898d883a 	add	r6,r17,r6
   24f94:	3463803a 	cmpltu	r17,r6,r17
   24f98:	4251883a 	add	r8,r8,r9
   24f9c:	8a11883a 	add	r8,r17,r8
   24fa0:	3023883a 	mov	r17,r6
   24fa4:	003fd806 	br	24f08 <__alt_data_end+0xfffe5b08>
   24fa8:	1800541e 	bne	r3,zero,250fc <__adddf3+0x470>
   24fac:	80800044 	addi	r2,r16,1
   24fb0:	1081ffcc 	andi	r2,r2,2047
   24fb4:	00c00044 	movi	r3,1
   24fb8:	1880a00e 	bge	r3,r2,2523c <__adddf3+0x5b0>
   24fbc:	8989c83a 	sub	r4,r17,r6
   24fc0:	8905803a 	cmpltu	r2,r17,r4
   24fc4:	4267c83a 	sub	r19,r8,r9
   24fc8:	98a7c83a 	sub	r19,r19,r2
   24fcc:	9880202c 	andhi	r2,r19,128
   24fd0:	10006326 	beq	r2,zero,25160 <__adddf3+0x4d4>
   24fd4:	3463c83a 	sub	r17,r6,r17
   24fd8:	4a07c83a 	sub	r3,r9,r8
   24fdc:	344d803a 	cmpltu	r6,r6,r17
   24fe0:	19a7c83a 	sub	r19,r3,r6
   24fe4:	3825883a 	mov	r18,r7
   24fe8:	983f8a1e 	bne	r19,zero,24e14 <__alt_data_end+0xfffe5a14>
   24fec:	8809883a 	mov	r4,r17
   24ff0:	00270ec0 	call	270ec <__clzsi2>
   24ff4:	10800804 	addi	r2,r2,32
   24ff8:	10fffe04 	addi	r3,r2,-8
   24ffc:	010007c4 	movi	r4,31
   25000:	20ff890e 	bge	r4,r3,24e28 <__alt_data_end+0xfffe5a28>
   25004:	10bff604 	addi	r2,r2,-40
   25008:	8884983a 	sll	r2,r17,r2
   2500c:	0023883a 	mov	r17,zero
   25010:	1c3f8c0e 	bge	r3,r16,24e44 <__alt_data_end+0xfffe5a44>
   25014:	023fe034 	movhi	r8,65408
   25018:	423fffc4 	addi	r8,r8,-1
   2501c:	80e1c83a 	sub	r16,r16,r3
   25020:	1210703a 	and	r8,r2,r8
   25024:	003f3806 	br	24d08 <__alt_data_end+0xfffe5908>
   25028:	9007883a 	mov	r3,r18
   2502c:	0011883a 	mov	r8,zero
   25030:	0005883a 	mov	r2,zero
   25034:	003f4c06 	br	24d68 <__alt_data_end+0xfffe5968>
   25038:	498cb03a 	or	r6,r9,r6
   2503c:	300cc03a 	cmpne	r6,r6,zero
   25040:	0007883a 	mov	r3,zero
   25044:	003f6806 	br	24de8 <__alt_data_end+0xfffe59e8>
   25048:	20009c1e 	bne	r4,zero,252bc <__adddf3+0x630>
   2504c:	80800044 	addi	r2,r16,1
   25050:	1141ffcc 	andi	r5,r2,2047
   25054:	01000044 	movi	r4,1
   25058:	2140670e 	bge	r4,r5,251f8 <__adddf3+0x56c>
   2505c:	0101ffc4 	movi	r4,2047
   25060:	11007f26 	beq	r2,r4,25260 <__adddf3+0x5d4>
   25064:	898d883a 	add	r6,r17,r6
   25068:	4247883a 	add	r3,r8,r9
   2506c:	3451803a 	cmpltu	r8,r6,r17
   25070:	40d1883a 	add	r8,r8,r3
   25074:	402297fa 	slli	r17,r8,31
   25078:	300cd07a 	srli	r6,r6,1
   2507c:	4010d07a 	srli	r8,r8,1
   25080:	1021883a 	mov	r16,r2
   25084:	89a2b03a 	or	r17,r17,r6
   25088:	003f1f06 	br	24d08 <__alt_data_end+0xfffe5908>
   2508c:	0081ffc4 	movi	r2,2047
   25090:	80bf481e 	bne	r16,r2,24db4 <__alt_data_end+0xfffe59b4>
   25094:	003f1c06 	br	24d08 <__alt_data_end+0xfffe5908>
   25098:	843ff844 	addi	r16,r16,-31
   2509c:	01000804 	movi	r4,32
   250a0:	1406d83a 	srl	r3,r2,r16
   250a4:	41005026 	beq	r8,r4,251e8 <__adddf3+0x55c>
   250a8:	01001004 	movi	r4,64
   250ac:	2211c83a 	sub	r8,r4,r8
   250b0:	1204983a 	sll	r2,r2,r8
   250b4:	88a2b03a 	or	r17,r17,r2
   250b8:	8822c03a 	cmpne	r17,r17,zero
   250bc:	1c62b03a 	or	r17,r3,r17
   250c0:	0011883a 	mov	r8,zero
   250c4:	0021883a 	mov	r16,zero
   250c8:	003f7106 	br	24e90 <__alt_data_end+0xfffe5a90>
   250cc:	193ff804 	addi	r4,r3,-32
   250d0:	00800804 	movi	r2,32
   250d4:	4908d83a 	srl	r4,r9,r4
   250d8:	18804526 	beq	r3,r2,251f0 <__adddf3+0x564>
   250dc:	00801004 	movi	r2,64
   250e0:	10c5c83a 	sub	r2,r2,r3
   250e4:	4886983a 	sll	r3,r9,r2
   250e8:	198cb03a 	or	r6,r3,r6
   250ec:	300cc03a 	cmpne	r6,r6,zero
   250f0:	218cb03a 	or	r6,r4,r6
   250f4:	0007883a 	mov	r3,zero
   250f8:	003f3b06 	br	24de8 <__alt_data_end+0xfffe59e8>
   250fc:	80002a26 	beq	r16,zero,251a8 <__adddf3+0x51c>
   25100:	0101ffc4 	movi	r4,2047
   25104:	11006826 	beq	r2,r4,252a8 <__adddf3+0x61c>
   25108:	00c7c83a 	sub	r3,zero,r3
   2510c:	42002034 	orhi	r8,r8,128
   25110:	01000e04 	movi	r4,56
   25114:	20c07c16 	blt	r4,r3,25308 <__adddf3+0x67c>
   25118:	010007c4 	movi	r4,31
   2511c:	20c0da16 	blt	r4,r3,25488 <__adddf3+0x7fc>
   25120:	01000804 	movi	r4,32
   25124:	20c9c83a 	sub	r4,r4,r3
   25128:	4114983a 	sll	r10,r8,r4
   2512c:	88cad83a 	srl	r5,r17,r3
   25130:	8908983a 	sll	r4,r17,r4
   25134:	40c6d83a 	srl	r3,r8,r3
   25138:	5162b03a 	or	r17,r10,r5
   2513c:	2008c03a 	cmpne	r4,r4,zero
   25140:	8922b03a 	or	r17,r17,r4
   25144:	3463c83a 	sub	r17,r6,r17
   25148:	48c7c83a 	sub	r3,r9,r3
   2514c:	344d803a 	cmpltu	r6,r6,r17
   25150:	1991c83a 	sub	r8,r3,r6
   25154:	1021883a 	mov	r16,r2
   25158:	3825883a 	mov	r18,r7
   2515c:	003f2706 	br	24dfc <__alt_data_end+0xfffe59fc>
   25160:	24d0b03a 	or	r8,r4,r19
   25164:	40001b1e 	bne	r8,zero,251d4 <__adddf3+0x548>
   25168:	0005883a 	mov	r2,zero
   2516c:	0007883a 	mov	r3,zero
   25170:	0021883a 	mov	r16,zero
   25174:	003f4d06 	br	24eac <__alt_data_end+0xfffe5aac>
   25178:	008007c4 	movi	r2,31
   2517c:	11003c16 	blt	r2,r4,25270 <__adddf3+0x5e4>
   25180:	00800804 	movi	r2,32
   25184:	1105c83a 	sub	r2,r2,r4
   25188:	488e983a 	sll	r7,r9,r2
   2518c:	310ad83a 	srl	r5,r6,r4
   25190:	3084983a 	sll	r2,r6,r2
   25194:	4912d83a 	srl	r9,r9,r4
   25198:	394ab03a 	or	r5,r7,r5
   2519c:	1004c03a 	cmpne	r2,r2,zero
   251a0:	288ab03a 	or	r5,r5,r2
   251a4:	003f5306 	br	24ef4 <__alt_data_end+0xfffe5af4>
   251a8:	4448b03a 	or	r4,r8,r17
   251ac:	20003e26 	beq	r4,zero,252a8 <__adddf3+0x61c>
   251b0:	00c6303a 	nor	r3,zero,r3
   251b4:	18003a1e 	bne	r3,zero,252a0 <__adddf3+0x614>
   251b8:	3463c83a 	sub	r17,r6,r17
   251bc:	4a07c83a 	sub	r3,r9,r8
   251c0:	344d803a 	cmpltu	r6,r6,r17
   251c4:	1991c83a 	sub	r8,r3,r6
   251c8:	1021883a 	mov	r16,r2
   251cc:	3825883a 	mov	r18,r7
   251d0:	003f0a06 	br	24dfc <__alt_data_end+0xfffe59fc>
   251d4:	2023883a 	mov	r17,r4
   251d8:	003f0d06 	br	24e10 <__alt_data_end+0xfffe5a10>
   251dc:	0081ffc4 	movi	r2,2047
   251e0:	80bf3f1e 	bne	r16,r2,24ee0 <__alt_data_end+0xfffe5ae0>
   251e4:	003ec806 	br	24d08 <__alt_data_end+0xfffe5908>
   251e8:	0005883a 	mov	r2,zero
   251ec:	003fb106 	br	250b4 <__alt_data_end+0xfffe5cb4>
   251f0:	0007883a 	mov	r3,zero
   251f4:	003fbc06 	br	250e8 <__alt_data_end+0xfffe5ce8>
   251f8:	4444b03a 	or	r2,r8,r17
   251fc:	8000871e 	bne	r16,zero,2541c <__adddf3+0x790>
   25200:	1000ba26 	beq	r2,zero,254ec <__adddf3+0x860>
   25204:	4984b03a 	or	r2,r9,r6
   25208:	103ebf26 	beq	r2,zero,24d08 <__alt_data_end+0xfffe5908>
   2520c:	8985883a 	add	r2,r17,r6
   25210:	4247883a 	add	r3,r8,r9
   25214:	1451803a 	cmpltu	r8,r2,r17
   25218:	40d1883a 	add	r8,r8,r3
   2521c:	40c0202c 	andhi	r3,r8,128
   25220:	1023883a 	mov	r17,r2
   25224:	183f1a26 	beq	r3,zero,24e90 <__alt_data_end+0xfffe5a90>
   25228:	00bfe034 	movhi	r2,65408
   2522c:	10bfffc4 	addi	r2,r2,-1
   25230:	2021883a 	mov	r16,r4
   25234:	4090703a 	and	r8,r8,r2
   25238:	003eb306 	br	24d08 <__alt_data_end+0xfffe5908>
   2523c:	4444b03a 	or	r2,r8,r17
   25240:	8000291e 	bne	r16,zero,252e8 <__adddf3+0x65c>
   25244:	10004b1e 	bne	r2,zero,25374 <__adddf3+0x6e8>
   25248:	4990b03a 	or	r8,r9,r6
   2524c:	40008b26 	beq	r8,zero,2547c <__adddf3+0x7f0>
   25250:	4811883a 	mov	r8,r9
   25254:	3023883a 	mov	r17,r6
   25258:	3825883a 	mov	r18,r7
   2525c:	003eaa06 	br	24d08 <__alt_data_end+0xfffe5908>
   25260:	1021883a 	mov	r16,r2
   25264:	0011883a 	mov	r8,zero
   25268:	0005883a 	mov	r2,zero
   2526c:	003f0f06 	br	24eac <__alt_data_end+0xfffe5aac>
   25270:	217ff804 	addi	r5,r4,-32
   25274:	00800804 	movi	r2,32
   25278:	494ad83a 	srl	r5,r9,r5
   2527c:	20807d26 	beq	r4,r2,25474 <__adddf3+0x7e8>
   25280:	00801004 	movi	r2,64
   25284:	1109c83a 	sub	r4,r2,r4
   25288:	4912983a 	sll	r9,r9,r4
   2528c:	498cb03a 	or	r6,r9,r6
   25290:	300cc03a 	cmpne	r6,r6,zero
   25294:	298ab03a 	or	r5,r5,r6
   25298:	0013883a 	mov	r9,zero
   2529c:	003f1506 	br	24ef4 <__alt_data_end+0xfffe5af4>
   252a0:	0101ffc4 	movi	r4,2047
   252a4:	113f9a1e 	bne	r2,r4,25110 <__alt_data_end+0xfffe5d10>
   252a8:	4811883a 	mov	r8,r9
   252ac:	3023883a 	mov	r17,r6
   252b0:	1021883a 	mov	r16,r2
   252b4:	3825883a 	mov	r18,r7
   252b8:	003e9306 	br	24d08 <__alt_data_end+0xfffe5908>
   252bc:	8000161e 	bne	r16,zero,25318 <__adddf3+0x68c>
   252c0:	444ab03a 	or	r5,r8,r17
   252c4:	28005126 	beq	r5,zero,2540c <__adddf3+0x780>
   252c8:	0108303a 	nor	r4,zero,r4
   252cc:	20004d1e 	bne	r4,zero,25404 <__adddf3+0x778>
   252d0:	89a3883a 	add	r17,r17,r6
   252d4:	4253883a 	add	r9,r8,r9
   252d8:	898d803a 	cmpltu	r6,r17,r6
   252dc:	3251883a 	add	r8,r6,r9
   252e0:	1021883a 	mov	r16,r2
   252e4:	003f0806 	br	24f08 <__alt_data_end+0xfffe5b08>
   252e8:	1000301e 	bne	r2,zero,253ac <__adddf3+0x720>
   252ec:	4984b03a 	or	r2,r9,r6
   252f0:	10007126 	beq	r2,zero,254b8 <__adddf3+0x82c>
   252f4:	4811883a 	mov	r8,r9
   252f8:	3023883a 	mov	r17,r6
   252fc:	3825883a 	mov	r18,r7
   25300:	0401ffc4 	movi	r16,2047
   25304:	003e8006 	br	24d08 <__alt_data_end+0xfffe5908>
   25308:	4462b03a 	or	r17,r8,r17
   2530c:	8822c03a 	cmpne	r17,r17,zero
   25310:	0007883a 	mov	r3,zero
   25314:	003f8b06 	br	25144 <__alt_data_end+0xfffe5d44>
   25318:	0141ffc4 	movi	r5,2047
   2531c:	11403b26 	beq	r2,r5,2540c <__adddf3+0x780>
   25320:	0109c83a 	sub	r4,zero,r4
   25324:	42002034 	orhi	r8,r8,128
   25328:	01400e04 	movi	r5,56
   2532c:	29006716 	blt	r5,r4,254cc <__adddf3+0x840>
   25330:	014007c4 	movi	r5,31
   25334:	29007016 	blt	r5,r4,254f8 <__adddf3+0x86c>
   25338:	01400804 	movi	r5,32
   2533c:	290bc83a 	sub	r5,r5,r4
   25340:	4154983a 	sll	r10,r8,r5
   25344:	890ed83a 	srl	r7,r17,r4
   25348:	894a983a 	sll	r5,r17,r5
   2534c:	4108d83a 	srl	r4,r8,r4
   25350:	51e2b03a 	or	r17,r10,r7
   25354:	280ac03a 	cmpne	r5,r5,zero
   25358:	8962b03a 	or	r17,r17,r5
   2535c:	89a3883a 	add	r17,r17,r6
   25360:	2253883a 	add	r9,r4,r9
   25364:	898d803a 	cmpltu	r6,r17,r6
   25368:	3251883a 	add	r8,r6,r9
   2536c:	1021883a 	mov	r16,r2
   25370:	003ee506 	br	24f08 <__alt_data_end+0xfffe5b08>
   25374:	4984b03a 	or	r2,r9,r6
   25378:	103e6326 	beq	r2,zero,24d08 <__alt_data_end+0xfffe5908>
   2537c:	8987c83a 	sub	r3,r17,r6
   25380:	88c9803a 	cmpltu	r4,r17,r3
   25384:	4245c83a 	sub	r2,r8,r9
   25388:	1105c83a 	sub	r2,r2,r4
   2538c:	1100202c 	andhi	r4,r2,128
   25390:	203ebb26 	beq	r4,zero,24e80 <__alt_data_end+0xfffe5a80>
   25394:	3463c83a 	sub	r17,r6,r17
   25398:	4a07c83a 	sub	r3,r9,r8
   2539c:	344d803a 	cmpltu	r6,r6,r17
   253a0:	1991c83a 	sub	r8,r3,r6
   253a4:	3825883a 	mov	r18,r7
   253a8:	003e5706 	br	24d08 <__alt_data_end+0xfffe5908>
   253ac:	4984b03a 	or	r2,r9,r6
   253b0:	10002e26 	beq	r2,zero,2546c <__adddf3+0x7e0>
   253b4:	4004d0fa 	srli	r2,r8,3
   253b8:	8822d0fa 	srli	r17,r17,3
   253bc:	4010977a 	slli	r8,r8,29
   253c0:	10c0022c 	andhi	r3,r2,8
   253c4:	4462b03a 	or	r17,r8,r17
   253c8:	18000826 	beq	r3,zero,253ec <__adddf3+0x760>
   253cc:	4808d0fa 	srli	r4,r9,3
   253d0:	20c0022c 	andhi	r3,r4,8
   253d4:	1800051e 	bne	r3,zero,253ec <__adddf3+0x760>
   253d8:	300cd0fa 	srli	r6,r6,3
   253dc:	4806977a 	slli	r3,r9,29
   253e0:	2005883a 	mov	r2,r4
   253e4:	3825883a 	mov	r18,r7
   253e8:	19a2b03a 	or	r17,r3,r6
   253ec:	8810d77a 	srli	r8,r17,29
   253f0:	100490fa 	slli	r2,r2,3
   253f4:	882290fa 	slli	r17,r17,3
   253f8:	0401ffc4 	movi	r16,2047
   253fc:	4090b03a 	or	r8,r8,r2
   25400:	003e4106 	br	24d08 <__alt_data_end+0xfffe5908>
   25404:	0141ffc4 	movi	r5,2047
   25408:	117fc71e 	bne	r2,r5,25328 <__alt_data_end+0xfffe5f28>
   2540c:	4811883a 	mov	r8,r9
   25410:	3023883a 	mov	r17,r6
   25414:	1021883a 	mov	r16,r2
   25418:	003e3b06 	br	24d08 <__alt_data_end+0xfffe5908>
   2541c:	10002f26 	beq	r2,zero,254dc <__adddf3+0x850>
   25420:	4984b03a 	or	r2,r9,r6
   25424:	10001126 	beq	r2,zero,2546c <__adddf3+0x7e0>
   25428:	4004d0fa 	srli	r2,r8,3
   2542c:	8822d0fa 	srli	r17,r17,3
   25430:	4010977a 	slli	r8,r8,29
   25434:	10c0022c 	andhi	r3,r2,8
   25438:	4462b03a 	or	r17,r8,r17
   2543c:	183feb26 	beq	r3,zero,253ec <__alt_data_end+0xfffe5fec>
   25440:	4808d0fa 	srli	r4,r9,3
   25444:	20c0022c 	andhi	r3,r4,8
   25448:	183fe81e 	bne	r3,zero,253ec <__alt_data_end+0xfffe5fec>
   2544c:	300cd0fa 	srli	r6,r6,3
   25450:	4806977a 	slli	r3,r9,29
   25454:	2005883a 	mov	r2,r4
   25458:	19a2b03a 	or	r17,r3,r6
   2545c:	003fe306 	br	253ec <__alt_data_end+0xfffe5fec>
   25460:	0011883a 	mov	r8,zero
   25464:	0005883a 	mov	r2,zero
   25468:	003e3f06 	br	24d68 <__alt_data_end+0xfffe5968>
   2546c:	0401ffc4 	movi	r16,2047
   25470:	003e2506 	br	24d08 <__alt_data_end+0xfffe5908>
   25474:	0013883a 	mov	r9,zero
   25478:	003f8406 	br	2528c <__alt_data_end+0xfffe5e8c>
   2547c:	0005883a 	mov	r2,zero
   25480:	0007883a 	mov	r3,zero
   25484:	003e8906 	br	24eac <__alt_data_end+0xfffe5aac>
   25488:	197ff804 	addi	r5,r3,-32
   2548c:	01000804 	movi	r4,32
   25490:	414ad83a 	srl	r5,r8,r5
   25494:	19002426 	beq	r3,r4,25528 <__adddf3+0x89c>
   25498:	01001004 	movi	r4,64
   2549c:	20c7c83a 	sub	r3,r4,r3
   254a0:	40c6983a 	sll	r3,r8,r3
   254a4:	1c46b03a 	or	r3,r3,r17
   254a8:	1806c03a 	cmpne	r3,r3,zero
   254ac:	28e2b03a 	or	r17,r5,r3
   254b0:	0007883a 	mov	r3,zero
   254b4:	003f2306 	br	25144 <__alt_data_end+0xfffe5d44>
   254b8:	0007883a 	mov	r3,zero
   254bc:	5811883a 	mov	r8,r11
   254c0:	00bfffc4 	movi	r2,-1
   254c4:	0401ffc4 	movi	r16,2047
   254c8:	003e7806 	br	24eac <__alt_data_end+0xfffe5aac>
   254cc:	4462b03a 	or	r17,r8,r17
   254d0:	8822c03a 	cmpne	r17,r17,zero
   254d4:	0009883a 	mov	r4,zero
   254d8:	003fa006 	br	2535c <__alt_data_end+0xfffe5f5c>
   254dc:	4811883a 	mov	r8,r9
   254e0:	3023883a 	mov	r17,r6
   254e4:	0401ffc4 	movi	r16,2047
   254e8:	003e0706 	br	24d08 <__alt_data_end+0xfffe5908>
   254ec:	4811883a 	mov	r8,r9
   254f0:	3023883a 	mov	r17,r6
   254f4:	003e0406 	br	24d08 <__alt_data_end+0xfffe5908>
   254f8:	21fff804 	addi	r7,r4,-32
   254fc:	01400804 	movi	r5,32
   25500:	41ced83a 	srl	r7,r8,r7
   25504:	21400a26 	beq	r4,r5,25530 <__adddf3+0x8a4>
   25508:	01401004 	movi	r5,64
   2550c:	2909c83a 	sub	r4,r5,r4
   25510:	4108983a 	sll	r4,r8,r4
   25514:	2448b03a 	or	r4,r4,r17
   25518:	2008c03a 	cmpne	r4,r4,zero
   2551c:	3922b03a 	or	r17,r7,r4
   25520:	0009883a 	mov	r4,zero
   25524:	003f8d06 	br	2535c <__alt_data_end+0xfffe5f5c>
   25528:	0007883a 	mov	r3,zero
   2552c:	003fdd06 	br	254a4 <__alt_data_end+0xfffe60a4>
   25530:	0009883a 	mov	r4,zero
   25534:	003ff706 	br	25514 <__alt_data_end+0xfffe6114>

00025538 <__divdf3>:
   25538:	defff204 	addi	sp,sp,-56
   2553c:	dd400915 	stw	r21,36(sp)
   25540:	282ad53a 	srli	r21,r5,20
   25544:	dd000815 	stw	r20,32(sp)
   25548:	2828d7fa 	srli	r20,r5,31
   2554c:	dc000415 	stw	r16,16(sp)
   25550:	04000434 	movhi	r16,16
   25554:	df000c15 	stw	fp,48(sp)
   25558:	843fffc4 	addi	r16,r16,-1
   2555c:	dfc00d15 	stw	ra,52(sp)
   25560:	ddc00b15 	stw	r23,44(sp)
   25564:	dd800a15 	stw	r22,40(sp)
   25568:	dcc00715 	stw	r19,28(sp)
   2556c:	dc800615 	stw	r18,24(sp)
   25570:	dc400515 	stw	r17,20(sp)
   25574:	ad41ffcc 	andi	r21,r21,2047
   25578:	2c20703a 	and	r16,r5,r16
   2557c:	a7003fcc 	andi	fp,r20,255
   25580:	a8006126 	beq	r21,zero,25708 <__divdf3+0x1d0>
   25584:	0081ffc4 	movi	r2,2047
   25588:	2025883a 	mov	r18,r4
   2558c:	a8803726 	beq	r21,r2,2566c <__divdf3+0x134>
   25590:	80800434 	orhi	r2,r16,16
   25594:	100490fa 	slli	r2,r2,3
   25598:	2020d77a 	srli	r16,r4,29
   2559c:	202490fa 	slli	r18,r4,3
   255a0:	ad7f0044 	addi	r21,r21,-1023
   255a4:	80a0b03a 	or	r16,r16,r2
   255a8:	0027883a 	mov	r19,zero
   255ac:	0013883a 	mov	r9,zero
   255b0:	3804d53a 	srli	r2,r7,20
   255b4:	382cd7fa 	srli	r22,r7,31
   255b8:	04400434 	movhi	r17,16
   255bc:	8c7fffc4 	addi	r17,r17,-1
   255c0:	1081ffcc 	andi	r2,r2,2047
   255c4:	3011883a 	mov	r8,r6
   255c8:	3c62703a 	and	r17,r7,r17
   255cc:	b5c03fcc 	andi	r23,r22,255
   255d0:	10006c26 	beq	r2,zero,25784 <__divdf3+0x24c>
   255d4:	00c1ffc4 	movi	r3,2047
   255d8:	10c06426 	beq	r2,r3,2576c <__divdf3+0x234>
   255dc:	88c00434 	orhi	r3,r17,16
   255e0:	180690fa 	slli	r3,r3,3
   255e4:	3022d77a 	srli	r17,r6,29
   255e8:	301090fa 	slli	r8,r6,3
   255ec:	10bf0044 	addi	r2,r2,-1023
   255f0:	88e2b03a 	or	r17,r17,r3
   255f4:	000f883a 	mov	r7,zero
   255f8:	a58cf03a 	xor	r6,r20,r22
   255fc:	3cc8b03a 	or	r4,r7,r19
   25600:	a8abc83a 	sub	r21,r21,r2
   25604:	008003c4 	movi	r2,15
   25608:	3007883a 	mov	r3,r6
   2560c:	34c03fcc 	andi	r19,r6,255
   25610:	11009036 	bltu	r2,r4,25854 <__divdf3+0x31c>
   25614:	200890ba 	slli	r4,r4,2
   25618:	008000b4 	movhi	r2,2
   2561c:	10958b04 	addi	r2,r2,22060
   25620:	2089883a 	add	r4,r4,r2
   25624:	20800017 	ldw	r2,0(r4)
   25628:	1000683a 	jmp	r2
   2562c:	00025854 	movui	zero,2401
   25630:	000256a4 	muli	zero,zero,2394
   25634:	00025844 	movi	zero,2401
   25638:	00025698 	cmpnei	zero,zero,2394
   2563c:	00025844 	movi	zero,2401
   25640:	00025818 	cmpnei	zero,zero,2400
   25644:	00025844 	movi	zero,2401
   25648:	00025698 	cmpnei	zero,zero,2394
   2564c:	000256a4 	muli	zero,zero,2394
   25650:	000256a4 	muli	zero,zero,2394
   25654:	00025818 	cmpnei	zero,zero,2400
   25658:	00025698 	cmpnei	zero,zero,2394
   2565c:	00025688 	cmpgei	zero,zero,2394
   25660:	00025688 	cmpgei	zero,zero,2394
   25664:	00025688 	cmpgei	zero,zero,2394
   25668:	00025b38 	rdprs	zero,zero,2412
   2566c:	2404b03a 	or	r2,r4,r16
   25670:	1000661e 	bne	r2,zero,2580c <__divdf3+0x2d4>
   25674:	04c00204 	movi	r19,8
   25678:	0021883a 	mov	r16,zero
   2567c:	0025883a 	mov	r18,zero
   25680:	02400084 	movi	r9,2
   25684:	003fca06 	br	255b0 <__alt_data_end+0xfffe61b0>
   25688:	8023883a 	mov	r17,r16
   2568c:	9011883a 	mov	r8,r18
   25690:	e02f883a 	mov	r23,fp
   25694:	480f883a 	mov	r7,r9
   25698:	00800084 	movi	r2,2
   2569c:	3881311e 	bne	r7,r2,25b64 <__divdf3+0x62c>
   256a0:	b827883a 	mov	r19,r23
   256a4:	98c0004c 	andi	r3,r19,1
   256a8:	0081ffc4 	movi	r2,2047
   256ac:	000b883a 	mov	r5,zero
   256b0:	0025883a 	mov	r18,zero
   256b4:	1004953a 	slli	r2,r2,20
   256b8:	18c03fcc 	andi	r3,r3,255
   256bc:	04400434 	movhi	r17,16
   256c0:	8c7fffc4 	addi	r17,r17,-1
   256c4:	180697fa 	slli	r3,r3,31
   256c8:	2c4a703a 	and	r5,r5,r17
   256cc:	288ab03a 	or	r5,r5,r2
   256d0:	28c6b03a 	or	r3,r5,r3
   256d4:	9005883a 	mov	r2,r18
   256d8:	dfc00d17 	ldw	ra,52(sp)
   256dc:	df000c17 	ldw	fp,48(sp)
   256e0:	ddc00b17 	ldw	r23,44(sp)
   256e4:	dd800a17 	ldw	r22,40(sp)
   256e8:	dd400917 	ldw	r21,36(sp)
   256ec:	dd000817 	ldw	r20,32(sp)
   256f0:	dcc00717 	ldw	r19,28(sp)
   256f4:	dc800617 	ldw	r18,24(sp)
   256f8:	dc400517 	ldw	r17,20(sp)
   256fc:	dc000417 	ldw	r16,16(sp)
   25700:	dec00e04 	addi	sp,sp,56
   25704:	f800283a 	ret
   25708:	2404b03a 	or	r2,r4,r16
   2570c:	2027883a 	mov	r19,r4
   25710:	10003926 	beq	r2,zero,257f8 <__divdf3+0x2c0>
   25714:	80012e26 	beq	r16,zero,25bd0 <__divdf3+0x698>
   25718:	8009883a 	mov	r4,r16
   2571c:	d9800315 	stw	r6,12(sp)
   25720:	d9c00215 	stw	r7,8(sp)
   25724:	00270ec0 	call	270ec <__clzsi2>
   25728:	d9800317 	ldw	r6,12(sp)
   2572c:	d9c00217 	ldw	r7,8(sp)
   25730:	113ffd44 	addi	r4,r2,-11
   25734:	00c00704 	movi	r3,28
   25738:	19012116 	blt	r3,r4,25bc0 <__divdf3+0x688>
   2573c:	00c00744 	movi	r3,29
   25740:	147ffe04 	addi	r17,r2,-8
   25744:	1907c83a 	sub	r3,r3,r4
   25748:	8460983a 	sll	r16,r16,r17
   2574c:	98c6d83a 	srl	r3,r19,r3
   25750:	9c64983a 	sll	r18,r19,r17
   25754:	1c20b03a 	or	r16,r3,r16
   25758:	1080fcc4 	addi	r2,r2,1011
   2575c:	00abc83a 	sub	r21,zero,r2
   25760:	0027883a 	mov	r19,zero
   25764:	0013883a 	mov	r9,zero
   25768:	003f9106 	br	255b0 <__alt_data_end+0xfffe61b0>
   2576c:	3446b03a 	or	r3,r6,r17
   25770:	18001f1e 	bne	r3,zero,257f0 <__divdf3+0x2b8>
   25774:	0023883a 	mov	r17,zero
   25778:	0011883a 	mov	r8,zero
   2577c:	01c00084 	movi	r7,2
   25780:	003f9d06 	br	255f8 <__alt_data_end+0xfffe61f8>
   25784:	3446b03a 	or	r3,r6,r17
   25788:	18001526 	beq	r3,zero,257e0 <__divdf3+0x2a8>
   2578c:	88011b26 	beq	r17,zero,25bfc <__divdf3+0x6c4>
   25790:	8809883a 	mov	r4,r17
   25794:	d9800315 	stw	r6,12(sp)
   25798:	da400115 	stw	r9,4(sp)
   2579c:	00270ec0 	call	270ec <__clzsi2>
   257a0:	d9800317 	ldw	r6,12(sp)
   257a4:	da400117 	ldw	r9,4(sp)
   257a8:	113ffd44 	addi	r4,r2,-11
   257ac:	00c00704 	movi	r3,28
   257b0:	19010e16 	blt	r3,r4,25bec <__divdf3+0x6b4>
   257b4:	00c00744 	movi	r3,29
   257b8:	123ffe04 	addi	r8,r2,-8
   257bc:	1907c83a 	sub	r3,r3,r4
   257c0:	8a22983a 	sll	r17,r17,r8
   257c4:	30c6d83a 	srl	r3,r6,r3
   257c8:	3210983a 	sll	r8,r6,r8
   257cc:	1c62b03a 	or	r17,r3,r17
   257d0:	1080fcc4 	addi	r2,r2,1011
   257d4:	0085c83a 	sub	r2,zero,r2
   257d8:	000f883a 	mov	r7,zero
   257dc:	003f8606 	br	255f8 <__alt_data_end+0xfffe61f8>
   257e0:	0023883a 	mov	r17,zero
   257e4:	0011883a 	mov	r8,zero
   257e8:	01c00044 	movi	r7,1
   257ec:	003f8206 	br	255f8 <__alt_data_end+0xfffe61f8>
   257f0:	01c000c4 	movi	r7,3
   257f4:	003f8006 	br	255f8 <__alt_data_end+0xfffe61f8>
   257f8:	04c00104 	movi	r19,4
   257fc:	0021883a 	mov	r16,zero
   25800:	0025883a 	mov	r18,zero
   25804:	02400044 	movi	r9,1
   25808:	003f6906 	br	255b0 <__alt_data_end+0xfffe61b0>
   2580c:	04c00304 	movi	r19,12
   25810:	024000c4 	movi	r9,3
   25814:	003f6606 	br	255b0 <__alt_data_end+0xfffe61b0>
   25818:	01400434 	movhi	r5,16
   2581c:	0007883a 	mov	r3,zero
   25820:	297fffc4 	addi	r5,r5,-1
   25824:	04bfffc4 	movi	r18,-1
   25828:	0081ffc4 	movi	r2,2047
   2582c:	003fa106 	br	256b4 <__alt_data_end+0xfffe62b4>
   25830:	00c00044 	movi	r3,1
   25834:	1887c83a 	sub	r3,r3,r2
   25838:	01000e04 	movi	r4,56
   2583c:	20c1210e 	bge	r4,r3,25cc4 <__divdf3+0x78c>
   25840:	98c0004c 	andi	r3,r19,1
   25844:	0005883a 	mov	r2,zero
   25848:	000b883a 	mov	r5,zero
   2584c:	0025883a 	mov	r18,zero
   25850:	003f9806 	br	256b4 <__alt_data_end+0xfffe62b4>
   25854:	8c00fd36 	bltu	r17,r16,25c4c <__divdf3+0x714>
   25858:	8440fb26 	beq	r16,r17,25c48 <__divdf3+0x710>
   2585c:	8007883a 	mov	r3,r16
   25860:	ad7fffc4 	addi	r21,r21,-1
   25864:	0021883a 	mov	r16,zero
   25868:	4004d63a 	srli	r2,r8,24
   2586c:	8822923a 	slli	r17,r17,8
   25870:	1809883a 	mov	r4,r3
   25874:	402c923a 	slli	r22,r8,8
   25878:	88b8b03a 	or	fp,r17,r2
   2587c:	e028d43a 	srli	r20,fp,16
   25880:	d8c00015 	stw	r3,0(sp)
   25884:	e5ffffcc 	andi	r23,fp,65535
   25888:	a00b883a 	mov	r5,r20
   2588c:	00237d40 	call	237d4 <__udivsi3>
   25890:	d8c00017 	ldw	r3,0(sp)
   25894:	a00b883a 	mov	r5,r20
   25898:	d8800315 	stw	r2,12(sp)
   2589c:	1809883a 	mov	r4,r3
   258a0:	00238380 	call	23838 <__umodsi3>
   258a4:	d9800317 	ldw	r6,12(sp)
   258a8:	1006943a 	slli	r3,r2,16
   258ac:	9004d43a 	srli	r2,r18,16
   258b0:	b9a3383a 	mul	r17,r23,r6
   258b4:	10c4b03a 	or	r2,r2,r3
   258b8:	1440062e 	bgeu	r2,r17,258d4 <__divdf3+0x39c>
   258bc:	1705883a 	add	r2,r2,fp
   258c0:	30ffffc4 	addi	r3,r6,-1
   258c4:	1700ee36 	bltu	r2,fp,25c80 <__divdf3+0x748>
   258c8:	1440ed2e 	bgeu	r2,r17,25c80 <__divdf3+0x748>
   258cc:	31bfff84 	addi	r6,r6,-2
   258d0:	1705883a 	add	r2,r2,fp
   258d4:	1463c83a 	sub	r17,r2,r17
   258d8:	a00b883a 	mov	r5,r20
   258dc:	8809883a 	mov	r4,r17
   258e0:	d9800315 	stw	r6,12(sp)
   258e4:	00237d40 	call	237d4 <__udivsi3>
   258e8:	a00b883a 	mov	r5,r20
   258ec:	8809883a 	mov	r4,r17
   258f0:	d8800215 	stw	r2,8(sp)
   258f4:	00238380 	call	23838 <__umodsi3>
   258f8:	d9c00217 	ldw	r7,8(sp)
   258fc:	1004943a 	slli	r2,r2,16
   25900:	94bfffcc 	andi	r18,r18,65535
   25904:	b9d1383a 	mul	r8,r23,r7
   25908:	90a4b03a 	or	r18,r18,r2
   2590c:	d9800317 	ldw	r6,12(sp)
   25910:	9200062e 	bgeu	r18,r8,2592c <__divdf3+0x3f4>
   25914:	9725883a 	add	r18,r18,fp
   25918:	38bfffc4 	addi	r2,r7,-1
   2591c:	9700d636 	bltu	r18,fp,25c78 <__divdf3+0x740>
   25920:	9200d52e 	bgeu	r18,r8,25c78 <__divdf3+0x740>
   25924:	39ffff84 	addi	r7,r7,-2
   25928:	9725883a 	add	r18,r18,fp
   2592c:	3004943a 	slli	r2,r6,16
   25930:	b012d43a 	srli	r9,r22,16
   25934:	b1bfffcc 	andi	r6,r22,65535
   25938:	11e2b03a 	or	r17,r2,r7
   2593c:	8806d43a 	srli	r3,r17,16
   25940:	893fffcc 	andi	r4,r17,65535
   25944:	218b383a 	mul	r5,r4,r6
   25948:	30c5383a 	mul	r2,r6,r3
   2594c:	2249383a 	mul	r4,r4,r9
   25950:	280ed43a 	srli	r7,r5,16
   25954:	9225c83a 	sub	r18,r18,r8
   25958:	2089883a 	add	r4,r4,r2
   2595c:	3909883a 	add	r4,r7,r4
   25960:	1a47383a 	mul	r3,r3,r9
   25964:	2080022e 	bgeu	r4,r2,25970 <__divdf3+0x438>
   25968:	00800074 	movhi	r2,1
   2596c:	1887883a 	add	r3,r3,r2
   25970:	2004d43a 	srli	r2,r4,16
   25974:	2008943a 	slli	r4,r4,16
   25978:	297fffcc 	andi	r5,r5,65535
   2597c:	10c7883a 	add	r3,r2,r3
   25980:	2149883a 	add	r4,r4,r5
   25984:	90c0a536 	bltu	r18,r3,25c1c <__divdf3+0x6e4>
   25988:	90c0bf26 	beq	r18,r3,25c88 <__divdf3+0x750>
   2598c:	90c7c83a 	sub	r3,r18,r3
   25990:	810fc83a 	sub	r7,r16,r4
   25994:	81e5803a 	cmpltu	r18,r16,r7
   25998:	1ca5c83a 	sub	r18,r3,r18
   2599c:	e480c126 	beq	fp,r18,25ca4 <__divdf3+0x76c>
   259a0:	a00b883a 	mov	r5,r20
   259a4:	9009883a 	mov	r4,r18
   259a8:	d9800315 	stw	r6,12(sp)
   259ac:	d9c00215 	stw	r7,8(sp)
   259b0:	da400115 	stw	r9,4(sp)
   259b4:	00237d40 	call	237d4 <__udivsi3>
   259b8:	a00b883a 	mov	r5,r20
   259bc:	9009883a 	mov	r4,r18
   259c0:	d8800015 	stw	r2,0(sp)
   259c4:	00238380 	call	23838 <__umodsi3>
   259c8:	d9c00217 	ldw	r7,8(sp)
   259cc:	da000017 	ldw	r8,0(sp)
   259d0:	1006943a 	slli	r3,r2,16
   259d4:	3804d43a 	srli	r2,r7,16
   259d8:	ba21383a 	mul	r16,r23,r8
   259dc:	d9800317 	ldw	r6,12(sp)
   259e0:	10c4b03a 	or	r2,r2,r3
   259e4:	da400117 	ldw	r9,4(sp)
   259e8:	1400062e 	bgeu	r2,r16,25a04 <__divdf3+0x4cc>
   259ec:	1705883a 	add	r2,r2,fp
   259f0:	40ffffc4 	addi	r3,r8,-1
   259f4:	1700ad36 	bltu	r2,fp,25cac <__divdf3+0x774>
   259f8:	1400ac2e 	bgeu	r2,r16,25cac <__divdf3+0x774>
   259fc:	423fff84 	addi	r8,r8,-2
   25a00:	1705883a 	add	r2,r2,fp
   25a04:	1421c83a 	sub	r16,r2,r16
   25a08:	a00b883a 	mov	r5,r20
   25a0c:	8009883a 	mov	r4,r16
   25a10:	d9800315 	stw	r6,12(sp)
   25a14:	d9c00215 	stw	r7,8(sp)
   25a18:	da000015 	stw	r8,0(sp)
   25a1c:	da400115 	stw	r9,4(sp)
   25a20:	00237d40 	call	237d4 <__udivsi3>
   25a24:	8009883a 	mov	r4,r16
   25a28:	a00b883a 	mov	r5,r20
   25a2c:	1025883a 	mov	r18,r2
   25a30:	00238380 	call	23838 <__umodsi3>
   25a34:	d9c00217 	ldw	r7,8(sp)
   25a38:	1004943a 	slli	r2,r2,16
   25a3c:	bcaf383a 	mul	r23,r23,r18
   25a40:	393fffcc 	andi	r4,r7,65535
   25a44:	2088b03a 	or	r4,r4,r2
   25a48:	d9800317 	ldw	r6,12(sp)
   25a4c:	da000017 	ldw	r8,0(sp)
   25a50:	da400117 	ldw	r9,4(sp)
   25a54:	25c0062e 	bgeu	r4,r23,25a70 <__divdf3+0x538>
   25a58:	2709883a 	add	r4,r4,fp
   25a5c:	90bfffc4 	addi	r2,r18,-1
   25a60:	27009436 	bltu	r4,fp,25cb4 <__divdf3+0x77c>
   25a64:	25c0932e 	bgeu	r4,r23,25cb4 <__divdf3+0x77c>
   25a68:	94bfff84 	addi	r18,r18,-2
   25a6c:	2709883a 	add	r4,r4,fp
   25a70:	4004943a 	slli	r2,r8,16
   25a74:	25efc83a 	sub	r23,r4,r23
   25a78:	1490b03a 	or	r8,r2,r18
   25a7c:	4008d43a 	srli	r4,r8,16
   25a80:	40ffffcc 	andi	r3,r8,65535
   25a84:	30c5383a 	mul	r2,r6,r3
   25a88:	1a47383a 	mul	r3,r3,r9
   25a8c:	310d383a 	mul	r6,r6,r4
   25a90:	100ad43a 	srli	r5,r2,16
   25a94:	4913383a 	mul	r9,r9,r4
   25a98:	1987883a 	add	r3,r3,r6
   25a9c:	28c7883a 	add	r3,r5,r3
   25aa0:	1980022e 	bgeu	r3,r6,25aac <__divdf3+0x574>
   25aa4:	01000074 	movhi	r4,1
   25aa8:	4913883a 	add	r9,r9,r4
   25aac:	1808d43a 	srli	r4,r3,16
   25ab0:	1806943a 	slli	r3,r3,16
   25ab4:	10bfffcc 	andi	r2,r2,65535
   25ab8:	2253883a 	add	r9,r4,r9
   25abc:	1887883a 	add	r3,r3,r2
   25ac0:	ba403836 	bltu	r23,r9,25ba4 <__divdf3+0x66c>
   25ac4:	ba403626 	beq	r23,r9,25ba0 <__divdf3+0x668>
   25ac8:	42000054 	ori	r8,r8,1
   25acc:	a880ffc4 	addi	r2,r21,1023
   25ad0:	00bf570e 	bge	zero,r2,25830 <__alt_data_end+0xfffe6430>
   25ad4:	40c001cc 	andi	r3,r8,7
   25ad8:	18000726 	beq	r3,zero,25af8 <__divdf3+0x5c0>
   25adc:	40c003cc 	andi	r3,r8,15
   25ae0:	01000104 	movi	r4,4
   25ae4:	19000426 	beq	r3,r4,25af8 <__divdf3+0x5c0>
   25ae8:	4107883a 	add	r3,r8,r4
   25aec:	1a11803a 	cmpltu	r8,r3,r8
   25af0:	8a23883a 	add	r17,r17,r8
   25af4:	1811883a 	mov	r8,r3
   25af8:	88c0402c 	andhi	r3,r17,256
   25afc:	18000426 	beq	r3,zero,25b10 <__divdf3+0x5d8>
   25b00:	00ffc034 	movhi	r3,65280
   25b04:	18ffffc4 	addi	r3,r3,-1
   25b08:	a8810004 	addi	r2,r21,1024
   25b0c:	88e2703a 	and	r17,r17,r3
   25b10:	00c1ff84 	movi	r3,2046
   25b14:	18bee316 	blt	r3,r2,256a4 <__alt_data_end+0xfffe62a4>
   25b18:	8824977a 	slli	r18,r17,29
   25b1c:	4010d0fa 	srli	r8,r8,3
   25b20:	8822927a 	slli	r17,r17,9
   25b24:	1081ffcc 	andi	r2,r2,2047
   25b28:	9224b03a 	or	r18,r18,r8
   25b2c:	880ad33a 	srli	r5,r17,12
   25b30:	98c0004c 	andi	r3,r19,1
   25b34:	003edf06 	br	256b4 <__alt_data_end+0xfffe62b4>
   25b38:	8080022c 	andhi	r2,r16,8
   25b3c:	10001226 	beq	r2,zero,25b88 <__divdf3+0x650>
   25b40:	8880022c 	andhi	r2,r17,8
   25b44:	1000101e 	bne	r2,zero,25b88 <__divdf3+0x650>
   25b48:	00800434 	movhi	r2,16
   25b4c:	89400234 	orhi	r5,r17,8
   25b50:	10bfffc4 	addi	r2,r2,-1
   25b54:	b007883a 	mov	r3,r22
   25b58:	288a703a 	and	r5,r5,r2
   25b5c:	4025883a 	mov	r18,r8
   25b60:	003f3106 	br	25828 <__alt_data_end+0xfffe6428>
   25b64:	008000c4 	movi	r2,3
   25b68:	3880a626 	beq	r7,r2,25e04 <__divdf3+0x8cc>
   25b6c:	00800044 	movi	r2,1
   25b70:	3880521e 	bne	r7,r2,25cbc <__divdf3+0x784>
   25b74:	b807883a 	mov	r3,r23
   25b78:	0005883a 	mov	r2,zero
   25b7c:	000b883a 	mov	r5,zero
   25b80:	0025883a 	mov	r18,zero
   25b84:	003ecb06 	br	256b4 <__alt_data_end+0xfffe62b4>
   25b88:	00800434 	movhi	r2,16
   25b8c:	81400234 	orhi	r5,r16,8
   25b90:	10bfffc4 	addi	r2,r2,-1
   25b94:	a007883a 	mov	r3,r20
   25b98:	288a703a 	and	r5,r5,r2
   25b9c:	003f2206 	br	25828 <__alt_data_end+0xfffe6428>
   25ba0:	183fca26 	beq	r3,zero,25acc <__alt_data_end+0xfffe66cc>
   25ba4:	e5ef883a 	add	r23,fp,r23
   25ba8:	40bfffc4 	addi	r2,r8,-1
   25bac:	bf00392e 	bgeu	r23,fp,25c94 <__divdf3+0x75c>
   25bb0:	1011883a 	mov	r8,r2
   25bb4:	ba7fc41e 	bne	r23,r9,25ac8 <__alt_data_end+0xfffe66c8>
   25bb8:	b0ffc31e 	bne	r22,r3,25ac8 <__alt_data_end+0xfffe66c8>
   25bbc:	003fc306 	br	25acc <__alt_data_end+0xfffe66cc>
   25bc0:	143ff604 	addi	r16,r2,-40
   25bc4:	9c20983a 	sll	r16,r19,r16
   25bc8:	0025883a 	mov	r18,zero
   25bcc:	003ee206 	br	25758 <__alt_data_end+0xfffe6358>
   25bd0:	d9800315 	stw	r6,12(sp)
   25bd4:	d9c00215 	stw	r7,8(sp)
   25bd8:	00270ec0 	call	270ec <__clzsi2>
   25bdc:	10800804 	addi	r2,r2,32
   25be0:	d9c00217 	ldw	r7,8(sp)
   25be4:	d9800317 	ldw	r6,12(sp)
   25be8:	003ed106 	br	25730 <__alt_data_end+0xfffe6330>
   25bec:	147ff604 	addi	r17,r2,-40
   25bf0:	3462983a 	sll	r17,r6,r17
   25bf4:	0011883a 	mov	r8,zero
   25bf8:	003ef506 	br	257d0 <__alt_data_end+0xfffe63d0>
   25bfc:	3009883a 	mov	r4,r6
   25c00:	d9800315 	stw	r6,12(sp)
   25c04:	da400115 	stw	r9,4(sp)
   25c08:	00270ec0 	call	270ec <__clzsi2>
   25c0c:	10800804 	addi	r2,r2,32
   25c10:	da400117 	ldw	r9,4(sp)
   25c14:	d9800317 	ldw	r6,12(sp)
   25c18:	003ee306 	br	257a8 <__alt_data_end+0xfffe63a8>
   25c1c:	85a1883a 	add	r16,r16,r22
   25c20:	8585803a 	cmpltu	r2,r16,r22
   25c24:	1705883a 	add	r2,r2,fp
   25c28:	14a5883a 	add	r18,r2,r18
   25c2c:	88bfffc4 	addi	r2,r17,-1
   25c30:	e4800c2e 	bgeu	fp,r18,25c64 <__divdf3+0x72c>
   25c34:	90c03e36 	bltu	r18,r3,25d30 <__divdf3+0x7f8>
   25c38:	1c806926 	beq	r3,r18,25de0 <__divdf3+0x8a8>
   25c3c:	90c7c83a 	sub	r3,r18,r3
   25c40:	1023883a 	mov	r17,r2
   25c44:	003f5206 	br	25990 <__alt_data_end+0xfffe6590>
   25c48:	923f0436 	bltu	r18,r8,2585c <__alt_data_end+0xfffe645c>
   25c4c:	800897fa 	slli	r4,r16,31
   25c50:	9004d07a 	srli	r2,r18,1
   25c54:	8006d07a 	srli	r3,r16,1
   25c58:	902097fa 	slli	r16,r18,31
   25c5c:	20a4b03a 	or	r18,r4,r2
   25c60:	003f0106 	br	25868 <__alt_data_end+0xfffe6468>
   25c64:	e4bff51e 	bne	fp,r18,25c3c <__alt_data_end+0xfffe683c>
   25c68:	85bff22e 	bgeu	r16,r22,25c34 <__alt_data_end+0xfffe6834>
   25c6c:	e0c7c83a 	sub	r3,fp,r3
   25c70:	1023883a 	mov	r17,r2
   25c74:	003f4606 	br	25990 <__alt_data_end+0xfffe6590>
   25c78:	100f883a 	mov	r7,r2
   25c7c:	003f2b06 	br	2592c <__alt_data_end+0xfffe652c>
   25c80:	180d883a 	mov	r6,r3
   25c84:	003f1306 	br	258d4 <__alt_data_end+0xfffe64d4>
   25c88:	813fe436 	bltu	r16,r4,25c1c <__alt_data_end+0xfffe681c>
   25c8c:	0007883a 	mov	r3,zero
   25c90:	003f3f06 	br	25990 <__alt_data_end+0xfffe6590>
   25c94:	ba402c36 	bltu	r23,r9,25d48 <__divdf3+0x810>
   25c98:	4dc05426 	beq	r9,r23,25dec <__divdf3+0x8b4>
   25c9c:	1011883a 	mov	r8,r2
   25ca0:	003f8906 	br	25ac8 <__alt_data_end+0xfffe66c8>
   25ca4:	023fffc4 	movi	r8,-1
   25ca8:	003f8806 	br	25acc <__alt_data_end+0xfffe66cc>
   25cac:	1811883a 	mov	r8,r3
   25cb0:	003f5406 	br	25a04 <__alt_data_end+0xfffe6604>
   25cb4:	1025883a 	mov	r18,r2
   25cb8:	003f6d06 	br	25a70 <__alt_data_end+0xfffe6670>
   25cbc:	b827883a 	mov	r19,r23
   25cc0:	003f8206 	br	25acc <__alt_data_end+0xfffe66cc>
   25cc4:	010007c4 	movi	r4,31
   25cc8:	20c02616 	blt	r4,r3,25d64 <__divdf3+0x82c>
   25ccc:	00800804 	movi	r2,32
   25cd0:	10c5c83a 	sub	r2,r2,r3
   25cd4:	888a983a 	sll	r5,r17,r2
   25cd8:	40c8d83a 	srl	r4,r8,r3
   25cdc:	4084983a 	sll	r2,r8,r2
   25ce0:	88e2d83a 	srl	r17,r17,r3
   25ce4:	2906b03a 	or	r3,r5,r4
   25ce8:	1004c03a 	cmpne	r2,r2,zero
   25cec:	1886b03a 	or	r3,r3,r2
   25cf0:	188001cc 	andi	r2,r3,7
   25cf4:	10000726 	beq	r2,zero,25d14 <__divdf3+0x7dc>
   25cf8:	188003cc 	andi	r2,r3,15
   25cfc:	01000104 	movi	r4,4
   25d00:	11000426 	beq	r2,r4,25d14 <__divdf3+0x7dc>
   25d04:	1805883a 	mov	r2,r3
   25d08:	10c00104 	addi	r3,r2,4
   25d0c:	1885803a 	cmpltu	r2,r3,r2
   25d10:	88a3883a 	add	r17,r17,r2
   25d14:	8880202c 	andhi	r2,r17,128
   25d18:	10002726 	beq	r2,zero,25db8 <__divdf3+0x880>
   25d1c:	98c0004c 	andi	r3,r19,1
   25d20:	00800044 	movi	r2,1
   25d24:	000b883a 	mov	r5,zero
   25d28:	0025883a 	mov	r18,zero
   25d2c:	003e6106 	br	256b4 <__alt_data_end+0xfffe62b4>
   25d30:	85a1883a 	add	r16,r16,r22
   25d34:	8585803a 	cmpltu	r2,r16,r22
   25d38:	1705883a 	add	r2,r2,fp
   25d3c:	14a5883a 	add	r18,r2,r18
   25d40:	8c7fff84 	addi	r17,r17,-2
   25d44:	003f1106 	br	2598c <__alt_data_end+0xfffe658c>
   25d48:	b589883a 	add	r4,r22,r22
   25d4c:	25ad803a 	cmpltu	r22,r4,r22
   25d50:	b739883a 	add	fp,r22,fp
   25d54:	40bfff84 	addi	r2,r8,-2
   25d58:	bf2f883a 	add	r23,r23,fp
   25d5c:	202d883a 	mov	r22,r4
   25d60:	003f9306 	br	25bb0 <__alt_data_end+0xfffe67b0>
   25d64:	013ff844 	movi	r4,-31
   25d68:	2085c83a 	sub	r2,r4,r2
   25d6c:	8888d83a 	srl	r4,r17,r2
   25d70:	00800804 	movi	r2,32
   25d74:	18802126 	beq	r3,r2,25dfc <__divdf3+0x8c4>
   25d78:	00801004 	movi	r2,64
   25d7c:	10c5c83a 	sub	r2,r2,r3
   25d80:	8884983a 	sll	r2,r17,r2
   25d84:	1204b03a 	or	r2,r2,r8
   25d88:	1004c03a 	cmpne	r2,r2,zero
   25d8c:	2084b03a 	or	r2,r4,r2
   25d90:	144001cc 	andi	r17,r2,7
   25d94:	88000d1e 	bne	r17,zero,25dcc <__divdf3+0x894>
   25d98:	000b883a 	mov	r5,zero
   25d9c:	1024d0fa 	srli	r18,r2,3
   25da0:	98c0004c 	andi	r3,r19,1
   25da4:	0005883a 	mov	r2,zero
   25da8:	9464b03a 	or	r18,r18,r17
   25dac:	003e4106 	br	256b4 <__alt_data_end+0xfffe62b4>
   25db0:	1007883a 	mov	r3,r2
   25db4:	0023883a 	mov	r17,zero
   25db8:	880a927a 	slli	r5,r17,9
   25dbc:	1805883a 	mov	r2,r3
   25dc0:	8822977a 	slli	r17,r17,29
   25dc4:	280ad33a 	srli	r5,r5,12
   25dc8:	003ff406 	br	25d9c <__alt_data_end+0xfffe699c>
   25dcc:	10c003cc 	andi	r3,r2,15
   25dd0:	01000104 	movi	r4,4
   25dd4:	193ff626 	beq	r3,r4,25db0 <__alt_data_end+0xfffe69b0>
   25dd8:	0023883a 	mov	r17,zero
   25ddc:	003fca06 	br	25d08 <__alt_data_end+0xfffe6908>
   25de0:	813fd336 	bltu	r16,r4,25d30 <__alt_data_end+0xfffe6930>
   25de4:	1023883a 	mov	r17,r2
   25de8:	003fa806 	br	25c8c <__alt_data_end+0xfffe688c>
   25dec:	b0ffd636 	bltu	r22,r3,25d48 <__alt_data_end+0xfffe6948>
   25df0:	1011883a 	mov	r8,r2
   25df4:	b0ff341e 	bne	r22,r3,25ac8 <__alt_data_end+0xfffe66c8>
   25df8:	003f3406 	br	25acc <__alt_data_end+0xfffe66cc>
   25dfc:	0005883a 	mov	r2,zero
   25e00:	003fe006 	br	25d84 <__alt_data_end+0xfffe6984>
   25e04:	00800434 	movhi	r2,16
   25e08:	89400234 	orhi	r5,r17,8
   25e0c:	10bfffc4 	addi	r2,r2,-1
   25e10:	b807883a 	mov	r3,r23
   25e14:	288a703a 	and	r5,r5,r2
   25e18:	4025883a 	mov	r18,r8
   25e1c:	003e8206 	br	25828 <__alt_data_end+0xfffe6428>

00025e20 <__muldf3>:
   25e20:	defff304 	addi	sp,sp,-52
   25e24:	2804d53a 	srli	r2,r5,20
   25e28:	dd800915 	stw	r22,36(sp)
   25e2c:	282cd7fa 	srli	r22,r5,31
   25e30:	dc000315 	stw	r16,12(sp)
   25e34:	04000434 	movhi	r16,16
   25e38:	dd400815 	stw	r21,32(sp)
   25e3c:	dc800515 	stw	r18,20(sp)
   25e40:	843fffc4 	addi	r16,r16,-1
   25e44:	dfc00c15 	stw	ra,48(sp)
   25e48:	df000b15 	stw	fp,44(sp)
   25e4c:	ddc00a15 	stw	r23,40(sp)
   25e50:	dd000715 	stw	r20,28(sp)
   25e54:	dcc00615 	stw	r19,24(sp)
   25e58:	dc400415 	stw	r17,16(sp)
   25e5c:	1481ffcc 	andi	r18,r2,2047
   25e60:	2c20703a 	and	r16,r5,r16
   25e64:	b02b883a 	mov	r21,r22
   25e68:	b2403fcc 	andi	r9,r22,255
   25e6c:	90006026 	beq	r18,zero,25ff0 <__muldf3+0x1d0>
   25e70:	0081ffc4 	movi	r2,2047
   25e74:	2029883a 	mov	r20,r4
   25e78:	90803626 	beq	r18,r2,25f54 <__muldf3+0x134>
   25e7c:	80800434 	orhi	r2,r16,16
   25e80:	100490fa 	slli	r2,r2,3
   25e84:	2020d77a 	srli	r16,r4,29
   25e88:	202890fa 	slli	r20,r4,3
   25e8c:	94bf0044 	addi	r18,r18,-1023
   25e90:	80a0b03a 	or	r16,r16,r2
   25e94:	0027883a 	mov	r19,zero
   25e98:	0039883a 	mov	fp,zero
   25e9c:	3804d53a 	srli	r2,r7,20
   25ea0:	382ed7fa 	srli	r23,r7,31
   25ea4:	04400434 	movhi	r17,16
   25ea8:	8c7fffc4 	addi	r17,r17,-1
   25eac:	1081ffcc 	andi	r2,r2,2047
   25eb0:	3011883a 	mov	r8,r6
   25eb4:	3c62703a 	and	r17,r7,r17
   25eb8:	ba803fcc 	andi	r10,r23,255
   25ebc:	10006d26 	beq	r2,zero,26074 <__muldf3+0x254>
   25ec0:	00c1ffc4 	movi	r3,2047
   25ec4:	10c06526 	beq	r2,r3,2605c <__muldf3+0x23c>
   25ec8:	88c00434 	orhi	r3,r17,16
   25ecc:	180690fa 	slli	r3,r3,3
   25ed0:	3022d77a 	srli	r17,r6,29
   25ed4:	301090fa 	slli	r8,r6,3
   25ed8:	10bf0044 	addi	r2,r2,-1023
   25edc:	88e2b03a 	or	r17,r17,r3
   25ee0:	000b883a 	mov	r5,zero
   25ee4:	9085883a 	add	r2,r18,r2
   25ee8:	2cc8b03a 	or	r4,r5,r19
   25eec:	00c003c4 	movi	r3,15
   25ef0:	bdacf03a 	xor	r22,r23,r22
   25ef4:	12c00044 	addi	r11,r2,1
   25ef8:	19009936 	bltu	r3,r4,26160 <__muldf3+0x340>
   25efc:	200890ba 	slli	r4,r4,2
   25f00:	00c000b4 	movhi	r3,2
   25f04:	18d7c504 	addi	r3,r3,24340
   25f08:	20c9883a 	add	r4,r4,r3
   25f0c:	20c00017 	ldw	r3,0(r4)
   25f10:	1800683a 	jmp	r3
   25f14:	00026160 	cmpeqi	zero,zero,2437
   25f18:	00025f74 	movhi	zero,2429
   25f1c:	00025f74 	movhi	zero,2429
   25f20:	00025f70 	cmpltui	zero,zero,2429
   25f24:	0002613c 	xorhi	zero,zero,2436
   25f28:	0002613c 	xorhi	zero,zero,2436
   25f2c:	00026124 	muli	zero,zero,2436
   25f30:	00025f70 	cmpltui	zero,zero,2429
   25f34:	0002613c 	xorhi	zero,zero,2436
   25f38:	00026124 	muli	zero,zero,2436
   25f3c:	0002613c 	xorhi	zero,zero,2436
   25f40:	00025f70 	cmpltui	zero,zero,2429
   25f44:	0002614c 	andi	zero,zero,2437
   25f48:	0002614c 	andi	zero,zero,2437
   25f4c:	0002614c 	andi	zero,zero,2437
   25f50:	00026368 	cmpgeui	zero,zero,2445
   25f54:	2404b03a 	or	r2,r4,r16
   25f58:	10006f1e 	bne	r2,zero,26118 <__muldf3+0x2f8>
   25f5c:	04c00204 	movi	r19,8
   25f60:	0021883a 	mov	r16,zero
   25f64:	0029883a 	mov	r20,zero
   25f68:	07000084 	movi	fp,2
   25f6c:	003fcb06 	br	25e9c <__alt_data_end+0xfffe6a9c>
   25f70:	502d883a 	mov	r22,r10
   25f74:	00800084 	movi	r2,2
   25f78:	28805726 	beq	r5,r2,260d8 <__muldf3+0x2b8>
   25f7c:	008000c4 	movi	r2,3
   25f80:	28816626 	beq	r5,r2,2651c <__muldf3+0x6fc>
   25f84:	00800044 	movi	r2,1
   25f88:	2881411e 	bne	r5,r2,26490 <__muldf3+0x670>
   25f8c:	b02b883a 	mov	r21,r22
   25f90:	0005883a 	mov	r2,zero
   25f94:	000b883a 	mov	r5,zero
   25f98:	0029883a 	mov	r20,zero
   25f9c:	1004953a 	slli	r2,r2,20
   25fa0:	a8c03fcc 	andi	r3,r21,255
   25fa4:	04400434 	movhi	r17,16
   25fa8:	8c7fffc4 	addi	r17,r17,-1
   25fac:	180697fa 	slli	r3,r3,31
   25fb0:	2c4a703a 	and	r5,r5,r17
   25fb4:	288ab03a 	or	r5,r5,r2
   25fb8:	28c6b03a 	or	r3,r5,r3
   25fbc:	a005883a 	mov	r2,r20
   25fc0:	dfc00c17 	ldw	ra,48(sp)
   25fc4:	df000b17 	ldw	fp,44(sp)
   25fc8:	ddc00a17 	ldw	r23,40(sp)
   25fcc:	dd800917 	ldw	r22,36(sp)
   25fd0:	dd400817 	ldw	r21,32(sp)
   25fd4:	dd000717 	ldw	r20,28(sp)
   25fd8:	dcc00617 	ldw	r19,24(sp)
   25fdc:	dc800517 	ldw	r18,20(sp)
   25fe0:	dc400417 	ldw	r17,16(sp)
   25fe4:	dc000317 	ldw	r16,12(sp)
   25fe8:	dec00d04 	addi	sp,sp,52
   25fec:	f800283a 	ret
   25ff0:	2404b03a 	or	r2,r4,r16
   25ff4:	2027883a 	mov	r19,r4
   25ff8:	10004226 	beq	r2,zero,26104 <__muldf3+0x2e4>
   25ffc:	8000fc26 	beq	r16,zero,263f0 <__muldf3+0x5d0>
   26000:	8009883a 	mov	r4,r16
   26004:	d9800215 	stw	r6,8(sp)
   26008:	d9c00015 	stw	r7,0(sp)
   2600c:	da400115 	stw	r9,4(sp)
   26010:	00270ec0 	call	270ec <__clzsi2>
   26014:	d9800217 	ldw	r6,8(sp)
   26018:	d9c00017 	ldw	r7,0(sp)
   2601c:	da400117 	ldw	r9,4(sp)
   26020:	113ffd44 	addi	r4,r2,-11
   26024:	00c00704 	movi	r3,28
   26028:	1900ed16 	blt	r3,r4,263e0 <__muldf3+0x5c0>
   2602c:	00c00744 	movi	r3,29
   26030:	147ffe04 	addi	r17,r2,-8
   26034:	1907c83a 	sub	r3,r3,r4
   26038:	8460983a 	sll	r16,r16,r17
   2603c:	98c6d83a 	srl	r3,r19,r3
   26040:	9c68983a 	sll	r20,r19,r17
   26044:	1c20b03a 	or	r16,r3,r16
   26048:	1080fcc4 	addi	r2,r2,1011
   2604c:	00a5c83a 	sub	r18,zero,r2
   26050:	0027883a 	mov	r19,zero
   26054:	0039883a 	mov	fp,zero
   26058:	003f9006 	br	25e9c <__alt_data_end+0xfffe6a9c>
   2605c:	3446b03a 	or	r3,r6,r17
   26060:	1800261e 	bne	r3,zero,260fc <__muldf3+0x2dc>
   26064:	0023883a 	mov	r17,zero
   26068:	0011883a 	mov	r8,zero
   2606c:	01400084 	movi	r5,2
   26070:	003f9c06 	br	25ee4 <__alt_data_end+0xfffe6ae4>
   26074:	3446b03a 	or	r3,r6,r17
   26078:	18001c26 	beq	r3,zero,260ec <__muldf3+0x2cc>
   2607c:	8800ce26 	beq	r17,zero,263b8 <__muldf3+0x598>
   26080:	8809883a 	mov	r4,r17
   26084:	d9800215 	stw	r6,8(sp)
   26088:	da400115 	stw	r9,4(sp)
   2608c:	da800015 	stw	r10,0(sp)
   26090:	00270ec0 	call	270ec <__clzsi2>
   26094:	d9800217 	ldw	r6,8(sp)
   26098:	da400117 	ldw	r9,4(sp)
   2609c:	da800017 	ldw	r10,0(sp)
   260a0:	113ffd44 	addi	r4,r2,-11
   260a4:	00c00704 	movi	r3,28
   260a8:	1900bf16 	blt	r3,r4,263a8 <__muldf3+0x588>
   260ac:	00c00744 	movi	r3,29
   260b0:	123ffe04 	addi	r8,r2,-8
   260b4:	1907c83a 	sub	r3,r3,r4
   260b8:	8a22983a 	sll	r17,r17,r8
   260bc:	30c6d83a 	srl	r3,r6,r3
   260c0:	3210983a 	sll	r8,r6,r8
   260c4:	1c62b03a 	or	r17,r3,r17
   260c8:	1080fcc4 	addi	r2,r2,1011
   260cc:	0085c83a 	sub	r2,zero,r2
   260d0:	000b883a 	mov	r5,zero
   260d4:	003f8306 	br	25ee4 <__alt_data_end+0xfffe6ae4>
   260d8:	b02b883a 	mov	r21,r22
   260dc:	0081ffc4 	movi	r2,2047
   260e0:	000b883a 	mov	r5,zero
   260e4:	0029883a 	mov	r20,zero
   260e8:	003fac06 	br	25f9c <__alt_data_end+0xfffe6b9c>
   260ec:	0023883a 	mov	r17,zero
   260f0:	0011883a 	mov	r8,zero
   260f4:	01400044 	movi	r5,1
   260f8:	003f7a06 	br	25ee4 <__alt_data_end+0xfffe6ae4>
   260fc:	014000c4 	movi	r5,3
   26100:	003f7806 	br	25ee4 <__alt_data_end+0xfffe6ae4>
   26104:	04c00104 	movi	r19,4
   26108:	0021883a 	mov	r16,zero
   2610c:	0029883a 	mov	r20,zero
   26110:	07000044 	movi	fp,1
   26114:	003f6106 	br	25e9c <__alt_data_end+0xfffe6a9c>
   26118:	04c00304 	movi	r19,12
   2611c:	070000c4 	movi	fp,3
   26120:	003f5e06 	br	25e9c <__alt_data_end+0xfffe6a9c>
   26124:	01400434 	movhi	r5,16
   26128:	002b883a 	mov	r21,zero
   2612c:	297fffc4 	addi	r5,r5,-1
   26130:	053fffc4 	movi	r20,-1
   26134:	0081ffc4 	movi	r2,2047
   26138:	003f9806 	br	25f9c <__alt_data_end+0xfffe6b9c>
   2613c:	8023883a 	mov	r17,r16
   26140:	a011883a 	mov	r8,r20
   26144:	e00b883a 	mov	r5,fp
   26148:	003f8a06 	br	25f74 <__alt_data_end+0xfffe6b74>
   2614c:	8023883a 	mov	r17,r16
   26150:	a011883a 	mov	r8,r20
   26154:	482d883a 	mov	r22,r9
   26158:	e00b883a 	mov	r5,fp
   2615c:	003f8506 	br	25f74 <__alt_data_end+0xfffe6b74>
   26160:	a00ad43a 	srli	r5,r20,16
   26164:	401ad43a 	srli	r13,r8,16
   26168:	a53fffcc 	andi	r20,r20,65535
   2616c:	423fffcc 	andi	r8,r8,65535
   26170:	4519383a 	mul	r12,r8,r20
   26174:	4147383a 	mul	r3,r8,r5
   26178:	6d09383a 	mul	r4,r13,r20
   2617c:	600cd43a 	srli	r6,r12,16
   26180:	2b5d383a 	mul	r14,r5,r13
   26184:	20c9883a 	add	r4,r4,r3
   26188:	310d883a 	add	r6,r6,r4
   2618c:	30c0022e 	bgeu	r6,r3,26198 <__muldf3+0x378>
   26190:	00c00074 	movhi	r3,1
   26194:	70dd883a 	add	r14,r14,r3
   26198:	8826d43a 	srli	r19,r17,16
   2619c:	8bffffcc 	andi	r15,r17,65535
   261a0:	7d23383a 	mul	r17,r15,r20
   261a4:	7949383a 	mul	r4,r15,r5
   261a8:	9d29383a 	mul	r20,r19,r20
   261ac:	8814d43a 	srli	r10,r17,16
   261b0:	3012943a 	slli	r9,r6,16
   261b4:	a129883a 	add	r20,r20,r4
   261b8:	633fffcc 	andi	r12,r12,65535
   261bc:	5515883a 	add	r10,r10,r20
   261c0:	3006d43a 	srli	r3,r6,16
   261c4:	4b13883a 	add	r9,r9,r12
   261c8:	2ccb383a 	mul	r5,r5,r19
   261cc:	5100022e 	bgeu	r10,r4,261d8 <__muldf3+0x3b8>
   261d0:	01000074 	movhi	r4,1
   261d4:	290b883a 	add	r5,r5,r4
   261d8:	802ad43a 	srli	r21,r16,16
   261dc:	843fffcc 	andi	r16,r16,65535
   261e0:	440d383a 	mul	r6,r8,r16
   261e4:	4565383a 	mul	r18,r8,r21
   261e8:	8349383a 	mul	r4,r16,r13
   261ec:	500e943a 	slli	r7,r10,16
   261f0:	3010d43a 	srli	r8,r6,16
   261f4:	5028d43a 	srli	r20,r10,16
   261f8:	2489883a 	add	r4,r4,r18
   261fc:	8abfffcc 	andi	r10,r17,65535
   26200:	3a95883a 	add	r10,r7,r10
   26204:	4119883a 	add	r12,r8,r4
   26208:	a169883a 	add	r20,r20,r5
   2620c:	1a87883a 	add	r3,r3,r10
   26210:	6d5b383a 	mul	r13,r13,r21
   26214:	6480022e 	bgeu	r12,r18,26220 <__muldf3+0x400>
   26218:	01000074 	movhi	r4,1
   2621c:	691b883a 	add	r13,r13,r4
   26220:	7c25383a 	mul	r18,r15,r16
   26224:	7d4b383a 	mul	r5,r15,r21
   26228:	84cf383a 	mul	r7,r16,r19
   2622c:	901ed43a 	srli	r15,r18,16
   26230:	6008d43a 	srli	r4,r12,16
   26234:	6010943a 	slli	r8,r12,16
   26238:	394f883a 	add	r7,r7,r5
   2623c:	333fffcc 	andi	r12,r6,65535
   26240:	79df883a 	add	r15,r15,r7
   26244:	235b883a 	add	r13,r4,r13
   26248:	9d63383a 	mul	r17,r19,r21
   2624c:	4309883a 	add	r4,r8,r12
   26250:	7940022e 	bgeu	r15,r5,2625c <__muldf3+0x43c>
   26254:	01400074 	movhi	r5,1
   26258:	8963883a 	add	r17,r17,r5
   2625c:	780a943a 	slli	r5,r15,16
   26260:	91bfffcc 	andi	r6,r18,65535
   26264:	70c7883a 	add	r3,r14,r3
   26268:	298d883a 	add	r6,r5,r6
   2626c:	1a8f803a 	cmpltu	r7,r3,r10
   26270:	350b883a 	add	r5,r6,r20
   26274:	20c7883a 	add	r3,r4,r3
   26278:	3955883a 	add	r10,r7,r5
   2627c:	1909803a 	cmpltu	r4,r3,r4
   26280:	6a91883a 	add	r8,r13,r10
   26284:	780cd43a 	srli	r6,r15,16
   26288:	2219883a 	add	r12,r4,r8
   2628c:	2d0b803a 	cmpltu	r5,r5,r20
   26290:	51cf803a 	cmpltu	r7,r10,r7
   26294:	29ceb03a 	or	r7,r5,r7
   26298:	4351803a 	cmpltu	r8,r8,r13
   2629c:	610b803a 	cmpltu	r5,r12,r4
   262a0:	4148b03a 	or	r4,r8,r5
   262a4:	398f883a 	add	r7,r7,r6
   262a8:	3909883a 	add	r4,r7,r4
   262ac:	1810927a 	slli	r8,r3,9
   262b0:	2449883a 	add	r4,r4,r17
   262b4:	2008927a 	slli	r4,r4,9
   262b8:	6022d5fa 	srli	r17,r12,23
   262bc:	1806d5fa 	srli	r3,r3,23
   262c0:	4252b03a 	or	r9,r8,r9
   262c4:	600a927a 	slli	r5,r12,9
   262c8:	4810c03a 	cmpne	r8,r9,zero
   262cc:	2462b03a 	or	r17,r4,r17
   262d0:	40c6b03a 	or	r3,r8,r3
   262d4:	8900402c 	andhi	r4,r17,256
   262d8:	1950b03a 	or	r8,r3,r5
   262dc:	20000726 	beq	r4,zero,262fc <__muldf3+0x4dc>
   262e0:	4006d07a 	srli	r3,r8,1
   262e4:	880497fa 	slli	r2,r17,31
   262e8:	4200004c 	andi	r8,r8,1
   262ec:	8822d07a 	srli	r17,r17,1
   262f0:	1a10b03a 	or	r8,r3,r8
   262f4:	1210b03a 	or	r8,r2,r8
   262f8:	5805883a 	mov	r2,r11
   262fc:	1140ffc4 	addi	r5,r2,1023
   26300:	0140440e 	bge	zero,r5,26414 <__muldf3+0x5f4>
   26304:	40c001cc 	andi	r3,r8,7
   26308:	18000726 	beq	r3,zero,26328 <__muldf3+0x508>
   2630c:	40c003cc 	andi	r3,r8,15
   26310:	01000104 	movi	r4,4
   26314:	19000426 	beq	r3,r4,26328 <__muldf3+0x508>
   26318:	4107883a 	add	r3,r8,r4
   2631c:	1a11803a 	cmpltu	r8,r3,r8
   26320:	8a23883a 	add	r17,r17,r8
   26324:	1811883a 	mov	r8,r3
   26328:	88c0402c 	andhi	r3,r17,256
   2632c:	18000426 	beq	r3,zero,26340 <__muldf3+0x520>
   26330:	11410004 	addi	r5,r2,1024
   26334:	00bfc034 	movhi	r2,65280
   26338:	10bfffc4 	addi	r2,r2,-1
   2633c:	88a2703a 	and	r17,r17,r2
   26340:	0081ff84 	movi	r2,2046
   26344:	117f6416 	blt	r2,r5,260d8 <__alt_data_end+0xfffe6cd8>
   26348:	8828977a 	slli	r20,r17,29
   2634c:	4010d0fa 	srli	r8,r8,3
   26350:	8822927a 	slli	r17,r17,9
   26354:	2881ffcc 	andi	r2,r5,2047
   26358:	a228b03a 	or	r20,r20,r8
   2635c:	880ad33a 	srli	r5,r17,12
   26360:	b02b883a 	mov	r21,r22
   26364:	003f0d06 	br	25f9c <__alt_data_end+0xfffe6b9c>
   26368:	8080022c 	andhi	r2,r16,8
   2636c:	10000926 	beq	r2,zero,26394 <__muldf3+0x574>
   26370:	8880022c 	andhi	r2,r17,8
   26374:	1000071e 	bne	r2,zero,26394 <__muldf3+0x574>
   26378:	00800434 	movhi	r2,16
   2637c:	89400234 	orhi	r5,r17,8
   26380:	10bfffc4 	addi	r2,r2,-1
   26384:	b82b883a 	mov	r21,r23
   26388:	288a703a 	and	r5,r5,r2
   2638c:	4029883a 	mov	r20,r8
   26390:	003f6806 	br	26134 <__alt_data_end+0xfffe6d34>
   26394:	00800434 	movhi	r2,16
   26398:	81400234 	orhi	r5,r16,8
   2639c:	10bfffc4 	addi	r2,r2,-1
   263a0:	288a703a 	and	r5,r5,r2
   263a4:	003f6306 	br	26134 <__alt_data_end+0xfffe6d34>
   263a8:	147ff604 	addi	r17,r2,-40
   263ac:	3462983a 	sll	r17,r6,r17
   263b0:	0011883a 	mov	r8,zero
   263b4:	003f4406 	br	260c8 <__alt_data_end+0xfffe6cc8>
   263b8:	3009883a 	mov	r4,r6
   263bc:	d9800215 	stw	r6,8(sp)
   263c0:	da400115 	stw	r9,4(sp)
   263c4:	da800015 	stw	r10,0(sp)
   263c8:	00270ec0 	call	270ec <__clzsi2>
   263cc:	10800804 	addi	r2,r2,32
   263d0:	da800017 	ldw	r10,0(sp)
   263d4:	da400117 	ldw	r9,4(sp)
   263d8:	d9800217 	ldw	r6,8(sp)
   263dc:	003f3006 	br	260a0 <__alt_data_end+0xfffe6ca0>
   263e0:	143ff604 	addi	r16,r2,-40
   263e4:	9c20983a 	sll	r16,r19,r16
   263e8:	0029883a 	mov	r20,zero
   263ec:	003f1606 	br	26048 <__alt_data_end+0xfffe6c48>
   263f0:	d9800215 	stw	r6,8(sp)
   263f4:	d9c00015 	stw	r7,0(sp)
   263f8:	da400115 	stw	r9,4(sp)
   263fc:	00270ec0 	call	270ec <__clzsi2>
   26400:	10800804 	addi	r2,r2,32
   26404:	da400117 	ldw	r9,4(sp)
   26408:	d9c00017 	ldw	r7,0(sp)
   2640c:	d9800217 	ldw	r6,8(sp)
   26410:	003f0306 	br	26020 <__alt_data_end+0xfffe6c20>
   26414:	00c00044 	movi	r3,1
   26418:	1947c83a 	sub	r3,r3,r5
   2641c:	00800e04 	movi	r2,56
   26420:	10feda16 	blt	r2,r3,25f8c <__alt_data_end+0xfffe6b8c>
   26424:	008007c4 	movi	r2,31
   26428:	10c01b16 	blt	r2,r3,26498 <__muldf3+0x678>
   2642c:	00800804 	movi	r2,32
   26430:	10c5c83a 	sub	r2,r2,r3
   26434:	888a983a 	sll	r5,r17,r2
   26438:	40c8d83a 	srl	r4,r8,r3
   2643c:	4084983a 	sll	r2,r8,r2
   26440:	88e2d83a 	srl	r17,r17,r3
   26444:	2906b03a 	or	r3,r5,r4
   26448:	1004c03a 	cmpne	r2,r2,zero
   2644c:	1886b03a 	or	r3,r3,r2
   26450:	188001cc 	andi	r2,r3,7
   26454:	10000726 	beq	r2,zero,26474 <__muldf3+0x654>
   26458:	188003cc 	andi	r2,r3,15
   2645c:	01000104 	movi	r4,4
   26460:	11000426 	beq	r2,r4,26474 <__muldf3+0x654>
   26464:	1805883a 	mov	r2,r3
   26468:	10c00104 	addi	r3,r2,4
   2646c:	1885803a 	cmpltu	r2,r3,r2
   26470:	88a3883a 	add	r17,r17,r2
   26474:	8880202c 	andhi	r2,r17,128
   26478:	10001c26 	beq	r2,zero,264ec <__muldf3+0x6cc>
   2647c:	b02b883a 	mov	r21,r22
   26480:	00800044 	movi	r2,1
   26484:	000b883a 	mov	r5,zero
   26488:	0029883a 	mov	r20,zero
   2648c:	003ec306 	br	25f9c <__alt_data_end+0xfffe6b9c>
   26490:	5805883a 	mov	r2,r11
   26494:	003f9906 	br	262fc <__alt_data_end+0xfffe6efc>
   26498:	00bff844 	movi	r2,-31
   2649c:	1145c83a 	sub	r2,r2,r5
   264a0:	8888d83a 	srl	r4,r17,r2
   264a4:	00800804 	movi	r2,32
   264a8:	18801a26 	beq	r3,r2,26514 <__muldf3+0x6f4>
   264ac:	00801004 	movi	r2,64
   264b0:	10c5c83a 	sub	r2,r2,r3
   264b4:	8884983a 	sll	r2,r17,r2
   264b8:	1204b03a 	or	r2,r2,r8
   264bc:	1004c03a 	cmpne	r2,r2,zero
   264c0:	2084b03a 	or	r2,r4,r2
   264c4:	144001cc 	andi	r17,r2,7
   264c8:	88000d1e 	bne	r17,zero,26500 <__muldf3+0x6e0>
   264cc:	000b883a 	mov	r5,zero
   264d0:	1028d0fa 	srli	r20,r2,3
   264d4:	b02b883a 	mov	r21,r22
   264d8:	0005883a 	mov	r2,zero
   264dc:	a468b03a 	or	r20,r20,r17
   264e0:	003eae06 	br	25f9c <__alt_data_end+0xfffe6b9c>
   264e4:	1007883a 	mov	r3,r2
   264e8:	0023883a 	mov	r17,zero
   264ec:	880a927a 	slli	r5,r17,9
   264f0:	1805883a 	mov	r2,r3
   264f4:	8822977a 	slli	r17,r17,29
   264f8:	280ad33a 	srli	r5,r5,12
   264fc:	003ff406 	br	264d0 <__alt_data_end+0xfffe70d0>
   26500:	10c003cc 	andi	r3,r2,15
   26504:	01000104 	movi	r4,4
   26508:	193ff626 	beq	r3,r4,264e4 <__alt_data_end+0xfffe70e4>
   2650c:	0023883a 	mov	r17,zero
   26510:	003fd506 	br	26468 <__alt_data_end+0xfffe7068>
   26514:	0005883a 	mov	r2,zero
   26518:	003fe706 	br	264b8 <__alt_data_end+0xfffe70b8>
   2651c:	00800434 	movhi	r2,16
   26520:	89400234 	orhi	r5,r17,8
   26524:	10bfffc4 	addi	r2,r2,-1
   26528:	b02b883a 	mov	r21,r22
   2652c:	288a703a 	and	r5,r5,r2
   26530:	4029883a 	mov	r20,r8
   26534:	003eff06 	br	26134 <__alt_data_end+0xfffe6d34>

00026538 <__subdf3>:
   26538:	02000434 	movhi	r8,16
   2653c:	423fffc4 	addi	r8,r8,-1
   26540:	defffb04 	addi	sp,sp,-20
   26544:	2a14703a 	and	r10,r5,r8
   26548:	3812d53a 	srli	r9,r7,20
   2654c:	3a10703a 	and	r8,r7,r8
   26550:	2006d77a 	srli	r3,r4,29
   26554:	3004d77a 	srli	r2,r6,29
   26558:	dc000015 	stw	r16,0(sp)
   2655c:	501490fa 	slli	r10,r10,3
   26560:	2820d53a 	srli	r16,r5,20
   26564:	401090fa 	slli	r8,r8,3
   26568:	dc800215 	stw	r18,8(sp)
   2656c:	dc400115 	stw	r17,4(sp)
   26570:	dfc00415 	stw	ra,16(sp)
   26574:	202290fa 	slli	r17,r4,3
   26578:	dcc00315 	stw	r19,12(sp)
   2657c:	4a41ffcc 	andi	r9,r9,2047
   26580:	0101ffc4 	movi	r4,2047
   26584:	2824d7fa 	srli	r18,r5,31
   26588:	8401ffcc 	andi	r16,r16,2047
   2658c:	50c6b03a 	or	r3,r10,r3
   26590:	380ed7fa 	srli	r7,r7,31
   26594:	408ab03a 	or	r5,r8,r2
   26598:	300c90fa 	slli	r6,r6,3
   2659c:	49009626 	beq	r9,r4,267f8 <__subdf3+0x2c0>
   265a0:	39c0005c 	xori	r7,r7,1
   265a4:	8245c83a 	sub	r2,r16,r9
   265a8:	3c807426 	beq	r7,r18,2677c <__subdf3+0x244>
   265ac:	0080af0e 	bge	zero,r2,2686c <__subdf3+0x334>
   265b0:	48002a1e 	bne	r9,zero,2665c <__subdf3+0x124>
   265b4:	2988b03a 	or	r4,r5,r6
   265b8:	20009a1e 	bne	r4,zero,26824 <__subdf3+0x2ec>
   265bc:	888001cc 	andi	r2,r17,7
   265c0:	10000726 	beq	r2,zero,265e0 <__subdf3+0xa8>
   265c4:	888003cc 	andi	r2,r17,15
   265c8:	01000104 	movi	r4,4
   265cc:	11000426 	beq	r2,r4,265e0 <__subdf3+0xa8>
   265d0:	890b883a 	add	r5,r17,r4
   265d4:	2c63803a 	cmpltu	r17,r5,r17
   265d8:	1c47883a 	add	r3,r3,r17
   265dc:	2823883a 	mov	r17,r5
   265e0:	1880202c 	andhi	r2,r3,128
   265e4:	10005926 	beq	r2,zero,2674c <__subdf3+0x214>
   265e8:	84000044 	addi	r16,r16,1
   265ec:	0081ffc4 	movi	r2,2047
   265f0:	8080be26 	beq	r16,r2,268ec <__subdf3+0x3b4>
   265f4:	017fe034 	movhi	r5,65408
   265f8:	297fffc4 	addi	r5,r5,-1
   265fc:	1946703a 	and	r3,r3,r5
   26600:	1804977a 	slli	r2,r3,29
   26604:	1806927a 	slli	r3,r3,9
   26608:	8822d0fa 	srli	r17,r17,3
   2660c:	8401ffcc 	andi	r16,r16,2047
   26610:	180ad33a 	srli	r5,r3,12
   26614:	9100004c 	andi	r4,r18,1
   26618:	1444b03a 	or	r2,r2,r17
   2661c:	80c1ffcc 	andi	r3,r16,2047
   26620:	1820953a 	slli	r16,r3,20
   26624:	20c03fcc 	andi	r3,r4,255
   26628:	180897fa 	slli	r4,r3,31
   2662c:	00c00434 	movhi	r3,16
   26630:	18ffffc4 	addi	r3,r3,-1
   26634:	28c6703a 	and	r3,r5,r3
   26638:	1c06b03a 	or	r3,r3,r16
   2663c:	1906b03a 	or	r3,r3,r4
   26640:	dfc00417 	ldw	ra,16(sp)
   26644:	dcc00317 	ldw	r19,12(sp)
   26648:	dc800217 	ldw	r18,8(sp)
   2664c:	dc400117 	ldw	r17,4(sp)
   26650:	dc000017 	ldw	r16,0(sp)
   26654:	dec00504 	addi	sp,sp,20
   26658:	f800283a 	ret
   2665c:	0101ffc4 	movi	r4,2047
   26660:	813fd626 	beq	r16,r4,265bc <__alt_data_end+0xfffe71bc>
   26664:	29402034 	orhi	r5,r5,128
   26668:	01000e04 	movi	r4,56
   2666c:	2080a316 	blt	r4,r2,268fc <__subdf3+0x3c4>
   26670:	010007c4 	movi	r4,31
   26674:	2080c616 	blt	r4,r2,26990 <__subdf3+0x458>
   26678:	01000804 	movi	r4,32
   2667c:	2089c83a 	sub	r4,r4,r2
   26680:	2910983a 	sll	r8,r5,r4
   26684:	308ed83a 	srl	r7,r6,r2
   26688:	3108983a 	sll	r4,r6,r4
   2668c:	2884d83a 	srl	r2,r5,r2
   26690:	41ccb03a 	or	r6,r8,r7
   26694:	2008c03a 	cmpne	r4,r4,zero
   26698:	310cb03a 	or	r6,r6,r4
   2669c:	898dc83a 	sub	r6,r17,r6
   266a0:	89a3803a 	cmpltu	r17,r17,r6
   266a4:	1887c83a 	sub	r3,r3,r2
   266a8:	1c47c83a 	sub	r3,r3,r17
   266ac:	3023883a 	mov	r17,r6
   266b0:	1880202c 	andhi	r2,r3,128
   266b4:	10002326 	beq	r2,zero,26744 <__subdf3+0x20c>
   266b8:	04c02034 	movhi	r19,128
   266bc:	9cffffc4 	addi	r19,r19,-1
   266c0:	1ce6703a 	and	r19,r3,r19
   266c4:	98007a26 	beq	r19,zero,268b0 <__subdf3+0x378>
   266c8:	9809883a 	mov	r4,r19
   266cc:	00270ec0 	call	270ec <__clzsi2>
   266d0:	113ffe04 	addi	r4,r2,-8
   266d4:	00c007c4 	movi	r3,31
   266d8:	19007b16 	blt	r3,r4,268c8 <__subdf3+0x390>
   266dc:	00800804 	movi	r2,32
   266e0:	1105c83a 	sub	r2,r2,r4
   266e4:	8884d83a 	srl	r2,r17,r2
   266e8:	9906983a 	sll	r3,r19,r4
   266ec:	8922983a 	sll	r17,r17,r4
   266f0:	10c4b03a 	or	r2,r2,r3
   266f4:	24007816 	blt	r4,r16,268d8 <__subdf3+0x3a0>
   266f8:	2421c83a 	sub	r16,r4,r16
   266fc:	80c00044 	addi	r3,r16,1
   26700:	010007c4 	movi	r4,31
   26704:	20c09516 	blt	r4,r3,2695c <__subdf3+0x424>
   26708:	01400804 	movi	r5,32
   2670c:	28cbc83a 	sub	r5,r5,r3
   26710:	88c8d83a 	srl	r4,r17,r3
   26714:	8962983a 	sll	r17,r17,r5
   26718:	114a983a 	sll	r5,r2,r5
   2671c:	10c6d83a 	srl	r3,r2,r3
   26720:	8804c03a 	cmpne	r2,r17,zero
   26724:	290ab03a 	or	r5,r5,r4
   26728:	28a2b03a 	or	r17,r5,r2
   2672c:	0021883a 	mov	r16,zero
   26730:	003fa206 	br	265bc <__alt_data_end+0xfffe71bc>
   26734:	2090b03a 	or	r8,r4,r2
   26738:	40018e26 	beq	r8,zero,26d74 <__subdf3+0x83c>
   2673c:	1007883a 	mov	r3,r2
   26740:	2023883a 	mov	r17,r4
   26744:	888001cc 	andi	r2,r17,7
   26748:	103f9e1e 	bne	r2,zero,265c4 <__alt_data_end+0xfffe71c4>
   2674c:	1804977a 	slli	r2,r3,29
   26750:	8822d0fa 	srli	r17,r17,3
   26754:	1810d0fa 	srli	r8,r3,3
   26758:	9100004c 	andi	r4,r18,1
   2675c:	1444b03a 	or	r2,r2,r17
   26760:	00c1ffc4 	movi	r3,2047
   26764:	80c02826 	beq	r16,r3,26808 <__subdf3+0x2d0>
   26768:	01400434 	movhi	r5,16
   2676c:	297fffc4 	addi	r5,r5,-1
   26770:	80e0703a 	and	r16,r16,r3
   26774:	414a703a 	and	r5,r8,r5
   26778:	003fa806 	br	2661c <__alt_data_end+0xfffe721c>
   2677c:	0080630e 	bge	zero,r2,2690c <__subdf3+0x3d4>
   26780:	48003026 	beq	r9,zero,26844 <__subdf3+0x30c>
   26784:	0101ffc4 	movi	r4,2047
   26788:	813f8c26 	beq	r16,r4,265bc <__alt_data_end+0xfffe71bc>
   2678c:	29402034 	orhi	r5,r5,128
   26790:	01000e04 	movi	r4,56
   26794:	2080a90e 	bge	r4,r2,26a3c <__subdf3+0x504>
   26798:	298cb03a 	or	r6,r5,r6
   2679c:	3012c03a 	cmpne	r9,r6,zero
   267a0:	0005883a 	mov	r2,zero
   267a4:	4c53883a 	add	r9,r9,r17
   267a8:	4c63803a 	cmpltu	r17,r9,r17
   267ac:	10c7883a 	add	r3,r2,r3
   267b0:	88c7883a 	add	r3,r17,r3
   267b4:	4823883a 	mov	r17,r9
   267b8:	1880202c 	andhi	r2,r3,128
   267bc:	1000d026 	beq	r2,zero,26b00 <__subdf3+0x5c8>
   267c0:	84000044 	addi	r16,r16,1
   267c4:	0081ffc4 	movi	r2,2047
   267c8:	8080fe26 	beq	r16,r2,26bc4 <__subdf3+0x68c>
   267cc:	00bfe034 	movhi	r2,65408
   267d0:	10bfffc4 	addi	r2,r2,-1
   267d4:	1886703a 	and	r3,r3,r2
   267d8:	880ad07a 	srli	r5,r17,1
   267dc:	180497fa 	slli	r2,r3,31
   267e0:	8900004c 	andi	r4,r17,1
   267e4:	2922b03a 	or	r17,r5,r4
   267e8:	1806d07a 	srli	r3,r3,1
   267ec:	1462b03a 	or	r17,r2,r17
   267f0:	3825883a 	mov	r18,r7
   267f4:	003f7106 	br	265bc <__alt_data_end+0xfffe71bc>
   267f8:	2984b03a 	or	r2,r5,r6
   267fc:	103f6826 	beq	r2,zero,265a0 <__alt_data_end+0xfffe71a0>
   26800:	39c03fcc 	andi	r7,r7,255
   26804:	003f6706 	br	265a4 <__alt_data_end+0xfffe71a4>
   26808:	4086b03a 	or	r3,r8,r2
   2680c:	18015226 	beq	r3,zero,26d58 <__subdf3+0x820>
   26810:	00c00434 	movhi	r3,16
   26814:	41400234 	orhi	r5,r8,8
   26818:	18ffffc4 	addi	r3,r3,-1
   2681c:	28ca703a 	and	r5,r5,r3
   26820:	003f7e06 	br	2661c <__alt_data_end+0xfffe721c>
   26824:	10bfffc4 	addi	r2,r2,-1
   26828:	1000491e 	bne	r2,zero,26950 <__subdf3+0x418>
   2682c:	898fc83a 	sub	r7,r17,r6
   26830:	89e3803a 	cmpltu	r17,r17,r7
   26834:	1947c83a 	sub	r3,r3,r5
   26838:	1c47c83a 	sub	r3,r3,r17
   2683c:	3823883a 	mov	r17,r7
   26840:	003f9b06 	br	266b0 <__alt_data_end+0xfffe72b0>
   26844:	2988b03a 	or	r4,r5,r6
   26848:	203f5c26 	beq	r4,zero,265bc <__alt_data_end+0xfffe71bc>
   2684c:	10bfffc4 	addi	r2,r2,-1
   26850:	1000931e 	bne	r2,zero,26aa0 <__subdf3+0x568>
   26854:	898d883a 	add	r6,r17,r6
   26858:	3463803a 	cmpltu	r17,r6,r17
   2685c:	1947883a 	add	r3,r3,r5
   26860:	88c7883a 	add	r3,r17,r3
   26864:	3023883a 	mov	r17,r6
   26868:	003fd306 	br	267b8 <__alt_data_end+0xfffe73b8>
   2686c:	1000541e 	bne	r2,zero,269c0 <__subdf3+0x488>
   26870:	80800044 	addi	r2,r16,1
   26874:	1081ffcc 	andi	r2,r2,2047
   26878:	01000044 	movi	r4,1
   2687c:	2080a20e 	bge	r4,r2,26b08 <__subdf3+0x5d0>
   26880:	8989c83a 	sub	r4,r17,r6
   26884:	8905803a 	cmpltu	r2,r17,r4
   26888:	1967c83a 	sub	r19,r3,r5
   2688c:	98a7c83a 	sub	r19,r19,r2
   26890:	9880202c 	andhi	r2,r19,128
   26894:	10006326 	beq	r2,zero,26a24 <__subdf3+0x4ec>
   26898:	3463c83a 	sub	r17,r6,r17
   2689c:	28c7c83a 	sub	r3,r5,r3
   268a0:	344d803a 	cmpltu	r6,r6,r17
   268a4:	19a7c83a 	sub	r19,r3,r6
   268a8:	3825883a 	mov	r18,r7
   268ac:	983f861e 	bne	r19,zero,266c8 <__alt_data_end+0xfffe72c8>
   268b0:	8809883a 	mov	r4,r17
   268b4:	00270ec0 	call	270ec <__clzsi2>
   268b8:	10800804 	addi	r2,r2,32
   268bc:	113ffe04 	addi	r4,r2,-8
   268c0:	00c007c4 	movi	r3,31
   268c4:	193f850e 	bge	r3,r4,266dc <__alt_data_end+0xfffe72dc>
   268c8:	10bff604 	addi	r2,r2,-40
   268cc:	8884983a 	sll	r2,r17,r2
   268d0:	0023883a 	mov	r17,zero
   268d4:	243f880e 	bge	r4,r16,266f8 <__alt_data_end+0xfffe72f8>
   268d8:	00ffe034 	movhi	r3,65408
   268dc:	18ffffc4 	addi	r3,r3,-1
   268e0:	8121c83a 	sub	r16,r16,r4
   268e4:	10c6703a 	and	r3,r2,r3
   268e8:	003f3406 	br	265bc <__alt_data_end+0xfffe71bc>
   268ec:	9100004c 	andi	r4,r18,1
   268f0:	000b883a 	mov	r5,zero
   268f4:	0005883a 	mov	r2,zero
   268f8:	003f4806 	br	2661c <__alt_data_end+0xfffe721c>
   268fc:	298cb03a 	or	r6,r5,r6
   26900:	300cc03a 	cmpne	r6,r6,zero
   26904:	0005883a 	mov	r2,zero
   26908:	003f6406 	br	2669c <__alt_data_end+0xfffe729c>
   2690c:	10009a1e 	bne	r2,zero,26b78 <__subdf3+0x640>
   26910:	82400044 	addi	r9,r16,1
   26914:	4881ffcc 	andi	r2,r9,2047
   26918:	02800044 	movi	r10,1
   2691c:	5080670e 	bge	r10,r2,26abc <__subdf3+0x584>
   26920:	0081ffc4 	movi	r2,2047
   26924:	4880af26 	beq	r9,r2,26be4 <__subdf3+0x6ac>
   26928:	898d883a 	add	r6,r17,r6
   2692c:	1945883a 	add	r2,r3,r5
   26930:	3447803a 	cmpltu	r3,r6,r17
   26934:	1887883a 	add	r3,r3,r2
   26938:	182297fa 	slli	r17,r3,31
   2693c:	300cd07a 	srli	r6,r6,1
   26940:	1806d07a 	srli	r3,r3,1
   26944:	4821883a 	mov	r16,r9
   26948:	89a2b03a 	or	r17,r17,r6
   2694c:	003f1b06 	br	265bc <__alt_data_end+0xfffe71bc>
   26950:	0101ffc4 	movi	r4,2047
   26954:	813f441e 	bne	r16,r4,26668 <__alt_data_end+0xfffe7268>
   26958:	003f1806 	br	265bc <__alt_data_end+0xfffe71bc>
   2695c:	843ff844 	addi	r16,r16,-31
   26960:	01400804 	movi	r5,32
   26964:	1408d83a 	srl	r4,r2,r16
   26968:	19405026 	beq	r3,r5,26aac <__subdf3+0x574>
   2696c:	01401004 	movi	r5,64
   26970:	28c7c83a 	sub	r3,r5,r3
   26974:	10c4983a 	sll	r2,r2,r3
   26978:	88a2b03a 	or	r17,r17,r2
   2697c:	8822c03a 	cmpne	r17,r17,zero
   26980:	2462b03a 	or	r17,r4,r17
   26984:	0007883a 	mov	r3,zero
   26988:	0021883a 	mov	r16,zero
   2698c:	003f6d06 	br	26744 <__alt_data_end+0xfffe7344>
   26990:	11fff804 	addi	r7,r2,-32
   26994:	01000804 	movi	r4,32
   26998:	29ced83a 	srl	r7,r5,r7
   2699c:	11004526 	beq	r2,r4,26ab4 <__subdf3+0x57c>
   269a0:	01001004 	movi	r4,64
   269a4:	2089c83a 	sub	r4,r4,r2
   269a8:	2904983a 	sll	r2,r5,r4
   269ac:	118cb03a 	or	r6,r2,r6
   269b0:	300cc03a 	cmpne	r6,r6,zero
   269b4:	398cb03a 	or	r6,r7,r6
   269b8:	0005883a 	mov	r2,zero
   269bc:	003f3706 	br	2669c <__alt_data_end+0xfffe729c>
   269c0:	80002a26 	beq	r16,zero,26a6c <__subdf3+0x534>
   269c4:	0101ffc4 	movi	r4,2047
   269c8:	49006626 	beq	r9,r4,26b64 <__subdf3+0x62c>
   269cc:	0085c83a 	sub	r2,zero,r2
   269d0:	18c02034 	orhi	r3,r3,128
   269d4:	01000e04 	movi	r4,56
   269d8:	20807e16 	blt	r4,r2,26bd4 <__subdf3+0x69c>
   269dc:	010007c4 	movi	r4,31
   269e0:	2080e716 	blt	r4,r2,26d80 <__subdf3+0x848>
   269e4:	01000804 	movi	r4,32
   269e8:	2089c83a 	sub	r4,r4,r2
   269ec:	1914983a 	sll	r10,r3,r4
   269f0:	8890d83a 	srl	r8,r17,r2
   269f4:	8908983a 	sll	r4,r17,r4
   269f8:	1884d83a 	srl	r2,r3,r2
   269fc:	5222b03a 	or	r17,r10,r8
   26a00:	2006c03a 	cmpne	r3,r4,zero
   26a04:	88e2b03a 	or	r17,r17,r3
   26a08:	3463c83a 	sub	r17,r6,r17
   26a0c:	2885c83a 	sub	r2,r5,r2
   26a10:	344d803a 	cmpltu	r6,r6,r17
   26a14:	1187c83a 	sub	r3,r2,r6
   26a18:	4821883a 	mov	r16,r9
   26a1c:	3825883a 	mov	r18,r7
   26a20:	003f2306 	br	266b0 <__alt_data_end+0xfffe72b0>
   26a24:	24d0b03a 	or	r8,r4,r19
   26a28:	40001b1e 	bne	r8,zero,26a98 <__subdf3+0x560>
   26a2c:	0005883a 	mov	r2,zero
   26a30:	0009883a 	mov	r4,zero
   26a34:	0021883a 	mov	r16,zero
   26a38:	003f4906 	br	26760 <__alt_data_end+0xfffe7360>
   26a3c:	010007c4 	movi	r4,31
   26a40:	20803a16 	blt	r4,r2,26b2c <__subdf3+0x5f4>
   26a44:	01000804 	movi	r4,32
   26a48:	2089c83a 	sub	r4,r4,r2
   26a4c:	2912983a 	sll	r9,r5,r4
   26a50:	3090d83a 	srl	r8,r6,r2
   26a54:	3108983a 	sll	r4,r6,r4
   26a58:	2884d83a 	srl	r2,r5,r2
   26a5c:	4a12b03a 	or	r9,r9,r8
   26a60:	2008c03a 	cmpne	r4,r4,zero
   26a64:	4912b03a 	or	r9,r9,r4
   26a68:	003f4e06 	br	267a4 <__alt_data_end+0xfffe73a4>
   26a6c:	1c48b03a 	or	r4,r3,r17
   26a70:	20003c26 	beq	r4,zero,26b64 <__subdf3+0x62c>
   26a74:	0084303a 	nor	r2,zero,r2
   26a78:	1000381e 	bne	r2,zero,26b5c <__subdf3+0x624>
   26a7c:	3463c83a 	sub	r17,r6,r17
   26a80:	28c5c83a 	sub	r2,r5,r3
   26a84:	344d803a 	cmpltu	r6,r6,r17
   26a88:	1187c83a 	sub	r3,r2,r6
   26a8c:	4821883a 	mov	r16,r9
   26a90:	3825883a 	mov	r18,r7
   26a94:	003f0606 	br	266b0 <__alt_data_end+0xfffe72b0>
   26a98:	2023883a 	mov	r17,r4
   26a9c:	003f0906 	br	266c4 <__alt_data_end+0xfffe72c4>
   26aa0:	0101ffc4 	movi	r4,2047
   26aa4:	813f3a1e 	bne	r16,r4,26790 <__alt_data_end+0xfffe7390>
   26aa8:	003ec406 	br	265bc <__alt_data_end+0xfffe71bc>
   26aac:	0005883a 	mov	r2,zero
   26ab0:	003fb106 	br	26978 <__alt_data_end+0xfffe7578>
   26ab4:	0005883a 	mov	r2,zero
   26ab8:	003fbc06 	br	269ac <__alt_data_end+0xfffe75ac>
   26abc:	1c44b03a 	or	r2,r3,r17
   26ac0:	80008e1e 	bne	r16,zero,26cfc <__subdf3+0x7c4>
   26ac4:	1000c826 	beq	r2,zero,26de8 <__subdf3+0x8b0>
   26ac8:	2984b03a 	or	r2,r5,r6
   26acc:	103ebb26 	beq	r2,zero,265bc <__alt_data_end+0xfffe71bc>
   26ad0:	8989883a 	add	r4,r17,r6
   26ad4:	1945883a 	add	r2,r3,r5
   26ad8:	2447803a 	cmpltu	r3,r4,r17
   26adc:	1887883a 	add	r3,r3,r2
   26ae0:	1880202c 	andhi	r2,r3,128
   26ae4:	2023883a 	mov	r17,r4
   26ae8:	103f1626 	beq	r2,zero,26744 <__alt_data_end+0xfffe7344>
   26aec:	00bfe034 	movhi	r2,65408
   26af0:	10bfffc4 	addi	r2,r2,-1
   26af4:	5021883a 	mov	r16,r10
   26af8:	1886703a 	and	r3,r3,r2
   26afc:	003eaf06 	br	265bc <__alt_data_end+0xfffe71bc>
   26b00:	3825883a 	mov	r18,r7
   26b04:	003f0f06 	br	26744 <__alt_data_end+0xfffe7344>
   26b08:	1c44b03a 	or	r2,r3,r17
   26b0c:	8000251e 	bne	r16,zero,26ba4 <__subdf3+0x66c>
   26b10:	1000661e 	bne	r2,zero,26cac <__subdf3+0x774>
   26b14:	2990b03a 	or	r8,r5,r6
   26b18:	40009626 	beq	r8,zero,26d74 <__subdf3+0x83c>
   26b1c:	2807883a 	mov	r3,r5
   26b20:	3023883a 	mov	r17,r6
   26b24:	3825883a 	mov	r18,r7
   26b28:	003ea406 	br	265bc <__alt_data_end+0xfffe71bc>
   26b2c:	127ff804 	addi	r9,r2,-32
   26b30:	01000804 	movi	r4,32
   26b34:	2a52d83a 	srl	r9,r5,r9
   26b38:	11008c26 	beq	r2,r4,26d6c <__subdf3+0x834>
   26b3c:	01001004 	movi	r4,64
   26b40:	2085c83a 	sub	r2,r4,r2
   26b44:	2884983a 	sll	r2,r5,r2
   26b48:	118cb03a 	or	r6,r2,r6
   26b4c:	300cc03a 	cmpne	r6,r6,zero
   26b50:	4992b03a 	or	r9,r9,r6
   26b54:	0005883a 	mov	r2,zero
   26b58:	003f1206 	br	267a4 <__alt_data_end+0xfffe73a4>
   26b5c:	0101ffc4 	movi	r4,2047
   26b60:	493f9c1e 	bne	r9,r4,269d4 <__alt_data_end+0xfffe75d4>
   26b64:	2807883a 	mov	r3,r5
   26b68:	3023883a 	mov	r17,r6
   26b6c:	4821883a 	mov	r16,r9
   26b70:	3825883a 	mov	r18,r7
   26b74:	003e9106 	br	265bc <__alt_data_end+0xfffe71bc>
   26b78:	80001f1e 	bne	r16,zero,26bf8 <__subdf3+0x6c0>
   26b7c:	1c48b03a 	or	r4,r3,r17
   26b80:	20005a26 	beq	r4,zero,26cec <__subdf3+0x7b4>
   26b84:	0084303a 	nor	r2,zero,r2
   26b88:	1000561e 	bne	r2,zero,26ce4 <__subdf3+0x7ac>
   26b8c:	89a3883a 	add	r17,r17,r6
   26b90:	1945883a 	add	r2,r3,r5
   26b94:	898d803a 	cmpltu	r6,r17,r6
   26b98:	3087883a 	add	r3,r6,r2
   26b9c:	4821883a 	mov	r16,r9
   26ba0:	003f0506 	br	267b8 <__alt_data_end+0xfffe73b8>
   26ba4:	10002b1e 	bne	r2,zero,26c54 <__subdf3+0x71c>
   26ba8:	2984b03a 	or	r2,r5,r6
   26bac:	10008026 	beq	r2,zero,26db0 <__subdf3+0x878>
   26bb0:	2807883a 	mov	r3,r5
   26bb4:	3023883a 	mov	r17,r6
   26bb8:	3825883a 	mov	r18,r7
   26bbc:	0401ffc4 	movi	r16,2047
   26bc0:	003e7e06 	br	265bc <__alt_data_end+0xfffe71bc>
   26bc4:	3809883a 	mov	r4,r7
   26bc8:	0011883a 	mov	r8,zero
   26bcc:	0005883a 	mov	r2,zero
   26bd0:	003ee306 	br	26760 <__alt_data_end+0xfffe7360>
   26bd4:	1c62b03a 	or	r17,r3,r17
   26bd8:	8822c03a 	cmpne	r17,r17,zero
   26bdc:	0005883a 	mov	r2,zero
   26be0:	003f8906 	br	26a08 <__alt_data_end+0xfffe7608>
   26be4:	3809883a 	mov	r4,r7
   26be8:	4821883a 	mov	r16,r9
   26bec:	0011883a 	mov	r8,zero
   26bf0:	0005883a 	mov	r2,zero
   26bf4:	003eda06 	br	26760 <__alt_data_end+0xfffe7360>
   26bf8:	0101ffc4 	movi	r4,2047
   26bfc:	49003b26 	beq	r9,r4,26cec <__subdf3+0x7b4>
   26c00:	0085c83a 	sub	r2,zero,r2
   26c04:	18c02034 	orhi	r3,r3,128
   26c08:	01000e04 	movi	r4,56
   26c0c:	20806e16 	blt	r4,r2,26dc8 <__subdf3+0x890>
   26c10:	010007c4 	movi	r4,31
   26c14:	20807716 	blt	r4,r2,26df4 <__subdf3+0x8bc>
   26c18:	01000804 	movi	r4,32
   26c1c:	2089c83a 	sub	r4,r4,r2
   26c20:	1914983a 	sll	r10,r3,r4
   26c24:	8890d83a 	srl	r8,r17,r2
   26c28:	8908983a 	sll	r4,r17,r4
   26c2c:	1884d83a 	srl	r2,r3,r2
   26c30:	5222b03a 	or	r17,r10,r8
   26c34:	2006c03a 	cmpne	r3,r4,zero
   26c38:	88e2b03a 	or	r17,r17,r3
   26c3c:	89a3883a 	add	r17,r17,r6
   26c40:	1145883a 	add	r2,r2,r5
   26c44:	898d803a 	cmpltu	r6,r17,r6
   26c48:	3087883a 	add	r3,r6,r2
   26c4c:	4821883a 	mov	r16,r9
   26c50:	003ed906 	br	267b8 <__alt_data_end+0xfffe73b8>
   26c54:	2984b03a 	or	r2,r5,r6
   26c58:	10004226 	beq	r2,zero,26d64 <__subdf3+0x82c>
   26c5c:	1808d0fa 	srli	r4,r3,3
   26c60:	8822d0fa 	srli	r17,r17,3
   26c64:	1806977a 	slli	r3,r3,29
   26c68:	2080022c 	andhi	r2,r4,8
   26c6c:	1c62b03a 	or	r17,r3,r17
   26c70:	10000826 	beq	r2,zero,26c94 <__subdf3+0x75c>
   26c74:	2812d0fa 	srli	r9,r5,3
   26c78:	4880022c 	andhi	r2,r9,8
   26c7c:	1000051e 	bne	r2,zero,26c94 <__subdf3+0x75c>
   26c80:	300cd0fa 	srli	r6,r6,3
   26c84:	2804977a 	slli	r2,r5,29
   26c88:	4809883a 	mov	r4,r9
   26c8c:	3825883a 	mov	r18,r7
   26c90:	11a2b03a 	or	r17,r2,r6
   26c94:	8806d77a 	srli	r3,r17,29
   26c98:	200890fa 	slli	r4,r4,3
   26c9c:	882290fa 	slli	r17,r17,3
   26ca0:	0401ffc4 	movi	r16,2047
   26ca4:	1906b03a 	or	r3,r3,r4
   26ca8:	003e4406 	br	265bc <__alt_data_end+0xfffe71bc>
   26cac:	2984b03a 	or	r2,r5,r6
   26cb0:	103e4226 	beq	r2,zero,265bc <__alt_data_end+0xfffe71bc>
   26cb4:	8989c83a 	sub	r4,r17,r6
   26cb8:	8911803a 	cmpltu	r8,r17,r4
   26cbc:	1945c83a 	sub	r2,r3,r5
   26cc0:	1205c83a 	sub	r2,r2,r8
   26cc4:	1200202c 	andhi	r8,r2,128
   26cc8:	403e9a26 	beq	r8,zero,26734 <__alt_data_end+0xfffe7334>
   26ccc:	3463c83a 	sub	r17,r6,r17
   26cd0:	28c5c83a 	sub	r2,r5,r3
   26cd4:	344d803a 	cmpltu	r6,r6,r17
   26cd8:	1187c83a 	sub	r3,r2,r6
   26cdc:	3825883a 	mov	r18,r7
   26ce0:	003e3606 	br	265bc <__alt_data_end+0xfffe71bc>
   26ce4:	0101ffc4 	movi	r4,2047
   26ce8:	493fc71e 	bne	r9,r4,26c08 <__alt_data_end+0xfffe7808>
   26cec:	2807883a 	mov	r3,r5
   26cf0:	3023883a 	mov	r17,r6
   26cf4:	4821883a 	mov	r16,r9
   26cf8:	003e3006 	br	265bc <__alt_data_end+0xfffe71bc>
   26cfc:	10003626 	beq	r2,zero,26dd8 <__subdf3+0x8a0>
   26d00:	2984b03a 	or	r2,r5,r6
   26d04:	10001726 	beq	r2,zero,26d64 <__subdf3+0x82c>
   26d08:	1808d0fa 	srli	r4,r3,3
   26d0c:	8822d0fa 	srli	r17,r17,3
   26d10:	1806977a 	slli	r3,r3,29
   26d14:	2080022c 	andhi	r2,r4,8
   26d18:	1c62b03a 	or	r17,r3,r17
   26d1c:	10000726 	beq	r2,zero,26d3c <__subdf3+0x804>
   26d20:	2812d0fa 	srli	r9,r5,3
   26d24:	4880022c 	andhi	r2,r9,8
   26d28:	1000041e 	bne	r2,zero,26d3c <__subdf3+0x804>
   26d2c:	300cd0fa 	srli	r6,r6,3
   26d30:	2804977a 	slli	r2,r5,29
   26d34:	4809883a 	mov	r4,r9
   26d38:	11a2b03a 	or	r17,r2,r6
   26d3c:	8806d77a 	srli	r3,r17,29
   26d40:	200890fa 	slli	r4,r4,3
   26d44:	882290fa 	slli	r17,r17,3
   26d48:	3825883a 	mov	r18,r7
   26d4c:	1906b03a 	or	r3,r3,r4
   26d50:	0401ffc4 	movi	r16,2047
   26d54:	003e1906 	br	265bc <__alt_data_end+0xfffe71bc>
   26d58:	000b883a 	mov	r5,zero
   26d5c:	0005883a 	mov	r2,zero
   26d60:	003e2e06 	br	2661c <__alt_data_end+0xfffe721c>
   26d64:	0401ffc4 	movi	r16,2047
   26d68:	003e1406 	br	265bc <__alt_data_end+0xfffe71bc>
   26d6c:	0005883a 	mov	r2,zero
   26d70:	003f7506 	br	26b48 <__alt_data_end+0xfffe7748>
   26d74:	0005883a 	mov	r2,zero
   26d78:	0009883a 	mov	r4,zero
   26d7c:	003e7806 	br	26760 <__alt_data_end+0xfffe7360>
   26d80:	123ff804 	addi	r8,r2,-32
   26d84:	01000804 	movi	r4,32
   26d88:	1a10d83a 	srl	r8,r3,r8
   26d8c:	11002526 	beq	r2,r4,26e24 <__subdf3+0x8ec>
   26d90:	01001004 	movi	r4,64
   26d94:	2085c83a 	sub	r2,r4,r2
   26d98:	1884983a 	sll	r2,r3,r2
   26d9c:	1444b03a 	or	r2,r2,r17
   26da0:	1004c03a 	cmpne	r2,r2,zero
   26da4:	40a2b03a 	or	r17,r8,r2
   26da8:	0005883a 	mov	r2,zero
   26dac:	003f1606 	br	26a08 <__alt_data_end+0xfffe7608>
   26db0:	02000434 	movhi	r8,16
   26db4:	0009883a 	mov	r4,zero
   26db8:	423fffc4 	addi	r8,r8,-1
   26dbc:	00bfffc4 	movi	r2,-1
   26dc0:	0401ffc4 	movi	r16,2047
   26dc4:	003e6606 	br	26760 <__alt_data_end+0xfffe7360>
   26dc8:	1c62b03a 	or	r17,r3,r17
   26dcc:	8822c03a 	cmpne	r17,r17,zero
   26dd0:	0005883a 	mov	r2,zero
   26dd4:	003f9906 	br	26c3c <__alt_data_end+0xfffe783c>
   26dd8:	2807883a 	mov	r3,r5
   26ddc:	3023883a 	mov	r17,r6
   26de0:	0401ffc4 	movi	r16,2047
   26de4:	003df506 	br	265bc <__alt_data_end+0xfffe71bc>
   26de8:	2807883a 	mov	r3,r5
   26dec:	3023883a 	mov	r17,r6
   26df0:	003df206 	br	265bc <__alt_data_end+0xfffe71bc>
   26df4:	123ff804 	addi	r8,r2,-32
   26df8:	01000804 	movi	r4,32
   26dfc:	1a10d83a 	srl	r8,r3,r8
   26e00:	11000a26 	beq	r2,r4,26e2c <__subdf3+0x8f4>
   26e04:	01001004 	movi	r4,64
   26e08:	2085c83a 	sub	r2,r4,r2
   26e0c:	1884983a 	sll	r2,r3,r2
   26e10:	1444b03a 	or	r2,r2,r17
   26e14:	1004c03a 	cmpne	r2,r2,zero
   26e18:	40a2b03a 	or	r17,r8,r2
   26e1c:	0005883a 	mov	r2,zero
   26e20:	003f8606 	br	26c3c <__alt_data_end+0xfffe783c>
   26e24:	0005883a 	mov	r2,zero
   26e28:	003fdc06 	br	26d9c <__alt_data_end+0xfffe799c>
   26e2c:	0005883a 	mov	r2,zero
   26e30:	003ff706 	br	26e10 <__alt_data_end+0xfffe7a10>

00026e34 <__extendsfdf2>:
   26e34:	200ad5fa 	srli	r5,r4,23
   26e38:	defffd04 	addi	sp,sp,-12
   26e3c:	dc400115 	stw	r17,4(sp)
   26e40:	29403fcc 	andi	r5,r5,255
   26e44:	29800044 	addi	r6,r5,1
   26e48:	04402034 	movhi	r17,128
   26e4c:	dc000015 	stw	r16,0(sp)
   26e50:	8c7fffc4 	addi	r17,r17,-1
   26e54:	dfc00215 	stw	ra,8(sp)
   26e58:	31803fcc 	andi	r6,r6,255
   26e5c:	00800044 	movi	r2,1
   26e60:	8922703a 	and	r17,r17,r4
   26e64:	2020d7fa 	srli	r16,r4,31
   26e68:	1180110e 	bge	r2,r6,26eb0 <__extendsfdf2+0x7c>
   26e6c:	880cd0fa 	srli	r6,r17,3
   26e70:	8822977a 	slli	r17,r17,29
   26e74:	2940e004 	addi	r5,r5,896
   26e78:	2941ffcc 	andi	r5,r5,2047
   26e7c:	2804953a 	slli	r2,r5,20
   26e80:	01400434 	movhi	r5,16
   26e84:	800697fa 	slli	r3,r16,31
   26e88:	297fffc4 	addi	r5,r5,-1
   26e8c:	314a703a 	and	r5,r6,r5
   26e90:	288ab03a 	or	r5,r5,r2
   26e94:	28c6b03a 	or	r3,r5,r3
   26e98:	8805883a 	mov	r2,r17
   26e9c:	dfc00217 	ldw	ra,8(sp)
   26ea0:	dc400117 	ldw	r17,4(sp)
   26ea4:	dc000017 	ldw	r16,0(sp)
   26ea8:	dec00304 	addi	sp,sp,12
   26eac:	f800283a 	ret
   26eb0:	2800111e 	bne	r5,zero,26ef8 <__extendsfdf2+0xc4>
   26eb4:	88001c26 	beq	r17,zero,26f28 <__extendsfdf2+0xf4>
   26eb8:	8809883a 	mov	r4,r17
   26ebc:	00270ec0 	call	270ec <__clzsi2>
   26ec0:	00c00284 	movi	r3,10
   26ec4:	18801b16 	blt	r3,r2,26f34 <__extendsfdf2+0x100>
   26ec8:	018002c4 	movi	r6,11
   26ecc:	308dc83a 	sub	r6,r6,r2
   26ed0:	11000544 	addi	r4,r2,21
   26ed4:	8986d83a 	srl	r3,r17,r6
   26ed8:	8922983a 	sll	r17,r17,r4
   26edc:	0180e244 	movi	r6,905
   26ee0:	01400434 	movhi	r5,16
   26ee4:	3085c83a 	sub	r2,r6,r2
   26ee8:	297fffc4 	addi	r5,r5,-1
   26eec:	194c703a 	and	r6,r3,r5
   26ef0:	1141ffcc 	andi	r5,r2,2047
   26ef4:	003fe006 	br	26e78 <__alt_data_end+0xfffe7a78>
   26ef8:	88000826 	beq	r17,zero,26f1c <__extendsfdf2+0xe8>
   26efc:	880cd0fa 	srli	r6,r17,3
   26f00:	00800434 	movhi	r2,16
   26f04:	10bfffc4 	addi	r2,r2,-1
   26f08:	31800234 	orhi	r6,r6,8
   26f0c:	8822977a 	slli	r17,r17,29
   26f10:	308c703a 	and	r6,r6,r2
   26f14:	0141ffc4 	movi	r5,2047
   26f18:	003fd706 	br	26e78 <__alt_data_end+0xfffe7a78>
   26f1c:	0141ffc4 	movi	r5,2047
   26f20:	000d883a 	mov	r6,zero
   26f24:	003fd406 	br	26e78 <__alt_data_end+0xfffe7a78>
   26f28:	000b883a 	mov	r5,zero
   26f2c:	000d883a 	mov	r6,zero
   26f30:	003fd106 	br	26e78 <__alt_data_end+0xfffe7a78>
   26f34:	11bffd44 	addi	r6,r2,-11
   26f38:	8986983a 	sll	r3,r17,r6
   26f3c:	0023883a 	mov	r17,zero
   26f40:	003fe606 	br	26edc <__alt_data_end+0xfffe7adc>

00026f44 <__truncdfsf2>:
   26f44:	2810d53a 	srli	r8,r5,20
   26f48:	01c00434 	movhi	r7,16
   26f4c:	39ffffc4 	addi	r7,r7,-1
   26f50:	29ce703a 	and	r7,r5,r7
   26f54:	4201ffcc 	andi	r8,r8,2047
   26f58:	380e90fa 	slli	r7,r7,3
   26f5c:	200cd77a 	srli	r6,r4,29
   26f60:	42400044 	addi	r9,r8,1
   26f64:	4a41ffcc 	andi	r9,r9,2047
   26f68:	00c00044 	movi	r3,1
   26f6c:	280ad7fa 	srli	r5,r5,31
   26f70:	31ceb03a 	or	r7,r6,r7
   26f74:	200490fa 	slli	r2,r4,3
   26f78:	1a40230e 	bge	r3,r9,27008 <__truncdfsf2+0xc4>
   26f7c:	40ff2004 	addi	r3,r8,-896
   26f80:	01803f84 	movi	r6,254
   26f84:	30c01516 	blt	r6,r3,26fdc <__truncdfsf2+0x98>
   26f88:	00c0380e 	bge	zero,r3,2706c <__truncdfsf2+0x128>
   26f8c:	200c91ba 	slli	r6,r4,6
   26f90:	380e90fa 	slli	r7,r7,3
   26f94:	1004d77a 	srli	r2,r2,29
   26f98:	300cc03a 	cmpne	r6,r6,zero
   26f9c:	31ccb03a 	or	r6,r6,r7
   26fa0:	308cb03a 	or	r6,r6,r2
   26fa4:	308001cc 	andi	r2,r6,7
   26fa8:	10000426 	beq	r2,zero,26fbc <__truncdfsf2+0x78>
   26fac:	308003cc 	andi	r2,r6,15
   26fb0:	01000104 	movi	r4,4
   26fb4:	11000126 	beq	r2,r4,26fbc <__truncdfsf2+0x78>
   26fb8:	31800104 	addi	r6,r6,4
   26fbc:	3081002c 	andhi	r2,r6,1024
   26fc0:	10001626 	beq	r2,zero,2701c <__truncdfsf2+0xd8>
   26fc4:	18c00044 	addi	r3,r3,1
   26fc8:	00803fc4 	movi	r2,255
   26fcc:	18800326 	beq	r3,r2,26fdc <__truncdfsf2+0x98>
   26fd0:	300c91ba 	slli	r6,r6,6
   26fd4:	300cd27a 	srli	r6,r6,9
   26fd8:	00000206 	br	26fe4 <__truncdfsf2+0xa0>
   26fdc:	00ffffc4 	movi	r3,-1
   26fe0:	000d883a 	mov	r6,zero
   26fe4:	18c03fcc 	andi	r3,r3,255
   26fe8:	180895fa 	slli	r4,r3,23
   26fec:	00c02034 	movhi	r3,128
   26ff0:	280a97fa 	slli	r5,r5,31
   26ff4:	18ffffc4 	addi	r3,r3,-1
   26ff8:	30c6703a 	and	r3,r6,r3
   26ffc:	1906b03a 	or	r3,r3,r4
   27000:	1944b03a 	or	r2,r3,r5
   27004:	f800283a 	ret
   27008:	40000b1e 	bne	r8,zero,27038 <__truncdfsf2+0xf4>
   2700c:	388cb03a 	or	r6,r7,r2
   27010:	0007883a 	mov	r3,zero
   27014:	30000426 	beq	r6,zero,27028 <__truncdfsf2+0xe4>
   27018:	01800144 	movi	r6,5
   2701c:	00803fc4 	movi	r2,255
   27020:	300cd0fa 	srli	r6,r6,3
   27024:	18800a26 	beq	r3,r2,27050 <__truncdfsf2+0x10c>
   27028:	00802034 	movhi	r2,128
   2702c:	10bfffc4 	addi	r2,r2,-1
   27030:	308c703a 	and	r6,r6,r2
   27034:	003feb06 	br	26fe4 <__alt_data_end+0xfffe7be4>
   27038:	3888b03a 	or	r4,r7,r2
   2703c:	203fe726 	beq	r4,zero,26fdc <__alt_data_end+0xfffe7bdc>
   27040:	380c90fa 	slli	r6,r7,3
   27044:	00c03fc4 	movi	r3,255
   27048:	31808034 	orhi	r6,r6,512
   2704c:	003fd506 	br	26fa4 <__alt_data_end+0xfffe7ba4>
   27050:	303fe226 	beq	r6,zero,26fdc <__alt_data_end+0xfffe7bdc>
   27054:	00802034 	movhi	r2,128
   27058:	31801034 	orhi	r6,r6,64
   2705c:	10bfffc4 	addi	r2,r2,-1
   27060:	00ffffc4 	movi	r3,-1
   27064:	308c703a 	and	r6,r6,r2
   27068:	003fde06 	br	26fe4 <__alt_data_end+0xfffe7be4>
   2706c:	013ffa44 	movi	r4,-23
   27070:	19000e16 	blt	r3,r4,270ac <__truncdfsf2+0x168>
   27074:	01000784 	movi	r4,30
   27078:	20c9c83a 	sub	r4,r4,r3
   2707c:	018007c4 	movi	r6,31
   27080:	39c02034 	orhi	r7,r7,128
   27084:	31000b16 	blt	r6,r4,270b4 <__truncdfsf2+0x170>
   27088:	423f2084 	addi	r8,r8,-894
   2708c:	120c983a 	sll	r6,r2,r8
   27090:	3a0e983a 	sll	r7,r7,r8
   27094:	1104d83a 	srl	r2,r2,r4
   27098:	300cc03a 	cmpne	r6,r6,zero
   2709c:	31ceb03a 	or	r7,r6,r7
   270a0:	388cb03a 	or	r6,r7,r2
   270a4:	0007883a 	mov	r3,zero
   270a8:	003fbe06 	br	26fa4 <__alt_data_end+0xfffe7ba4>
   270ac:	0007883a 	mov	r3,zero
   270b0:	003fd906 	br	27018 <__alt_data_end+0xfffe7c18>
   270b4:	01bfff84 	movi	r6,-2
   270b8:	30cdc83a 	sub	r6,r6,r3
   270bc:	00c00804 	movi	r3,32
   270c0:	398cd83a 	srl	r6,r7,r6
   270c4:	20c00726 	beq	r4,r3,270e4 <__truncdfsf2+0x1a0>
   270c8:	423f2884 	addi	r8,r8,-862
   270cc:	3a0e983a 	sll	r7,r7,r8
   270d0:	3884b03a 	or	r2,r7,r2
   270d4:	1004c03a 	cmpne	r2,r2,zero
   270d8:	118cb03a 	or	r6,r2,r6
   270dc:	0007883a 	mov	r3,zero
   270e0:	003fb006 	br	26fa4 <__alt_data_end+0xfffe7ba4>
   270e4:	000f883a 	mov	r7,zero
   270e8:	003ff906 	br	270d0 <__alt_data_end+0xfffe7cd0>

000270ec <__clzsi2>:
   270ec:	00bfffd4 	movui	r2,65535
   270f0:	11000536 	bltu	r2,r4,27108 <__clzsi2+0x1c>
   270f4:	00803fc4 	movi	r2,255
   270f8:	11000f36 	bltu	r2,r4,27138 <__clzsi2+0x4c>
   270fc:	00800804 	movi	r2,32
   27100:	0007883a 	mov	r3,zero
   27104:	00000506 	br	2711c <__clzsi2+0x30>
   27108:	00804034 	movhi	r2,256
   2710c:	10bfffc4 	addi	r2,r2,-1
   27110:	11000c2e 	bgeu	r2,r4,27144 <__clzsi2+0x58>
   27114:	00800204 	movi	r2,8
   27118:	00c00604 	movi	r3,24
   2711c:	20c8d83a 	srl	r4,r4,r3
   27120:	00c000f4 	movhi	r3,3
   27124:	18d1bec4 	addi	r3,r3,18171
   27128:	1909883a 	add	r4,r3,r4
   2712c:	20c00003 	ldbu	r3,0(r4)
   27130:	10c5c83a 	sub	r2,r2,r3
   27134:	f800283a 	ret
   27138:	00800604 	movi	r2,24
   2713c:	00c00204 	movi	r3,8
   27140:	003ff606 	br	2711c <__alt_data_end+0xfffe7d1c>
   27144:	00800404 	movi	r2,16
   27148:	1007883a 	mov	r3,r2
   2714c:	003ff306 	br	2711c <__alt_data_end+0xfffe7d1c>

00027150 <_printf_r>:
   27150:	defffd04 	addi	sp,sp,-12
   27154:	2805883a 	mov	r2,r5
   27158:	dfc00015 	stw	ra,0(sp)
   2715c:	d9800115 	stw	r6,4(sp)
   27160:	d9c00215 	stw	r7,8(sp)
   27164:	21400217 	ldw	r5,8(r4)
   27168:	d9c00104 	addi	r7,sp,4
   2716c:	100d883a 	mov	r6,r2
   27170:	00273280 	call	27328 <___vfprintf_internal_r>
   27174:	dfc00017 	ldw	ra,0(sp)
   27178:	dec00304 	addi	sp,sp,12
   2717c:	f800283a 	ret

00027180 <printf>:
   27180:	defffc04 	addi	sp,sp,-16
   27184:	dfc00015 	stw	ra,0(sp)
   27188:	d9400115 	stw	r5,4(sp)
   2718c:	d9800215 	stw	r6,8(sp)
   27190:	d9c00315 	stw	r7,12(sp)
   27194:	008000f4 	movhi	r2,3
   27198:	10992a04 	addi	r2,r2,25768
   2719c:	10800017 	ldw	r2,0(r2)
   271a0:	200b883a 	mov	r5,r4
   271a4:	d9800104 	addi	r6,sp,4
   271a8:	11000217 	ldw	r4,8(r2)
   271ac:	00295200 	call	29520 <__vfprintf_internal>
   271b0:	dfc00017 	ldw	ra,0(sp)
   271b4:	dec00404 	addi	sp,sp,16
   271b8:	f800283a 	ret

000271bc <_puts_r>:
   271bc:	defff604 	addi	sp,sp,-40
   271c0:	dc000715 	stw	r16,28(sp)
   271c4:	2021883a 	mov	r16,r4
   271c8:	2809883a 	mov	r4,r5
   271cc:	dc400815 	stw	r17,32(sp)
   271d0:	dfc00915 	stw	ra,36(sp)
   271d4:	2823883a 	mov	r17,r5
   271d8:	00272900 	call	27290 <strlen>
   271dc:	10c00044 	addi	r3,r2,1
   271e0:	d8800115 	stw	r2,4(sp)
   271e4:	008000f4 	movhi	r2,3
   271e8:	1091ff04 	addi	r2,r2,18428
   271ec:	d8800215 	stw	r2,8(sp)
   271f0:	00800044 	movi	r2,1
   271f4:	d8800315 	stw	r2,12(sp)
   271f8:	00800084 	movi	r2,2
   271fc:	dc400015 	stw	r17,0(sp)
   27200:	d8c00615 	stw	r3,24(sp)
   27204:	dec00415 	stw	sp,16(sp)
   27208:	d8800515 	stw	r2,20(sp)
   2720c:	80000226 	beq	r16,zero,27218 <_puts_r+0x5c>
   27210:	80800e17 	ldw	r2,56(r16)
   27214:	10001426 	beq	r2,zero,27268 <_puts_r+0xac>
   27218:	81400217 	ldw	r5,8(r16)
   2721c:	2880030b 	ldhu	r2,12(r5)
   27220:	10c8000c 	andi	r3,r2,8192
   27224:	1800061e 	bne	r3,zero,27240 <_puts_r+0x84>
   27228:	29001917 	ldw	r4,100(r5)
   2722c:	00f7ffc4 	movi	r3,-8193
   27230:	10880014 	ori	r2,r2,8192
   27234:	20c6703a 	and	r3,r4,r3
   27238:	2880030d 	sth	r2,12(r5)
   2723c:	28c01915 	stw	r3,100(r5)
   27240:	d9800404 	addi	r6,sp,16
   27244:	8009883a 	mov	r4,r16
   27248:	002ba500 	call	2ba50 <__sfvwrite_r>
   2724c:	1000091e 	bne	r2,zero,27274 <_puts_r+0xb8>
   27250:	00800284 	movi	r2,10
   27254:	dfc00917 	ldw	ra,36(sp)
   27258:	dc400817 	ldw	r17,32(sp)
   2725c:	dc000717 	ldw	r16,28(sp)
   27260:	dec00a04 	addi	sp,sp,40
   27264:	f800283a 	ret
   27268:	8009883a 	mov	r4,r16
   2726c:	002b5cc0 	call	2b5cc <__sinit>
   27270:	003fe906 	br	27218 <__alt_data_end+0xfffe7e18>
   27274:	00bfffc4 	movi	r2,-1
   27278:	003ff606 	br	27254 <__alt_data_end+0xfffe7e54>

0002727c <puts>:
   2727c:	008000f4 	movhi	r2,3
   27280:	10992a04 	addi	r2,r2,25768
   27284:	200b883a 	mov	r5,r4
   27288:	11000017 	ldw	r4,0(r2)
   2728c:	00271bc1 	jmpi	271bc <_puts_r>

00027290 <strlen>:
   27290:	208000cc 	andi	r2,r4,3
   27294:	10002026 	beq	r2,zero,27318 <strlen+0x88>
   27298:	20800007 	ldb	r2,0(r4)
   2729c:	10002026 	beq	r2,zero,27320 <strlen+0x90>
   272a0:	2005883a 	mov	r2,r4
   272a4:	00000206 	br	272b0 <strlen+0x20>
   272a8:	10c00007 	ldb	r3,0(r2)
   272ac:	18001826 	beq	r3,zero,27310 <strlen+0x80>
   272b0:	10800044 	addi	r2,r2,1
   272b4:	10c000cc 	andi	r3,r2,3
   272b8:	183ffb1e 	bne	r3,zero,272a8 <__alt_data_end+0xfffe7ea8>
   272bc:	10c00017 	ldw	r3,0(r2)
   272c0:	01ffbff4 	movhi	r7,65279
   272c4:	39ffbfc4 	addi	r7,r7,-257
   272c8:	00ca303a 	nor	r5,zero,r3
   272cc:	01a02074 	movhi	r6,32897
   272d0:	19c7883a 	add	r3,r3,r7
   272d4:	31a02004 	addi	r6,r6,-32640
   272d8:	1946703a 	and	r3,r3,r5
   272dc:	1986703a 	and	r3,r3,r6
   272e0:	1800091e 	bne	r3,zero,27308 <strlen+0x78>
   272e4:	10800104 	addi	r2,r2,4
   272e8:	10c00017 	ldw	r3,0(r2)
   272ec:	19cb883a 	add	r5,r3,r7
   272f0:	00c6303a 	nor	r3,zero,r3
   272f4:	28c6703a 	and	r3,r5,r3
   272f8:	1986703a 	and	r3,r3,r6
   272fc:	183ff926 	beq	r3,zero,272e4 <__alt_data_end+0xfffe7ee4>
   27300:	00000106 	br	27308 <strlen+0x78>
   27304:	10800044 	addi	r2,r2,1
   27308:	10c00007 	ldb	r3,0(r2)
   2730c:	183ffd1e 	bne	r3,zero,27304 <__alt_data_end+0xfffe7f04>
   27310:	1105c83a 	sub	r2,r2,r4
   27314:	f800283a 	ret
   27318:	2005883a 	mov	r2,r4
   2731c:	003fe706 	br	272bc <__alt_data_end+0xfffe7ebc>
   27320:	0005883a 	mov	r2,zero
   27324:	f800283a 	ret

00027328 <___vfprintf_internal_r>:
   27328:	deffb804 	addi	sp,sp,-288
   2732c:	dfc04715 	stw	ra,284(sp)
   27330:	ddc04515 	stw	r23,276(sp)
   27334:	dd404315 	stw	r21,268(sp)
   27338:	d9002c15 	stw	r4,176(sp)
   2733c:	282f883a 	mov	r23,r5
   27340:	302b883a 	mov	r21,r6
   27344:	d9c02d15 	stw	r7,180(sp)
   27348:	df004615 	stw	fp,280(sp)
   2734c:	dd804415 	stw	r22,272(sp)
   27350:	dd004215 	stw	r20,264(sp)
   27354:	dcc04115 	stw	r19,260(sp)
   27358:	dc804015 	stw	r18,256(sp)
   2735c:	dc403f15 	stw	r17,252(sp)
   27360:	dc003e15 	stw	r16,248(sp)
   27364:	002c1400 	call	2c140 <_localeconv_r>
   27368:	10800017 	ldw	r2,0(r2)
   2736c:	1009883a 	mov	r4,r2
   27370:	d8803415 	stw	r2,208(sp)
   27374:	00272900 	call	27290 <strlen>
   27378:	d8803715 	stw	r2,220(sp)
   2737c:	d8802c17 	ldw	r2,176(sp)
   27380:	10000226 	beq	r2,zero,2738c <___vfprintf_internal_r+0x64>
   27384:	10800e17 	ldw	r2,56(r2)
   27388:	1000f926 	beq	r2,zero,27770 <___vfprintf_internal_r+0x448>
   2738c:	b880030b 	ldhu	r2,12(r23)
   27390:	10c8000c 	andi	r3,r2,8192
   27394:	1800061e 	bne	r3,zero,273b0 <___vfprintf_internal_r+0x88>
   27398:	b9001917 	ldw	r4,100(r23)
   2739c:	00f7ffc4 	movi	r3,-8193
   273a0:	10880014 	ori	r2,r2,8192
   273a4:	20c6703a 	and	r3,r4,r3
   273a8:	b880030d 	sth	r2,12(r23)
   273ac:	b8c01915 	stw	r3,100(r23)
   273b0:	10c0020c 	andi	r3,r2,8
   273b4:	1800c126 	beq	r3,zero,276bc <___vfprintf_internal_r+0x394>
   273b8:	b8c00417 	ldw	r3,16(r23)
   273bc:	1800bf26 	beq	r3,zero,276bc <___vfprintf_internal_r+0x394>
   273c0:	1080068c 	andi	r2,r2,26
   273c4:	00c00284 	movi	r3,10
   273c8:	10c0c426 	beq	r2,r3,276dc <___vfprintf_internal_r+0x3b4>
   273cc:	d8c00404 	addi	r3,sp,16
   273d0:	050000f4 	movhi	r20,3
   273d4:	d9001e04 	addi	r4,sp,120
   273d8:	a5121084 	addi	r20,r20,18498
   273dc:	d8c01e15 	stw	r3,120(sp)
   273e0:	d8002015 	stw	zero,128(sp)
   273e4:	d8001f15 	stw	zero,124(sp)
   273e8:	d8003315 	stw	zero,204(sp)
   273ec:	d8003615 	stw	zero,216(sp)
   273f0:	d8003815 	stw	zero,224(sp)
   273f4:	1811883a 	mov	r8,r3
   273f8:	d8003915 	stw	zero,228(sp)
   273fc:	d8003a15 	stw	zero,232(sp)
   27400:	d8002f15 	stw	zero,188(sp)
   27404:	d9002815 	stw	r4,160(sp)
   27408:	a8800007 	ldb	r2,0(r21)
   2740c:	10027b26 	beq	r2,zero,27dfc <___vfprintf_internal_r+0xad4>
   27410:	00c00944 	movi	r3,37
   27414:	a821883a 	mov	r16,r21
   27418:	10c0021e 	bne	r2,r3,27424 <___vfprintf_internal_r+0xfc>
   2741c:	00001406 	br	27470 <___vfprintf_internal_r+0x148>
   27420:	10c00326 	beq	r2,r3,27430 <___vfprintf_internal_r+0x108>
   27424:	84000044 	addi	r16,r16,1
   27428:	80800007 	ldb	r2,0(r16)
   2742c:	103ffc1e 	bne	r2,zero,27420 <__alt_data_end+0xfffe8020>
   27430:	8563c83a 	sub	r17,r16,r21
   27434:	88000e26 	beq	r17,zero,27470 <___vfprintf_internal_r+0x148>
   27438:	d8c02017 	ldw	r3,128(sp)
   2743c:	d8801f17 	ldw	r2,124(sp)
   27440:	45400015 	stw	r21,0(r8)
   27444:	1c47883a 	add	r3,r3,r17
   27448:	10800044 	addi	r2,r2,1
   2744c:	d8c02015 	stw	r3,128(sp)
   27450:	44400115 	stw	r17,4(r8)
   27454:	d8801f15 	stw	r2,124(sp)
   27458:	00c001c4 	movi	r3,7
   2745c:	1880a716 	blt	r3,r2,276fc <___vfprintf_internal_r+0x3d4>
   27460:	42000204 	addi	r8,r8,8
   27464:	d9402f17 	ldw	r5,188(sp)
   27468:	2c4b883a 	add	r5,r5,r17
   2746c:	d9402f15 	stw	r5,188(sp)
   27470:	80800007 	ldb	r2,0(r16)
   27474:	1000a826 	beq	r2,zero,27718 <___vfprintf_internal_r+0x3f0>
   27478:	84400047 	ldb	r17,1(r16)
   2747c:	00bfffc4 	movi	r2,-1
   27480:	85400044 	addi	r21,r16,1
   27484:	d8002785 	stb	zero,158(sp)
   27488:	0007883a 	mov	r3,zero
   2748c:	000f883a 	mov	r7,zero
   27490:	d8802915 	stw	r2,164(sp)
   27494:	d8003115 	stw	zero,196(sp)
   27498:	0025883a 	mov	r18,zero
   2749c:	01401604 	movi	r5,88
   274a0:	01800244 	movi	r6,9
   274a4:	02800a84 	movi	r10,42
   274a8:	02401b04 	movi	r9,108
   274ac:	ad400044 	addi	r21,r21,1
   274b0:	88bff804 	addi	r2,r17,-32
   274b4:	28830436 	bltu	r5,r2,280c8 <___vfprintf_internal_r+0xda0>
   274b8:	100490ba 	slli	r2,r2,2
   274bc:	010000b4 	movhi	r4,2
   274c0:	211d3404 	addi	r4,r4,29904
   274c4:	1105883a 	add	r2,r2,r4
   274c8:	10800017 	ldw	r2,0(r2)
   274cc:	1000683a 	jmp	r2
   274d0:	00027fe8 	cmpgeui	zero,zero,2559
   274d4:	000280c8 	cmpgei	zero,zero,2563
   274d8:	000280c8 	cmpgei	zero,zero,2563
   274dc:	00028008 	cmpgei	zero,zero,2560
   274e0:	000280c8 	cmpgei	zero,zero,2563
   274e4:	000280c8 	cmpgei	zero,zero,2563
   274e8:	000280c8 	cmpgei	zero,zero,2563
   274ec:	000280c8 	cmpgei	zero,zero,2563
   274f0:	000280c8 	cmpgei	zero,zero,2563
   274f4:	000280c8 	cmpgei	zero,zero,2563
   274f8:	0002777c 	xorhi	zero,zero,2525
   274fc:	00027f24 	muli	zero,zero,2556
   27500:	000280c8 	cmpgei	zero,zero,2563
   27504:	00027644 	movi	zero,2521
   27508:	000277a4 	muli	zero,zero,2526
   2750c:	000280c8 	cmpgei	zero,zero,2563
   27510:	000277e4 	muli	zero,zero,2527
   27514:	000277f0 	cmpltui	zero,zero,2527
   27518:	000277f0 	cmpltui	zero,zero,2527
   2751c:	000277f0 	cmpltui	zero,zero,2527
   27520:	000277f0 	cmpltui	zero,zero,2527
   27524:	000277f0 	cmpltui	zero,zero,2527
   27528:	000277f0 	cmpltui	zero,zero,2527
   2752c:	000277f0 	cmpltui	zero,zero,2527
   27530:	000277f0 	cmpltui	zero,zero,2527
   27534:	000277f0 	cmpltui	zero,zero,2527
   27538:	000280c8 	cmpgei	zero,zero,2563
   2753c:	000280c8 	cmpgei	zero,zero,2563
   27540:	000280c8 	cmpgei	zero,zero,2563
   27544:	000280c8 	cmpgei	zero,zero,2563
   27548:	000280c8 	cmpgei	zero,zero,2563
   2754c:	000280c8 	cmpgei	zero,zero,2563
   27550:	000280c8 	cmpgei	zero,zero,2563
   27554:	000280c8 	cmpgei	zero,zero,2563
   27558:	000280c8 	cmpgei	zero,zero,2563
   2755c:	000280c8 	cmpgei	zero,zero,2563
   27560:	00027824 	muli	zero,zero,2528
   27564:	000278e0 	cmpeqi	zero,zero,2531
   27568:	000280c8 	cmpgei	zero,zero,2563
   2756c:	000278e0 	cmpeqi	zero,zero,2531
   27570:	000280c8 	cmpgei	zero,zero,2563
   27574:	000280c8 	cmpgei	zero,zero,2563
   27578:	000280c8 	cmpgei	zero,zero,2563
   2757c:	000280c8 	cmpgei	zero,zero,2563
   27580:	00027980 	call	2798 <__alt_mem_onchip_memory2-0x1d868>
   27584:	000280c8 	cmpgei	zero,zero,2563
   27588:	000280c8 	cmpgei	zero,zero,2563
   2758c:	0002798c 	andi	zero,zero,2534
   27590:	000280c8 	cmpgei	zero,zero,2563
   27594:	000280c8 	cmpgei	zero,zero,2563
   27598:	000280c8 	cmpgei	zero,zero,2563
   2759c:	000280c8 	cmpgei	zero,zero,2563
   275a0:	000280c8 	cmpgei	zero,zero,2563
   275a4:	00027e04 	movi	zero,2552
   275a8:	000280c8 	cmpgei	zero,zero,2563
   275ac:	000280c8 	cmpgei	zero,zero,2563
   275b0:	00027e64 	muli	zero,zero,2553
   275b4:	000280c8 	cmpgei	zero,zero,2563
   275b8:	000280c8 	cmpgei	zero,zero,2563
   275bc:	000280c8 	cmpgei	zero,zero,2563
   275c0:	000280c8 	cmpgei	zero,zero,2563
   275c4:	000280c8 	cmpgei	zero,zero,2563
   275c8:	000280c8 	cmpgei	zero,zero,2563
   275cc:	000280c8 	cmpgei	zero,zero,2563
   275d0:	000280c8 	cmpgei	zero,zero,2563
   275d4:	000280c8 	cmpgei	zero,zero,2563
   275d8:	000280c8 	cmpgei	zero,zero,2563
   275dc:	00028074 	movhi	zero,2561
   275e0:	00028014 	movui	zero,2560
   275e4:	000278e0 	cmpeqi	zero,zero,2531
   275e8:	000278e0 	cmpeqi	zero,zero,2531
   275ec:	000278e0 	cmpeqi	zero,zero,2531
   275f0:	00028024 	muli	zero,zero,2560
   275f4:	00028014 	movui	zero,2560
   275f8:	000280c8 	cmpgei	zero,zero,2563
   275fc:	000280c8 	cmpgei	zero,zero,2563
   27600:	00028030 	cmpltui	zero,zero,2560
   27604:	000280c8 	cmpgei	zero,zero,2563
   27608:	00028040 	call	2804 <__alt_mem_onchip_memory2-0x1d7fc>
   2760c:	00027f14 	movui	zero,2556
   27610:	00027650 	cmplti	zero,zero,2521
   27614:	00027f34 	movhi	zero,2556
   27618:	000280c8 	cmpgei	zero,zero,2563
   2761c:	00027f40 	call	27f4 <__alt_mem_onchip_memory2-0x1d80c>
   27620:	000280c8 	cmpgei	zero,zero,2563
   27624:	00027f9c 	xori	zero,zero,2558
   27628:	000280c8 	cmpgei	zero,zero,2563
   2762c:	000280c8 	cmpgei	zero,zero,2563
   27630:	00027fac 	andhi	zero,zero,2558
   27634:	d9003117 	ldw	r4,196(sp)
   27638:	d8802d15 	stw	r2,180(sp)
   2763c:	0109c83a 	sub	r4,zero,r4
   27640:	d9003115 	stw	r4,196(sp)
   27644:	94800114 	ori	r18,r18,4
   27648:	ac400007 	ldb	r17,0(r21)
   2764c:	003f9706 	br	274ac <__alt_data_end+0xfffe80ac>
   27650:	00800c04 	movi	r2,48
   27654:	d9002d17 	ldw	r4,180(sp)
   27658:	d9402917 	ldw	r5,164(sp)
   2765c:	d8802705 	stb	r2,156(sp)
   27660:	00801e04 	movi	r2,120
   27664:	d8802745 	stb	r2,157(sp)
   27668:	d8002785 	stb	zero,158(sp)
   2766c:	20c00104 	addi	r3,r4,4
   27670:	24c00017 	ldw	r19,0(r4)
   27674:	002d883a 	mov	r22,zero
   27678:	90800094 	ori	r2,r18,2
   2767c:	28029a16 	blt	r5,zero,280e8 <___vfprintf_internal_r+0xdc0>
   27680:	00bfdfc4 	movi	r2,-129
   27684:	90a4703a 	and	r18,r18,r2
   27688:	d8c02d15 	stw	r3,180(sp)
   2768c:	94800094 	ori	r18,r18,2
   27690:	9802871e 	bne	r19,zero,280b0 <___vfprintf_internal_r+0xd88>
   27694:	008000f4 	movhi	r2,3
   27698:	10920904 	addi	r2,r2,18468
   2769c:	d8803915 	stw	r2,228(sp)
   276a0:	04401e04 	movi	r17,120
   276a4:	d8802917 	ldw	r2,164(sp)
   276a8:	0039883a 	mov	fp,zero
   276ac:	1001e926 	beq	r2,zero,27e54 <___vfprintf_internal_r+0xb2c>
   276b0:	0027883a 	mov	r19,zero
   276b4:	002d883a 	mov	r22,zero
   276b8:	00020506 	br	27ed0 <___vfprintf_internal_r+0xba8>
   276bc:	d9002c17 	ldw	r4,176(sp)
   276c0:	b80b883a 	mov	r5,r23
   276c4:	00295f80 	call	295f8 <__swsetup_r>
   276c8:	1005ac1e 	bne	r2,zero,28d7c <___vfprintf_internal_r+0x1a54>
   276cc:	b880030b 	ldhu	r2,12(r23)
   276d0:	00c00284 	movi	r3,10
   276d4:	1080068c 	andi	r2,r2,26
   276d8:	10ff3c1e 	bne	r2,r3,273cc <__alt_data_end+0xfffe7fcc>
   276dc:	b880038f 	ldh	r2,14(r23)
   276e0:	103f3a16 	blt	r2,zero,273cc <__alt_data_end+0xfffe7fcc>
   276e4:	d9c02d17 	ldw	r7,180(sp)
   276e8:	d9002c17 	ldw	r4,176(sp)
   276ec:	a80d883a 	mov	r6,r21
   276f0:	b80b883a 	mov	r5,r23
   276f4:	002953c0 	call	2953c <__sbprintf>
   276f8:	00001106 	br	27740 <___vfprintf_internal_r+0x418>
   276fc:	d9002c17 	ldw	r4,176(sp)
   27700:	d9801e04 	addi	r6,sp,120
   27704:	b80b883a 	mov	r5,r23
   27708:	002e9240 	call	2e924 <__sprint_r>
   2770c:	1000081e 	bne	r2,zero,27730 <___vfprintf_internal_r+0x408>
   27710:	da000404 	addi	r8,sp,16
   27714:	003f5306 	br	27464 <__alt_data_end+0xfffe8064>
   27718:	d8802017 	ldw	r2,128(sp)
   2771c:	10000426 	beq	r2,zero,27730 <___vfprintf_internal_r+0x408>
   27720:	d9002c17 	ldw	r4,176(sp)
   27724:	d9801e04 	addi	r6,sp,120
   27728:	b80b883a 	mov	r5,r23
   2772c:	002e9240 	call	2e924 <__sprint_r>
   27730:	b880030b 	ldhu	r2,12(r23)
   27734:	1080100c 	andi	r2,r2,64
   27738:	1005901e 	bne	r2,zero,28d7c <___vfprintf_internal_r+0x1a54>
   2773c:	d8802f17 	ldw	r2,188(sp)
   27740:	dfc04717 	ldw	ra,284(sp)
   27744:	df004617 	ldw	fp,280(sp)
   27748:	ddc04517 	ldw	r23,276(sp)
   2774c:	dd804417 	ldw	r22,272(sp)
   27750:	dd404317 	ldw	r21,268(sp)
   27754:	dd004217 	ldw	r20,264(sp)
   27758:	dcc04117 	ldw	r19,260(sp)
   2775c:	dc804017 	ldw	r18,256(sp)
   27760:	dc403f17 	ldw	r17,252(sp)
   27764:	dc003e17 	ldw	r16,248(sp)
   27768:	dec04804 	addi	sp,sp,288
   2776c:	f800283a 	ret
   27770:	d9002c17 	ldw	r4,176(sp)
   27774:	002b5cc0 	call	2b5cc <__sinit>
   27778:	003f0406 	br	2738c <__alt_data_end+0xfffe7f8c>
   2777c:	d8802d17 	ldw	r2,180(sp)
   27780:	d9002d17 	ldw	r4,180(sp)
   27784:	10800017 	ldw	r2,0(r2)
   27788:	d8803115 	stw	r2,196(sp)
   2778c:	20800104 	addi	r2,r4,4
   27790:	d9003117 	ldw	r4,196(sp)
   27794:	203fa716 	blt	r4,zero,27634 <__alt_data_end+0xfffe8234>
   27798:	d8802d15 	stw	r2,180(sp)
   2779c:	ac400007 	ldb	r17,0(r21)
   277a0:	003f4206 	br	274ac <__alt_data_end+0xfffe80ac>
   277a4:	ac400007 	ldb	r17,0(r21)
   277a8:	aac00044 	addi	r11,r21,1
   277ac:	8a872826 	beq	r17,r10,29450 <___vfprintf_internal_r+0x2128>
   277b0:	88bff404 	addi	r2,r17,-48
   277b4:	0009883a 	mov	r4,zero
   277b8:	30867d36 	bltu	r6,r2,291b0 <___vfprintf_internal_r+0x1e88>
   277bc:	5c400007 	ldb	r17,0(r11)
   277c0:	210002a4 	muli	r4,r4,10
   277c4:	5d400044 	addi	r21,r11,1
   277c8:	a817883a 	mov	r11,r21
   277cc:	2089883a 	add	r4,r4,r2
   277d0:	88bff404 	addi	r2,r17,-48
   277d4:	30bff92e 	bgeu	r6,r2,277bc <__alt_data_end+0xfffe83bc>
   277d8:	2005c916 	blt	r4,zero,28f00 <___vfprintf_internal_r+0x1bd8>
   277dc:	d9002915 	stw	r4,164(sp)
   277e0:	003f3306 	br	274b0 <__alt_data_end+0xfffe80b0>
   277e4:	94802014 	ori	r18,r18,128
   277e8:	ac400007 	ldb	r17,0(r21)
   277ec:	003f2f06 	br	274ac <__alt_data_end+0xfffe80ac>
   277f0:	a809883a 	mov	r4,r21
   277f4:	d8003115 	stw	zero,196(sp)
   277f8:	88bff404 	addi	r2,r17,-48
   277fc:	0017883a 	mov	r11,zero
   27800:	24400007 	ldb	r17,0(r4)
   27804:	5ac002a4 	muli	r11,r11,10
   27808:	ad400044 	addi	r21,r21,1
   2780c:	a809883a 	mov	r4,r21
   27810:	12d7883a 	add	r11,r2,r11
   27814:	88bff404 	addi	r2,r17,-48
   27818:	30bff92e 	bgeu	r6,r2,27800 <__alt_data_end+0xfffe8400>
   2781c:	dac03115 	stw	r11,196(sp)
   27820:	003f2306 	br	274b0 <__alt_data_end+0xfffe80b0>
   27824:	18c03fcc 	andi	r3,r3,255
   27828:	18072b1e 	bne	r3,zero,294d8 <___vfprintf_internal_r+0x21b0>
   2782c:	94800414 	ori	r18,r18,16
   27830:	9080080c 	andi	r2,r18,32
   27834:	10037b26 	beq	r2,zero,28624 <___vfprintf_internal_r+0x12fc>
   27838:	d9402d17 	ldw	r5,180(sp)
   2783c:	28800117 	ldw	r2,4(r5)
   27840:	2cc00017 	ldw	r19,0(r5)
   27844:	29400204 	addi	r5,r5,8
   27848:	d9402d15 	stw	r5,180(sp)
   2784c:	102d883a 	mov	r22,r2
   27850:	10044b16 	blt	r2,zero,28980 <___vfprintf_internal_r+0x1658>
   27854:	d9402917 	ldw	r5,164(sp)
   27858:	df002783 	ldbu	fp,158(sp)
   2785c:	2803bc16 	blt	r5,zero,28750 <___vfprintf_internal_r+0x1428>
   27860:	00ffdfc4 	movi	r3,-129
   27864:	9d84b03a 	or	r2,r19,r22
   27868:	90e4703a 	and	r18,r18,r3
   2786c:	10017726 	beq	r2,zero,27e4c <___vfprintf_internal_r+0xb24>
   27870:	b0038326 	beq	r22,zero,28680 <___vfprintf_internal_r+0x1358>
   27874:	dc402a15 	stw	r17,168(sp)
   27878:	dc001e04 	addi	r16,sp,120
   2787c:	b023883a 	mov	r17,r22
   27880:	402d883a 	mov	r22,r8
   27884:	9809883a 	mov	r4,r19
   27888:	880b883a 	mov	r5,r17
   2788c:	01800284 	movi	r6,10
   27890:	000f883a 	mov	r7,zero
   27894:	0030d1c0 	call	30d1c <__umoddi3>
   27898:	10800c04 	addi	r2,r2,48
   2789c:	843fffc4 	addi	r16,r16,-1
   278a0:	9809883a 	mov	r4,r19
   278a4:	880b883a 	mov	r5,r17
   278a8:	80800005 	stb	r2,0(r16)
   278ac:	01800284 	movi	r6,10
   278b0:	000f883a 	mov	r7,zero
   278b4:	00307a40 	call	307a4 <__udivdi3>
   278b8:	1027883a 	mov	r19,r2
   278bc:	10c4b03a 	or	r2,r2,r3
   278c0:	1823883a 	mov	r17,r3
   278c4:	103fef1e 	bne	r2,zero,27884 <__alt_data_end+0xfffe8484>
   278c8:	d8c02817 	ldw	r3,160(sp)
   278cc:	dc402a17 	ldw	r17,168(sp)
   278d0:	b011883a 	mov	r8,r22
   278d4:	1c07c83a 	sub	r3,r3,r16
   278d8:	d8c02e15 	stw	r3,184(sp)
   278dc:	00005906 	br	27a44 <___vfprintf_internal_r+0x71c>
   278e0:	18c03fcc 	andi	r3,r3,255
   278e4:	1806fa1e 	bne	r3,zero,294d0 <___vfprintf_internal_r+0x21a8>
   278e8:	9080020c 	andi	r2,r18,8
   278ec:	10048a26 	beq	r2,zero,28b18 <___vfprintf_internal_r+0x17f0>
   278f0:	d8c02d17 	ldw	r3,180(sp)
   278f4:	d9002d17 	ldw	r4,180(sp)
   278f8:	d9402d17 	ldw	r5,180(sp)
   278fc:	18c00017 	ldw	r3,0(r3)
   27900:	21000117 	ldw	r4,4(r4)
   27904:	29400204 	addi	r5,r5,8
   27908:	d8c03615 	stw	r3,216(sp)
   2790c:	d9003815 	stw	r4,224(sp)
   27910:	d9402d15 	stw	r5,180(sp)
   27914:	d9003617 	ldw	r4,216(sp)
   27918:	d9403817 	ldw	r5,224(sp)
   2791c:	da003d15 	stw	r8,244(sp)
   27920:	04000044 	movi	r16,1
   27924:	002e5480 	call	2e548 <__fpclassifyd>
   27928:	da003d17 	ldw	r8,244(sp)
   2792c:	14041f1e 	bne	r2,r16,289ac <___vfprintf_internal_r+0x1684>
   27930:	d9003617 	ldw	r4,216(sp)
   27934:	d9403817 	ldw	r5,224(sp)
   27938:	000d883a 	mov	r6,zero
   2793c:	000f883a 	mov	r7,zero
   27940:	00313b80 	call	313b8 <__ledf2>
   27944:	da003d17 	ldw	r8,244(sp)
   27948:	1005be16 	blt	r2,zero,29044 <___vfprintf_internal_r+0x1d1c>
   2794c:	df002783 	ldbu	fp,158(sp)
   27950:	008011c4 	movi	r2,71
   27954:	1445330e 	bge	r2,r17,28e24 <___vfprintf_internal_r+0x1afc>
   27958:	040000f4 	movhi	r16,3
   2795c:	84120104 	addi	r16,r16,18436
   27960:	00c000c4 	movi	r3,3
   27964:	00bfdfc4 	movi	r2,-129
   27968:	d8c02a15 	stw	r3,168(sp)
   2796c:	90a4703a 	and	r18,r18,r2
   27970:	d8c02e15 	stw	r3,184(sp)
   27974:	d8002915 	stw	zero,164(sp)
   27978:	d8003215 	stw	zero,200(sp)
   2797c:	00003706 	br	27a5c <___vfprintf_internal_r+0x734>
   27980:	94800214 	ori	r18,r18,8
   27984:	ac400007 	ldb	r17,0(r21)
   27988:	003ec806 	br	274ac <__alt_data_end+0xfffe80ac>
   2798c:	18c03fcc 	andi	r3,r3,255
   27990:	1806db1e 	bne	r3,zero,29500 <___vfprintf_internal_r+0x21d8>
   27994:	94800414 	ori	r18,r18,16
   27998:	9080080c 	andi	r2,r18,32
   2799c:	1002d826 	beq	r2,zero,28500 <___vfprintf_internal_r+0x11d8>
   279a0:	d9402d17 	ldw	r5,180(sp)
   279a4:	d8c02917 	ldw	r3,164(sp)
   279a8:	d8002785 	stb	zero,158(sp)
   279ac:	28800204 	addi	r2,r5,8
   279b0:	2cc00017 	ldw	r19,0(r5)
   279b4:	2d800117 	ldw	r22,4(r5)
   279b8:	18048f16 	blt	r3,zero,28bf8 <___vfprintf_internal_r+0x18d0>
   279bc:	013fdfc4 	movi	r4,-129
   279c0:	9d86b03a 	or	r3,r19,r22
   279c4:	d8802d15 	stw	r2,180(sp)
   279c8:	9124703a 	and	r18,r18,r4
   279cc:	1802d91e 	bne	r3,zero,28534 <___vfprintf_internal_r+0x120c>
   279d0:	d8c02917 	ldw	r3,164(sp)
   279d4:	0039883a 	mov	fp,zero
   279d8:	1805c326 	beq	r3,zero,290e8 <___vfprintf_internal_r+0x1dc0>
   279dc:	0027883a 	mov	r19,zero
   279e0:	002d883a 	mov	r22,zero
   279e4:	dc001e04 	addi	r16,sp,120
   279e8:	9806d0fa 	srli	r3,r19,3
   279ec:	b008977a 	slli	r4,r22,29
   279f0:	b02cd0fa 	srli	r22,r22,3
   279f4:	9cc001cc 	andi	r19,r19,7
   279f8:	98800c04 	addi	r2,r19,48
   279fc:	843fffc4 	addi	r16,r16,-1
   27a00:	20e6b03a 	or	r19,r4,r3
   27a04:	80800005 	stb	r2,0(r16)
   27a08:	9d86b03a 	or	r3,r19,r22
   27a0c:	183ff61e 	bne	r3,zero,279e8 <__alt_data_end+0xfffe85e8>
   27a10:	90c0004c 	andi	r3,r18,1
   27a14:	18013b26 	beq	r3,zero,27f04 <___vfprintf_internal_r+0xbdc>
   27a18:	10803fcc 	andi	r2,r2,255
   27a1c:	1080201c 	xori	r2,r2,128
   27a20:	10bfe004 	addi	r2,r2,-128
   27a24:	00c00c04 	movi	r3,48
   27a28:	10c13626 	beq	r2,r3,27f04 <___vfprintf_internal_r+0xbdc>
   27a2c:	80ffffc5 	stb	r3,-1(r16)
   27a30:	d8c02817 	ldw	r3,160(sp)
   27a34:	80bfffc4 	addi	r2,r16,-1
   27a38:	1021883a 	mov	r16,r2
   27a3c:	1887c83a 	sub	r3,r3,r2
   27a40:	d8c02e15 	stw	r3,184(sp)
   27a44:	d8802e17 	ldw	r2,184(sp)
   27a48:	d9002917 	ldw	r4,164(sp)
   27a4c:	1100010e 	bge	r2,r4,27a54 <___vfprintf_internal_r+0x72c>
   27a50:	2005883a 	mov	r2,r4
   27a54:	d8802a15 	stw	r2,168(sp)
   27a58:	d8003215 	stw	zero,200(sp)
   27a5c:	e7003fcc 	andi	fp,fp,255
   27a60:	e700201c 	xori	fp,fp,128
   27a64:	e73fe004 	addi	fp,fp,-128
   27a68:	e0000326 	beq	fp,zero,27a78 <___vfprintf_internal_r+0x750>
   27a6c:	d8c02a17 	ldw	r3,168(sp)
   27a70:	18c00044 	addi	r3,r3,1
   27a74:	d8c02a15 	stw	r3,168(sp)
   27a78:	90c0008c 	andi	r3,r18,2
   27a7c:	d8c02b15 	stw	r3,172(sp)
   27a80:	18000326 	beq	r3,zero,27a90 <___vfprintf_internal_r+0x768>
   27a84:	d8c02a17 	ldw	r3,168(sp)
   27a88:	18c00084 	addi	r3,r3,2
   27a8c:	d8c02a15 	stw	r3,168(sp)
   27a90:	90c0210c 	andi	r3,r18,132
   27a94:	d8c03015 	stw	r3,192(sp)
   27a98:	1801a31e 	bne	r3,zero,28128 <___vfprintf_internal_r+0xe00>
   27a9c:	d9003117 	ldw	r4,196(sp)
   27aa0:	d8c02a17 	ldw	r3,168(sp)
   27aa4:	20e7c83a 	sub	r19,r4,r3
   27aa8:	04c19f0e 	bge	zero,r19,28128 <___vfprintf_internal_r+0xe00>
   27aac:	02400404 	movi	r9,16
   27ab0:	d8c02017 	ldw	r3,128(sp)
   27ab4:	d8801f17 	ldw	r2,124(sp)
   27ab8:	4cc50d0e 	bge	r9,r19,28ef0 <___vfprintf_internal_r+0x1bc8>
   27abc:	014000f4 	movhi	r5,3
   27ac0:	29521484 	addi	r5,r5,18514
   27ac4:	dc403b15 	stw	r17,236(sp)
   27ac8:	d9403515 	stw	r5,212(sp)
   27acc:	9823883a 	mov	r17,r19
   27ad0:	482d883a 	mov	r22,r9
   27ad4:	9027883a 	mov	r19,r18
   27ad8:	070001c4 	movi	fp,7
   27adc:	8025883a 	mov	r18,r16
   27ae0:	dc002c17 	ldw	r16,176(sp)
   27ae4:	00000306 	br	27af4 <___vfprintf_internal_r+0x7cc>
   27ae8:	8c7ffc04 	addi	r17,r17,-16
   27aec:	42000204 	addi	r8,r8,8
   27af0:	b440130e 	bge	r22,r17,27b40 <___vfprintf_internal_r+0x818>
   27af4:	010000f4 	movhi	r4,3
   27af8:	18c00404 	addi	r3,r3,16
   27afc:	10800044 	addi	r2,r2,1
   27b00:	21121484 	addi	r4,r4,18514
   27b04:	41000015 	stw	r4,0(r8)
   27b08:	45800115 	stw	r22,4(r8)
   27b0c:	d8c02015 	stw	r3,128(sp)
   27b10:	d8801f15 	stw	r2,124(sp)
   27b14:	e0bff40e 	bge	fp,r2,27ae8 <__alt_data_end+0xfffe86e8>
   27b18:	d9801e04 	addi	r6,sp,120
   27b1c:	b80b883a 	mov	r5,r23
   27b20:	8009883a 	mov	r4,r16
   27b24:	002e9240 	call	2e924 <__sprint_r>
   27b28:	103f011e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   27b2c:	8c7ffc04 	addi	r17,r17,-16
   27b30:	d8c02017 	ldw	r3,128(sp)
   27b34:	d8801f17 	ldw	r2,124(sp)
   27b38:	da000404 	addi	r8,sp,16
   27b3c:	b47fed16 	blt	r22,r17,27af4 <__alt_data_end+0xfffe86f4>
   27b40:	9021883a 	mov	r16,r18
   27b44:	9825883a 	mov	r18,r19
   27b48:	8827883a 	mov	r19,r17
   27b4c:	dc403b17 	ldw	r17,236(sp)
   27b50:	d9403517 	ldw	r5,212(sp)
   27b54:	98c7883a 	add	r3,r19,r3
   27b58:	10800044 	addi	r2,r2,1
   27b5c:	41400015 	stw	r5,0(r8)
   27b60:	44c00115 	stw	r19,4(r8)
   27b64:	d8c02015 	stw	r3,128(sp)
   27b68:	d8801f15 	stw	r2,124(sp)
   27b6c:	010001c4 	movi	r4,7
   27b70:	2082a316 	blt	r4,r2,28600 <___vfprintf_internal_r+0x12d8>
   27b74:	df002787 	ldb	fp,158(sp)
   27b78:	42000204 	addi	r8,r8,8
   27b7c:	e0000c26 	beq	fp,zero,27bb0 <___vfprintf_internal_r+0x888>
   27b80:	d8801f17 	ldw	r2,124(sp)
   27b84:	d9002784 	addi	r4,sp,158
   27b88:	18c00044 	addi	r3,r3,1
   27b8c:	10800044 	addi	r2,r2,1
   27b90:	41000015 	stw	r4,0(r8)
   27b94:	01000044 	movi	r4,1
   27b98:	41000115 	stw	r4,4(r8)
   27b9c:	d8c02015 	stw	r3,128(sp)
   27ba0:	d8801f15 	stw	r2,124(sp)
   27ba4:	010001c4 	movi	r4,7
   27ba8:	20823c16 	blt	r4,r2,2849c <___vfprintf_internal_r+0x1174>
   27bac:	42000204 	addi	r8,r8,8
   27bb0:	d8802b17 	ldw	r2,172(sp)
   27bb4:	10000c26 	beq	r2,zero,27be8 <___vfprintf_internal_r+0x8c0>
   27bb8:	d8801f17 	ldw	r2,124(sp)
   27bbc:	d9002704 	addi	r4,sp,156
   27bc0:	18c00084 	addi	r3,r3,2
   27bc4:	10800044 	addi	r2,r2,1
   27bc8:	41000015 	stw	r4,0(r8)
   27bcc:	01000084 	movi	r4,2
   27bd0:	41000115 	stw	r4,4(r8)
   27bd4:	d8c02015 	stw	r3,128(sp)
   27bd8:	d8801f15 	stw	r2,124(sp)
   27bdc:	010001c4 	movi	r4,7
   27be0:	20823616 	blt	r4,r2,284bc <___vfprintf_internal_r+0x1194>
   27be4:	42000204 	addi	r8,r8,8
   27be8:	d9003017 	ldw	r4,192(sp)
   27bec:	00802004 	movi	r2,128
   27bf0:	20819926 	beq	r4,r2,28258 <___vfprintf_internal_r+0xf30>
   27bf4:	d9402917 	ldw	r5,164(sp)
   27bf8:	d8802e17 	ldw	r2,184(sp)
   27bfc:	28adc83a 	sub	r22,r5,r2
   27c00:	0580310e 	bge	zero,r22,27cc8 <___vfprintf_internal_r+0x9a0>
   27c04:	07000404 	movi	fp,16
   27c08:	d8801f17 	ldw	r2,124(sp)
   27c0c:	e584140e 	bge	fp,r22,28c60 <___vfprintf_internal_r+0x1938>
   27c10:	014000f4 	movhi	r5,3
   27c14:	29521084 	addi	r5,r5,18498
   27c18:	dc402915 	stw	r17,164(sp)
   27c1c:	d9402b15 	stw	r5,172(sp)
   27c20:	b023883a 	mov	r17,r22
   27c24:	04c001c4 	movi	r19,7
   27c28:	a82d883a 	mov	r22,r21
   27c2c:	902b883a 	mov	r21,r18
   27c30:	8025883a 	mov	r18,r16
   27c34:	dc002c17 	ldw	r16,176(sp)
   27c38:	00000306 	br	27c48 <___vfprintf_internal_r+0x920>
   27c3c:	8c7ffc04 	addi	r17,r17,-16
   27c40:	42000204 	addi	r8,r8,8
   27c44:	e440110e 	bge	fp,r17,27c8c <___vfprintf_internal_r+0x964>
   27c48:	18c00404 	addi	r3,r3,16
   27c4c:	10800044 	addi	r2,r2,1
   27c50:	45000015 	stw	r20,0(r8)
   27c54:	47000115 	stw	fp,4(r8)
   27c58:	d8c02015 	stw	r3,128(sp)
   27c5c:	d8801f15 	stw	r2,124(sp)
   27c60:	98bff60e 	bge	r19,r2,27c3c <__alt_data_end+0xfffe883c>
   27c64:	d9801e04 	addi	r6,sp,120
   27c68:	b80b883a 	mov	r5,r23
   27c6c:	8009883a 	mov	r4,r16
   27c70:	002e9240 	call	2e924 <__sprint_r>
   27c74:	103eae1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   27c78:	8c7ffc04 	addi	r17,r17,-16
   27c7c:	d8c02017 	ldw	r3,128(sp)
   27c80:	d8801f17 	ldw	r2,124(sp)
   27c84:	da000404 	addi	r8,sp,16
   27c88:	e47fef16 	blt	fp,r17,27c48 <__alt_data_end+0xfffe8848>
   27c8c:	9021883a 	mov	r16,r18
   27c90:	a825883a 	mov	r18,r21
   27c94:	b02b883a 	mov	r21,r22
   27c98:	882d883a 	mov	r22,r17
   27c9c:	dc402917 	ldw	r17,164(sp)
   27ca0:	d9002b17 	ldw	r4,172(sp)
   27ca4:	1d87883a 	add	r3,r3,r22
   27ca8:	10800044 	addi	r2,r2,1
   27cac:	41000015 	stw	r4,0(r8)
   27cb0:	45800115 	stw	r22,4(r8)
   27cb4:	d8c02015 	stw	r3,128(sp)
   27cb8:	d8801f15 	stw	r2,124(sp)
   27cbc:	010001c4 	movi	r4,7
   27cc0:	2081ee16 	blt	r4,r2,2847c <___vfprintf_internal_r+0x1154>
   27cc4:	42000204 	addi	r8,r8,8
   27cc8:	9080400c 	andi	r2,r18,256
   27ccc:	1001181e 	bne	r2,zero,28130 <___vfprintf_internal_r+0xe08>
   27cd0:	d9402e17 	ldw	r5,184(sp)
   27cd4:	d8801f17 	ldw	r2,124(sp)
   27cd8:	44000015 	stw	r16,0(r8)
   27cdc:	1947883a 	add	r3,r3,r5
   27ce0:	10800044 	addi	r2,r2,1
   27ce4:	41400115 	stw	r5,4(r8)
   27ce8:	d8c02015 	stw	r3,128(sp)
   27cec:	d8801f15 	stw	r2,124(sp)
   27cf0:	010001c4 	movi	r4,7
   27cf4:	2081d316 	blt	r4,r2,28444 <___vfprintf_internal_r+0x111c>
   27cf8:	42000204 	addi	r8,r8,8
   27cfc:	9480010c 	andi	r18,r18,4
   27d00:	90003226 	beq	r18,zero,27dcc <___vfprintf_internal_r+0xaa4>
   27d04:	d9403117 	ldw	r5,196(sp)
   27d08:	d8802a17 	ldw	r2,168(sp)
   27d0c:	28a1c83a 	sub	r16,r5,r2
   27d10:	04002e0e 	bge	zero,r16,27dcc <___vfprintf_internal_r+0xaa4>
   27d14:	04400404 	movi	r17,16
   27d18:	d8801f17 	ldw	r2,124(sp)
   27d1c:	8c04a20e 	bge	r17,r16,28fa8 <___vfprintf_internal_r+0x1c80>
   27d20:	014000f4 	movhi	r5,3
   27d24:	29521484 	addi	r5,r5,18514
   27d28:	d9403515 	stw	r5,212(sp)
   27d2c:	048001c4 	movi	r18,7
   27d30:	dcc02c17 	ldw	r19,176(sp)
   27d34:	00000306 	br	27d44 <___vfprintf_internal_r+0xa1c>
   27d38:	843ffc04 	addi	r16,r16,-16
   27d3c:	42000204 	addi	r8,r8,8
   27d40:	8c00130e 	bge	r17,r16,27d90 <___vfprintf_internal_r+0xa68>
   27d44:	010000f4 	movhi	r4,3
   27d48:	18c00404 	addi	r3,r3,16
   27d4c:	10800044 	addi	r2,r2,1
   27d50:	21121484 	addi	r4,r4,18514
   27d54:	41000015 	stw	r4,0(r8)
   27d58:	44400115 	stw	r17,4(r8)
   27d5c:	d8c02015 	stw	r3,128(sp)
   27d60:	d8801f15 	stw	r2,124(sp)
   27d64:	90bff40e 	bge	r18,r2,27d38 <__alt_data_end+0xfffe8938>
   27d68:	d9801e04 	addi	r6,sp,120
   27d6c:	b80b883a 	mov	r5,r23
   27d70:	9809883a 	mov	r4,r19
   27d74:	002e9240 	call	2e924 <__sprint_r>
   27d78:	103e6d1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   27d7c:	843ffc04 	addi	r16,r16,-16
   27d80:	d8c02017 	ldw	r3,128(sp)
   27d84:	d8801f17 	ldw	r2,124(sp)
   27d88:	da000404 	addi	r8,sp,16
   27d8c:	8c3fed16 	blt	r17,r16,27d44 <__alt_data_end+0xfffe8944>
   27d90:	d9403517 	ldw	r5,212(sp)
   27d94:	1c07883a 	add	r3,r3,r16
   27d98:	10800044 	addi	r2,r2,1
   27d9c:	41400015 	stw	r5,0(r8)
   27da0:	44000115 	stw	r16,4(r8)
   27da4:	d8c02015 	stw	r3,128(sp)
   27da8:	d8801f15 	stw	r2,124(sp)
   27dac:	010001c4 	movi	r4,7
   27db0:	2080060e 	bge	r4,r2,27dcc <___vfprintf_internal_r+0xaa4>
   27db4:	d9002c17 	ldw	r4,176(sp)
   27db8:	d9801e04 	addi	r6,sp,120
   27dbc:	b80b883a 	mov	r5,r23
   27dc0:	002e9240 	call	2e924 <__sprint_r>
   27dc4:	103e5a1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   27dc8:	d8c02017 	ldw	r3,128(sp)
   27dcc:	d8803117 	ldw	r2,196(sp)
   27dd0:	d9002a17 	ldw	r4,168(sp)
   27dd4:	1100010e 	bge	r2,r4,27ddc <___vfprintf_internal_r+0xab4>
   27dd8:	2005883a 	mov	r2,r4
   27ddc:	d9402f17 	ldw	r5,188(sp)
   27de0:	288b883a 	add	r5,r5,r2
   27de4:	d9402f15 	stw	r5,188(sp)
   27de8:	18019e1e 	bne	r3,zero,28464 <___vfprintf_internal_r+0x113c>
   27dec:	a8800007 	ldb	r2,0(r21)
   27df0:	d8001f15 	stw	zero,124(sp)
   27df4:	da000404 	addi	r8,sp,16
   27df8:	103d851e 	bne	r2,zero,27410 <__alt_data_end+0xfffe8010>
   27dfc:	a821883a 	mov	r16,r21
   27e00:	003d9b06 	br	27470 <__alt_data_end+0xfffe8070>
   27e04:	18c03fcc 	andi	r3,r3,255
   27e08:	1805c11e 	bne	r3,zero,29510 <___vfprintf_internal_r+0x21e8>
   27e0c:	94800414 	ori	r18,r18,16
   27e10:	9080080c 	andi	r2,r18,32
   27e14:	10020c26 	beq	r2,zero,28648 <___vfprintf_internal_r+0x1320>
   27e18:	d8802d17 	ldw	r2,180(sp)
   27e1c:	d9002917 	ldw	r4,164(sp)
   27e20:	d8002785 	stb	zero,158(sp)
   27e24:	10c00204 	addi	r3,r2,8
   27e28:	14c00017 	ldw	r19,0(r2)
   27e2c:	15800117 	ldw	r22,4(r2)
   27e30:	20040f16 	blt	r4,zero,28e70 <___vfprintf_internal_r+0x1b48>
   27e34:	013fdfc4 	movi	r4,-129
   27e38:	9d84b03a 	or	r2,r19,r22
   27e3c:	d8c02d15 	stw	r3,180(sp)
   27e40:	9124703a 	and	r18,r18,r4
   27e44:	0039883a 	mov	fp,zero
   27e48:	103e891e 	bne	r2,zero,27870 <__alt_data_end+0xfffe8470>
   27e4c:	d9002917 	ldw	r4,164(sp)
   27e50:	2002c11e 	bne	r4,zero,28958 <___vfprintf_internal_r+0x1630>
   27e54:	d8002915 	stw	zero,164(sp)
   27e58:	d8002e15 	stw	zero,184(sp)
   27e5c:	dc001e04 	addi	r16,sp,120
   27e60:	003ef806 	br	27a44 <__alt_data_end+0xfffe8644>
   27e64:	18c03fcc 	andi	r3,r3,255
   27e68:	18059d1e 	bne	r3,zero,294e0 <___vfprintf_internal_r+0x21b8>
   27e6c:	014000f4 	movhi	r5,3
   27e70:	29520404 	addi	r5,r5,18448
   27e74:	d9403915 	stw	r5,228(sp)
   27e78:	9080080c 	andi	r2,r18,32
   27e7c:	10005226 	beq	r2,zero,27fc8 <___vfprintf_internal_r+0xca0>
   27e80:	d8802d17 	ldw	r2,180(sp)
   27e84:	14c00017 	ldw	r19,0(r2)
   27e88:	15800117 	ldw	r22,4(r2)
   27e8c:	10800204 	addi	r2,r2,8
   27e90:	d8802d15 	stw	r2,180(sp)
   27e94:	9080004c 	andi	r2,r18,1
   27e98:	10019026 	beq	r2,zero,284dc <___vfprintf_internal_r+0x11b4>
   27e9c:	9d84b03a 	or	r2,r19,r22
   27ea0:	10036926 	beq	r2,zero,28c48 <___vfprintf_internal_r+0x1920>
   27ea4:	d8c02917 	ldw	r3,164(sp)
   27ea8:	00800c04 	movi	r2,48
   27eac:	d8802705 	stb	r2,156(sp)
   27eb0:	dc402745 	stb	r17,157(sp)
   27eb4:	d8002785 	stb	zero,158(sp)
   27eb8:	90800094 	ori	r2,r18,2
   27ebc:	18045d16 	blt	r3,zero,29034 <___vfprintf_internal_r+0x1d0c>
   27ec0:	00bfdfc4 	movi	r2,-129
   27ec4:	90a4703a 	and	r18,r18,r2
   27ec8:	94800094 	ori	r18,r18,2
   27ecc:	0039883a 	mov	fp,zero
   27ed0:	d9003917 	ldw	r4,228(sp)
   27ed4:	dc001e04 	addi	r16,sp,120
   27ed8:	988003cc 	andi	r2,r19,15
   27edc:	b006973a 	slli	r3,r22,28
   27ee0:	2085883a 	add	r2,r4,r2
   27ee4:	9826d13a 	srli	r19,r19,4
   27ee8:	10800003 	ldbu	r2,0(r2)
   27eec:	b02cd13a 	srli	r22,r22,4
   27ef0:	843fffc4 	addi	r16,r16,-1
   27ef4:	1ce6b03a 	or	r19,r3,r19
   27ef8:	80800005 	stb	r2,0(r16)
   27efc:	9d84b03a 	or	r2,r19,r22
   27f00:	103ff51e 	bne	r2,zero,27ed8 <__alt_data_end+0xfffe8ad8>
   27f04:	d8c02817 	ldw	r3,160(sp)
   27f08:	1c07c83a 	sub	r3,r3,r16
   27f0c:	d8c02e15 	stw	r3,184(sp)
   27f10:	003ecc06 	br	27a44 <__alt_data_end+0xfffe8644>
   27f14:	18c03fcc 	andi	r3,r3,255
   27f18:	183e9f26 	beq	r3,zero,27998 <__alt_data_end+0xfffe8598>
   27f1c:	d9c02785 	stb	r7,158(sp)
   27f20:	003e9d06 	br	27998 <__alt_data_end+0xfffe8598>
   27f24:	00c00044 	movi	r3,1
   27f28:	01c00ac4 	movi	r7,43
   27f2c:	ac400007 	ldb	r17,0(r21)
   27f30:	003d5e06 	br	274ac <__alt_data_end+0xfffe80ac>
   27f34:	94800814 	ori	r18,r18,32
   27f38:	ac400007 	ldb	r17,0(r21)
   27f3c:	003d5b06 	br	274ac <__alt_data_end+0xfffe80ac>
   27f40:	d8c02d17 	ldw	r3,180(sp)
   27f44:	d8002785 	stb	zero,158(sp)
   27f48:	1c000017 	ldw	r16,0(r3)
   27f4c:	1cc00104 	addi	r19,r3,4
   27f50:	80041926 	beq	r16,zero,28fb8 <___vfprintf_internal_r+0x1c90>
   27f54:	d9002917 	ldw	r4,164(sp)
   27f58:	2003d016 	blt	r4,zero,28e9c <___vfprintf_internal_r+0x1b74>
   27f5c:	200d883a 	mov	r6,r4
   27f60:	000b883a 	mov	r5,zero
   27f64:	8009883a 	mov	r4,r16
   27f68:	da003d15 	stw	r8,244(sp)
   27f6c:	002cb380 	call	2cb38 <memchr>
   27f70:	da003d17 	ldw	r8,244(sp)
   27f74:	10045426 	beq	r2,zero,290c8 <___vfprintf_internal_r+0x1da0>
   27f78:	1405c83a 	sub	r2,r2,r16
   27f7c:	d8802e15 	stw	r2,184(sp)
   27f80:	1003cc16 	blt	r2,zero,28eb4 <___vfprintf_internal_r+0x1b8c>
   27f84:	df002783 	ldbu	fp,158(sp)
   27f88:	d8802a15 	stw	r2,168(sp)
   27f8c:	dcc02d15 	stw	r19,180(sp)
   27f90:	d8002915 	stw	zero,164(sp)
   27f94:	d8003215 	stw	zero,200(sp)
   27f98:	003eb006 	br	27a5c <__alt_data_end+0xfffe865c>
   27f9c:	18c03fcc 	andi	r3,r3,255
   27fa0:	183f9b26 	beq	r3,zero,27e10 <__alt_data_end+0xfffe8a10>
   27fa4:	d9c02785 	stb	r7,158(sp)
   27fa8:	003f9906 	br	27e10 <__alt_data_end+0xfffe8a10>
   27fac:	18c03fcc 	andi	r3,r3,255
   27fb0:	1805551e 	bne	r3,zero,29508 <___vfprintf_internal_r+0x21e0>
   27fb4:	014000f4 	movhi	r5,3
   27fb8:	29520904 	addi	r5,r5,18468
   27fbc:	d9403915 	stw	r5,228(sp)
   27fc0:	9080080c 	andi	r2,r18,32
   27fc4:	103fae1e 	bne	r2,zero,27e80 <__alt_data_end+0xfffe8a80>
   27fc8:	9080040c 	andi	r2,r18,16
   27fcc:	1002de26 	beq	r2,zero,28b48 <___vfprintf_internal_r+0x1820>
   27fd0:	d8c02d17 	ldw	r3,180(sp)
   27fd4:	002d883a 	mov	r22,zero
   27fd8:	1cc00017 	ldw	r19,0(r3)
   27fdc:	18c00104 	addi	r3,r3,4
   27fe0:	d8c02d15 	stw	r3,180(sp)
   27fe4:	003fab06 	br	27e94 <__alt_data_end+0xfffe8a94>
   27fe8:	38803fcc 	andi	r2,r7,255
   27fec:	1080201c 	xori	r2,r2,128
   27ff0:	10bfe004 	addi	r2,r2,-128
   27ff4:	1002d21e 	bne	r2,zero,28b40 <___vfprintf_internal_r+0x1818>
   27ff8:	00c00044 	movi	r3,1
   27ffc:	01c00804 	movi	r7,32
   28000:	ac400007 	ldb	r17,0(r21)
   28004:	003d2906 	br	274ac <__alt_data_end+0xfffe80ac>
   28008:	94800054 	ori	r18,r18,1
   2800c:	ac400007 	ldb	r17,0(r21)
   28010:	003d2606 	br	274ac <__alt_data_end+0xfffe80ac>
   28014:	18c03fcc 	andi	r3,r3,255
   28018:	183e0526 	beq	r3,zero,27830 <__alt_data_end+0xfffe8430>
   2801c:	d9c02785 	stb	r7,158(sp)
   28020:	003e0306 	br	27830 <__alt_data_end+0xfffe8430>
   28024:	94801014 	ori	r18,r18,64
   28028:	ac400007 	ldb	r17,0(r21)
   2802c:	003d1f06 	br	274ac <__alt_data_end+0xfffe80ac>
   28030:	ac400007 	ldb	r17,0(r21)
   28034:	8a438726 	beq	r17,r9,28e54 <___vfprintf_internal_r+0x1b2c>
   28038:	94800414 	ori	r18,r18,16
   2803c:	003d1b06 	br	274ac <__alt_data_end+0xfffe80ac>
   28040:	18c03fcc 	andi	r3,r3,255
   28044:	1805341e 	bne	r3,zero,29518 <___vfprintf_internal_r+0x21f0>
   28048:	9080080c 	andi	r2,r18,32
   2804c:	1002cd26 	beq	r2,zero,28b84 <___vfprintf_internal_r+0x185c>
   28050:	d9402d17 	ldw	r5,180(sp)
   28054:	d9002f17 	ldw	r4,188(sp)
   28058:	28800017 	ldw	r2,0(r5)
   2805c:	2007d7fa 	srai	r3,r4,31
   28060:	29400104 	addi	r5,r5,4
   28064:	d9402d15 	stw	r5,180(sp)
   28068:	11000015 	stw	r4,0(r2)
   2806c:	10c00115 	stw	r3,4(r2)
   28070:	003ce506 	br	27408 <__alt_data_end+0xfffe8008>
   28074:	d8c02d17 	ldw	r3,180(sp)
   28078:	d9002d17 	ldw	r4,180(sp)
   2807c:	d8002785 	stb	zero,158(sp)
   28080:	18800017 	ldw	r2,0(r3)
   28084:	21000104 	addi	r4,r4,4
   28088:	00c00044 	movi	r3,1
   2808c:	d8c02a15 	stw	r3,168(sp)
   28090:	d8801405 	stb	r2,80(sp)
   28094:	d9002d15 	stw	r4,180(sp)
   28098:	d8c02e15 	stw	r3,184(sp)
   2809c:	d8002915 	stw	zero,164(sp)
   280a0:	d8003215 	stw	zero,200(sp)
   280a4:	dc001404 	addi	r16,sp,80
   280a8:	0039883a 	mov	fp,zero
   280ac:	003e7206 	br	27a78 <__alt_data_end+0xfffe8678>
   280b0:	010000f4 	movhi	r4,3
   280b4:	21120904 	addi	r4,r4,18468
   280b8:	0039883a 	mov	fp,zero
   280bc:	d9003915 	stw	r4,228(sp)
   280c0:	04401e04 	movi	r17,120
   280c4:	003f8206 	br	27ed0 <__alt_data_end+0xfffe8ad0>
   280c8:	18c03fcc 	andi	r3,r3,255
   280cc:	1805061e 	bne	r3,zero,294e8 <___vfprintf_internal_r+0x21c0>
   280d0:	883d9126 	beq	r17,zero,27718 <__alt_data_end+0xfffe8318>
   280d4:	00c00044 	movi	r3,1
   280d8:	d8c02a15 	stw	r3,168(sp)
   280dc:	dc401405 	stb	r17,80(sp)
   280e0:	d8002785 	stb	zero,158(sp)
   280e4:	003fec06 	br	28098 <__alt_data_end+0xfffe8c98>
   280e8:	014000f4 	movhi	r5,3
   280ec:	29520904 	addi	r5,r5,18468
   280f0:	d9403915 	stw	r5,228(sp)
   280f4:	d8c02d15 	stw	r3,180(sp)
   280f8:	1025883a 	mov	r18,r2
   280fc:	04401e04 	movi	r17,120
   28100:	9d84b03a 	or	r2,r19,r22
   28104:	1000fc1e 	bne	r2,zero,284f8 <___vfprintf_internal_r+0x11d0>
   28108:	0039883a 	mov	fp,zero
   2810c:	00800084 	movi	r2,2
   28110:	10803fcc 	andi	r2,r2,255
   28114:	00c00044 	movi	r3,1
   28118:	10c20f26 	beq	r2,r3,28958 <___vfprintf_internal_r+0x1630>
   2811c:	00c00084 	movi	r3,2
   28120:	10fd6326 	beq	r2,r3,276b0 <__alt_data_end+0xfffe82b0>
   28124:	003e2d06 	br	279dc <__alt_data_end+0xfffe85dc>
   28128:	d8c02017 	ldw	r3,128(sp)
   2812c:	003e9306 	br	27b7c <__alt_data_end+0xfffe877c>
   28130:	00801944 	movi	r2,101
   28134:	14407e0e 	bge	r2,r17,28330 <___vfprintf_internal_r+0x1008>
   28138:	d9003617 	ldw	r4,216(sp)
   2813c:	d9403817 	ldw	r5,224(sp)
   28140:	000d883a 	mov	r6,zero
   28144:	000f883a 	mov	r7,zero
   28148:	d8c03c15 	stw	r3,240(sp)
   2814c:	da003d15 	stw	r8,244(sp)
   28150:	00312540 	call	31254 <__eqdf2>
   28154:	d8c03c17 	ldw	r3,240(sp)
   28158:	da003d17 	ldw	r8,244(sp)
   2815c:	1000f71e 	bne	r2,zero,2853c <___vfprintf_internal_r+0x1214>
   28160:	d8801f17 	ldw	r2,124(sp)
   28164:	010000f4 	movhi	r4,3
   28168:	21121004 	addi	r4,r4,18496
   2816c:	18c00044 	addi	r3,r3,1
   28170:	10800044 	addi	r2,r2,1
   28174:	41000015 	stw	r4,0(r8)
   28178:	01000044 	movi	r4,1
   2817c:	41000115 	stw	r4,4(r8)
   28180:	d8c02015 	stw	r3,128(sp)
   28184:	d8801f15 	stw	r2,124(sp)
   28188:	010001c4 	movi	r4,7
   2818c:	2082b816 	blt	r4,r2,28c70 <___vfprintf_internal_r+0x1948>
   28190:	42000204 	addi	r8,r8,8
   28194:	d8802617 	ldw	r2,152(sp)
   28198:	d9403317 	ldw	r5,204(sp)
   2819c:	11400216 	blt	r2,r5,281a8 <___vfprintf_internal_r+0xe80>
   281a0:	9080004c 	andi	r2,r18,1
   281a4:	103ed526 	beq	r2,zero,27cfc <__alt_data_end+0xfffe88fc>
   281a8:	d8803717 	ldw	r2,220(sp)
   281ac:	d9003417 	ldw	r4,208(sp)
   281b0:	d9403717 	ldw	r5,220(sp)
   281b4:	1887883a 	add	r3,r3,r2
   281b8:	d8801f17 	ldw	r2,124(sp)
   281bc:	41000015 	stw	r4,0(r8)
   281c0:	41400115 	stw	r5,4(r8)
   281c4:	10800044 	addi	r2,r2,1
   281c8:	d8c02015 	stw	r3,128(sp)
   281cc:	d8801f15 	stw	r2,124(sp)
   281d0:	010001c4 	movi	r4,7
   281d4:	20832916 	blt	r4,r2,28e7c <___vfprintf_internal_r+0x1b54>
   281d8:	42000204 	addi	r8,r8,8
   281dc:	d8803317 	ldw	r2,204(sp)
   281e0:	143fffc4 	addi	r16,r2,-1
   281e4:	043ec50e 	bge	zero,r16,27cfc <__alt_data_end+0xfffe88fc>
   281e8:	04400404 	movi	r17,16
   281ec:	d8801f17 	ldw	r2,124(sp)
   281f0:	8c00880e 	bge	r17,r16,28414 <___vfprintf_internal_r+0x10ec>
   281f4:	014000f4 	movhi	r5,3
   281f8:	29521084 	addi	r5,r5,18498
   281fc:	d9402b15 	stw	r5,172(sp)
   28200:	058001c4 	movi	r22,7
   28204:	dcc02c17 	ldw	r19,176(sp)
   28208:	00000306 	br	28218 <___vfprintf_internal_r+0xef0>
   2820c:	42000204 	addi	r8,r8,8
   28210:	843ffc04 	addi	r16,r16,-16
   28214:	8c00820e 	bge	r17,r16,28420 <___vfprintf_internal_r+0x10f8>
   28218:	18c00404 	addi	r3,r3,16
   2821c:	10800044 	addi	r2,r2,1
   28220:	45000015 	stw	r20,0(r8)
   28224:	44400115 	stw	r17,4(r8)
   28228:	d8c02015 	stw	r3,128(sp)
   2822c:	d8801f15 	stw	r2,124(sp)
   28230:	b0bff60e 	bge	r22,r2,2820c <__alt_data_end+0xfffe8e0c>
   28234:	d9801e04 	addi	r6,sp,120
   28238:	b80b883a 	mov	r5,r23
   2823c:	9809883a 	mov	r4,r19
   28240:	002e9240 	call	2e924 <__sprint_r>
   28244:	103d3a1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28248:	d8c02017 	ldw	r3,128(sp)
   2824c:	d8801f17 	ldw	r2,124(sp)
   28250:	da000404 	addi	r8,sp,16
   28254:	003fee06 	br	28210 <__alt_data_end+0xfffe8e10>
   28258:	d9403117 	ldw	r5,196(sp)
   2825c:	d8802a17 	ldw	r2,168(sp)
   28260:	28adc83a 	sub	r22,r5,r2
   28264:	05be630e 	bge	zero,r22,27bf4 <__alt_data_end+0xfffe87f4>
   28268:	07000404 	movi	fp,16
   2826c:	d8801f17 	ldw	r2,124(sp)
   28270:	e5838f0e 	bge	fp,r22,290b0 <___vfprintf_internal_r+0x1d88>
   28274:	014000f4 	movhi	r5,3
   28278:	29521084 	addi	r5,r5,18498
   2827c:	dc403015 	stw	r17,192(sp)
   28280:	d9402b15 	stw	r5,172(sp)
   28284:	b023883a 	mov	r17,r22
   28288:	04c001c4 	movi	r19,7
   2828c:	a82d883a 	mov	r22,r21
   28290:	902b883a 	mov	r21,r18
   28294:	8025883a 	mov	r18,r16
   28298:	dc002c17 	ldw	r16,176(sp)
   2829c:	00000306 	br	282ac <___vfprintf_internal_r+0xf84>
   282a0:	8c7ffc04 	addi	r17,r17,-16
   282a4:	42000204 	addi	r8,r8,8
   282a8:	e440110e 	bge	fp,r17,282f0 <___vfprintf_internal_r+0xfc8>
   282ac:	18c00404 	addi	r3,r3,16
   282b0:	10800044 	addi	r2,r2,1
   282b4:	45000015 	stw	r20,0(r8)
   282b8:	47000115 	stw	fp,4(r8)
   282bc:	d8c02015 	stw	r3,128(sp)
   282c0:	d8801f15 	stw	r2,124(sp)
   282c4:	98bff60e 	bge	r19,r2,282a0 <__alt_data_end+0xfffe8ea0>
   282c8:	d9801e04 	addi	r6,sp,120
   282cc:	b80b883a 	mov	r5,r23
   282d0:	8009883a 	mov	r4,r16
   282d4:	002e9240 	call	2e924 <__sprint_r>
   282d8:	103d151e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   282dc:	8c7ffc04 	addi	r17,r17,-16
   282e0:	d8c02017 	ldw	r3,128(sp)
   282e4:	d8801f17 	ldw	r2,124(sp)
   282e8:	da000404 	addi	r8,sp,16
   282ec:	e47fef16 	blt	fp,r17,282ac <__alt_data_end+0xfffe8eac>
   282f0:	9021883a 	mov	r16,r18
   282f4:	a825883a 	mov	r18,r21
   282f8:	b02b883a 	mov	r21,r22
   282fc:	882d883a 	mov	r22,r17
   28300:	dc403017 	ldw	r17,192(sp)
   28304:	d9002b17 	ldw	r4,172(sp)
   28308:	1d87883a 	add	r3,r3,r22
   2830c:	10800044 	addi	r2,r2,1
   28310:	41000015 	stw	r4,0(r8)
   28314:	45800115 	stw	r22,4(r8)
   28318:	d8c02015 	stw	r3,128(sp)
   2831c:	d8801f15 	stw	r2,124(sp)
   28320:	010001c4 	movi	r4,7
   28324:	20818e16 	blt	r4,r2,28960 <___vfprintf_internal_r+0x1638>
   28328:	42000204 	addi	r8,r8,8
   2832c:	003e3106 	br	27bf4 <__alt_data_end+0xfffe87f4>
   28330:	d9403317 	ldw	r5,204(sp)
   28334:	00800044 	movi	r2,1
   28338:	18c00044 	addi	r3,r3,1
   2833c:	1141530e 	bge	r2,r5,2888c <___vfprintf_internal_r+0x1564>
   28340:	dc401f17 	ldw	r17,124(sp)
   28344:	00800044 	movi	r2,1
   28348:	40800115 	stw	r2,4(r8)
   2834c:	8c400044 	addi	r17,r17,1
   28350:	44000015 	stw	r16,0(r8)
   28354:	d8c02015 	stw	r3,128(sp)
   28358:	dc401f15 	stw	r17,124(sp)
   2835c:	008001c4 	movi	r2,7
   28360:	14416b16 	blt	r2,r17,28910 <___vfprintf_internal_r+0x15e8>
   28364:	42000204 	addi	r8,r8,8
   28368:	d8803717 	ldw	r2,220(sp)
   2836c:	d9003417 	ldw	r4,208(sp)
   28370:	8c400044 	addi	r17,r17,1
   28374:	10c7883a 	add	r3,r2,r3
   28378:	40800115 	stw	r2,4(r8)
   2837c:	41000015 	stw	r4,0(r8)
   28380:	d8c02015 	stw	r3,128(sp)
   28384:	dc401f15 	stw	r17,124(sp)
   28388:	008001c4 	movi	r2,7
   2838c:	14416916 	blt	r2,r17,28934 <___vfprintf_internal_r+0x160c>
   28390:	45800204 	addi	r22,r8,8
   28394:	d9003617 	ldw	r4,216(sp)
   28398:	d9403817 	ldw	r5,224(sp)
   2839c:	000d883a 	mov	r6,zero
   283a0:	000f883a 	mov	r7,zero
   283a4:	d8c03c15 	stw	r3,240(sp)
   283a8:	00312540 	call	31254 <__eqdf2>
   283ac:	d8c03c17 	ldw	r3,240(sp)
   283b0:	1000bc26 	beq	r2,zero,286a4 <___vfprintf_internal_r+0x137c>
   283b4:	d9403317 	ldw	r5,204(sp)
   283b8:	84000044 	addi	r16,r16,1
   283bc:	8c400044 	addi	r17,r17,1
   283c0:	28bfffc4 	addi	r2,r5,-1
   283c4:	1887883a 	add	r3,r3,r2
   283c8:	b0800115 	stw	r2,4(r22)
   283cc:	b4000015 	stw	r16,0(r22)
   283d0:	d8c02015 	stw	r3,128(sp)
   283d4:	dc401f15 	stw	r17,124(sp)
   283d8:	008001c4 	movi	r2,7
   283dc:	14414316 	blt	r2,r17,288ec <___vfprintf_internal_r+0x15c4>
   283e0:	b5800204 	addi	r22,r22,8
   283e4:	d9003a17 	ldw	r4,232(sp)
   283e8:	df0022c4 	addi	fp,sp,139
   283ec:	8c400044 	addi	r17,r17,1
   283f0:	20c7883a 	add	r3,r4,r3
   283f4:	b7000015 	stw	fp,0(r22)
   283f8:	b1000115 	stw	r4,4(r22)
   283fc:	d8c02015 	stw	r3,128(sp)
   28400:	dc401f15 	stw	r17,124(sp)
   28404:	008001c4 	movi	r2,7
   28408:	14400e16 	blt	r2,r17,28444 <___vfprintf_internal_r+0x111c>
   2840c:	b2000204 	addi	r8,r22,8
   28410:	003e3a06 	br	27cfc <__alt_data_end+0xfffe88fc>
   28414:	010000f4 	movhi	r4,3
   28418:	21121084 	addi	r4,r4,18498
   2841c:	d9002b15 	stw	r4,172(sp)
   28420:	d9002b17 	ldw	r4,172(sp)
   28424:	1c07883a 	add	r3,r3,r16
   28428:	44000115 	stw	r16,4(r8)
   2842c:	41000015 	stw	r4,0(r8)
   28430:	10800044 	addi	r2,r2,1
   28434:	d8c02015 	stw	r3,128(sp)
   28438:	d8801f15 	stw	r2,124(sp)
   2843c:	010001c4 	movi	r4,7
   28440:	20be2d0e 	bge	r4,r2,27cf8 <__alt_data_end+0xfffe88f8>
   28444:	d9002c17 	ldw	r4,176(sp)
   28448:	d9801e04 	addi	r6,sp,120
   2844c:	b80b883a 	mov	r5,r23
   28450:	002e9240 	call	2e924 <__sprint_r>
   28454:	103cb61e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28458:	d8c02017 	ldw	r3,128(sp)
   2845c:	da000404 	addi	r8,sp,16
   28460:	003e2606 	br	27cfc <__alt_data_end+0xfffe88fc>
   28464:	d9002c17 	ldw	r4,176(sp)
   28468:	d9801e04 	addi	r6,sp,120
   2846c:	b80b883a 	mov	r5,r23
   28470:	002e9240 	call	2e924 <__sprint_r>
   28474:	103e5d26 	beq	r2,zero,27dec <__alt_data_end+0xfffe89ec>
   28478:	003cad06 	br	27730 <__alt_data_end+0xfffe8330>
   2847c:	d9002c17 	ldw	r4,176(sp)
   28480:	d9801e04 	addi	r6,sp,120
   28484:	b80b883a 	mov	r5,r23
   28488:	002e9240 	call	2e924 <__sprint_r>
   2848c:	103ca81e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28490:	d8c02017 	ldw	r3,128(sp)
   28494:	da000404 	addi	r8,sp,16
   28498:	003e0b06 	br	27cc8 <__alt_data_end+0xfffe88c8>
   2849c:	d9002c17 	ldw	r4,176(sp)
   284a0:	d9801e04 	addi	r6,sp,120
   284a4:	b80b883a 	mov	r5,r23
   284a8:	002e9240 	call	2e924 <__sprint_r>
   284ac:	103ca01e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   284b0:	d8c02017 	ldw	r3,128(sp)
   284b4:	da000404 	addi	r8,sp,16
   284b8:	003dbd06 	br	27bb0 <__alt_data_end+0xfffe87b0>
   284bc:	d9002c17 	ldw	r4,176(sp)
   284c0:	d9801e04 	addi	r6,sp,120
   284c4:	b80b883a 	mov	r5,r23
   284c8:	002e9240 	call	2e924 <__sprint_r>
   284cc:	103c981e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   284d0:	d8c02017 	ldw	r3,128(sp)
   284d4:	da000404 	addi	r8,sp,16
   284d8:	003dc306 	br	27be8 <__alt_data_end+0xfffe87e8>
   284dc:	d8802917 	ldw	r2,164(sp)
   284e0:	d8002785 	stb	zero,158(sp)
   284e4:	103f0616 	blt	r2,zero,28100 <__alt_data_end+0xfffe8d00>
   284e8:	00ffdfc4 	movi	r3,-129
   284ec:	9d84b03a 	or	r2,r19,r22
   284f0:	90e4703a 	and	r18,r18,r3
   284f4:	103c6b26 	beq	r2,zero,276a4 <__alt_data_end+0xfffe82a4>
   284f8:	0039883a 	mov	fp,zero
   284fc:	003e7406 	br	27ed0 <__alt_data_end+0xfffe8ad0>
   28500:	9080040c 	andi	r2,r18,16
   28504:	1001b326 	beq	r2,zero,28bd4 <___vfprintf_internal_r+0x18ac>
   28508:	d9002d17 	ldw	r4,180(sp)
   2850c:	d9402917 	ldw	r5,164(sp)
   28510:	d8002785 	stb	zero,158(sp)
   28514:	20800104 	addi	r2,r4,4
   28518:	24c00017 	ldw	r19,0(r4)
   2851c:	002d883a 	mov	r22,zero
   28520:	2801b516 	blt	r5,zero,28bf8 <___vfprintf_internal_r+0x18d0>
   28524:	00ffdfc4 	movi	r3,-129
   28528:	d8802d15 	stw	r2,180(sp)
   2852c:	90e4703a 	and	r18,r18,r3
   28530:	983d2726 	beq	r19,zero,279d0 <__alt_data_end+0xfffe85d0>
   28534:	0039883a 	mov	fp,zero
   28538:	003d2a06 	br	279e4 <__alt_data_end+0xfffe85e4>
   2853c:	dc402617 	ldw	r17,152(sp)
   28540:	0441d30e 	bge	zero,r17,28c90 <___vfprintf_internal_r+0x1968>
   28544:	dc403217 	ldw	r17,200(sp)
   28548:	d8803317 	ldw	r2,204(sp)
   2854c:	1440010e 	bge	r2,r17,28554 <___vfprintf_internal_r+0x122c>
   28550:	1023883a 	mov	r17,r2
   28554:	04400a0e 	bge	zero,r17,28580 <___vfprintf_internal_r+0x1258>
   28558:	d8801f17 	ldw	r2,124(sp)
   2855c:	1c47883a 	add	r3,r3,r17
   28560:	44000015 	stw	r16,0(r8)
   28564:	10800044 	addi	r2,r2,1
   28568:	44400115 	stw	r17,4(r8)
   2856c:	d8c02015 	stw	r3,128(sp)
   28570:	d8801f15 	stw	r2,124(sp)
   28574:	010001c4 	movi	r4,7
   28578:	20826516 	blt	r4,r2,28f10 <___vfprintf_internal_r+0x1be8>
   2857c:	42000204 	addi	r8,r8,8
   28580:	88026116 	blt	r17,zero,28f08 <___vfprintf_internal_r+0x1be0>
   28584:	d9003217 	ldw	r4,200(sp)
   28588:	2463c83a 	sub	r17,r4,r17
   2858c:	04407b0e 	bge	zero,r17,2877c <___vfprintf_internal_r+0x1454>
   28590:	05800404 	movi	r22,16
   28594:	d8801f17 	ldw	r2,124(sp)
   28598:	b4419d0e 	bge	r22,r17,28c10 <___vfprintf_internal_r+0x18e8>
   2859c:	010000f4 	movhi	r4,3
   285a0:	21121084 	addi	r4,r4,18498
   285a4:	d9002b15 	stw	r4,172(sp)
   285a8:	070001c4 	movi	fp,7
   285ac:	dcc02c17 	ldw	r19,176(sp)
   285b0:	00000306 	br	285c0 <___vfprintf_internal_r+0x1298>
   285b4:	42000204 	addi	r8,r8,8
   285b8:	8c7ffc04 	addi	r17,r17,-16
   285bc:	b441970e 	bge	r22,r17,28c1c <___vfprintf_internal_r+0x18f4>
   285c0:	18c00404 	addi	r3,r3,16
   285c4:	10800044 	addi	r2,r2,1
   285c8:	45000015 	stw	r20,0(r8)
   285cc:	45800115 	stw	r22,4(r8)
   285d0:	d8c02015 	stw	r3,128(sp)
   285d4:	d8801f15 	stw	r2,124(sp)
   285d8:	e0bff60e 	bge	fp,r2,285b4 <__alt_data_end+0xfffe91b4>
   285dc:	d9801e04 	addi	r6,sp,120
   285e0:	b80b883a 	mov	r5,r23
   285e4:	9809883a 	mov	r4,r19
   285e8:	002e9240 	call	2e924 <__sprint_r>
   285ec:	103c501e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   285f0:	d8c02017 	ldw	r3,128(sp)
   285f4:	d8801f17 	ldw	r2,124(sp)
   285f8:	da000404 	addi	r8,sp,16
   285fc:	003fee06 	br	285b8 <__alt_data_end+0xfffe91b8>
   28600:	d9002c17 	ldw	r4,176(sp)
   28604:	d9801e04 	addi	r6,sp,120
   28608:	b80b883a 	mov	r5,r23
   2860c:	002e9240 	call	2e924 <__sprint_r>
   28610:	103c471e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28614:	d8c02017 	ldw	r3,128(sp)
   28618:	df002787 	ldb	fp,158(sp)
   2861c:	da000404 	addi	r8,sp,16
   28620:	003d5606 	br	27b7c <__alt_data_end+0xfffe877c>
   28624:	9080040c 	andi	r2,r18,16
   28628:	10016126 	beq	r2,zero,28bb0 <___vfprintf_internal_r+0x1888>
   2862c:	d8802d17 	ldw	r2,180(sp)
   28630:	14c00017 	ldw	r19,0(r2)
   28634:	10800104 	addi	r2,r2,4
   28638:	d8802d15 	stw	r2,180(sp)
   2863c:	982dd7fa 	srai	r22,r19,31
   28640:	b005883a 	mov	r2,r22
   28644:	003c8206 	br	27850 <__alt_data_end+0xfffe8450>
   28648:	9080040c 	andi	r2,r18,16
   2864c:	10003526 	beq	r2,zero,28724 <___vfprintf_internal_r+0x13fc>
   28650:	d9402d17 	ldw	r5,180(sp)
   28654:	d8c02917 	ldw	r3,164(sp)
   28658:	d8002785 	stb	zero,158(sp)
   2865c:	28800104 	addi	r2,r5,4
   28660:	2cc00017 	ldw	r19,0(r5)
   28664:	002d883a 	mov	r22,zero
   28668:	18003716 	blt	r3,zero,28748 <___vfprintf_internal_r+0x1420>
   2866c:	00ffdfc4 	movi	r3,-129
   28670:	d8802d15 	stw	r2,180(sp)
   28674:	90e4703a 	and	r18,r18,r3
   28678:	0039883a 	mov	fp,zero
   2867c:	983df326 	beq	r19,zero,27e4c <__alt_data_end+0xfffe8a4c>
   28680:	00800244 	movi	r2,9
   28684:	14fc7b36 	bltu	r2,r19,27874 <__alt_data_end+0xfffe8474>
   28688:	d8c02817 	ldw	r3,160(sp)
   2868c:	dc001dc4 	addi	r16,sp,119
   28690:	9cc00c04 	addi	r19,r19,48
   28694:	1c07c83a 	sub	r3,r3,r16
   28698:	dcc01dc5 	stb	r19,119(sp)
   2869c:	d8c02e15 	stw	r3,184(sp)
   286a0:	003ce806 	br	27a44 <__alt_data_end+0xfffe8644>
   286a4:	d8803317 	ldw	r2,204(sp)
   286a8:	143fffc4 	addi	r16,r2,-1
   286ac:	043f4d0e 	bge	zero,r16,283e4 <__alt_data_end+0xfffe8fe4>
   286b0:	07000404 	movi	fp,16
   286b4:	e400810e 	bge	fp,r16,288bc <___vfprintf_internal_r+0x1594>
   286b8:	014000f4 	movhi	r5,3
   286bc:	29521084 	addi	r5,r5,18498
   286c0:	d9402b15 	stw	r5,172(sp)
   286c4:	01c001c4 	movi	r7,7
   286c8:	dcc02c17 	ldw	r19,176(sp)
   286cc:	00000306 	br	286dc <___vfprintf_internal_r+0x13b4>
   286d0:	b5800204 	addi	r22,r22,8
   286d4:	843ffc04 	addi	r16,r16,-16
   286d8:	e4007b0e 	bge	fp,r16,288c8 <___vfprintf_internal_r+0x15a0>
   286dc:	18c00404 	addi	r3,r3,16
   286e0:	8c400044 	addi	r17,r17,1
   286e4:	b5000015 	stw	r20,0(r22)
   286e8:	b7000115 	stw	fp,4(r22)
   286ec:	d8c02015 	stw	r3,128(sp)
   286f0:	dc401f15 	stw	r17,124(sp)
   286f4:	3c7ff60e 	bge	r7,r17,286d0 <__alt_data_end+0xfffe92d0>
   286f8:	d9801e04 	addi	r6,sp,120
   286fc:	b80b883a 	mov	r5,r23
   28700:	9809883a 	mov	r4,r19
   28704:	d9c03c15 	stw	r7,240(sp)
   28708:	002e9240 	call	2e924 <__sprint_r>
   2870c:	d9c03c17 	ldw	r7,240(sp)
   28710:	103c071e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28714:	d8c02017 	ldw	r3,128(sp)
   28718:	dc401f17 	ldw	r17,124(sp)
   2871c:	dd800404 	addi	r22,sp,16
   28720:	003fec06 	br	286d4 <__alt_data_end+0xfffe92d4>
   28724:	9080100c 	andi	r2,r18,64
   28728:	d8002785 	stb	zero,158(sp)
   2872c:	10010e26 	beq	r2,zero,28b68 <___vfprintf_internal_r+0x1840>
   28730:	d9002d17 	ldw	r4,180(sp)
   28734:	d9402917 	ldw	r5,164(sp)
   28738:	002d883a 	mov	r22,zero
   2873c:	20800104 	addi	r2,r4,4
   28740:	24c0000b 	ldhu	r19,0(r4)
   28744:	283fc90e 	bge	r5,zero,2866c <__alt_data_end+0xfffe926c>
   28748:	d8802d15 	stw	r2,180(sp)
   2874c:	0039883a 	mov	fp,zero
   28750:	9d84b03a 	or	r2,r19,r22
   28754:	103c461e 	bne	r2,zero,27870 <__alt_data_end+0xfffe8470>
   28758:	00800044 	movi	r2,1
   2875c:	003e6c06 	br	28110 <__alt_data_end+0xfffe8d10>
   28760:	d9002c17 	ldw	r4,176(sp)
   28764:	d9801e04 	addi	r6,sp,120
   28768:	b80b883a 	mov	r5,r23
   2876c:	002e9240 	call	2e924 <__sprint_r>
   28770:	103bef1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28774:	d8c02017 	ldw	r3,128(sp)
   28778:	da000404 	addi	r8,sp,16
   2877c:	d9003217 	ldw	r4,200(sp)
   28780:	d8802617 	ldw	r2,152(sp)
   28784:	d9403317 	ldw	r5,204(sp)
   28788:	8123883a 	add	r17,r16,r4
   2878c:	11400216 	blt	r2,r5,28798 <___vfprintf_internal_r+0x1470>
   28790:	9100004c 	andi	r4,r18,1
   28794:	20000d26 	beq	r4,zero,287cc <___vfprintf_internal_r+0x14a4>
   28798:	d9003717 	ldw	r4,220(sp)
   2879c:	d9403417 	ldw	r5,208(sp)
   287a0:	1907883a 	add	r3,r3,r4
   287a4:	d9001f17 	ldw	r4,124(sp)
   287a8:	41400015 	stw	r5,0(r8)
   287ac:	d9403717 	ldw	r5,220(sp)
   287b0:	21000044 	addi	r4,r4,1
   287b4:	d8c02015 	stw	r3,128(sp)
   287b8:	41400115 	stw	r5,4(r8)
   287bc:	d9001f15 	stw	r4,124(sp)
   287c0:	014001c4 	movi	r5,7
   287c4:	2901e816 	blt	r5,r4,28f68 <___vfprintf_internal_r+0x1c40>
   287c8:	42000204 	addi	r8,r8,8
   287cc:	d9003317 	ldw	r4,204(sp)
   287d0:	8121883a 	add	r16,r16,r4
   287d4:	2085c83a 	sub	r2,r4,r2
   287d8:	8461c83a 	sub	r16,r16,r17
   287dc:	1400010e 	bge	r2,r16,287e4 <___vfprintf_internal_r+0x14bc>
   287e0:	1021883a 	mov	r16,r2
   287e4:	04000a0e 	bge	zero,r16,28810 <___vfprintf_internal_r+0x14e8>
   287e8:	d9001f17 	ldw	r4,124(sp)
   287ec:	1c07883a 	add	r3,r3,r16
   287f0:	44400015 	stw	r17,0(r8)
   287f4:	21000044 	addi	r4,r4,1
   287f8:	44000115 	stw	r16,4(r8)
   287fc:	d8c02015 	stw	r3,128(sp)
   28800:	d9001f15 	stw	r4,124(sp)
   28804:	014001c4 	movi	r5,7
   28808:	2901fb16 	blt	r5,r4,28ff8 <___vfprintf_internal_r+0x1cd0>
   2880c:	42000204 	addi	r8,r8,8
   28810:	8001f716 	blt	r16,zero,28ff0 <___vfprintf_internal_r+0x1cc8>
   28814:	1421c83a 	sub	r16,r2,r16
   28818:	043d380e 	bge	zero,r16,27cfc <__alt_data_end+0xfffe88fc>
   2881c:	04400404 	movi	r17,16
   28820:	d8801f17 	ldw	r2,124(sp)
   28824:	8c3efb0e 	bge	r17,r16,28414 <__alt_data_end+0xfffe9014>
   28828:	014000f4 	movhi	r5,3
   2882c:	29521084 	addi	r5,r5,18498
   28830:	d9402b15 	stw	r5,172(sp)
   28834:	058001c4 	movi	r22,7
   28838:	dcc02c17 	ldw	r19,176(sp)
   2883c:	00000306 	br	2884c <___vfprintf_internal_r+0x1524>
   28840:	42000204 	addi	r8,r8,8
   28844:	843ffc04 	addi	r16,r16,-16
   28848:	8c3ef50e 	bge	r17,r16,28420 <__alt_data_end+0xfffe9020>
   2884c:	18c00404 	addi	r3,r3,16
   28850:	10800044 	addi	r2,r2,1
   28854:	45000015 	stw	r20,0(r8)
   28858:	44400115 	stw	r17,4(r8)
   2885c:	d8c02015 	stw	r3,128(sp)
   28860:	d8801f15 	stw	r2,124(sp)
   28864:	b0bff60e 	bge	r22,r2,28840 <__alt_data_end+0xfffe9440>
   28868:	d9801e04 	addi	r6,sp,120
   2886c:	b80b883a 	mov	r5,r23
   28870:	9809883a 	mov	r4,r19
   28874:	002e9240 	call	2e924 <__sprint_r>
   28878:	103bad1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   2887c:	d8c02017 	ldw	r3,128(sp)
   28880:	d8801f17 	ldw	r2,124(sp)
   28884:	da000404 	addi	r8,sp,16
   28888:	003fee06 	br	28844 <__alt_data_end+0xfffe9444>
   2888c:	9088703a 	and	r4,r18,r2
   28890:	203eab1e 	bne	r4,zero,28340 <__alt_data_end+0xfffe8f40>
   28894:	dc401f17 	ldw	r17,124(sp)
   28898:	40800115 	stw	r2,4(r8)
   2889c:	44000015 	stw	r16,0(r8)
   288a0:	8c400044 	addi	r17,r17,1
   288a4:	d8c02015 	stw	r3,128(sp)
   288a8:	dc401f15 	stw	r17,124(sp)
   288ac:	008001c4 	movi	r2,7
   288b0:	14400e16 	blt	r2,r17,288ec <___vfprintf_internal_r+0x15c4>
   288b4:	45800204 	addi	r22,r8,8
   288b8:	003eca06 	br	283e4 <__alt_data_end+0xfffe8fe4>
   288bc:	010000f4 	movhi	r4,3
   288c0:	21121084 	addi	r4,r4,18498
   288c4:	d9002b15 	stw	r4,172(sp)
   288c8:	d8802b17 	ldw	r2,172(sp)
   288cc:	1c07883a 	add	r3,r3,r16
   288d0:	8c400044 	addi	r17,r17,1
   288d4:	b0800015 	stw	r2,0(r22)
   288d8:	b4000115 	stw	r16,4(r22)
   288dc:	d8c02015 	stw	r3,128(sp)
   288e0:	dc401f15 	stw	r17,124(sp)
   288e4:	008001c4 	movi	r2,7
   288e8:	147ebd0e 	bge	r2,r17,283e0 <__alt_data_end+0xfffe8fe0>
   288ec:	d9002c17 	ldw	r4,176(sp)
   288f0:	d9801e04 	addi	r6,sp,120
   288f4:	b80b883a 	mov	r5,r23
   288f8:	002e9240 	call	2e924 <__sprint_r>
   288fc:	103b8c1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28900:	d8c02017 	ldw	r3,128(sp)
   28904:	dc401f17 	ldw	r17,124(sp)
   28908:	dd800404 	addi	r22,sp,16
   2890c:	003eb506 	br	283e4 <__alt_data_end+0xfffe8fe4>
   28910:	d9002c17 	ldw	r4,176(sp)
   28914:	d9801e04 	addi	r6,sp,120
   28918:	b80b883a 	mov	r5,r23
   2891c:	002e9240 	call	2e924 <__sprint_r>
   28920:	103b831e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28924:	d8c02017 	ldw	r3,128(sp)
   28928:	dc401f17 	ldw	r17,124(sp)
   2892c:	da000404 	addi	r8,sp,16
   28930:	003e8d06 	br	28368 <__alt_data_end+0xfffe8f68>
   28934:	d9002c17 	ldw	r4,176(sp)
   28938:	d9801e04 	addi	r6,sp,120
   2893c:	b80b883a 	mov	r5,r23
   28940:	002e9240 	call	2e924 <__sprint_r>
   28944:	103b7a1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28948:	d8c02017 	ldw	r3,128(sp)
   2894c:	dc401f17 	ldw	r17,124(sp)
   28950:	dd800404 	addi	r22,sp,16
   28954:	003e8f06 	br	28394 <__alt_data_end+0xfffe8f94>
   28958:	0027883a 	mov	r19,zero
   2895c:	003f4a06 	br	28688 <__alt_data_end+0xfffe9288>
   28960:	d9002c17 	ldw	r4,176(sp)
   28964:	d9801e04 	addi	r6,sp,120
   28968:	b80b883a 	mov	r5,r23
   2896c:	002e9240 	call	2e924 <__sprint_r>
   28970:	103b6f1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28974:	d8c02017 	ldw	r3,128(sp)
   28978:	da000404 	addi	r8,sp,16
   2897c:	003c9d06 	br	27bf4 <__alt_data_end+0xfffe87f4>
   28980:	04e7c83a 	sub	r19,zero,r19
   28984:	9804c03a 	cmpne	r2,r19,zero
   28988:	05adc83a 	sub	r22,zero,r22
   2898c:	b0adc83a 	sub	r22,r22,r2
   28990:	d8802917 	ldw	r2,164(sp)
   28994:	07000b44 	movi	fp,45
   28998:	df002785 	stb	fp,158(sp)
   2899c:	10017b16 	blt	r2,zero,28f8c <___vfprintf_internal_r+0x1c64>
   289a0:	00bfdfc4 	movi	r2,-129
   289a4:	90a4703a 	and	r18,r18,r2
   289a8:	003bb106 	br	27870 <__alt_data_end+0xfffe8470>
   289ac:	d9003617 	ldw	r4,216(sp)
   289b0:	d9403817 	ldw	r5,224(sp)
   289b4:	da003d15 	stw	r8,244(sp)
   289b8:	002e5480 	call	2e548 <__fpclassifyd>
   289bc:	da003d17 	ldw	r8,244(sp)
   289c0:	1000f026 	beq	r2,zero,28d84 <___vfprintf_internal_r+0x1a5c>
   289c4:	d9002917 	ldw	r4,164(sp)
   289c8:	05bff7c4 	movi	r22,-33
   289cc:	00bfffc4 	movi	r2,-1
   289d0:	8dac703a 	and	r22,r17,r22
   289d4:	20820026 	beq	r4,r2,291d8 <___vfprintf_internal_r+0x1eb0>
   289d8:	008011c4 	movi	r2,71
   289dc:	b081f726 	beq	r22,r2,291bc <___vfprintf_internal_r+0x1e94>
   289e0:	d9003817 	ldw	r4,224(sp)
   289e4:	90c04014 	ori	r3,r18,256
   289e8:	d8c02b15 	stw	r3,172(sp)
   289ec:	20021516 	blt	r4,zero,29244 <___vfprintf_internal_r+0x1f1c>
   289f0:	dcc03817 	ldw	r19,224(sp)
   289f4:	d8002a05 	stb	zero,168(sp)
   289f8:	00801984 	movi	r2,102
   289fc:	8881f926 	beq	r17,r2,291e4 <___vfprintf_internal_r+0x1ebc>
   28a00:	00801184 	movi	r2,70
   28a04:	88821c26 	beq	r17,r2,29278 <___vfprintf_internal_r+0x1f50>
   28a08:	00801144 	movi	r2,69
   28a0c:	b081ef26 	beq	r22,r2,291cc <___vfprintf_internal_r+0x1ea4>
   28a10:	d8c02917 	ldw	r3,164(sp)
   28a14:	d8802104 	addi	r2,sp,132
   28a18:	d8800315 	stw	r2,12(sp)
   28a1c:	d9403617 	ldw	r5,216(sp)
   28a20:	d8802504 	addi	r2,sp,148
   28a24:	d9002c17 	ldw	r4,176(sp)
   28a28:	d8800215 	stw	r2,8(sp)
   28a2c:	d8802604 	addi	r2,sp,152
   28a30:	d8c00015 	stw	r3,0(sp)
   28a34:	d8800115 	stw	r2,4(sp)
   28a38:	01c00084 	movi	r7,2
   28a3c:	980d883a 	mov	r6,r19
   28a40:	d8c03c15 	stw	r3,240(sp)
   28a44:	da003d15 	stw	r8,244(sp)
   28a48:	002994c0 	call	2994c <_dtoa_r>
   28a4c:	1021883a 	mov	r16,r2
   28a50:	008019c4 	movi	r2,103
   28a54:	d8c03c17 	ldw	r3,240(sp)
   28a58:	da003d17 	ldw	r8,244(sp)
   28a5c:	88817126 	beq	r17,r2,29024 <___vfprintf_internal_r+0x1cfc>
   28a60:	008011c4 	movi	r2,71
   28a64:	88829226 	beq	r17,r2,294b0 <___vfprintf_internal_r+0x2188>
   28a68:	80f9883a 	add	fp,r16,r3
   28a6c:	d9003617 	ldw	r4,216(sp)
   28a70:	000d883a 	mov	r6,zero
   28a74:	000f883a 	mov	r7,zero
   28a78:	980b883a 	mov	r5,r19
   28a7c:	da003d15 	stw	r8,244(sp)
   28a80:	00312540 	call	31254 <__eqdf2>
   28a84:	da003d17 	ldw	r8,244(sp)
   28a88:	10018d26 	beq	r2,zero,290c0 <___vfprintf_internal_r+0x1d98>
   28a8c:	d8802117 	ldw	r2,132(sp)
   28a90:	1700062e 	bgeu	r2,fp,28aac <___vfprintf_internal_r+0x1784>
   28a94:	01000c04 	movi	r4,48
   28a98:	10c00044 	addi	r3,r2,1
   28a9c:	d8c02115 	stw	r3,132(sp)
   28aa0:	11000005 	stb	r4,0(r2)
   28aa4:	d8802117 	ldw	r2,132(sp)
   28aa8:	173ffb36 	bltu	r2,fp,28a98 <__alt_data_end+0xfffe9698>
   28aac:	1405c83a 	sub	r2,r2,r16
   28ab0:	d8803315 	stw	r2,204(sp)
   28ab4:	008011c4 	movi	r2,71
   28ab8:	b0817626 	beq	r22,r2,29094 <___vfprintf_internal_r+0x1d6c>
   28abc:	00801944 	movi	r2,101
   28ac0:	1442810e 	bge	r2,r17,294c8 <___vfprintf_internal_r+0x21a0>
   28ac4:	d8c02617 	ldw	r3,152(sp)
   28ac8:	00801984 	movi	r2,102
   28acc:	d8c03215 	stw	r3,200(sp)
   28ad0:	8881fe26 	beq	r17,r2,292cc <___vfprintf_internal_r+0x1fa4>
   28ad4:	d8c03217 	ldw	r3,200(sp)
   28ad8:	d9003317 	ldw	r4,204(sp)
   28adc:	1901dd16 	blt	r3,r4,29254 <___vfprintf_internal_r+0x1f2c>
   28ae0:	9480004c 	andi	r18,r18,1
   28ae4:	90022b1e 	bne	r18,zero,29394 <___vfprintf_internal_r+0x206c>
   28ae8:	1805883a 	mov	r2,r3
   28aec:	18028016 	blt	r3,zero,294f0 <___vfprintf_internal_r+0x21c8>
   28af0:	d8c03217 	ldw	r3,200(sp)
   28af4:	044019c4 	movi	r17,103
   28af8:	d8c02e15 	stw	r3,184(sp)
   28afc:	df002a07 	ldb	fp,168(sp)
   28b00:	e001531e 	bne	fp,zero,29050 <___vfprintf_internal_r+0x1d28>
   28b04:	df002783 	ldbu	fp,158(sp)
   28b08:	d8802a15 	stw	r2,168(sp)
   28b0c:	dc802b17 	ldw	r18,172(sp)
   28b10:	d8002915 	stw	zero,164(sp)
   28b14:	003bd106 	br	27a5c <__alt_data_end+0xfffe865c>
   28b18:	d8802d17 	ldw	r2,180(sp)
   28b1c:	d8c02d17 	ldw	r3,180(sp)
   28b20:	d9002d17 	ldw	r4,180(sp)
   28b24:	10800017 	ldw	r2,0(r2)
   28b28:	18c00117 	ldw	r3,4(r3)
   28b2c:	21000204 	addi	r4,r4,8
   28b30:	d8803615 	stw	r2,216(sp)
   28b34:	d8c03815 	stw	r3,224(sp)
   28b38:	d9002d15 	stw	r4,180(sp)
   28b3c:	003b7506 	br	27914 <__alt_data_end+0xfffe8514>
   28b40:	ac400007 	ldb	r17,0(r21)
   28b44:	003a5906 	br	274ac <__alt_data_end+0xfffe80ac>
   28b48:	9080100c 	andi	r2,r18,64
   28b4c:	1000a826 	beq	r2,zero,28df0 <___vfprintf_internal_r+0x1ac8>
   28b50:	d9002d17 	ldw	r4,180(sp)
   28b54:	002d883a 	mov	r22,zero
   28b58:	24c0000b 	ldhu	r19,0(r4)
   28b5c:	21000104 	addi	r4,r4,4
   28b60:	d9002d15 	stw	r4,180(sp)
   28b64:	003ccb06 	br	27e94 <__alt_data_end+0xfffe8a94>
   28b68:	d8c02d17 	ldw	r3,180(sp)
   28b6c:	d9002917 	ldw	r4,164(sp)
   28b70:	002d883a 	mov	r22,zero
   28b74:	18800104 	addi	r2,r3,4
   28b78:	1cc00017 	ldw	r19,0(r3)
   28b7c:	203ebb0e 	bge	r4,zero,2866c <__alt_data_end+0xfffe926c>
   28b80:	003ef106 	br	28748 <__alt_data_end+0xfffe9348>
   28b84:	9080040c 	andi	r2,r18,16
   28b88:	1000921e 	bne	r2,zero,28dd4 <___vfprintf_internal_r+0x1aac>
   28b8c:	9480100c 	andi	r18,r18,64
   28b90:	90013926 	beq	r18,zero,29078 <___vfprintf_internal_r+0x1d50>
   28b94:	d9002d17 	ldw	r4,180(sp)
   28b98:	d9402f17 	ldw	r5,188(sp)
   28b9c:	20800017 	ldw	r2,0(r4)
   28ba0:	21000104 	addi	r4,r4,4
   28ba4:	d9002d15 	stw	r4,180(sp)
   28ba8:	1140000d 	sth	r5,0(r2)
   28bac:	003a1606 	br	27408 <__alt_data_end+0xfffe8008>
   28bb0:	9080100c 	andi	r2,r18,64
   28bb4:	10008026 	beq	r2,zero,28db8 <___vfprintf_internal_r+0x1a90>
   28bb8:	d8c02d17 	ldw	r3,180(sp)
   28bbc:	1cc0000f 	ldh	r19,0(r3)
   28bc0:	18c00104 	addi	r3,r3,4
   28bc4:	d8c02d15 	stw	r3,180(sp)
   28bc8:	982dd7fa 	srai	r22,r19,31
   28bcc:	b005883a 	mov	r2,r22
   28bd0:	003b1f06 	br	27850 <__alt_data_end+0xfffe8450>
   28bd4:	9080100c 	andi	r2,r18,64
   28bd8:	d8002785 	stb	zero,158(sp)
   28bdc:	10008a1e 	bne	r2,zero,28e08 <___vfprintf_internal_r+0x1ae0>
   28be0:	d9402d17 	ldw	r5,180(sp)
   28be4:	d8c02917 	ldw	r3,164(sp)
   28be8:	002d883a 	mov	r22,zero
   28bec:	28800104 	addi	r2,r5,4
   28bf0:	2cc00017 	ldw	r19,0(r5)
   28bf4:	183e4b0e 	bge	r3,zero,28524 <__alt_data_end+0xfffe9124>
   28bf8:	9d86b03a 	or	r3,r19,r22
   28bfc:	d8802d15 	stw	r2,180(sp)
   28c00:	183e4c1e 	bne	r3,zero,28534 <__alt_data_end+0xfffe9134>
   28c04:	0039883a 	mov	fp,zero
   28c08:	0005883a 	mov	r2,zero
   28c0c:	003d4006 	br	28110 <__alt_data_end+0xfffe8d10>
   28c10:	014000f4 	movhi	r5,3
   28c14:	29521084 	addi	r5,r5,18498
   28c18:	d9402b15 	stw	r5,172(sp)
   28c1c:	d9402b17 	ldw	r5,172(sp)
   28c20:	1c47883a 	add	r3,r3,r17
   28c24:	10800044 	addi	r2,r2,1
   28c28:	41400015 	stw	r5,0(r8)
   28c2c:	44400115 	stw	r17,4(r8)
   28c30:	d8c02015 	stw	r3,128(sp)
   28c34:	d8801f15 	stw	r2,124(sp)
   28c38:	010001c4 	movi	r4,7
   28c3c:	20bec816 	blt	r4,r2,28760 <__alt_data_end+0xfffe9360>
   28c40:	42000204 	addi	r8,r8,8
   28c44:	003ecd06 	br	2877c <__alt_data_end+0xfffe937c>
   28c48:	d9002917 	ldw	r4,164(sp)
   28c4c:	d8002785 	stb	zero,158(sp)
   28c50:	203d2d16 	blt	r4,zero,28108 <__alt_data_end+0xfffe8d08>
   28c54:	00bfdfc4 	movi	r2,-129
   28c58:	90a4703a 	and	r18,r18,r2
   28c5c:	003a9106 	br	276a4 <__alt_data_end+0xfffe82a4>
   28c60:	010000f4 	movhi	r4,3
   28c64:	21121084 	addi	r4,r4,18498
   28c68:	d9002b15 	stw	r4,172(sp)
   28c6c:	003c0c06 	br	27ca0 <__alt_data_end+0xfffe88a0>
   28c70:	d9002c17 	ldw	r4,176(sp)
   28c74:	d9801e04 	addi	r6,sp,120
   28c78:	b80b883a 	mov	r5,r23
   28c7c:	002e9240 	call	2e924 <__sprint_r>
   28c80:	103aab1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28c84:	d8c02017 	ldw	r3,128(sp)
   28c88:	da000404 	addi	r8,sp,16
   28c8c:	003d4106 	br	28194 <__alt_data_end+0xfffe8d94>
   28c90:	d8801f17 	ldw	r2,124(sp)
   28c94:	014000f4 	movhi	r5,3
   28c98:	01000044 	movi	r4,1
   28c9c:	18c00044 	addi	r3,r3,1
   28ca0:	10800044 	addi	r2,r2,1
   28ca4:	29521004 	addi	r5,r5,18496
   28ca8:	41000115 	stw	r4,4(r8)
   28cac:	41400015 	stw	r5,0(r8)
   28cb0:	d8c02015 	stw	r3,128(sp)
   28cb4:	d8801f15 	stw	r2,124(sp)
   28cb8:	010001c4 	movi	r4,7
   28cbc:	20805c16 	blt	r4,r2,28e30 <___vfprintf_internal_r+0x1b08>
   28cc0:	42000204 	addi	r8,r8,8
   28cc4:	8800041e 	bne	r17,zero,28cd8 <___vfprintf_internal_r+0x19b0>
   28cc8:	d8803317 	ldw	r2,204(sp)
   28ccc:	1000021e 	bne	r2,zero,28cd8 <___vfprintf_internal_r+0x19b0>
   28cd0:	9080004c 	andi	r2,r18,1
   28cd4:	103c0926 	beq	r2,zero,27cfc <__alt_data_end+0xfffe88fc>
   28cd8:	d9003717 	ldw	r4,220(sp)
   28cdc:	d8801f17 	ldw	r2,124(sp)
   28ce0:	d9403417 	ldw	r5,208(sp)
   28ce4:	20c7883a 	add	r3,r4,r3
   28ce8:	10800044 	addi	r2,r2,1
   28cec:	41000115 	stw	r4,4(r8)
   28cf0:	41400015 	stw	r5,0(r8)
   28cf4:	d8c02015 	stw	r3,128(sp)
   28cf8:	d8801f15 	stw	r2,124(sp)
   28cfc:	010001c4 	movi	r4,7
   28d00:	20812116 	blt	r4,r2,29188 <___vfprintf_internal_r+0x1e60>
   28d04:	42000204 	addi	r8,r8,8
   28d08:	0463c83a 	sub	r17,zero,r17
   28d0c:	0440730e 	bge	zero,r17,28edc <___vfprintf_internal_r+0x1bb4>
   28d10:	05800404 	movi	r22,16
   28d14:	b440860e 	bge	r22,r17,28f30 <___vfprintf_internal_r+0x1c08>
   28d18:	014000f4 	movhi	r5,3
   28d1c:	29521084 	addi	r5,r5,18498
   28d20:	d9402b15 	stw	r5,172(sp)
   28d24:	070001c4 	movi	fp,7
   28d28:	dcc02c17 	ldw	r19,176(sp)
   28d2c:	00000306 	br	28d3c <___vfprintf_internal_r+0x1a14>
   28d30:	42000204 	addi	r8,r8,8
   28d34:	8c7ffc04 	addi	r17,r17,-16
   28d38:	b440800e 	bge	r22,r17,28f3c <___vfprintf_internal_r+0x1c14>
   28d3c:	18c00404 	addi	r3,r3,16
   28d40:	10800044 	addi	r2,r2,1
   28d44:	45000015 	stw	r20,0(r8)
   28d48:	45800115 	stw	r22,4(r8)
   28d4c:	d8c02015 	stw	r3,128(sp)
   28d50:	d8801f15 	stw	r2,124(sp)
   28d54:	e0bff60e 	bge	fp,r2,28d30 <__alt_data_end+0xfffe9930>
   28d58:	d9801e04 	addi	r6,sp,120
   28d5c:	b80b883a 	mov	r5,r23
   28d60:	9809883a 	mov	r4,r19
   28d64:	002e9240 	call	2e924 <__sprint_r>
   28d68:	103a711e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28d6c:	d8c02017 	ldw	r3,128(sp)
   28d70:	d8801f17 	ldw	r2,124(sp)
   28d74:	da000404 	addi	r8,sp,16
   28d78:	003fee06 	br	28d34 <__alt_data_end+0xfffe9934>
   28d7c:	00bfffc4 	movi	r2,-1
   28d80:	003a6f06 	br	27740 <__alt_data_end+0xfffe8340>
   28d84:	008011c4 	movi	r2,71
   28d88:	1440b816 	blt	r2,r17,2906c <___vfprintf_internal_r+0x1d44>
   28d8c:	040000f4 	movhi	r16,3
   28d90:	84120204 	addi	r16,r16,18440
   28d94:	00c000c4 	movi	r3,3
   28d98:	00bfdfc4 	movi	r2,-129
   28d9c:	d8c02a15 	stw	r3,168(sp)
   28da0:	90a4703a 	and	r18,r18,r2
   28da4:	df002783 	ldbu	fp,158(sp)
   28da8:	d8c02e15 	stw	r3,184(sp)
   28dac:	d8002915 	stw	zero,164(sp)
   28db0:	d8003215 	stw	zero,200(sp)
   28db4:	003b2906 	br	27a5c <__alt_data_end+0xfffe865c>
   28db8:	d9002d17 	ldw	r4,180(sp)
   28dbc:	24c00017 	ldw	r19,0(r4)
   28dc0:	21000104 	addi	r4,r4,4
   28dc4:	d9002d15 	stw	r4,180(sp)
   28dc8:	982dd7fa 	srai	r22,r19,31
   28dcc:	b005883a 	mov	r2,r22
   28dd0:	003a9f06 	br	27850 <__alt_data_end+0xfffe8450>
   28dd4:	d9402d17 	ldw	r5,180(sp)
   28dd8:	d8c02f17 	ldw	r3,188(sp)
   28ddc:	28800017 	ldw	r2,0(r5)
   28de0:	29400104 	addi	r5,r5,4
   28de4:	d9402d15 	stw	r5,180(sp)
   28de8:	10c00015 	stw	r3,0(r2)
   28dec:	00398606 	br	27408 <__alt_data_end+0xfffe8008>
   28df0:	d9402d17 	ldw	r5,180(sp)
   28df4:	002d883a 	mov	r22,zero
   28df8:	2cc00017 	ldw	r19,0(r5)
   28dfc:	29400104 	addi	r5,r5,4
   28e00:	d9402d15 	stw	r5,180(sp)
   28e04:	003c2306 	br	27e94 <__alt_data_end+0xfffe8a94>
   28e08:	d8c02d17 	ldw	r3,180(sp)
   28e0c:	d9002917 	ldw	r4,164(sp)
   28e10:	002d883a 	mov	r22,zero
   28e14:	18800104 	addi	r2,r3,4
   28e18:	1cc0000b 	ldhu	r19,0(r3)
   28e1c:	203dc10e 	bge	r4,zero,28524 <__alt_data_end+0xfffe9124>
   28e20:	003f7506 	br	28bf8 <__alt_data_end+0xfffe97f8>
   28e24:	040000f4 	movhi	r16,3
   28e28:	84120004 	addi	r16,r16,18432
   28e2c:	003acc06 	br	27960 <__alt_data_end+0xfffe8560>
   28e30:	d9002c17 	ldw	r4,176(sp)
   28e34:	d9801e04 	addi	r6,sp,120
   28e38:	b80b883a 	mov	r5,r23
   28e3c:	002e9240 	call	2e924 <__sprint_r>
   28e40:	103a3b1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28e44:	dc402617 	ldw	r17,152(sp)
   28e48:	d8c02017 	ldw	r3,128(sp)
   28e4c:	da000404 	addi	r8,sp,16
   28e50:	003f9c06 	br	28cc4 <__alt_data_end+0xfffe98c4>
   28e54:	ac400043 	ldbu	r17,1(r21)
   28e58:	94800814 	ori	r18,r18,32
   28e5c:	ad400044 	addi	r21,r21,1
   28e60:	8c403fcc 	andi	r17,r17,255
   28e64:	8c40201c 	xori	r17,r17,128
   28e68:	8c7fe004 	addi	r17,r17,-128
   28e6c:	00398f06 	br	274ac <__alt_data_end+0xfffe80ac>
   28e70:	d8c02d15 	stw	r3,180(sp)
   28e74:	0039883a 	mov	fp,zero
   28e78:	003e3506 	br	28750 <__alt_data_end+0xfffe9350>
   28e7c:	d9002c17 	ldw	r4,176(sp)
   28e80:	d9801e04 	addi	r6,sp,120
   28e84:	b80b883a 	mov	r5,r23
   28e88:	002e9240 	call	2e924 <__sprint_r>
   28e8c:	103a281e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28e90:	d8c02017 	ldw	r3,128(sp)
   28e94:	da000404 	addi	r8,sp,16
   28e98:	003cd006 	br	281dc <__alt_data_end+0xfffe8ddc>
   28e9c:	8009883a 	mov	r4,r16
   28ea0:	da003d15 	stw	r8,244(sp)
   28ea4:	00272900 	call	27290 <strlen>
   28ea8:	d8802e15 	stw	r2,184(sp)
   28eac:	da003d17 	ldw	r8,244(sp)
   28eb0:	103c340e 	bge	r2,zero,27f84 <__alt_data_end+0xfffe8b84>
   28eb4:	0005883a 	mov	r2,zero
   28eb8:	003c3206 	br	27f84 <__alt_data_end+0xfffe8b84>
   28ebc:	d9002c17 	ldw	r4,176(sp)
   28ec0:	d9801e04 	addi	r6,sp,120
   28ec4:	b80b883a 	mov	r5,r23
   28ec8:	002e9240 	call	2e924 <__sprint_r>
   28ecc:	103a181e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28ed0:	d8c02017 	ldw	r3,128(sp)
   28ed4:	d8801f17 	ldw	r2,124(sp)
   28ed8:	da000404 	addi	r8,sp,16
   28edc:	d9403317 	ldw	r5,204(sp)
   28ee0:	10800044 	addi	r2,r2,1
   28ee4:	44000015 	stw	r16,0(r8)
   28ee8:	28c7883a 	add	r3,r5,r3
   28eec:	003b7d06 	br	27ce4 <__alt_data_end+0xfffe88e4>
   28ef0:	010000f4 	movhi	r4,3
   28ef4:	21121484 	addi	r4,r4,18514
   28ef8:	d9003515 	stw	r4,212(sp)
   28efc:	003b1406 	br	27b50 <__alt_data_end+0xfffe8750>
   28f00:	013fffc4 	movi	r4,-1
   28f04:	003a3506 	br	277dc <__alt_data_end+0xfffe83dc>
   28f08:	0023883a 	mov	r17,zero
   28f0c:	003d9d06 	br	28584 <__alt_data_end+0xfffe9184>
   28f10:	d9002c17 	ldw	r4,176(sp)
   28f14:	d9801e04 	addi	r6,sp,120
   28f18:	b80b883a 	mov	r5,r23
   28f1c:	002e9240 	call	2e924 <__sprint_r>
   28f20:	103a031e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28f24:	d8c02017 	ldw	r3,128(sp)
   28f28:	da000404 	addi	r8,sp,16
   28f2c:	003d9406 	br	28580 <__alt_data_end+0xfffe9180>
   28f30:	010000f4 	movhi	r4,3
   28f34:	21121084 	addi	r4,r4,18498
   28f38:	d9002b15 	stw	r4,172(sp)
   28f3c:	d9002b17 	ldw	r4,172(sp)
   28f40:	1c47883a 	add	r3,r3,r17
   28f44:	10800044 	addi	r2,r2,1
   28f48:	41000015 	stw	r4,0(r8)
   28f4c:	44400115 	stw	r17,4(r8)
   28f50:	d8c02015 	stw	r3,128(sp)
   28f54:	d8801f15 	stw	r2,124(sp)
   28f58:	010001c4 	movi	r4,7
   28f5c:	20bfd716 	blt	r4,r2,28ebc <__alt_data_end+0xfffe9abc>
   28f60:	42000204 	addi	r8,r8,8
   28f64:	003fdd06 	br	28edc <__alt_data_end+0xfffe9adc>
   28f68:	d9002c17 	ldw	r4,176(sp)
   28f6c:	d9801e04 	addi	r6,sp,120
   28f70:	b80b883a 	mov	r5,r23
   28f74:	002e9240 	call	2e924 <__sprint_r>
   28f78:	1039ed1e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   28f7c:	d8802617 	ldw	r2,152(sp)
   28f80:	d8c02017 	ldw	r3,128(sp)
   28f84:	da000404 	addi	r8,sp,16
   28f88:	003e1006 	br	287cc <__alt_data_end+0xfffe93cc>
   28f8c:	00800044 	movi	r2,1
   28f90:	10803fcc 	andi	r2,r2,255
   28f94:	00c00044 	movi	r3,1
   28f98:	10fa3526 	beq	r2,r3,27870 <__alt_data_end+0xfffe8470>
   28f9c:	00c00084 	movi	r3,2
   28fa0:	10fbcb26 	beq	r2,r3,27ed0 <__alt_data_end+0xfffe8ad0>
   28fa4:	003a8f06 	br	279e4 <__alt_data_end+0xfffe85e4>
   28fa8:	010000f4 	movhi	r4,3
   28fac:	21121484 	addi	r4,r4,18514
   28fb0:	d9003515 	stw	r4,212(sp)
   28fb4:	003b7606 	br	27d90 <__alt_data_end+0xfffe8990>
   28fb8:	d8802917 	ldw	r2,164(sp)
   28fbc:	00c00184 	movi	r3,6
   28fc0:	1880012e 	bgeu	r3,r2,28fc8 <___vfprintf_internal_r+0x1ca0>
   28fc4:	1805883a 	mov	r2,r3
   28fc8:	d8802e15 	stw	r2,184(sp)
   28fcc:	1000ef16 	blt	r2,zero,2938c <___vfprintf_internal_r+0x2064>
   28fd0:	040000f4 	movhi	r16,3
   28fd4:	d8802a15 	stw	r2,168(sp)
   28fd8:	dcc02d15 	stw	r19,180(sp)
   28fdc:	d8002915 	stw	zero,164(sp)
   28fe0:	d8003215 	stw	zero,200(sp)
   28fe4:	84120e04 	addi	r16,r16,18488
   28fe8:	0039883a 	mov	fp,zero
   28fec:	003aa206 	br	27a78 <__alt_data_end+0xfffe8678>
   28ff0:	0021883a 	mov	r16,zero
   28ff4:	003e0706 	br	28814 <__alt_data_end+0xfffe9414>
   28ff8:	d9002c17 	ldw	r4,176(sp)
   28ffc:	d9801e04 	addi	r6,sp,120
   29000:	b80b883a 	mov	r5,r23
   29004:	002e9240 	call	2e924 <__sprint_r>
   29008:	1039c91e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   2900c:	d8802617 	ldw	r2,152(sp)
   29010:	d9403317 	ldw	r5,204(sp)
   29014:	d8c02017 	ldw	r3,128(sp)
   29018:	da000404 	addi	r8,sp,16
   2901c:	2885c83a 	sub	r2,r5,r2
   29020:	003dfb06 	br	28810 <__alt_data_end+0xfffe9410>
   29024:	9080004c 	andi	r2,r18,1
   29028:	103e8f1e 	bne	r2,zero,28a68 <__alt_data_end+0xfffe9668>
   2902c:	d8802117 	ldw	r2,132(sp)
   29030:	003e9e06 	br	28aac <__alt_data_end+0xfffe96ac>
   29034:	1025883a 	mov	r18,r2
   29038:	0039883a 	mov	fp,zero
   2903c:	00800084 	movi	r2,2
   29040:	003fd306 	br	28f90 <__alt_data_end+0xfffe9b90>
   29044:	07000b44 	movi	fp,45
   29048:	df002785 	stb	fp,158(sp)
   2904c:	003a4006 	br	27950 <__alt_data_end+0xfffe8550>
   29050:	00c00b44 	movi	r3,45
   29054:	d8c02785 	stb	r3,158(sp)
   29058:	d8802a15 	stw	r2,168(sp)
   2905c:	dc802b17 	ldw	r18,172(sp)
   29060:	d8002915 	stw	zero,164(sp)
   29064:	07000b44 	movi	fp,45
   29068:	003a8006 	br	27a6c <__alt_data_end+0xfffe866c>
   2906c:	040000f4 	movhi	r16,3
   29070:	84120304 	addi	r16,r16,18444
   29074:	003f4706 	br	28d94 <__alt_data_end+0xfffe9994>
   29078:	d8c02d17 	ldw	r3,180(sp)
   2907c:	d9002f17 	ldw	r4,188(sp)
   29080:	18800017 	ldw	r2,0(r3)
   29084:	18c00104 	addi	r3,r3,4
   29088:	d8c02d15 	stw	r3,180(sp)
   2908c:	11000015 	stw	r4,0(r2)
   29090:	0038dd06 	br	27408 <__alt_data_end+0xfffe8008>
   29094:	dd802617 	ldw	r22,152(sp)
   29098:	00bfff44 	movi	r2,-3
   2909c:	b0801c16 	blt	r22,r2,29110 <___vfprintf_internal_r+0x1de8>
   290a0:	d9402917 	ldw	r5,164(sp)
   290a4:	2d801a16 	blt	r5,r22,29110 <___vfprintf_internal_r+0x1de8>
   290a8:	dd803215 	stw	r22,200(sp)
   290ac:	003e8906 	br	28ad4 <__alt_data_end+0xfffe96d4>
   290b0:	010000f4 	movhi	r4,3
   290b4:	21121084 	addi	r4,r4,18498
   290b8:	d9002b15 	stw	r4,172(sp)
   290bc:	003c9106 	br	28304 <__alt_data_end+0xfffe8f04>
   290c0:	e005883a 	mov	r2,fp
   290c4:	003e7906 	br	28aac <__alt_data_end+0xfffe96ac>
   290c8:	d9402917 	ldw	r5,164(sp)
   290cc:	df002783 	ldbu	fp,158(sp)
   290d0:	dcc02d15 	stw	r19,180(sp)
   290d4:	d9402a15 	stw	r5,168(sp)
   290d8:	d9402e15 	stw	r5,184(sp)
   290dc:	d8002915 	stw	zero,164(sp)
   290e0:	d8003215 	stw	zero,200(sp)
   290e4:	003a5d06 	br	27a5c <__alt_data_end+0xfffe865c>
   290e8:	9080004c 	andi	r2,r18,1
   290ec:	0039883a 	mov	fp,zero
   290f0:	10000426 	beq	r2,zero,29104 <___vfprintf_internal_r+0x1ddc>
   290f4:	00800c04 	movi	r2,48
   290f8:	dc001dc4 	addi	r16,sp,119
   290fc:	d8801dc5 	stb	r2,119(sp)
   29100:	003b8006 	br	27f04 <__alt_data_end+0xfffe8b04>
   29104:	d8002e15 	stw	zero,184(sp)
   29108:	dc001e04 	addi	r16,sp,120
   2910c:	003a4d06 	br	27a44 <__alt_data_end+0xfffe8644>
   29110:	8c7fff84 	addi	r17,r17,-2
   29114:	b5bfffc4 	addi	r22,r22,-1
   29118:	dd802615 	stw	r22,152(sp)
   2911c:	dc4022c5 	stb	r17,139(sp)
   29120:	b000bf16 	blt	r22,zero,29420 <___vfprintf_internal_r+0x20f8>
   29124:	00800ac4 	movi	r2,43
   29128:	d8802305 	stb	r2,140(sp)
   2912c:	00800244 	movi	r2,9
   29130:	15807016 	blt	r2,r22,292f4 <___vfprintf_internal_r+0x1fcc>
   29134:	00800c04 	movi	r2,48
   29138:	b5800c04 	addi	r22,r22,48
   2913c:	d8802345 	stb	r2,141(sp)
   29140:	dd802385 	stb	r22,142(sp)
   29144:	d88023c4 	addi	r2,sp,143
   29148:	df0022c4 	addi	fp,sp,139
   2914c:	d8c03317 	ldw	r3,204(sp)
   29150:	1739c83a 	sub	fp,r2,fp
   29154:	d9003317 	ldw	r4,204(sp)
   29158:	e0c7883a 	add	r3,fp,r3
   2915c:	df003a15 	stw	fp,232(sp)
   29160:	d8c02e15 	stw	r3,184(sp)
   29164:	00800044 	movi	r2,1
   29168:	1100b30e 	bge	r2,r4,29438 <___vfprintf_internal_r+0x2110>
   2916c:	d8c02e17 	ldw	r3,184(sp)
   29170:	18c00044 	addi	r3,r3,1
   29174:	d8c02e15 	stw	r3,184(sp)
   29178:	1805883a 	mov	r2,r3
   2917c:	1800ac16 	blt	r3,zero,29430 <___vfprintf_internal_r+0x2108>
   29180:	d8003215 	stw	zero,200(sp)
   29184:	003e5d06 	br	28afc <__alt_data_end+0xfffe96fc>
   29188:	d9002c17 	ldw	r4,176(sp)
   2918c:	d9801e04 	addi	r6,sp,120
   29190:	b80b883a 	mov	r5,r23
   29194:	002e9240 	call	2e924 <__sprint_r>
   29198:	1039651e 	bne	r2,zero,27730 <__alt_data_end+0xfffe8330>
   2919c:	dc402617 	ldw	r17,152(sp)
   291a0:	d8c02017 	ldw	r3,128(sp)
   291a4:	d8801f17 	ldw	r2,124(sp)
   291a8:	da000404 	addi	r8,sp,16
   291ac:	003ed606 	br	28d08 <__alt_data_end+0xfffe9908>
   291b0:	582b883a 	mov	r21,r11
   291b4:	d8002915 	stw	zero,164(sp)
   291b8:	0038bd06 	br	274b0 <__alt_data_end+0xfffe80b0>
   291bc:	d8802917 	ldw	r2,164(sp)
   291c0:	103e071e 	bne	r2,zero,289e0 <__alt_data_end+0xfffe95e0>
   291c4:	dc002915 	stw	r16,164(sp)
   291c8:	003e0506 	br	289e0 <__alt_data_end+0xfffe95e0>
   291cc:	d9002917 	ldw	r4,164(sp)
   291d0:	20c00044 	addi	r3,r4,1
   291d4:	003e0f06 	br	28a14 <__alt_data_end+0xfffe9614>
   291d8:	01400184 	movi	r5,6
   291dc:	d9402915 	stw	r5,164(sp)
   291e0:	003dff06 	br	289e0 <__alt_data_end+0xfffe95e0>
   291e4:	d8802104 	addi	r2,sp,132
   291e8:	d8800315 	stw	r2,12(sp)
   291ec:	d8802504 	addi	r2,sp,148
   291f0:	d8800215 	stw	r2,8(sp)
   291f4:	d8802604 	addi	r2,sp,152
   291f8:	d8800115 	stw	r2,4(sp)
   291fc:	d8802917 	ldw	r2,164(sp)
   29200:	d9403617 	ldw	r5,216(sp)
   29204:	d9002c17 	ldw	r4,176(sp)
   29208:	d8800015 	stw	r2,0(sp)
   2920c:	01c000c4 	movi	r7,3
   29210:	980d883a 	mov	r6,r19
   29214:	da003d15 	stw	r8,244(sp)
   29218:	002994c0 	call	2994c <_dtoa_r>
   2921c:	d8c02917 	ldw	r3,164(sp)
   29220:	da003d17 	ldw	r8,244(sp)
   29224:	1021883a 	mov	r16,r2
   29228:	10f9883a 	add	fp,r2,r3
   2922c:	81000007 	ldb	r4,0(r16)
   29230:	00800c04 	movi	r2,48
   29234:	20805e26 	beq	r4,r2,293b0 <___vfprintf_internal_r+0x2088>
   29238:	d8c02617 	ldw	r3,152(sp)
   2923c:	e0f9883a 	add	fp,fp,r3
   29240:	003e0a06 	br	28a6c <__alt_data_end+0xfffe966c>
   29244:	00c00b44 	movi	r3,45
   29248:	24e0003c 	xorhi	r19,r4,32768
   2924c:	d8c02a05 	stb	r3,168(sp)
   29250:	003de906 	br	289f8 <__alt_data_end+0xfffe95f8>
   29254:	d8c03217 	ldw	r3,200(sp)
   29258:	00c07a0e 	bge	zero,r3,29444 <___vfprintf_internal_r+0x211c>
   2925c:	00800044 	movi	r2,1
   29260:	d9003317 	ldw	r4,204(sp)
   29264:	1105883a 	add	r2,r2,r4
   29268:	d8802e15 	stw	r2,184(sp)
   2926c:	10004e16 	blt	r2,zero,293a8 <___vfprintf_internal_r+0x2080>
   29270:	044019c4 	movi	r17,103
   29274:	003e2106 	br	28afc <__alt_data_end+0xfffe96fc>
   29278:	d9002917 	ldw	r4,164(sp)
   2927c:	d8802104 	addi	r2,sp,132
   29280:	d8800315 	stw	r2,12(sp)
   29284:	d9000015 	stw	r4,0(sp)
   29288:	d8802504 	addi	r2,sp,148
   2928c:	d9403617 	ldw	r5,216(sp)
   29290:	d9002c17 	ldw	r4,176(sp)
   29294:	d8800215 	stw	r2,8(sp)
   29298:	d8802604 	addi	r2,sp,152
   2929c:	d8800115 	stw	r2,4(sp)
   292a0:	01c000c4 	movi	r7,3
   292a4:	980d883a 	mov	r6,r19
   292a8:	da003d15 	stw	r8,244(sp)
   292ac:	002994c0 	call	2994c <_dtoa_r>
   292b0:	d8c02917 	ldw	r3,164(sp)
   292b4:	da003d17 	ldw	r8,244(sp)
   292b8:	1021883a 	mov	r16,r2
   292bc:	00801184 	movi	r2,70
   292c0:	80f9883a 	add	fp,r16,r3
   292c4:	88bfd926 	beq	r17,r2,2922c <__alt_data_end+0xfffe9e2c>
   292c8:	003de806 	br	28a6c <__alt_data_end+0xfffe966c>
   292cc:	d9002917 	ldw	r4,164(sp)
   292d0:	00c04d0e 	bge	zero,r3,29408 <___vfprintf_internal_r+0x20e0>
   292d4:	2000441e 	bne	r4,zero,293e8 <___vfprintf_internal_r+0x20c0>
   292d8:	9480004c 	andi	r18,r18,1
   292dc:	9000421e 	bne	r18,zero,293e8 <___vfprintf_internal_r+0x20c0>
   292e0:	1805883a 	mov	r2,r3
   292e4:	18007016 	blt	r3,zero,294a8 <___vfprintf_internal_r+0x2180>
   292e8:	d8c03217 	ldw	r3,200(sp)
   292ec:	d8c02e15 	stw	r3,184(sp)
   292f0:	003e0206 	br	28afc <__alt_data_end+0xfffe96fc>
   292f4:	df0022c4 	addi	fp,sp,139
   292f8:	dc002915 	stw	r16,164(sp)
   292fc:	4027883a 	mov	r19,r8
   29300:	e021883a 	mov	r16,fp
   29304:	b009883a 	mov	r4,r22
   29308:	01400284 	movi	r5,10
   2930c:	00237600 	call	23760 <__modsi3>
   29310:	10800c04 	addi	r2,r2,48
   29314:	843fffc4 	addi	r16,r16,-1
   29318:	b009883a 	mov	r4,r22
   2931c:	01400284 	movi	r5,10
   29320:	80800005 	stb	r2,0(r16)
   29324:	00236dc0 	call	236dc <__divsi3>
   29328:	102d883a 	mov	r22,r2
   2932c:	00800244 	movi	r2,9
   29330:	15bff416 	blt	r2,r22,29304 <__alt_data_end+0xfffe9f04>
   29334:	9811883a 	mov	r8,r19
   29338:	b0800c04 	addi	r2,r22,48
   2933c:	8027883a 	mov	r19,r16
   29340:	997fffc4 	addi	r5,r19,-1
   29344:	98bfffc5 	stb	r2,-1(r19)
   29348:	dc002917 	ldw	r16,164(sp)
   2934c:	2f006a2e 	bgeu	r5,fp,294f8 <___vfprintf_internal_r+0x21d0>
   29350:	d9c02384 	addi	r7,sp,142
   29354:	3ccfc83a 	sub	r7,r7,r19
   29358:	d9002344 	addi	r4,sp,141
   2935c:	e1cf883a 	add	r7,fp,r7
   29360:	00000106 	br	29368 <___vfprintf_internal_r+0x2040>
   29364:	28800003 	ldbu	r2,0(r5)
   29368:	20800005 	stb	r2,0(r4)
   2936c:	21000044 	addi	r4,r4,1
   29370:	29400044 	addi	r5,r5,1
   29374:	393ffb1e 	bne	r7,r4,29364 <__alt_data_end+0xfffe9f64>
   29378:	d8802304 	addi	r2,sp,140
   2937c:	14c5c83a 	sub	r2,r2,r19
   29380:	d8c02344 	addi	r3,sp,141
   29384:	1885883a 	add	r2,r3,r2
   29388:	003f7006 	br	2914c <__alt_data_end+0xfffe9d4c>
   2938c:	0005883a 	mov	r2,zero
   29390:	003f0f06 	br	28fd0 <__alt_data_end+0xfffe9bd0>
   29394:	d8c03217 	ldw	r3,200(sp)
   29398:	18c00044 	addi	r3,r3,1
   2939c:	d8c02e15 	stw	r3,184(sp)
   293a0:	1805883a 	mov	r2,r3
   293a4:	183fb20e 	bge	r3,zero,29270 <__alt_data_end+0xfffe9e70>
   293a8:	0005883a 	mov	r2,zero
   293ac:	003fb006 	br	29270 <__alt_data_end+0xfffe9e70>
   293b0:	d9003617 	ldw	r4,216(sp)
   293b4:	000d883a 	mov	r6,zero
   293b8:	000f883a 	mov	r7,zero
   293bc:	980b883a 	mov	r5,r19
   293c0:	d8c03c15 	stw	r3,240(sp)
   293c4:	da003d15 	stw	r8,244(sp)
   293c8:	00312540 	call	31254 <__eqdf2>
   293cc:	d8c03c17 	ldw	r3,240(sp)
   293d0:	da003d17 	ldw	r8,244(sp)
   293d4:	103f9826 	beq	r2,zero,29238 <__alt_data_end+0xfffe9e38>
   293d8:	00800044 	movi	r2,1
   293dc:	10c7c83a 	sub	r3,r2,r3
   293e0:	d8c02615 	stw	r3,152(sp)
   293e4:	003f9506 	br	2923c <__alt_data_end+0xfffe9e3c>
   293e8:	d9002917 	ldw	r4,164(sp)
   293ec:	d8c03217 	ldw	r3,200(sp)
   293f0:	20800044 	addi	r2,r4,1
   293f4:	1885883a 	add	r2,r3,r2
   293f8:	d8802e15 	stw	r2,184(sp)
   293fc:	103dbf0e 	bge	r2,zero,28afc <__alt_data_end+0xfffe96fc>
   29400:	0005883a 	mov	r2,zero
   29404:	003dbd06 	br	28afc <__alt_data_end+0xfffe96fc>
   29408:	2000211e 	bne	r4,zero,29490 <___vfprintf_internal_r+0x2168>
   2940c:	9480004c 	andi	r18,r18,1
   29410:	90001f1e 	bne	r18,zero,29490 <___vfprintf_internal_r+0x2168>
   29414:	00800044 	movi	r2,1
   29418:	d8802e15 	stw	r2,184(sp)
   2941c:	003db706 	br	28afc <__alt_data_end+0xfffe96fc>
   29420:	00800b44 	movi	r2,45
   29424:	05adc83a 	sub	r22,zero,r22
   29428:	d8802305 	stb	r2,140(sp)
   2942c:	003f3f06 	br	2912c <__alt_data_end+0xfffe9d2c>
   29430:	0005883a 	mov	r2,zero
   29434:	003f5206 	br	29180 <__alt_data_end+0xfffe9d80>
   29438:	90a4703a 	and	r18,r18,r2
   2943c:	903f4e26 	beq	r18,zero,29178 <__alt_data_end+0xfffe9d78>
   29440:	003f4a06 	br	2916c <__alt_data_end+0xfffe9d6c>
   29444:	00800084 	movi	r2,2
   29448:	10c5c83a 	sub	r2,r2,r3
   2944c:	003f8406 	br	29260 <__alt_data_end+0xfffe9e60>
   29450:	d8802d17 	ldw	r2,180(sp)
   29454:	d9002d17 	ldw	r4,180(sp)
   29458:	ac400043 	ldbu	r17,1(r21)
   2945c:	10800017 	ldw	r2,0(r2)
   29460:	582b883a 	mov	r21,r11
   29464:	d8802915 	stw	r2,164(sp)
   29468:	20800104 	addi	r2,r4,4
   2946c:	d9002917 	ldw	r4,164(sp)
   29470:	d8802d15 	stw	r2,180(sp)
   29474:	203e7a0e 	bge	r4,zero,28e60 <__alt_data_end+0xfffe9a60>
   29478:	8c403fcc 	andi	r17,r17,255
   2947c:	00bfffc4 	movi	r2,-1
   29480:	8c40201c 	xori	r17,r17,128
   29484:	d8802915 	stw	r2,164(sp)
   29488:	8c7fe004 	addi	r17,r17,-128
   2948c:	00380706 	br	274ac <__alt_data_end+0xfffe80ac>
   29490:	d8c02917 	ldw	r3,164(sp)
   29494:	18c00084 	addi	r3,r3,2
   29498:	d8c02e15 	stw	r3,184(sp)
   2949c:	1805883a 	mov	r2,r3
   294a0:	183d960e 	bge	r3,zero,28afc <__alt_data_end+0xfffe96fc>
   294a4:	003fd606 	br	29400 <__alt_data_end+0xfffea000>
   294a8:	0005883a 	mov	r2,zero
   294ac:	003f8e06 	br	292e8 <__alt_data_end+0xfffe9ee8>
   294b0:	9080004c 	andi	r2,r18,1
   294b4:	103f811e 	bne	r2,zero,292bc <__alt_data_end+0xfffe9ebc>
   294b8:	d8802117 	ldw	r2,132(sp)
   294bc:	1405c83a 	sub	r2,r2,r16
   294c0:	d8803315 	stw	r2,204(sp)
   294c4:	b47ef326 	beq	r22,r17,29094 <__alt_data_end+0xfffe9c94>
   294c8:	dd802617 	ldw	r22,152(sp)
   294cc:	003f1106 	br	29114 <__alt_data_end+0xfffe9d14>
   294d0:	d9c02785 	stb	r7,158(sp)
   294d4:	00390406 	br	278e8 <__alt_data_end+0xfffe84e8>
   294d8:	d9c02785 	stb	r7,158(sp)
   294dc:	0038d306 	br	2782c <__alt_data_end+0xfffe842c>
   294e0:	d9c02785 	stb	r7,158(sp)
   294e4:	003a6106 	br	27e6c <__alt_data_end+0xfffe8a6c>
   294e8:	d9c02785 	stb	r7,158(sp)
   294ec:	003af806 	br	280d0 <__alt_data_end+0xfffe8cd0>
   294f0:	0005883a 	mov	r2,zero
   294f4:	003d7e06 	br	28af0 <__alt_data_end+0xfffe96f0>
   294f8:	d8802344 	addi	r2,sp,141
   294fc:	003f1306 	br	2914c <__alt_data_end+0xfffe9d4c>
   29500:	d9c02785 	stb	r7,158(sp)
   29504:	00392306 	br	27994 <__alt_data_end+0xfffe8594>
   29508:	d9c02785 	stb	r7,158(sp)
   2950c:	003aa906 	br	27fb4 <__alt_data_end+0xfffe8bb4>
   29510:	d9c02785 	stb	r7,158(sp)
   29514:	003a3d06 	br	27e0c <__alt_data_end+0xfffe8a0c>
   29518:	d9c02785 	stb	r7,158(sp)
   2951c:	003aca06 	br	28048 <__alt_data_end+0xfffe8c48>

00029520 <__vfprintf_internal>:
   29520:	008000f4 	movhi	r2,3
   29524:	10992a04 	addi	r2,r2,25768
   29528:	300f883a 	mov	r7,r6
   2952c:	280d883a 	mov	r6,r5
   29530:	200b883a 	mov	r5,r4
   29534:	11000017 	ldw	r4,0(r2)
   29538:	00273281 	jmpi	27328 <___vfprintf_internal_r>

0002953c <__sbprintf>:
   2953c:	2880030b 	ldhu	r2,12(r5)
   29540:	2ac01917 	ldw	r11,100(r5)
   29544:	2a80038b 	ldhu	r10,14(r5)
   29548:	2a400717 	ldw	r9,28(r5)
   2954c:	2a000917 	ldw	r8,36(r5)
   29550:	defee204 	addi	sp,sp,-1144
   29554:	00c10004 	movi	r3,1024
   29558:	dc011a15 	stw	r16,1128(sp)
   2955c:	10bfff4c 	andi	r2,r2,65533
   29560:	2821883a 	mov	r16,r5
   29564:	d8cb883a 	add	r5,sp,r3
   29568:	dc811c15 	stw	r18,1136(sp)
   2956c:	dc411b15 	stw	r17,1132(sp)
   29570:	dfc11d15 	stw	ra,1140(sp)
   29574:	2025883a 	mov	r18,r4
   29578:	d881030d 	sth	r2,1036(sp)
   2957c:	dac11915 	stw	r11,1124(sp)
   29580:	da81038d 	sth	r10,1038(sp)
   29584:	da410715 	stw	r9,1052(sp)
   29588:	da010915 	stw	r8,1060(sp)
   2958c:	dec10015 	stw	sp,1024(sp)
   29590:	dec10415 	stw	sp,1040(sp)
   29594:	d8c10215 	stw	r3,1032(sp)
   29598:	d8c10515 	stw	r3,1044(sp)
   2959c:	d8010615 	stw	zero,1048(sp)
   295a0:	00273280 	call	27328 <___vfprintf_internal_r>
   295a4:	1023883a 	mov	r17,r2
   295a8:	10000416 	blt	r2,zero,295bc <__sbprintf+0x80>
   295ac:	d9410004 	addi	r5,sp,1024
   295b0:	9009883a 	mov	r4,r18
   295b4:	002b1f00 	call	2b1f0 <_fflush_r>
   295b8:	10000d1e 	bne	r2,zero,295f0 <__sbprintf+0xb4>
   295bc:	d881030b 	ldhu	r2,1036(sp)
   295c0:	1080100c 	andi	r2,r2,64
   295c4:	10000326 	beq	r2,zero,295d4 <__sbprintf+0x98>
   295c8:	8080030b 	ldhu	r2,12(r16)
   295cc:	10801014 	ori	r2,r2,64
   295d0:	8080030d 	sth	r2,12(r16)
   295d4:	8805883a 	mov	r2,r17
   295d8:	dfc11d17 	ldw	ra,1140(sp)
   295dc:	dc811c17 	ldw	r18,1136(sp)
   295e0:	dc411b17 	ldw	r17,1132(sp)
   295e4:	dc011a17 	ldw	r16,1128(sp)
   295e8:	dec11e04 	addi	sp,sp,1144
   295ec:	f800283a 	ret
   295f0:	047fffc4 	movi	r17,-1
   295f4:	003ff106 	br	295bc <__alt_data_end+0xfffea1bc>

000295f8 <__swsetup_r>:
   295f8:	008000f4 	movhi	r2,3
   295fc:	defffd04 	addi	sp,sp,-12
   29600:	10992a04 	addi	r2,r2,25768
   29604:	dc400115 	stw	r17,4(sp)
   29608:	2023883a 	mov	r17,r4
   2960c:	11000017 	ldw	r4,0(r2)
   29610:	dc000015 	stw	r16,0(sp)
   29614:	dfc00215 	stw	ra,8(sp)
   29618:	2821883a 	mov	r16,r5
   2961c:	20000226 	beq	r4,zero,29628 <__swsetup_r+0x30>
   29620:	20800e17 	ldw	r2,56(r4)
   29624:	10003126 	beq	r2,zero,296ec <__swsetup_r+0xf4>
   29628:	8080030b 	ldhu	r2,12(r16)
   2962c:	10c0020c 	andi	r3,r2,8
   29630:	1009883a 	mov	r4,r2
   29634:	18000f26 	beq	r3,zero,29674 <__swsetup_r+0x7c>
   29638:	80c00417 	ldw	r3,16(r16)
   2963c:	18001526 	beq	r3,zero,29694 <__swsetup_r+0x9c>
   29640:	1100004c 	andi	r4,r2,1
   29644:	20001c1e 	bne	r4,zero,296b8 <__swsetup_r+0xc0>
   29648:	1080008c 	andi	r2,r2,2
   2964c:	1000291e 	bne	r2,zero,296f4 <__swsetup_r+0xfc>
   29650:	80800517 	ldw	r2,20(r16)
   29654:	80800215 	stw	r2,8(r16)
   29658:	18001c26 	beq	r3,zero,296cc <__swsetup_r+0xd4>
   2965c:	0005883a 	mov	r2,zero
   29660:	dfc00217 	ldw	ra,8(sp)
   29664:	dc400117 	ldw	r17,4(sp)
   29668:	dc000017 	ldw	r16,0(sp)
   2966c:	dec00304 	addi	sp,sp,12
   29670:	f800283a 	ret
   29674:	2080040c 	andi	r2,r4,16
   29678:	10002e26 	beq	r2,zero,29734 <__swsetup_r+0x13c>
   2967c:	2080010c 	andi	r2,r4,4
   29680:	10001e1e 	bne	r2,zero,296fc <__swsetup_r+0x104>
   29684:	80c00417 	ldw	r3,16(r16)
   29688:	20800214 	ori	r2,r4,8
   2968c:	8080030d 	sth	r2,12(r16)
   29690:	183feb1e 	bne	r3,zero,29640 <__alt_data_end+0xfffea240>
   29694:	1100a00c 	andi	r4,r2,640
   29698:	01408004 	movi	r5,512
   2969c:	217fe826 	beq	r4,r5,29640 <__alt_data_end+0xfffea240>
   296a0:	800b883a 	mov	r5,r16
   296a4:	8809883a 	mov	r4,r17
   296a8:	002c1700 	call	2c170 <__smakebuf_r>
   296ac:	8080030b 	ldhu	r2,12(r16)
   296b0:	80c00417 	ldw	r3,16(r16)
   296b4:	003fe206 	br	29640 <__alt_data_end+0xfffea240>
   296b8:	80800517 	ldw	r2,20(r16)
   296bc:	80000215 	stw	zero,8(r16)
   296c0:	0085c83a 	sub	r2,zero,r2
   296c4:	80800615 	stw	r2,24(r16)
   296c8:	183fe41e 	bne	r3,zero,2965c <__alt_data_end+0xfffea25c>
   296cc:	80c0030b 	ldhu	r3,12(r16)
   296d0:	0005883a 	mov	r2,zero
   296d4:	1900200c 	andi	r4,r3,128
   296d8:	203fe126 	beq	r4,zero,29660 <__alt_data_end+0xfffea260>
   296dc:	18c01014 	ori	r3,r3,64
   296e0:	80c0030d 	sth	r3,12(r16)
   296e4:	00bfffc4 	movi	r2,-1
   296e8:	003fdd06 	br	29660 <__alt_data_end+0xfffea260>
   296ec:	002b5cc0 	call	2b5cc <__sinit>
   296f0:	003fcd06 	br	29628 <__alt_data_end+0xfffea228>
   296f4:	0005883a 	mov	r2,zero
   296f8:	003fd606 	br	29654 <__alt_data_end+0xfffea254>
   296fc:	81400c17 	ldw	r5,48(r16)
   29700:	28000626 	beq	r5,zero,2971c <__swsetup_r+0x124>
   29704:	80801004 	addi	r2,r16,64
   29708:	28800326 	beq	r5,r2,29718 <__swsetup_r+0x120>
   2970c:	8809883a 	mov	r4,r17
   29710:	002b7400 	call	2b740 <_free_r>
   29714:	8100030b 	ldhu	r4,12(r16)
   29718:	80000c15 	stw	zero,48(r16)
   2971c:	80c00417 	ldw	r3,16(r16)
   29720:	00bff6c4 	movi	r2,-37
   29724:	1108703a 	and	r4,r2,r4
   29728:	80000115 	stw	zero,4(r16)
   2972c:	80c00015 	stw	r3,0(r16)
   29730:	003fd506 	br	29688 <__alt_data_end+0xfffea288>
   29734:	00800244 	movi	r2,9
   29738:	88800015 	stw	r2,0(r17)
   2973c:	20801014 	ori	r2,r4,64
   29740:	8080030d 	sth	r2,12(r16)
   29744:	00bfffc4 	movi	r2,-1
   29748:	003fc506 	br	29660 <__alt_data_end+0xfffea260>

0002974c <quorem>:
   2974c:	defff704 	addi	sp,sp,-36
   29750:	dc800215 	stw	r18,8(sp)
   29754:	20800417 	ldw	r2,16(r4)
   29758:	2c800417 	ldw	r18,16(r5)
   2975c:	dfc00815 	stw	ra,32(sp)
   29760:	ddc00715 	stw	r23,28(sp)
   29764:	dd800615 	stw	r22,24(sp)
   29768:	dd400515 	stw	r21,20(sp)
   2976c:	dd000415 	stw	r20,16(sp)
   29770:	dcc00315 	stw	r19,12(sp)
   29774:	dc400115 	stw	r17,4(sp)
   29778:	dc000015 	stw	r16,0(sp)
   2977c:	14807116 	blt	r2,r18,29944 <quorem+0x1f8>
   29780:	94bfffc4 	addi	r18,r18,-1
   29784:	94ad883a 	add	r22,r18,r18
   29788:	b5ad883a 	add	r22,r22,r22
   2978c:	2c400504 	addi	r17,r5,20
   29790:	8da9883a 	add	r20,r17,r22
   29794:	25400504 	addi	r21,r4,20
   29798:	282f883a 	mov	r23,r5
   2979c:	adad883a 	add	r22,r21,r22
   297a0:	a1400017 	ldw	r5,0(r20)
   297a4:	2021883a 	mov	r16,r4
   297a8:	b1000017 	ldw	r4,0(r22)
   297ac:	29400044 	addi	r5,r5,1
   297b0:	00237d40 	call	237d4 <__udivsi3>
   297b4:	1027883a 	mov	r19,r2
   297b8:	10002c26 	beq	r2,zero,2986c <quorem+0x120>
   297bc:	a813883a 	mov	r9,r21
   297c0:	880b883a 	mov	r5,r17
   297c4:	0009883a 	mov	r4,zero
   297c8:	000d883a 	mov	r6,zero
   297cc:	2a000017 	ldw	r8,0(r5)
   297d0:	49c00017 	ldw	r7,0(r9)
   297d4:	29400104 	addi	r5,r5,4
   297d8:	40bfffcc 	andi	r2,r8,65535
   297dc:	14c5383a 	mul	r2,r2,r19
   297e0:	4010d43a 	srli	r8,r8,16
   297e4:	38ffffcc 	andi	r3,r7,65535
   297e8:	1105883a 	add	r2,r2,r4
   297ec:	1008d43a 	srli	r4,r2,16
   297f0:	44d1383a 	mul	r8,r8,r19
   297f4:	198d883a 	add	r6,r3,r6
   297f8:	10ffffcc 	andi	r3,r2,65535
   297fc:	30c7c83a 	sub	r3,r6,r3
   29800:	380ed43a 	srli	r7,r7,16
   29804:	4105883a 	add	r2,r8,r4
   29808:	180dd43a 	srai	r6,r3,16
   2980c:	113fffcc 	andi	r4,r2,65535
   29810:	390fc83a 	sub	r7,r7,r4
   29814:	398d883a 	add	r6,r7,r6
   29818:	300e943a 	slli	r7,r6,16
   2981c:	18ffffcc 	andi	r3,r3,65535
   29820:	1008d43a 	srli	r4,r2,16
   29824:	38ceb03a 	or	r7,r7,r3
   29828:	49c00015 	stw	r7,0(r9)
   2982c:	300dd43a 	srai	r6,r6,16
   29830:	4a400104 	addi	r9,r9,4
   29834:	a17fe52e 	bgeu	r20,r5,297cc <__alt_data_end+0xfffea3cc>
   29838:	b0800017 	ldw	r2,0(r22)
   2983c:	10000b1e 	bne	r2,zero,2986c <quorem+0x120>
   29840:	b0bfff04 	addi	r2,r22,-4
   29844:	a880082e 	bgeu	r21,r2,29868 <quorem+0x11c>
   29848:	b0ffff17 	ldw	r3,-4(r22)
   2984c:	18000326 	beq	r3,zero,2985c <quorem+0x110>
   29850:	00000506 	br	29868 <quorem+0x11c>
   29854:	10c00017 	ldw	r3,0(r2)
   29858:	1800031e 	bne	r3,zero,29868 <quorem+0x11c>
   2985c:	10bfff04 	addi	r2,r2,-4
   29860:	94bfffc4 	addi	r18,r18,-1
   29864:	a8bffb36 	bltu	r21,r2,29854 <__alt_data_end+0xfffea454>
   29868:	84800415 	stw	r18,16(r16)
   2986c:	b80b883a 	mov	r5,r23
   29870:	8009883a 	mov	r4,r16
   29874:	002d8b00 	call	2d8b0 <__mcmp>
   29878:	10002616 	blt	r2,zero,29914 <quorem+0x1c8>
   2987c:	9cc00044 	addi	r19,r19,1
   29880:	a805883a 	mov	r2,r21
   29884:	000b883a 	mov	r5,zero
   29888:	11000017 	ldw	r4,0(r2)
   2988c:	89800017 	ldw	r6,0(r17)
   29890:	10800104 	addi	r2,r2,4
   29894:	20ffffcc 	andi	r3,r4,65535
   29898:	194b883a 	add	r5,r3,r5
   2989c:	30ffffcc 	andi	r3,r6,65535
   298a0:	28c7c83a 	sub	r3,r5,r3
   298a4:	300cd43a 	srli	r6,r6,16
   298a8:	2008d43a 	srli	r4,r4,16
   298ac:	180bd43a 	srai	r5,r3,16
   298b0:	18ffffcc 	andi	r3,r3,65535
   298b4:	2189c83a 	sub	r4,r4,r6
   298b8:	2149883a 	add	r4,r4,r5
   298bc:	200c943a 	slli	r6,r4,16
   298c0:	8c400104 	addi	r17,r17,4
   298c4:	200bd43a 	srai	r5,r4,16
   298c8:	30c6b03a 	or	r3,r6,r3
   298cc:	10ffff15 	stw	r3,-4(r2)
   298d0:	a47fed2e 	bgeu	r20,r17,29888 <__alt_data_end+0xfffea488>
   298d4:	9485883a 	add	r2,r18,r18
   298d8:	1085883a 	add	r2,r2,r2
   298dc:	a887883a 	add	r3,r21,r2
   298e0:	18800017 	ldw	r2,0(r3)
   298e4:	10000b1e 	bne	r2,zero,29914 <quorem+0x1c8>
   298e8:	18bfff04 	addi	r2,r3,-4
   298ec:	a880082e 	bgeu	r21,r2,29910 <quorem+0x1c4>
   298f0:	18ffff17 	ldw	r3,-4(r3)
   298f4:	18000326 	beq	r3,zero,29904 <quorem+0x1b8>
   298f8:	00000506 	br	29910 <quorem+0x1c4>
   298fc:	10c00017 	ldw	r3,0(r2)
   29900:	1800031e 	bne	r3,zero,29910 <quorem+0x1c4>
   29904:	10bfff04 	addi	r2,r2,-4
   29908:	94bfffc4 	addi	r18,r18,-1
   2990c:	a8bffb36 	bltu	r21,r2,298fc <__alt_data_end+0xfffea4fc>
   29910:	84800415 	stw	r18,16(r16)
   29914:	9805883a 	mov	r2,r19
   29918:	dfc00817 	ldw	ra,32(sp)
   2991c:	ddc00717 	ldw	r23,28(sp)
   29920:	dd800617 	ldw	r22,24(sp)
   29924:	dd400517 	ldw	r21,20(sp)
   29928:	dd000417 	ldw	r20,16(sp)
   2992c:	dcc00317 	ldw	r19,12(sp)
   29930:	dc800217 	ldw	r18,8(sp)
   29934:	dc400117 	ldw	r17,4(sp)
   29938:	dc000017 	ldw	r16,0(sp)
   2993c:	dec00904 	addi	sp,sp,36
   29940:	f800283a 	ret
   29944:	0005883a 	mov	r2,zero
   29948:	003ff306 	br	29918 <__alt_data_end+0xfffea518>

0002994c <_dtoa_r>:
   2994c:	20801017 	ldw	r2,64(r4)
   29950:	deffde04 	addi	sp,sp,-136
   29954:	df002015 	stw	fp,128(sp)
   29958:	dcc01b15 	stw	r19,108(sp)
   2995c:	dc801a15 	stw	r18,104(sp)
   29960:	dc401915 	stw	r17,100(sp)
   29964:	dc001815 	stw	r16,96(sp)
   29968:	dfc02115 	stw	ra,132(sp)
   2996c:	ddc01f15 	stw	r23,124(sp)
   29970:	dd801e15 	stw	r22,120(sp)
   29974:	dd401d15 	stw	r21,116(sp)
   29978:	dd001c15 	stw	r20,112(sp)
   2997c:	d9c00315 	stw	r7,12(sp)
   29980:	2039883a 	mov	fp,r4
   29984:	3023883a 	mov	r17,r6
   29988:	2825883a 	mov	r18,r5
   2998c:	dc002417 	ldw	r16,144(sp)
   29990:	3027883a 	mov	r19,r6
   29994:	10000826 	beq	r2,zero,299b8 <_dtoa_r+0x6c>
   29998:	21801117 	ldw	r6,68(r4)
   2999c:	00c00044 	movi	r3,1
   299a0:	100b883a 	mov	r5,r2
   299a4:	1986983a 	sll	r3,r3,r6
   299a8:	11800115 	stw	r6,4(r2)
   299ac:	10c00215 	stw	r3,8(r2)
   299b0:	002d0900 	call	2d090 <_Bfree>
   299b4:	e0001015 	stw	zero,64(fp)
   299b8:	88002e16 	blt	r17,zero,29a74 <_dtoa_r+0x128>
   299bc:	80000015 	stw	zero,0(r16)
   299c0:	889ffc2c 	andhi	r2,r17,32752
   299c4:	00dffc34 	movhi	r3,32752
   299c8:	10c01c26 	beq	r2,r3,29a3c <_dtoa_r+0xf0>
   299cc:	000d883a 	mov	r6,zero
   299d0:	000f883a 	mov	r7,zero
   299d4:	9009883a 	mov	r4,r18
   299d8:	980b883a 	mov	r5,r19
   299dc:	00312540 	call	31254 <__eqdf2>
   299e0:	10002b1e 	bne	r2,zero,29a90 <_dtoa_r+0x144>
   299e4:	d9c02317 	ldw	r7,140(sp)
   299e8:	00800044 	movi	r2,1
   299ec:	38800015 	stw	r2,0(r7)
   299f0:	d8802517 	ldw	r2,148(sp)
   299f4:	10019e26 	beq	r2,zero,2a070 <_dtoa_r+0x724>
   299f8:	d8c02517 	ldw	r3,148(sp)
   299fc:	008000f4 	movhi	r2,3
   29a00:	10921044 	addi	r2,r2,18497
   29a04:	18800015 	stw	r2,0(r3)
   29a08:	10bfffc4 	addi	r2,r2,-1
   29a0c:	dfc02117 	ldw	ra,132(sp)
   29a10:	df002017 	ldw	fp,128(sp)
   29a14:	ddc01f17 	ldw	r23,124(sp)
   29a18:	dd801e17 	ldw	r22,120(sp)
   29a1c:	dd401d17 	ldw	r21,116(sp)
   29a20:	dd001c17 	ldw	r20,112(sp)
   29a24:	dcc01b17 	ldw	r19,108(sp)
   29a28:	dc801a17 	ldw	r18,104(sp)
   29a2c:	dc401917 	ldw	r17,100(sp)
   29a30:	dc001817 	ldw	r16,96(sp)
   29a34:	dec02204 	addi	sp,sp,136
   29a38:	f800283a 	ret
   29a3c:	d8c02317 	ldw	r3,140(sp)
   29a40:	0089c3c4 	movi	r2,9999
   29a44:	18800015 	stw	r2,0(r3)
   29a48:	90017726 	beq	r18,zero,2a028 <_dtoa_r+0x6dc>
   29a4c:	008000f4 	movhi	r2,3
   29a50:	10921c04 	addi	r2,r2,18544
   29a54:	d9002517 	ldw	r4,148(sp)
   29a58:	203fec26 	beq	r4,zero,29a0c <__alt_data_end+0xfffea60c>
   29a5c:	10c000c7 	ldb	r3,3(r2)
   29a60:	1801781e 	bne	r3,zero,2a044 <_dtoa_r+0x6f8>
   29a64:	10c000c4 	addi	r3,r2,3
   29a68:	d9802517 	ldw	r6,148(sp)
   29a6c:	30c00015 	stw	r3,0(r6)
   29a70:	003fe606 	br	29a0c <__alt_data_end+0xfffea60c>
   29a74:	04e00034 	movhi	r19,32768
   29a78:	9cffffc4 	addi	r19,r19,-1
   29a7c:	00800044 	movi	r2,1
   29a80:	8ce6703a 	and	r19,r17,r19
   29a84:	80800015 	stw	r2,0(r16)
   29a88:	9823883a 	mov	r17,r19
   29a8c:	003fcc06 	br	299c0 <__alt_data_end+0xfffea5c0>
   29a90:	d8800204 	addi	r2,sp,8
   29a94:	d8800015 	stw	r2,0(sp)
   29a98:	d9c00104 	addi	r7,sp,4
   29a9c:	900b883a 	mov	r5,r18
   29aa0:	980d883a 	mov	r6,r19
   29aa4:	e009883a 	mov	r4,fp
   29aa8:	8820d53a 	srli	r16,r17,20
   29aac:	002dc7c0 	call	2dc7c <__d2b>
   29ab0:	d8800915 	stw	r2,36(sp)
   29ab4:	8001651e 	bne	r16,zero,2a04c <_dtoa_r+0x700>
   29ab8:	dd800217 	ldw	r22,8(sp)
   29abc:	dc000117 	ldw	r16,4(sp)
   29ac0:	00800804 	movi	r2,32
   29ac4:	b421883a 	add	r16,r22,r16
   29ac8:	80c10c84 	addi	r3,r16,1074
   29acc:	10c2d10e 	bge	r2,r3,2a614 <_dtoa_r+0xcc8>
   29ad0:	00801004 	movi	r2,64
   29ad4:	81010484 	addi	r4,r16,1042
   29ad8:	10c7c83a 	sub	r3,r2,r3
   29adc:	9108d83a 	srl	r4,r18,r4
   29ae0:	88e2983a 	sll	r17,r17,r3
   29ae4:	2448b03a 	or	r4,r4,r17
   29ae8:	00316080 	call	31608 <__floatunsidf>
   29aec:	017f8434 	movhi	r5,65040
   29af0:	01800044 	movi	r6,1
   29af4:	1009883a 	mov	r4,r2
   29af8:	194b883a 	add	r5,r3,r5
   29afc:	843fffc4 	addi	r16,r16,-1
   29b00:	d9801115 	stw	r6,68(sp)
   29b04:	000d883a 	mov	r6,zero
   29b08:	01cffe34 	movhi	r7,16376
   29b0c:	00265380 	call	26538 <__subdf3>
   29b10:	0198dbf4 	movhi	r6,25455
   29b14:	01cff4f4 	movhi	r7,16339
   29b18:	3190d844 	addi	r6,r6,17249
   29b1c:	39e1e9c4 	addi	r7,r7,-30809
   29b20:	1009883a 	mov	r4,r2
   29b24:	180b883a 	mov	r5,r3
   29b28:	0025e200 	call	25e20 <__muldf3>
   29b2c:	01a2d874 	movhi	r6,35681
   29b30:	01cff1f4 	movhi	r7,16327
   29b34:	31b22cc4 	addi	r6,r6,-14157
   29b38:	39e28a04 	addi	r7,r7,-30168
   29b3c:	180b883a 	mov	r5,r3
   29b40:	1009883a 	mov	r4,r2
   29b44:	0024c8c0 	call	24c8c <__adddf3>
   29b48:	8009883a 	mov	r4,r16
   29b4c:	1029883a 	mov	r20,r2
   29b50:	1823883a 	mov	r17,r3
   29b54:	003152c0 	call	3152c <__floatsidf>
   29b58:	019427f4 	movhi	r6,20639
   29b5c:	01cff4f4 	movhi	r7,16339
   29b60:	319e7ec4 	addi	r6,r6,31227
   29b64:	39d104c4 	addi	r7,r7,17427
   29b68:	1009883a 	mov	r4,r2
   29b6c:	180b883a 	mov	r5,r3
   29b70:	0025e200 	call	25e20 <__muldf3>
   29b74:	100d883a 	mov	r6,r2
   29b78:	180f883a 	mov	r7,r3
   29b7c:	a009883a 	mov	r4,r20
   29b80:	880b883a 	mov	r5,r17
   29b84:	0024c8c0 	call	24c8c <__adddf3>
   29b88:	1009883a 	mov	r4,r2
   29b8c:	180b883a 	mov	r5,r3
   29b90:	1029883a 	mov	r20,r2
   29b94:	1823883a 	mov	r17,r3
   29b98:	00314ac0 	call	314ac <__fixdfsi>
   29b9c:	000d883a 	mov	r6,zero
   29ba0:	000f883a 	mov	r7,zero
   29ba4:	a009883a 	mov	r4,r20
   29ba8:	880b883a 	mov	r5,r17
   29bac:	d8800515 	stw	r2,20(sp)
   29bb0:	00313b80 	call	313b8 <__ledf2>
   29bb4:	10028716 	blt	r2,zero,2a5d4 <_dtoa_r+0xc88>
   29bb8:	d8c00517 	ldw	r3,20(sp)
   29bbc:	00800584 	movi	r2,22
   29bc0:	10c27536 	bltu	r2,r3,2a598 <_dtoa_r+0xc4c>
   29bc4:	180490fa 	slli	r2,r3,3
   29bc8:	00c000f4 	movhi	r3,3
   29bcc:	18d23804 	addi	r3,r3,18656
   29bd0:	1885883a 	add	r2,r3,r2
   29bd4:	11000017 	ldw	r4,0(r2)
   29bd8:	11400117 	ldw	r5,4(r2)
   29bdc:	900d883a 	mov	r6,r18
   29be0:	980f883a 	mov	r7,r19
   29be4:	00312dc0 	call	312dc <__gedf2>
   29be8:	00828d0e 	bge	zero,r2,2a620 <_dtoa_r+0xcd4>
   29bec:	d9000517 	ldw	r4,20(sp)
   29bf0:	d8000e15 	stw	zero,56(sp)
   29bf4:	213fffc4 	addi	r4,r4,-1
   29bf8:	d9000515 	stw	r4,20(sp)
   29bfc:	b42dc83a 	sub	r22,r22,r16
   29c00:	b5bfffc4 	addi	r22,r22,-1
   29c04:	b0026f16 	blt	r22,zero,2a5c4 <_dtoa_r+0xc78>
   29c08:	d8000815 	stw	zero,32(sp)
   29c0c:	d9c00517 	ldw	r7,20(sp)
   29c10:	38026416 	blt	r7,zero,2a5a4 <_dtoa_r+0xc58>
   29c14:	b1ed883a 	add	r22,r22,r7
   29c18:	d9c00d15 	stw	r7,52(sp)
   29c1c:	d8000a15 	stw	zero,40(sp)
   29c20:	d9800317 	ldw	r6,12(sp)
   29c24:	00800244 	movi	r2,9
   29c28:	11811436 	bltu	r2,r6,2a07c <_dtoa_r+0x730>
   29c2c:	00800144 	movi	r2,5
   29c30:	1184e10e 	bge	r2,r6,2afb8 <_dtoa_r+0x166c>
   29c34:	31bfff04 	addi	r6,r6,-4
   29c38:	d9800315 	stw	r6,12(sp)
   29c3c:	0023883a 	mov	r17,zero
   29c40:	d9800317 	ldw	r6,12(sp)
   29c44:	008000c4 	movi	r2,3
   29c48:	30836726 	beq	r6,r2,2a9e8 <_dtoa_r+0x109c>
   29c4c:	1183410e 	bge	r2,r6,2a954 <_dtoa_r+0x1008>
   29c50:	d9c00317 	ldw	r7,12(sp)
   29c54:	00800104 	movi	r2,4
   29c58:	38827c26 	beq	r7,r2,2a64c <_dtoa_r+0xd00>
   29c5c:	00800144 	movi	r2,5
   29c60:	3884c41e 	bne	r7,r2,2af74 <_dtoa_r+0x1628>
   29c64:	00800044 	movi	r2,1
   29c68:	d8800b15 	stw	r2,44(sp)
   29c6c:	d8c00517 	ldw	r3,20(sp)
   29c70:	d9002217 	ldw	r4,136(sp)
   29c74:	1907883a 	add	r3,r3,r4
   29c78:	19800044 	addi	r6,r3,1
   29c7c:	d8c00c15 	stw	r3,48(sp)
   29c80:	d9800615 	stw	r6,24(sp)
   29c84:	0183a40e 	bge	zero,r6,2ab18 <_dtoa_r+0x11cc>
   29c88:	d9800617 	ldw	r6,24(sp)
   29c8c:	3021883a 	mov	r16,r6
   29c90:	e0001115 	stw	zero,68(fp)
   29c94:	008005c4 	movi	r2,23
   29c98:	1184c92e 	bgeu	r2,r6,2afc0 <_dtoa_r+0x1674>
   29c9c:	00c00044 	movi	r3,1
   29ca0:	00800104 	movi	r2,4
   29ca4:	1085883a 	add	r2,r2,r2
   29ca8:	11000504 	addi	r4,r2,20
   29cac:	180b883a 	mov	r5,r3
   29cb0:	18c00044 	addi	r3,r3,1
   29cb4:	313ffb2e 	bgeu	r6,r4,29ca4 <__alt_data_end+0xfffea8a4>
   29cb8:	e1401115 	stw	r5,68(fp)
   29cbc:	e009883a 	mov	r4,fp
   29cc0:	002cfe80 	call	2cfe8 <_Balloc>
   29cc4:	d8800715 	stw	r2,28(sp)
   29cc8:	e0801015 	stw	r2,64(fp)
   29ccc:	00800384 	movi	r2,14
   29cd0:	1400f736 	bltu	r2,r16,2a0b0 <_dtoa_r+0x764>
   29cd4:	8800f626 	beq	r17,zero,2a0b0 <_dtoa_r+0x764>
   29cd8:	d9c00517 	ldw	r7,20(sp)
   29cdc:	01c39a0e 	bge	zero,r7,2ab48 <_dtoa_r+0x11fc>
   29ce0:	388003cc 	andi	r2,r7,15
   29ce4:	100490fa 	slli	r2,r2,3
   29ce8:	382bd13a 	srai	r21,r7,4
   29cec:	00c000f4 	movhi	r3,3
   29cf0:	18d23804 	addi	r3,r3,18656
   29cf4:	1885883a 	add	r2,r3,r2
   29cf8:	a8c0040c 	andi	r3,r21,16
   29cfc:	12400017 	ldw	r9,0(r2)
   29d00:	12000117 	ldw	r8,4(r2)
   29d04:	18037926 	beq	r3,zero,2aaec <_dtoa_r+0x11a0>
   29d08:	008000f4 	movhi	r2,3
   29d0c:	10922e04 	addi	r2,r2,18616
   29d10:	11800817 	ldw	r6,32(r2)
   29d14:	11c00917 	ldw	r7,36(r2)
   29d18:	9009883a 	mov	r4,r18
   29d1c:	980b883a 	mov	r5,r19
   29d20:	da001715 	stw	r8,92(sp)
   29d24:	da401615 	stw	r9,88(sp)
   29d28:	00255380 	call	25538 <__divdf3>
   29d2c:	da001717 	ldw	r8,92(sp)
   29d30:	da401617 	ldw	r9,88(sp)
   29d34:	ad4003cc 	andi	r21,r21,15
   29d38:	040000c4 	movi	r16,3
   29d3c:	1023883a 	mov	r17,r2
   29d40:	1829883a 	mov	r20,r3
   29d44:	a8001126 	beq	r21,zero,29d8c <_dtoa_r+0x440>
   29d48:	05c000f4 	movhi	r23,3
   29d4c:	bdd22e04 	addi	r23,r23,18616
   29d50:	4805883a 	mov	r2,r9
   29d54:	4007883a 	mov	r3,r8
   29d58:	a980004c 	andi	r6,r21,1
   29d5c:	1009883a 	mov	r4,r2
   29d60:	a82bd07a 	srai	r21,r21,1
   29d64:	180b883a 	mov	r5,r3
   29d68:	30000426 	beq	r6,zero,29d7c <_dtoa_r+0x430>
   29d6c:	b9800017 	ldw	r6,0(r23)
   29d70:	b9c00117 	ldw	r7,4(r23)
   29d74:	84000044 	addi	r16,r16,1
   29d78:	0025e200 	call	25e20 <__muldf3>
   29d7c:	bdc00204 	addi	r23,r23,8
   29d80:	a83ff51e 	bne	r21,zero,29d58 <__alt_data_end+0xfffea958>
   29d84:	1013883a 	mov	r9,r2
   29d88:	1811883a 	mov	r8,r3
   29d8c:	480d883a 	mov	r6,r9
   29d90:	400f883a 	mov	r7,r8
   29d94:	8809883a 	mov	r4,r17
   29d98:	a00b883a 	mov	r5,r20
   29d9c:	00255380 	call	25538 <__divdf3>
   29da0:	d8800f15 	stw	r2,60(sp)
   29da4:	d8c01015 	stw	r3,64(sp)
   29da8:	d8c00e17 	ldw	r3,56(sp)
   29dac:	18000626 	beq	r3,zero,29dc8 <_dtoa_r+0x47c>
   29db0:	d9000f17 	ldw	r4,60(sp)
   29db4:	d9401017 	ldw	r5,64(sp)
   29db8:	000d883a 	mov	r6,zero
   29dbc:	01cffc34 	movhi	r7,16368
   29dc0:	00313b80 	call	313b8 <__ledf2>
   29dc4:	10040b16 	blt	r2,zero,2adf4 <_dtoa_r+0x14a8>
   29dc8:	8009883a 	mov	r4,r16
   29dcc:	003152c0 	call	3152c <__floatsidf>
   29dd0:	d9800f17 	ldw	r6,60(sp)
   29dd4:	d9c01017 	ldw	r7,64(sp)
   29dd8:	1009883a 	mov	r4,r2
   29ddc:	180b883a 	mov	r5,r3
   29de0:	0025e200 	call	25e20 <__muldf3>
   29de4:	000d883a 	mov	r6,zero
   29de8:	01d00734 	movhi	r7,16412
   29dec:	1009883a 	mov	r4,r2
   29df0:	180b883a 	mov	r5,r3
   29df4:	0024c8c0 	call	24c8c <__adddf3>
   29df8:	1021883a 	mov	r16,r2
   29dfc:	d8800617 	ldw	r2,24(sp)
   29e00:	047f3034 	movhi	r17,64704
   29e04:	1c63883a 	add	r17,r3,r17
   29e08:	10031826 	beq	r2,zero,2aa6c <_dtoa_r+0x1120>
   29e0c:	d8c00517 	ldw	r3,20(sp)
   29e10:	db000617 	ldw	r12,24(sp)
   29e14:	d8c01315 	stw	r3,76(sp)
   29e18:	d9000b17 	ldw	r4,44(sp)
   29e1c:	20038f26 	beq	r4,zero,2ac5c <_dtoa_r+0x1310>
   29e20:	60bfffc4 	addi	r2,r12,-1
   29e24:	100490fa 	slli	r2,r2,3
   29e28:	00c000f4 	movhi	r3,3
   29e2c:	18d23804 	addi	r3,r3,18656
   29e30:	1885883a 	add	r2,r3,r2
   29e34:	11800017 	ldw	r6,0(r2)
   29e38:	11c00117 	ldw	r7,4(r2)
   29e3c:	d8800717 	ldw	r2,28(sp)
   29e40:	0009883a 	mov	r4,zero
   29e44:	014ff834 	movhi	r5,16352
   29e48:	db001615 	stw	r12,88(sp)
   29e4c:	15c00044 	addi	r23,r2,1
   29e50:	00255380 	call	25538 <__divdf3>
   29e54:	800d883a 	mov	r6,r16
   29e58:	880f883a 	mov	r7,r17
   29e5c:	1009883a 	mov	r4,r2
   29e60:	180b883a 	mov	r5,r3
   29e64:	00265380 	call	26538 <__subdf3>
   29e68:	d9401017 	ldw	r5,64(sp)
   29e6c:	d9000f17 	ldw	r4,60(sp)
   29e70:	102b883a 	mov	r21,r2
   29e74:	d8c01215 	stw	r3,72(sp)
   29e78:	00314ac0 	call	314ac <__fixdfsi>
   29e7c:	1009883a 	mov	r4,r2
   29e80:	1029883a 	mov	r20,r2
   29e84:	003152c0 	call	3152c <__floatsidf>
   29e88:	d9000f17 	ldw	r4,60(sp)
   29e8c:	d9401017 	ldw	r5,64(sp)
   29e90:	100d883a 	mov	r6,r2
   29e94:	180f883a 	mov	r7,r3
   29e98:	00265380 	call	26538 <__subdf3>
   29e9c:	1823883a 	mov	r17,r3
   29ea0:	d8c00717 	ldw	r3,28(sp)
   29ea4:	d9401217 	ldw	r5,72(sp)
   29ea8:	a2000c04 	addi	r8,r20,48
   29eac:	1021883a 	mov	r16,r2
   29eb0:	1a000005 	stb	r8,0(r3)
   29eb4:	800d883a 	mov	r6,r16
   29eb8:	880f883a 	mov	r7,r17
   29ebc:	a809883a 	mov	r4,r21
   29ec0:	4029883a 	mov	r20,r8
   29ec4:	00312dc0 	call	312dc <__gedf2>
   29ec8:	00841d16 	blt	zero,r2,2af40 <_dtoa_r+0x15f4>
   29ecc:	800d883a 	mov	r6,r16
   29ed0:	880f883a 	mov	r7,r17
   29ed4:	0009883a 	mov	r4,zero
   29ed8:	014ffc34 	movhi	r5,16368
   29edc:	00265380 	call	26538 <__subdf3>
   29ee0:	d9401217 	ldw	r5,72(sp)
   29ee4:	100d883a 	mov	r6,r2
   29ee8:	180f883a 	mov	r7,r3
   29eec:	a809883a 	mov	r4,r21
   29ef0:	00312dc0 	call	312dc <__gedf2>
   29ef4:	db001617 	ldw	r12,88(sp)
   29ef8:	00840e16 	blt	zero,r2,2af34 <_dtoa_r+0x15e8>
   29efc:	00800044 	movi	r2,1
   29f00:	13006b0e 	bge	r2,r12,2a0b0 <_dtoa_r+0x764>
   29f04:	d9000717 	ldw	r4,28(sp)
   29f08:	dd800f15 	stw	r22,60(sp)
   29f0c:	dcc01015 	stw	r19,64(sp)
   29f10:	2319883a 	add	r12,r4,r12
   29f14:	dcc01217 	ldw	r19,72(sp)
   29f18:	602d883a 	mov	r22,r12
   29f1c:	dc801215 	stw	r18,72(sp)
   29f20:	b825883a 	mov	r18,r23
   29f24:	00000906 	br	29f4c <_dtoa_r+0x600>
   29f28:	00265380 	call	26538 <__subdf3>
   29f2c:	a80d883a 	mov	r6,r21
   29f30:	980f883a 	mov	r7,r19
   29f34:	1009883a 	mov	r4,r2
   29f38:	180b883a 	mov	r5,r3
   29f3c:	00313b80 	call	313b8 <__ledf2>
   29f40:	1003e816 	blt	r2,zero,2aee4 <_dtoa_r+0x1598>
   29f44:	b825883a 	mov	r18,r23
   29f48:	bd83e926 	beq	r23,r22,2aef0 <_dtoa_r+0x15a4>
   29f4c:	a809883a 	mov	r4,r21
   29f50:	980b883a 	mov	r5,r19
   29f54:	000d883a 	mov	r6,zero
   29f58:	01d00934 	movhi	r7,16420
   29f5c:	0025e200 	call	25e20 <__muldf3>
   29f60:	000d883a 	mov	r6,zero
   29f64:	01d00934 	movhi	r7,16420
   29f68:	8009883a 	mov	r4,r16
   29f6c:	880b883a 	mov	r5,r17
   29f70:	102b883a 	mov	r21,r2
   29f74:	1827883a 	mov	r19,r3
   29f78:	0025e200 	call	25e20 <__muldf3>
   29f7c:	180b883a 	mov	r5,r3
   29f80:	1009883a 	mov	r4,r2
   29f84:	1821883a 	mov	r16,r3
   29f88:	1023883a 	mov	r17,r2
   29f8c:	00314ac0 	call	314ac <__fixdfsi>
   29f90:	1009883a 	mov	r4,r2
   29f94:	1029883a 	mov	r20,r2
   29f98:	003152c0 	call	3152c <__floatsidf>
   29f9c:	8809883a 	mov	r4,r17
   29fa0:	800b883a 	mov	r5,r16
   29fa4:	100d883a 	mov	r6,r2
   29fa8:	180f883a 	mov	r7,r3
   29fac:	00265380 	call	26538 <__subdf3>
   29fb0:	a5000c04 	addi	r20,r20,48
   29fb4:	a80d883a 	mov	r6,r21
   29fb8:	980f883a 	mov	r7,r19
   29fbc:	1009883a 	mov	r4,r2
   29fc0:	180b883a 	mov	r5,r3
   29fc4:	95000005 	stb	r20,0(r18)
   29fc8:	1021883a 	mov	r16,r2
   29fcc:	1823883a 	mov	r17,r3
   29fd0:	00313b80 	call	313b8 <__ledf2>
   29fd4:	bdc00044 	addi	r23,r23,1
   29fd8:	800d883a 	mov	r6,r16
   29fdc:	880f883a 	mov	r7,r17
   29fe0:	0009883a 	mov	r4,zero
   29fe4:	014ffc34 	movhi	r5,16368
   29fe8:	103fcf0e 	bge	r2,zero,29f28 <__alt_data_end+0xfffeab28>
   29fec:	d8c01317 	ldw	r3,76(sp)
   29ff0:	d8c00515 	stw	r3,20(sp)
   29ff4:	d9400917 	ldw	r5,36(sp)
   29ff8:	e009883a 	mov	r4,fp
   29ffc:	002d0900 	call	2d090 <_Bfree>
   2a000:	d9000517 	ldw	r4,20(sp)
   2a004:	d9802317 	ldw	r6,140(sp)
   2a008:	d9c02517 	ldw	r7,148(sp)
   2a00c:	b8000005 	stb	zero,0(r23)
   2a010:	20800044 	addi	r2,r4,1
   2a014:	30800015 	stw	r2,0(r6)
   2a018:	3802aa26 	beq	r7,zero,2aac4 <_dtoa_r+0x1178>
   2a01c:	3dc00015 	stw	r23,0(r7)
   2a020:	d8800717 	ldw	r2,28(sp)
   2a024:	003e7906 	br	29a0c <__alt_data_end+0xfffea60c>
   2a028:	00800434 	movhi	r2,16
   2a02c:	10bfffc4 	addi	r2,r2,-1
   2a030:	88a2703a 	and	r17,r17,r2
   2a034:	883e851e 	bne	r17,zero,29a4c <__alt_data_end+0xfffea64c>
   2a038:	008000f4 	movhi	r2,3
   2a03c:	10921904 	addi	r2,r2,18532
   2a040:	003e8406 	br	29a54 <__alt_data_end+0xfffea654>
   2a044:	10c00204 	addi	r3,r2,8
   2a048:	003e8706 	br	29a68 <__alt_data_end+0xfffea668>
   2a04c:	01400434 	movhi	r5,16
   2a050:	297fffc4 	addi	r5,r5,-1
   2a054:	994a703a 	and	r5,r19,r5
   2a058:	9009883a 	mov	r4,r18
   2a05c:	843f0044 	addi	r16,r16,-1023
   2a060:	294ffc34 	orhi	r5,r5,16368
   2a064:	dd800217 	ldw	r22,8(sp)
   2a068:	d8001115 	stw	zero,68(sp)
   2a06c:	003ea506 	br	29b04 <__alt_data_end+0xfffea704>
   2a070:	008000f4 	movhi	r2,3
   2a074:	10921004 	addi	r2,r2,18496
   2a078:	003e6406 	br	29a0c <__alt_data_end+0xfffea60c>
   2a07c:	e0001115 	stw	zero,68(fp)
   2a080:	000b883a 	mov	r5,zero
   2a084:	e009883a 	mov	r4,fp
   2a088:	002cfe80 	call	2cfe8 <_Balloc>
   2a08c:	01bfffc4 	movi	r6,-1
   2a090:	01c00044 	movi	r7,1
   2a094:	d8800715 	stw	r2,28(sp)
   2a098:	d9800c15 	stw	r6,48(sp)
   2a09c:	e0801015 	stw	r2,64(fp)
   2a0a0:	d8000315 	stw	zero,12(sp)
   2a0a4:	d9c00b15 	stw	r7,44(sp)
   2a0a8:	d9800615 	stw	r6,24(sp)
   2a0ac:	d8002215 	stw	zero,136(sp)
   2a0b0:	d8800117 	ldw	r2,4(sp)
   2a0b4:	10008916 	blt	r2,zero,2a2dc <_dtoa_r+0x990>
   2a0b8:	d9000517 	ldw	r4,20(sp)
   2a0bc:	00c00384 	movi	r3,14
   2a0c0:	19008616 	blt	r3,r4,2a2dc <_dtoa_r+0x990>
   2a0c4:	200490fa 	slli	r2,r4,3
   2a0c8:	00c000f4 	movhi	r3,3
   2a0cc:	d9802217 	ldw	r6,136(sp)
   2a0d0:	18d23804 	addi	r3,r3,18656
   2a0d4:	1885883a 	add	r2,r3,r2
   2a0d8:	14000017 	ldw	r16,0(r2)
   2a0dc:	14400117 	ldw	r17,4(r2)
   2a0e0:	30016316 	blt	r6,zero,2a670 <_dtoa_r+0xd24>
   2a0e4:	800d883a 	mov	r6,r16
   2a0e8:	880f883a 	mov	r7,r17
   2a0ec:	9009883a 	mov	r4,r18
   2a0f0:	980b883a 	mov	r5,r19
   2a0f4:	00255380 	call	25538 <__divdf3>
   2a0f8:	180b883a 	mov	r5,r3
   2a0fc:	1009883a 	mov	r4,r2
   2a100:	00314ac0 	call	314ac <__fixdfsi>
   2a104:	1009883a 	mov	r4,r2
   2a108:	102b883a 	mov	r21,r2
   2a10c:	003152c0 	call	3152c <__floatsidf>
   2a110:	800d883a 	mov	r6,r16
   2a114:	880f883a 	mov	r7,r17
   2a118:	1009883a 	mov	r4,r2
   2a11c:	180b883a 	mov	r5,r3
   2a120:	0025e200 	call	25e20 <__muldf3>
   2a124:	100d883a 	mov	r6,r2
   2a128:	180f883a 	mov	r7,r3
   2a12c:	9009883a 	mov	r4,r18
   2a130:	980b883a 	mov	r5,r19
   2a134:	00265380 	call	26538 <__subdf3>
   2a138:	d9c00717 	ldw	r7,28(sp)
   2a13c:	1009883a 	mov	r4,r2
   2a140:	a8800c04 	addi	r2,r21,48
   2a144:	38800005 	stb	r2,0(r7)
   2a148:	3dc00044 	addi	r23,r7,1
   2a14c:	d9c00617 	ldw	r7,24(sp)
   2a150:	01800044 	movi	r6,1
   2a154:	180b883a 	mov	r5,r3
   2a158:	2005883a 	mov	r2,r4
   2a15c:	39803826 	beq	r7,r6,2a240 <_dtoa_r+0x8f4>
   2a160:	000d883a 	mov	r6,zero
   2a164:	01d00934 	movhi	r7,16420
   2a168:	0025e200 	call	25e20 <__muldf3>
   2a16c:	000d883a 	mov	r6,zero
   2a170:	000f883a 	mov	r7,zero
   2a174:	1009883a 	mov	r4,r2
   2a178:	180b883a 	mov	r5,r3
   2a17c:	1025883a 	mov	r18,r2
   2a180:	1827883a 	mov	r19,r3
   2a184:	00312540 	call	31254 <__eqdf2>
   2a188:	103f9a26 	beq	r2,zero,29ff4 <__alt_data_end+0xfffeabf4>
   2a18c:	d9c00617 	ldw	r7,24(sp)
   2a190:	d8c00717 	ldw	r3,28(sp)
   2a194:	b829883a 	mov	r20,r23
   2a198:	38bfffc4 	addi	r2,r7,-1
   2a19c:	18ad883a 	add	r22,r3,r2
   2a1a0:	00000a06 	br	2a1cc <_dtoa_r+0x880>
   2a1a4:	0025e200 	call	25e20 <__muldf3>
   2a1a8:	000d883a 	mov	r6,zero
   2a1ac:	000f883a 	mov	r7,zero
   2a1b0:	1009883a 	mov	r4,r2
   2a1b4:	180b883a 	mov	r5,r3
   2a1b8:	1025883a 	mov	r18,r2
   2a1bc:	1827883a 	mov	r19,r3
   2a1c0:	b829883a 	mov	r20,r23
   2a1c4:	00312540 	call	31254 <__eqdf2>
   2a1c8:	103f8a26 	beq	r2,zero,29ff4 <__alt_data_end+0xfffeabf4>
   2a1cc:	800d883a 	mov	r6,r16
   2a1d0:	880f883a 	mov	r7,r17
   2a1d4:	9009883a 	mov	r4,r18
   2a1d8:	980b883a 	mov	r5,r19
   2a1dc:	00255380 	call	25538 <__divdf3>
   2a1e0:	180b883a 	mov	r5,r3
   2a1e4:	1009883a 	mov	r4,r2
   2a1e8:	00314ac0 	call	314ac <__fixdfsi>
   2a1ec:	1009883a 	mov	r4,r2
   2a1f0:	102b883a 	mov	r21,r2
   2a1f4:	003152c0 	call	3152c <__floatsidf>
   2a1f8:	800d883a 	mov	r6,r16
   2a1fc:	880f883a 	mov	r7,r17
   2a200:	1009883a 	mov	r4,r2
   2a204:	180b883a 	mov	r5,r3
   2a208:	0025e200 	call	25e20 <__muldf3>
   2a20c:	100d883a 	mov	r6,r2
   2a210:	180f883a 	mov	r7,r3
   2a214:	9009883a 	mov	r4,r18
   2a218:	980b883a 	mov	r5,r19
   2a21c:	00265380 	call	26538 <__subdf3>
   2a220:	aa000c04 	addi	r8,r21,48
   2a224:	a2000005 	stb	r8,0(r20)
   2a228:	000d883a 	mov	r6,zero
   2a22c:	01d00934 	movhi	r7,16420
   2a230:	1009883a 	mov	r4,r2
   2a234:	180b883a 	mov	r5,r3
   2a238:	a5c00044 	addi	r23,r20,1
   2a23c:	b53fd91e 	bne	r22,r20,2a1a4 <__alt_data_end+0xfffeada4>
   2a240:	100d883a 	mov	r6,r2
   2a244:	180f883a 	mov	r7,r3
   2a248:	1009883a 	mov	r4,r2
   2a24c:	180b883a 	mov	r5,r3
   2a250:	0024c8c0 	call	24c8c <__adddf3>
   2a254:	100d883a 	mov	r6,r2
   2a258:	180f883a 	mov	r7,r3
   2a25c:	8009883a 	mov	r4,r16
   2a260:	880b883a 	mov	r5,r17
   2a264:	1027883a 	mov	r19,r2
   2a268:	1825883a 	mov	r18,r3
   2a26c:	00313b80 	call	313b8 <__ledf2>
   2a270:	10000816 	blt	r2,zero,2a294 <_dtoa_r+0x948>
   2a274:	980d883a 	mov	r6,r19
   2a278:	900f883a 	mov	r7,r18
   2a27c:	8009883a 	mov	r4,r16
   2a280:	880b883a 	mov	r5,r17
   2a284:	00312540 	call	31254 <__eqdf2>
   2a288:	103f5a1e 	bne	r2,zero,29ff4 <__alt_data_end+0xfffeabf4>
   2a28c:	ad40004c 	andi	r21,r21,1
   2a290:	a83f5826 	beq	r21,zero,29ff4 <__alt_data_end+0xfffeabf4>
   2a294:	bd3fffc3 	ldbu	r20,-1(r23)
   2a298:	b8bfffc4 	addi	r2,r23,-1
   2a29c:	1007883a 	mov	r3,r2
   2a2a0:	01400e44 	movi	r5,57
   2a2a4:	d9800717 	ldw	r6,28(sp)
   2a2a8:	00000506 	br	2a2c0 <_dtoa_r+0x974>
   2a2ac:	18ffffc4 	addi	r3,r3,-1
   2a2b0:	11824726 	beq	r2,r6,2abd0 <_dtoa_r+0x1284>
   2a2b4:	1d000003 	ldbu	r20,0(r3)
   2a2b8:	102f883a 	mov	r23,r2
   2a2bc:	10bfffc4 	addi	r2,r2,-1
   2a2c0:	a1003fcc 	andi	r4,r20,255
   2a2c4:	2100201c 	xori	r4,r4,128
   2a2c8:	213fe004 	addi	r4,r4,-128
   2a2cc:	217ff726 	beq	r4,r5,2a2ac <__alt_data_end+0xfffeaeac>
   2a2d0:	a2000044 	addi	r8,r20,1
   2a2d4:	12000005 	stb	r8,0(r2)
   2a2d8:	003f4606 	br	29ff4 <__alt_data_end+0xfffeabf4>
   2a2dc:	d9000b17 	ldw	r4,44(sp)
   2a2e0:	2000c826 	beq	r4,zero,2a604 <_dtoa_r+0xcb8>
   2a2e4:	d9800317 	ldw	r6,12(sp)
   2a2e8:	00c00044 	movi	r3,1
   2a2ec:	1980f90e 	bge	r3,r6,2a6d4 <_dtoa_r+0xd88>
   2a2f0:	d8800617 	ldw	r2,24(sp)
   2a2f4:	d8c00a17 	ldw	r3,40(sp)
   2a2f8:	157fffc4 	addi	r21,r2,-1
   2a2fc:	1d41f316 	blt	r3,r21,2aacc <_dtoa_r+0x1180>
   2a300:	1d6bc83a 	sub	r21,r3,r21
   2a304:	d9c00617 	ldw	r7,24(sp)
   2a308:	3802aa16 	blt	r7,zero,2adb4 <_dtoa_r+0x1468>
   2a30c:	dd000817 	ldw	r20,32(sp)
   2a310:	d8800617 	ldw	r2,24(sp)
   2a314:	d8c00817 	ldw	r3,32(sp)
   2a318:	01400044 	movi	r5,1
   2a31c:	e009883a 	mov	r4,fp
   2a320:	1887883a 	add	r3,r3,r2
   2a324:	d8c00815 	stw	r3,32(sp)
   2a328:	b0ad883a 	add	r22,r22,r2
   2a32c:	002d3f40 	call	2d3f4 <__i2b>
   2a330:	1023883a 	mov	r17,r2
   2a334:	a0000826 	beq	r20,zero,2a358 <_dtoa_r+0xa0c>
   2a338:	0580070e 	bge	zero,r22,2a358 <_dtoa_r+0xa0c>
   2a33c:	a005883a 	mov	r2,r20
   2a340:	b500b916 	blt	r22,r20,2a628 <_dtoa_r+0xcdc>
   2a344:	d9000817 	ldw	r4,32(sp)
   2a348:	a0a9c83a 	sub	r20,r20,r2
   2a34c:	b0adc83a 	sub	r22,r22,r2
   2a350:	2089c83a 	sub	r4,r4,r2
   2a354:	d9000815 	stw	r4,32(sp)
   2a358:	d9800a17 	ldw	r6,40(sp)
   2a35c:	0181810e 	bge	zero,r6,2a964 <_dtoa_r+0x1018>
   2a360:	d9c00b17 	ldw	r7,44(sp)
   2a364:	3800b326 	beq	r7,zero,2a634 <_dtoa_r+0xce8>
   2a368:	a800b226 	beq	r21,zero,2a634 <_dtoa_r+0xce8>
   2a36c:	880b883a 	mov	r5,r17
   2a370:	a80d883a 	mov	r6,r21
   2a374:	e009883a 	mov	r4,fp
   2a378:	002d6280 	call	2d628 <__pow5mult>
   2a37c:	d9800917 	ldw	r6,36(sp)
   2a380:	100b883a 	mov	r5,r2
   2a384:	e009883a 	mov	r4,fp
   2a388:	1023883a 	mov	r17,r2
   2a38c:	002d4300 	call	2d430 <__multiply>
   2a390:	1021883a 	mov	r16,r2
   2a394:	d8800a17 	ldw	r2,40(sp)
   2a398:	d9400917 	ldw	r5,36(sp)
   2a39c:	e009883a 	mov	r4,fp
   2a3a0:	1545c83a 	sub	r2,r2,r21
   2a3a4:	d8800a15 	stw	r2,40(sp)
   2a3a8:	002d0900 	call	2d090 <_Bfree>
   2a3ac:	d8c00a17 	ldw	r3,40(sp)
   2a3b0:	18009f1e 	bne	r3,zero,2a630 <_dtoa_r+0xce4>
   2a3b4:	05c00044 	movi	r23,1
   2a3b8:	e009883a 	mov	r4,fp
   2a3bc:	b80b883a 	mov	r5,r23
   2a3c0:	002d3f40 	call	2d3f4 <__i2b>
   2a3c4:	d9000d17 	ldw	r4,52(sp)
   2a3c8:	102b883a 	mov	r21,r2
   2a3cc:	2000ce26 	beq	r4,zero,2a708 <_dtoa_r+0xdbc>
   2a3d0:	200d883a 	mov	r6,r4
   2a3d4:	100b883a 	mov	r5,r2
   2a3d8:	e009883a 	mov	r4,fp
   2a3dc:	002d6280 	call	2d628 <__pow5mult>
   2a3e0:	d9800317 	ldw	r6,12(sp)
   2a3e4:	102b883a 	mov	r21,r2
   2a3e8:	b981810e 	bge	r23,r6,2a9f0 <_dtoa_r+0x10a4>
   2a3ec:	0027883a 	mov	r19,zero
   2a3f0:	a8800417 	ldw	r2,16(r21)
   2a3f4:	05c00804 	movi	r23,32
   2a3f8:	10800104 	addi	r2,r2,4
   2a3fc:	1085883a 	add	r2,r2,r2
   2a400:	1085883a 	add	r2,r2,r2
   2a404:	a885883a 	add	r2,r21,r2
   2a408:	11000017 	ldw	r4,0(r2)
   2a40c:	002d2dc0 	call	2d2dc <__hi0bits>
   2a410:	b885c83a 	sub	r2,r23,r2
   2a414:	1585883a 	add	r2,r2,r22
   2a418:	108007cc 	andi	r2,r2,31
   2a41c:	1000b326 	beq	r2,zero,2a6ec <_dtoa_r+0xda0>
   2a420:	00c00804 	movi	r3,32
   2a424:	1887c83a 	sub	r3,r3,r2
   2a428:	01000104 	movi	r4,4
   2a42c:	20c2cd0e 	bge	r4,r3,2af64 <_dtoa_r+0x1618>
   2a430:	00c00704 	movi	r3,28
   2a434:	1885c83a 	sub	r2,r3,r2
   2a438:	d8c00817 	ldw	r3,32(sp)
   2a43c:	a0a9883a 	add	r20,r20,r2
   2a440:	b0ad883a 	add	r22,r22,r2
   2a444:	1887883a 	add	r3,r3,r2
   2a448:	d8c00815 	stw	r3,32(sp)
   2a44c:	d9800817 	ldw	r6,32(sp)
   2a450:	0180040e 	bge	zero,r6,2a464 <_dtoa_r+0xb18>
   2a454:	800b883a 	mov	r5,r16
   2a458:	e009883a 	mov	r4,fp
   2a45c:	002d7680 	call	2d768 <__lshift>
   2a460:	1021883a 	mov	r16,r2
   2a464:	0580050e 	bge	zero,r22,2a47c <_dtoa_r+0xb30>
   2a468:	a80b883a 	mov	r5,r21
   2a46c:	b00d883a 	mov	r6,r22
   2a470:	e009883a 	mov	r4,fp
   2a474:	002d7680 	call	2d768 <__lshift>
   2a478:	102b883a 	mov	r21,r2
   2a47c:	d9c00e17 	ldw	r7,56(sp)
   2a480:	3801211e 	bne	r7,zero,2a908 <_dtoa_r+0xfbc>
   2a484:	d9800617 	ldw	r6,24(sp)
   2a488:	0181380e 	bge	zero,r6,2a96c <_dtoa_r+0x1020>
   2a48c:	d8c00b17 	ldw	r3,44(sp)
   2a490:	1800ab1e 	bne	r3,zero,2a740 <_dtoa_r+0xdf4>
   2a494:	dc800717 	ldw	r18,28(sp)
   2a498:	dcc00617 	ldw	r19,24(sp)
   2a49c:	9029883a 	mov	r20,r18
   2a4a0:	00000206 	br	2a4ac <_dtoa_r+0xb60>
   2a4a4:	002d0b80 	call	2d0b8 <__multadd>
   2a4a8:	1021883a 	mov	r16,r2
   2a4ac:	a80b883a 	mov	r5,r21
   2a4b0:	8009883a 	mov	r4,r16
   2a4b4:	002974c0 	call	2974c <quorem>
   2a4b8:	10800c04 	addi	r2,r2,48
   2a4bc:	90800005 	stb	r2,0(r18)
   2a4c0:	94800044 	addi	r18,r18,1
   2a4c4:	9507c83a 	sub	r3,r18,r20
   2a4c8:	000f883a 	mov	r7,zero
   2a4cc:	01800284 	movi	r6,10
   2a4d0:	800b883a 	mov	r5,r16
   2a4d4:	e009883a 	mov	r4,fp
   2a4d8:	1cfff216 	blt	r3,r19,2a4a4 <__alt_data_end+0xfffeb0a4>
   2a4dc:	1011883a 	mov	r8,r2
   2a4e0:	d8800617 	ldw	r2,24(sp)
   2a4e4:	0082370e 	bge	zero,r2,2adc4 <_dtoa_r+0x1478>
   2a4e8:	d9000717 	ldw	r4,28(sp)
   2a4ec:	0025883a 	mov	r18,zero
   2a4f0:	20af883a 	add	r23,r4,r2
   2a4f4:	01800044 	movi	r6,1
   2a4f8:	800b883a 	mov	r5,r16
   2a4fc:	e009883a 	mov	r4,fp
   2a500:	da001715 	stw	r8,92(sp)
   2a504:	002d7680 	call	2d768 <__lshift>
   2a508:	a80b883a 	mov	r5,r21
   2a50c:	1009883a 	mov	r4,r2
   2a510:	d8800915 	stw	r2,36(sp)
   2a514:	002d8b00 	call	2d8b0 <__mcmp>
   2a518:	da001717 	ldw	r8,92(sp)
   2a51c:	0081800e 	bge	zero,r2,2ab20 <_dtoa_r+0x11d4>
   2a520:	b93fffc3 	ldbu	r4,-1(r23)
   2a524:	b8bfffc4 	addi	r2,r23,-1
   2a528:	1007883a 	mov	r3,r2
   2a52c:	01800e44 	movi	r6,57
   2a530:	d9c00717 	ldw	r7,28(sp)
   2a534:	00000506 	br	2a54c <_dtoa_r+0xc00>
   2a538:	18ffffc4 	addi	r3,r3,-1
   2a53c:	11c12326 	beq	r2,r7,2a9cc <_dtoa_r+0x1080>
   2a540:	19000003 	ldbu	r4,0(r3)
   2a544:	102f883a 	mov	r23,r2
   2a548:	10bfffc4 	addi	r2,r2,-1
   2a54c:	21403fcc 	andi	r5,r4,255
   2a550:	2940201c 	xori	r5,r5,128
   2a554:	297fe004 	addi	r5,r5,-128
   2a558:	29bff726 	beq	r5,r6,2a538 <__alt_data_end+0xfffeb138>
   2a55c:	21000044 	addi	r4,r4,1
   2a560:	11000005 	stb	r4,0(r2)
   2a564:	a80b883a 	mov	r5,r21
   2a568:	e009883a 	mov	r4,fp
   2a56c:	002d0900 	call	2d090 <_Bfree>
   2a570:	883ea026 	beq	r17,zero,29ff4 <__alt_data_end+0xfffeabf4>
   2a574:	90000426 	beq	r18,zero,2a588 <_dtoa_r+0xc3c>
   2a578:	94400326 	beq	r18,r17,2a588 <_dtoa_r+0xc3c>
   2a57c:	900b883a 	mov	r5,r18
   2a580:	e009883a 	mov	r4,fp
   2a584:	002d0900 	call	2d090 <_Bfree>
   2a588:	880b883a 	mov	r5,r17
   2a58c:	e009883a 	mov	r4,fp
   2a590:	002d0900 	call	2d090 <_Bfree>
   2a594:	003e9706 	br	29ff4 <__alt_data_end+0xfffeabf4>
   2a598:	01800044 	movi	r6,1
   2a59c:	d9800e15 	stw	r6,56(sp)
   2a5a0:	003d9606 	br	29bfc <__alt_data_end+0xfffea7fc>
   2a5a4:	d8800817 	ldw	r2,32(sp)
   2a5a8:	d8c00517 	ldw	r3,20(sp)
   2a5ac:	d8000d15 	stw	zero,52(sp)
   2a5b0:	10c5c83a 	sub	r2,r2,r3
   2a5b4:	00c9c83a 	sub	r4,zero,r3
   2a5b8:	d8800815 	stw	r2,32(sp)
   2a5bc:	d9000a15 	stw	r4,40(sp)
   2a5c0:	003d9706 	br	29c20 <__alt_data_end+0xfffea820>
   2a5c4:	05adc83a 	sub	r22,zero,r22
   2a5c8:	dd800815 	stw	r22,32(sp)
   2a5cc:	002d883a 	mov	r22,zero
   2a5d0:	003d8e06 	br	29c0c <__alt_data_end+0xfffea80c>
   2a5d4:	d9000517 	ldw	r4,20(sp)
   2a5d8:	003152c0 	call	3152c <__floatsidf>
   2a5dc:	100d883a 	mov	r6,r2
   2a5e0:	180f883a 	mov	r7,r3
   2a5e4:	a009883a 	mov	r4,r20
   2a5e8:	880b883a 	mov	r5,r17
   2a5ec:	00312540 	call	31254 <__eqdf2>
   2a5f0:	103d7126 	beq	r2,zero,29bb8 <__alt_data_end+0xfffea7b8>
   2a5f4:	d9c00517 	ldw	r7,20(sp)
   2a5f8:	39ffffc4 	addi	r7,r7,-1
   2a5fc:	d9c00515 	stw	r7,20(sp)
   2a600:	003d6d06 	br	29bb8 <__alt_data_end+0xfffea7b8>
   2a604:	dd400a17 	ldw	r21,40(sp)
   2a608:	dd000817 	ldw	r20,32(sp)
   2a60c:	0023883a 	mov	r17,zero
   2a610:	003f4806 	br	2a334 <__alt_data_end+0xfffeaf34>
   2a614:	10e3c83a 	sub	r17,r2,r3
   2a618:	9448983a 	sll	r4,r18,r17
   2a61c:	003d3206 	br	29ae8 <__alt_data_end+0xfffea6e8>
   2a620:	d8000e15 	stw	zero,56(sp)
   2a624:	003d7506 	br	29bfc <__alt_data_end+0xfffea7fc>
   2a628:	b005883a 	mov	r2,r22
   2a62c:	003f4506 	br	2a344 <__alt_data_end+0xfffeaf44>
   2a630:	dc000915 	stw	r16,36(sp)
   2a634:	d9800a17 	ldw	r6,40(sp)
   2a638:	d9400917 	ldw	r5,36(sp)
   2a63c:	e009883a 	mov	r4,fp
   2a640:	002d6280 	call	2d628 <__pow5mult>
   2a644:	1021883a 	mov	r16,r2
   2a648:	003f5a06 	br	2a3b4 <__alt_data_end+0xfffeafb4>
   2a64c:	01c00044 	movi	r7,1
   2a650:	d9c00b15 	stw	r7,44(sp)
   2a654:	d8802217 	ldw	r2,136(sp)
   2a658:	0081280e 	bge	zero,r2,2aafc <_dtoa_r+0x11b0>
   2a65c:	100d883a 	mov	r6,r2
   2a660:	1021883a 	mov	r16,r2
   2a664:	d8800c15 	stw	r2,48(sp)
   2a668:	d8800615 	stw	r2,24(sp)
   2a66c:	003d8806 	br	29c90 <__alt_data_end+0xfffea890>
   2a670:	d8800617 	ldw	r2,24(sp)
   2a674:	00be9b16 	blt	zero,r2,2a0e4 <__alt_data_end+0xfffeace4>
   2a678:	10010f1e 	bne	r2,zero,2aab8 <_dtoa_r+0x116c>
   2a67c:	880b883a 	mov	r5,r17
   2a680:	000d883a 	mov	r6,zero
   2a684:	01d00534 	movhi	r7,16404
   2a688:	8009883a 	mov	r4,r16
   2a68c:	0025e200 	call	25e20 <__muldf3>
   2a690:	900d883a 	mov	r6,r18
   2a694:	980f883a 	mov	r7,r19
   2a698:	1009883a 	mov	r4,r2
   2a69c:	180b883a 	mov	r5,r3
   2a6a0:	00312dc0 	call	312dc <__gedf2>
   2a6a4:	002b883a 	mov	r21,zero
   2a6a8:	0023883a 	mov	r17,zero
   2a6ac:	1000bf16 	blt	r2,zero,2a9ac <_dtoa_r+0x1060>
   2a6b0:	d9802217 	ldw	r6,136(sp)
   2a6b4:	ddc00717 	ldw	r23,28(sp)
   2a6b8:	018c303a 	nor	r6,zero,r6
   2a6bc:	d9800515 	stw	r6,20(sp)
   2a6c0:	a80b883a 	mov	r5,r21
   2a6c4:	e009883a 	mov	r4,fp
   2a6c8:	002d0900 	call	2d090 <_Bfree>
   2a6cc:	883e4926 	beq	r17,zero,29ff4 <__alt_data_end+0xfffeabf4>
   2a6d0:	003fad06 	br	2a588 <__alt_data_end+0xfffeb188>
   2a6d4:	d9c01117 	ldw	r7,68(sp)
   2a6d8:	3801bc26 	beq	r7,zero,2adcc <_dtoa_r+0x1480>
   2a6dc:	10810cc4 	addi	r2,r2,1075
   2a6e0:	dd400a17 	ldw	r21,40(sp)
   2a6e4:	dd000817 	ldw	r20,32(sp)
   2a6e8:	003f0a06 	br	2a314 <__alt_data_end+0xfffeaf14>
   2a6ec:	00800704 	movi	r2,28
   2a6f0:	d9000817 	ldw	r4,32(sp)
   2a6f4:	a0a9883a 	add	r20,r20,r2
   2a6f8:	b0ad883a 	add	r22,r22,r2
   2a6fc:	2089883a 	add	r4,r4,r2
   2a700:	d9000815 	stw	r4,32(sp)
   2a704:	003f5106 	br	2a44c <__alt_data_end+0xfffeb04c>
   2a708:	d8c00317 	ldw	r3,12(sp)
   2a70c:	b8c1fc0e 	bge	r23,r3,2af00 <_dtoa_r+0x15b4>
   2a710:	0027883a 	mov	r19,zero
   2a714:	b805883a 	mov	r2,r23
   2a718:	003f3e06 	br	2a414 <__alt_data_end+0xfffeb014>
   2a71c:	880b883a 	mov	r5,r17
   2a720:	e009883a 	mov	r4,fp
   2a724:	000f883a 	mov	r7,zero
   2a728:	01800284 	movi	r6,10
   2a72c:	002d0b80 	call	2d0b8 <__multadd>
   2a730:	d9000c17 	ldw	r4,48(sp)
   2a734:	1023883a 	mov	r17,r2
   2a738:	0102040e 	bge	zero,r4,2af4c <_dtoa_r+0x1600>
   2a73c:	d9000615 	stw	r4,24(sp)
   2a740:	0500050e 	bge	zero,r20,2a758 <_dtoa_r+0xe0c>
   2a744:	880b883a 	mov	r5,r17
   2a748:	a00d883a 	mov	r6,r20
   2a74c:	e009883a 	mov	r4,fp
   2a750:	002d7680 	call	2d768 <__lshift>
   2a754:	1023883a 	mov	r17,r2
   2a758:	9801241e 	bne	r19,zero,2abec <_dtoa_r+0x12a0>
   2a75c:	8829883a 	mov	r20,r17
   2a760:	d9000617 	ldw	r4,24(sp)
   2a764:	dcc00717 	ldw	r19,28(sp)
   2a768:	9480004c 	andi	r18,r18,1
   2a76c:	20bfffc4 	addi	r2,r4,-1
   2a770:	9885883a 	add	r2,r19,r2
   2a774:	d8800415 	stw	r2,16(sp)
   2a778:	dc800615 	stw	r18,24(sp)
   2a77c:	a80b883a 	mov	r5,r21
   2a780:	8009883a 	mov	r4,r16
   2a784:	002974c0 	call	2974c <quorem>
   2a788:	880b883a 	mov	r5,r17
   2a78c:	8009883a 	mov	r4,r16
   2a790:	102f883a 	mov	r23,r2
   2a794:	002d8b00 	call	2d8b0 <__mcmp>
   2a798:	a80b883a 	mov	r5,r21
   2a79c:	a00d883a 	mov	r6,r20
   2a7a0:	e009883a 	mov	r4,fp
   2a7a4:	102d883a 	mov	r22,r2
   2a7a8:	002d9100 	call	2d910 <__mdiff>
   2a7ac:	1007883a 	mov	r3,r2
   2a7b0:	10800317 	ldw	r2,12(r2)
   2a7b4:	bc800c04 	addi	r18,r23,48
   2a7b8:	180b883a 	mov	r5,r3
   2a7bc:	10004e1e 	bne	r2,zero,2a8f8 <_dtoa_r+0xfac>
   2a7c0:	8009883a 	mov	r4,r16
   2a7c4:	d8c01615 	stw	r3,88(sp)
   2a7c8:	002d8b00 	call	2d8b0 <__mcmp>
   2a7cc:	d8c01617 	ldw	r3,88(sp)
   2a7d0:	e009883a 	mov	r4,fp
   2a7d4:	d8801615 	stw	r2,88(sp)
   2a7d8:	180b883a 	mov	r5,r3
   2a7dc:	002d0900 	call	2d090 <_Bfree>
   2a7e0:	d8801617 	ldw	r2,88(sp)
   2a7e4:	1000041e 	bne	r2,zero,2a7f8 <_dtoa_r+0xeac>
   2a7e8:	d9800317 	ldw	r6,12(sp)
   2a7ec:	3000021e 	bne	r6,zero,2a7f8 <_dtoa_r+0xeac>
   2a7f0:	d8c00617 	ldw	r3,24(sp)
   2a7f4:	18003726 	beq	r3,zero,2a8d4 <_dtoa_r+0xf88>
   2a7f8:	b0002016 	blt	r22,zero,2a87c <_dtoa_r+0xf30>
   2a7fc:	b000041e 	bne	r22,zero,2a810 <_dtoa_r+0xec4>
   2a800:	d9000317 	ldw	r4,12(sp)
   2a804:	2000021e 	bne	r4,zero,2a810 <_dtoa_r+0xec4>
   2a808:	d8c00617 	ldw	r3,24(sp)
   2a80c:	18001b26 	beq	r3,zero,2a87c <_dtoa_r+0xf30>
   2a810:	00810716 	blt	zero,r2,2ac30 <_dtoa_r+0x12e4>
   2a814:	d8c00417 	ldw	r3,16(sp)
   2a818:	9d800044 	addi	r22,r19,1
   2a81c:	9c800005 	stb	r18,0(r19)
   2a820:	b02f883a 	mov	r23,r22
   2a824:	98c10626 	beq	r19,r3,2ac40 <_dtoa_r+0x12f4>
   2a828:	800b883a 	mov	r5,r16
   2a82c:	000f883a 	mov	r7,zero
   2a830:	01800284 	movi	r6,10
   2a834:	e009883a 	mov	r4,fp
   2a838:	002d0b80 	call	2d0b8 <__multadd>
   2a83c:	1021883a 	mov	r16,r2
   2a840:	000f883a 	mov	r7,zero
   2a844:	01800284 	movi	r6,10
   2a848:	880b883a 	mov	r5,r17
   2a84c:	e009883a 	mov	r4,fp
   2a850:	8d002526 	beq	r17,r20,2a8e8 <_dtoa_r+0xf9c>
   2a854:	002d0b80 	call	2d0b8 <__multadd>
   2a858:	a00b883a 	mov	r5,r20
   2a85c:	000f883a 	mov	r7,zero
   2a860:	01800284 	movi	r6,10
   2a864:	e009883a 	mov	r4,fp
   2a868:	1023883a 	mov	r17,r2
   2a86c:	002d0b80 	call	2d0b8 <__multadd>
   2a870:	1029883a 	mov	r20,r2
   2a874:	b027883a 	mov	r19,r22
   2a878:	003fc006 	br	2a77c <__alt_data_end+0xfffeb37c>
   2a87c:	9011883a 	mov	r8,r18
   2a880:	00800e0e 	bge	zero,r2,2a8bc <_dtoa_r+0xf70>
   2a884:	800b883a 	mov	r5,r16
   2a888:	01800044 	movi	r6,1
   2a88c:	e009883a 	mov	r4,fp
   2a890:	da001715 	stw	r8,92(sp)
   2a894:	002d7680 	call	2d768 <__lshift>
   2a898:	a80b883a 	mov	r5,r21
   2a89c:	1009883a 	mov	r4,r2
   2a8a0:	1021883a 	mov	r16,r2
   2a8a4:	002d8b00 	call	2d8b0 <__mcmp>
   2a8a8:	da001717 	ldw	r8,92(sp)
   2a8ac:	0081960e 	bge	zero,r2,2af08 <_dtoa_r+0x15bc>
   2a8b0:	00800e44 	movi	r2,57
   2a8b4:	40817026 	beq	r8,r2,2ae78 <_dtoa_r+0x152c>
   2a8b8:	ba000c44 	addi	r8,r23,49
   2a8bc:	8825883a 	mov	r18,r17
   2a8c0:	9dc00044 	addi	r23,r19,1
   2a8c4:	9a000005 	stb	r8,0(r19)
   2a8c8:	a023883a 	mov	r17,r20
   2a8cc:	dc000915 	stw	r16,36(sp)
   2a8d0:	003f2406 	br	2a564 <__alt_data_end+0xfffeb164>
   2a8d4:	00800e44 	movi	r2,57
   2a8d8:	9011883a 	mov	r8,r18
   2a8dc:	90816626 	beq	r18,r2,2ae78 <_dtoa_r+0x152c>
   2a8e0:	05bff516 	blt	zero,r22,2a8b8 <__alt_data_end+0xfffeb4b8>
   2a8e4:	003ff506 	br	2a8bc <__alt_data_end+0xfffeb4bc>
   2a8e8:	002d0b80 	call	2d0b8 <__multadd>
   2a8ec:	1023883a 	mov	r17,r2
   2a8f0:	1029883a 	mov	r20,r2
   2a8f4:	003fdf06 	br	2a874 <__alt_data_end+0xfffeb474>
   2a8f8:	e009883a 	mov	r4,fp
   2a8fc:	002d0900 	call	2d090 <_Bfree>
   2a900:	00800044 	movi	r2,1
   2a904:	003fbc06 	br	2a7f8 <__alt_data_end+0xfffeb3f8>
   2a908:	a80b883a 	mov	r5,r21
   2a90c:	8009883a 	mov	r4,r16
   2a910:	002d8b00 	call	2d8b0 <__mcmp>
   2a914:	103edb0e 	bge	r2,zero,2a484 <__alt_data_end+0xfffeb084>
   2a918:	800b883a 	mov	r5,r16
   2a91c:	000f883a 	mov	r7,zero
   2a920:	01800284 	movi	r6,10
   2a924:	e009883a 	mov	r4,fp
   2a928:	002d0b80 	call	2d0b8 <__multadd>
   2a92c:	1021883a 	mov	r16,r2
   2a930:	d8800517 	ldw	r2,20(sp)
   2a934:	d8c00b17 	ldw	r3,44(sp)
   2a938:	10bfffc4 	addi	r2,r2,-1
   2a93c:	d8800515 	stw	r2,20(sp)
   2a940:	183f761e 	bne	r3,zero,2a71c <__alt_data_end+0xfffeb31c>
   2a944:	d9000c17 	ldw	r4,48(sp)
   2a948:	0101730e 	bge	zero,r4,2af18 <_dtoa_r+0x15cc>
   2a94c:	d9000615 	stw	r4,24(sp)
   2a950:	003ed006 	br	2a494 <__alt_data_end+0xfffeb094>
   2a954:	00800084 	movi	r2,2
   2a958:	3081861e 	bne	r6,r2,2af74 <_dtoa_r+0x1628>
   2a95c:	d8000b15 	stw	zero,44(sp)
   2a960:	003f3c06 	br	2a654 <__alt_data_end+0xfffeb254>
   2a964:	dc000917 	ldw	r16,36(sp)
   2a968:	003e9206 	br	2a3b4 <__alt_data_end+0xfffeafb4>
   2a96c:	d9c00317 	ldw	r7,12(sp)
   2a970:	00800084 	movi	r2,2
   2a974:	11fec50e 	bge	r2,r7,2a48c <__alt_data_end+0xfffeb08c>
   2a978:	d9000617 	ldw	r4,24(sp)
   2a97c:	20013c1e 	bne	r4,zero,2ae70 <_dtoa_r+0x1524>
   2a980:	a80b883a 	mov	r5,r21
   2a984:	000f883a 	mov	r7,zero
   2a988:	01800144 	movi	r6,5
   2a98c:	e009883a 	mov	r4,fp
   2a990:	002d0b80 	call	2d0b8 <__multadd>
   2a994:	100b883a 	mov	r5,r2
   2a998:	8009883a 	mov	r4,r16
   2a99c:	102b883a 	mov	r21,r2
   2a9a0:	002d8b00 	call	2d8b0 <__mcmp>
   2a9a4:	dc000915 	stw	r16,36(sp)
   2a9a8:	00bf410e 	bge	zero,r2,2a6b0 <__alt_data_end+0xfffeb2b0>
   2a9ac:	d9c00717 	ldw	r7,28(sp)
   2a9b0:	00800c44 	movi	r2,49
   2a9b4:	38800005 	stb	r2,0(r7)
   2a9b8:	d8800517 	ldw	r2,20(sp)
   2a9bc:	3dc00044 	addi	r23,r7,1
   2a9c0:	10800044 	addi	r2,r2,1
   2a9c4:	d8800515 	stw	r2,20(sp)
   2a9c8:	003f3d06 	br	2a6c0 <__alt_data_end+0xfffeb2c0>
   2a9cc:	d9800517 	ldw	r6,20(sp)
   2a9d0:	d9c00717 	ldw	r7,28(sp)
   2a9d4:	00800c44 	movi	r2,49
   2a9d8:	31800044 	addi	r6,r6,1
   2a9dc:	d9800515 	stw	r6,20(sp)
   2a9e0:	38800005 	stb	r2,0(r7)
   2a9e4:	003edf06 	br	2a564 <__alt_data_end+0xfffeb164>
   2a9e8:	d8000b15 	stw	zero,44(sp)
   2a9ec:	003c9f06 	br	29c6c <__alt_data_end+0xfffea86c>
   2a9f0:	903e7e1e 	bne	r18,zero,2a3ec <__alt_data_end+0xfffeafec>
   2a9f4:	00800434 	movhi	r2,16
   2a9f8:	10bfffc4 	addi	r2,r2,-1
   2a9fc:	9884703a 	and	r2,r19,r2
   2aa00:	1000ea1e 	bne	r2,zero,2adac <_dtoa_r+0x1460>
   2aa04:	9cdffc2c 	andhi	r19,r19,32752
   2aa08:	9800e826 	beq	r19,zero,2adac <_dtoa_r+0x1460>
   2aa0c:	d9c00817 	ldw	r7,32(sp)
   2aa10:	b5800044 	addi	r22,r22,1
   2aa14:	04c00044 	movi	r19,1
   2aa18:	39c00044 	addi	r7,r7,1
   2aa1c:	d9c00815 	stw	r7,32(sp)
   2aa20:	d8800d17 	ldw	r2,52(sp)
   2aa24:	103e721e 	bne	r2,zero,2a3f0 <__alt_data_end+0xfffeaff0>
   2aa28:	00800044 	movi	r2,1
   2aa2c:	003e7906 	br	2a414 <__alt_data_end+0xfffeb014>
   2aa30:	8009883a 	mov	r4,r16
   2aa34:	003152c0 	call	3152c <__floatsidf>
   2aa38:	d9800f17 	ldw	r6,60(sp)
   2aa3c:	d9c01017 	ldw	r7,64(sp)
   2aa40:	1009883a 	mov	r4,r2
   2aa44:	180b883a 	mov	r5,r3
   2aa48:	0025e200 	call	25e20 <__muldf3>
   2aa4c:	000d883a 	mov	r6,zero
   2aa50:	01d00734 	movhi	r7,16412
   2aa54:	1009883a 	mov	r4,r2
   2aa58:	180b883a 	mov	r5,r3
   2aa5c:	0024c8c0 	call	24c8c <__adddf3>
   2aa60:	047f3034 	movhi	r17,64704
   2aa64:	1021883a 	mov	r16,r2
   2aa68:	1c63883a 	add	r17,r3,r17
   2aa6c:	d9000f17 	ldw	r4,60(sp)
   2aa70:	d9401017 	ldw	r5,64(sp)
   2aa74:	000d883a 	mov	r6,zero
   2aa78:	01d00534 	movhi	r7,16404
   2aa7c:	00265380 	call	26538 <__subdf3>
   2aa80:	800d883a 	mov	r6,r16
   2aa84:	880f883a 	mov	r7,r17
   2aa88:	1009883a 	mov	r4,r2
   2aa8c:	180b883a 	mov	r5,r3
   2aa90:	102b883a 	mov	r21,r2
   2aa94:	1829883a 	mov	r20,r3
   2aa98:	00312dc0 	call	312dc <__gedf2>
   2aa9c:	00806c16 	blt	zero,r2,2ac50 <_dtoa_r+0x1304>
   2aaa0:	89e0003c 	xorhi	r7,r17,32768
   2aaa4:	800d883a 	mov	r6,r16
   2aaa8:	a809883a 	mov	r4,r21
   2aaac:	a00b883a 	mov	r5,r20
   2aab0:	00313b80 	call	313b8 <__ledf2>
   2aab4:	103d7e0e 	bge	r2,zero,2a0b0 <__alt_data_end+0xfffeacb0>
   2aab8:	002b883a 	mov	r21,zero
   2aabc:	0023883a 	mov	r17,zero
   2aac0:	003efb06 	br	2a6b0 <__alt_data_end+0xfffeb2b0>
   2aac4:	d8800717 	ldw	r2,28(sp)
   2aac8:	003bd006 	br	29a0c <__alt_data_end+0xfffea60c>
   2aacc:	d9000a17 	ldw	r4,40(sp)
   2aad0:	d9800d17 	ldw	r6,52(sp)
   2aad4:	dd400a15 	stw	r21,40(sp)
   2aad8:	a905c83a 	sub	r2,r21,r4
   2aadc:	308d883a 	add	r6,r6,r2
   2aae0:	d9800d15 	stw	r6,52(sp)
   2aae4:	002b883a 	mov	r21,zero
   2aae8:	003e0606 	br	2a304 <__alt_data_end+0xfffeaf04>
   2aaec:	9023883a 	mov	r17,r18
   2aaf0:	9829883a 	mov	r20,r19
   2aaf4:	04000084 	movi	r16,2
   2aaf8:	003c9206 	br	29d44 <__alt_data_end+0xfffea944>
   2aafc:	04000044 	movi	r16,1
   2ab00:	dc000c15 	stw	r16,48(sp)
   2ab04:	dc000615 	stw	r16,24(sp)
   2ab08:	dc002215 	stw	r16,136(sp)
   2ab0c:	e0001115 	stw	zero,68(fp)
   2ab10:	000b883a 	mov	r5,zero
   2ab14:	003c6906 	br	29cbc <__alt_data_end+0xfffea8bc>
   2ab18:	3021883a 	mov	r16,r6
   2ab1c:	003ffb06 	br	2ab0c <__alt_data_end+0xfffeb70c>
   2ab20:	1000021e 	bne	r2,zero,2ab2c <_dtoa_r+0x11e0>
   2ab24:	4200004c 	andi	r8,r8,1
   2ab28:	403e7d1e 	bne	r8,zero,2a520 <__alt_data_end+0xfffeb120>
   2ab2c:	01000c04 	movi	r4,48
   2ab30:	00000106 	br	2ab38 <_dtoa_r+0x11ec>
   2ab34:	102f883a 	mov	r23,r2
   2ab38:	b8bfffc4 	addi	r2,r23,-1
   2ab3c:	10c00007 	ldb	r3,0(r2)
   2ab40:	193ffc26 	beq	r3,r4,2ab34 <__alt_data_end+0xfffeb734>
   2ab44:	003e8706 	br	2a564 <__alt_data_end+0xfffeb164>
   2ab48:	d8800517 	ldw	r2,20(sp)
   2ab4c:	00a3c83a 	sub	r17,zero,r2
   2ab50:	8800a426 	beq	r17,zero,2ade4 <_dtoa_r+0x1498>
   2ab54:	888003cc 	andi	r2,r17,15
   2ab58:	100490fa 	slli	r2,r2,3
   2ab5c:	00c000f4 	movhi	r3,3
   2ab60:	18d23804 	addi	r3,r3,18656
   2ab64:	1885883a 	add	r2,r3,r2
   2ab68:	11800017 	ldw	r6,0(r2)
   2ab6c:	11c00117 	ldw	r7,4(r2)
   2ab70:	9009883a 	mov	r4,r18
   2ab74:	980b883a 	mov	r5,r19
   2ab78:	8823d13a 	srai	r17,r17,4
   2ab7c:	0025e200 	call	25e20 <__muldf3>
   2ab80:	d8800f15 	stw	r2,60(sp)
   2ab84:	d8c01015 	stw	r3,64(sp)
   2ab88:	8800e826 	beq	r17,zero,2af2c <_dtoa_r+0x15e0>
   2ab8c:	050000f4 	movhi	r20,3
   2ab90:	a5122e04 	addi	r20,r20,18616
   2ab94:	04000084 	movi	r16,2
   2ab98:	8980004c 	andi	r6,r17,1
   2ab9c:	1009883a 	mov	r4,r2
   2aba0:	8823d07a 	srai	r17,r17,1
   2aba4:	180b883a 	mov	r5,r3
   2aba8:	30000426 	beq	r6,zero,2abbc <_dtoa_r+0x1270>
   2abac:	a1800017 	ldw	r6,0(r20)
   2abb0:	a1c00117 	ldw	r7,4(r20)
   2abb4:	84000044 	addi	r16,r16,1
   2abb8:	0025e200 	call	25e20 <__muldf3>
   2abbc:	a5000204 	addi	r20,r20,8
   2abc0:	883ff51e 	bne	r17,zero,2ab98 <__alt_data_end+0xfffeb798>
   2abc4:	d8800f15 	stw	r2,60(sp)
   2abc8:	d8c01015 	stw	r3,64(sp)
   2abcc:	003c7606 	br	29da8 <__alt_data_end+0xfffea9a8>
   2abd0:	00c00c04 	movi	r3,48
   2abd4:	10c00005 	stb	r3,0(r2)
   2abd8:	d8c00517 	ldw	r3,20(sp)
   2abdc:	bd3fffc3 	ldbu	r20,-1(r23)
   2abe0:	18c00044 	addi	r3,r3,1
   2abe4:	d8c00515 	stw	r3,20(sp)
   2abe8:	003db906 	br	2a2d0 <__alt_data_end+0xfffeaed0>
   2abec:	89400117 	ldw	r5,4(r17)
   2abf0:	e009883a 	mov	r4,fp
   2abf4:	002cfe80 	call	2cfe8 <_Balloc>
   2abf8:	89800417 	ldw	r6,16(r17)
   2abfc:	89400304 	addi	r5,r17,12
   2ac00:	11000304 	addi	r4,r2,12
   2ac04:	31800084 	addi	r6,r6,2
   2ac08:	318d883a 	add	r6,r6,r6
   2ac0c:	318d883a 	add	r6,r6,r6
   2ac10:	1027883a 	mov	r19,r2
   2ac14:	002cc1c0 	call	2cc1c <memcpy>
   2ac18:	01800044 	movi	r6,1
   2ac1c:	980b883a 	mov	r5,r19
   2ac20:	e009883a 	mov	r4,fp
   2ac24:	002d7680 	call	2d768 <__lshift>
   2ac28:	1029883a 	mov	r20,r2
   2ac2c:	003ecc06 	br	2a760 <__alt_data_end+0xfffeb360>
   2ac30:	00800e44 	movi	r2,57
   2ac34:	90809026 	beq	r18,r2,2ae78 <_dtoa_r+0x152c>
   2ac38:	92000044 	addi	r8,r18,1
   2ac3c:	003f1f06 	br	2a8bc <__alt_data_end+0xfffeb4bc>
   2ac40:	9011883a 	mov	r8,r18
   2ac44:	8825883a 	mov	r18,r17
   2ac48:	a023883a 	mov	r17,r20
   2ac4c:	003e2906 	br	2a4f4 <__alt_data_end+0xfffeb0f4>
   2ac50:	002b883a 	mov	r21,zero
   2ac54:	0023883a 	mov	r17,zero
   2ac58:	003f5406 	br	2a9ac <__alt_data_end+0xfffeb5ac>
   2ac5c:	61bfffc4 	addi	r6,r12,-1
   2ac60:	300490fa 	slli	r2,r6,3
   2ac64:	00c000f4 	movhi	r3,3
   2ac68:	18d23804 	addi	r3,r3,18656
   2ac6c:	1885883a 	add	r2,r3,r2
   2ac70:	11000017 	ldw	r4,0(r2)
   2ac74:	11400117 	ldw	r5,4(r2)
   2ac78:	d8800717 	ldw	r2,28(sp)
   2ac7c:	880f883a 	mov	r7,r17
   2ac80:	d9801215 	stw	r6,72(sp)
   2ac84:	800d883a 	mov	r6,r16
   2ac88:	db001615 	stw	r12,88(sp)
   2ac8c:	15c00044 	addi	r23,r2,1
   2ac90:	0025e200 	call	25e20 <__muldf3>
   2ac94:	d9401017 	ldw	r5,64(sp)
   2ac98:	d9000f17 	ldw	r4,60(sp)
   2ac9c:	d8c01515 	stw	r3,84(sp)
   2aca0:	d8801415 	stw	r2,80(sp)
   2aca4:	00314ac0 	call	314ac <__fixdfsi>
   2aca8:	1009883a 	mov	r4,r2
   2acac:	1021883a 	mov	r16,r2
   2acb0:	003152c0 	call	3152c <__floatsidf>
   2acb4:	d9000f17 	ldw	r4,60(sp)
   2acb8:	d9401017 	ldw	r5,64(sp)
   2acbc:	100d883a 	mov	r6,r2
   2acc0:	180f883a 	mov	r7,r3
   2acc4:	00265380 	call	26538 <__subdf3>
   2acc8:	1829883a 	mov	r20,r3
   2accc:	d8c00717 	ldw	r3,28(sp)
   2acd0:	84000c04 	addi	r16,r16,48
   2acd4:	1023883a 	mov	r17,r2
   2acd8:	1c000005 	stb	r16,0(r3)
   2acdc:	db001617 	ldw	r12,88(sp)
   2ace0:	00800044 	movi	r2,1
   2ace4:	60802226 	beq	r12,r2,2ad70 <_dtoa_r+0x1424>
   2ace8:	d9c00717 	ldw	r7,28(sp)
   2acec:	8805883a 	mov	r2,r17
   2acf0:	b82b883a 	mov	r21,r23
   2acf4:	3b19883a 	add	r12,r7,r12
   2acf8:	6023883a 	mov	r17,r12
   2acfc:	a007883a 	mov	r3,r20
   2ad00:	dc800f15 	stw	r18,60(sp)
   2ad04:	000d883a 	mov	r6,zero
   2ad08:	01d00934 	movhi	r7,16420
   2ad0c:	1009883a 	mov	r4,r2
   2ad10:	180b883a 	mov	r5,r3
   2ad14:	0025e200 	call	25e20 <__muldf3>
   2ad18:	180b883a 	mov	r5,r3
   2ad1c:	1009883a 	mov	r4,r2
   2ad20:	1829883a 	mov	r20,r3
   2ad24:	1025883a 	mov	r18,r2
   2ad28:	00314ac0 	call	314ac <__fixdfsi>
   2ad2c:	1009883a 	mov	r4,r2
   2ad30:	1021883a 	mov	r16,r2
   2ad34:	003152c0 	call	3152c <__floatsidf>
   2ad38:	100d883a 	mov	r6,r2
   2ad3c:	180f883a 	mov	r7,r3
   2ad40:	9009883a 	mov	r4,r18
   2ad44:	a00b883a 	mov	r5,r20
   2ad48:	84000c04 	addi	r16,r16,48
   2ad4c:	00265380 	call	26538 <__subdf3>
   2ad50:	ad400044 	addi	r21,r21,1
   2ad54:	ac3fffc5 	stb	r16,-1(r21)
   2ad58:	ac7fea1e 	bne	r21,r17,2ad04 <__alt_data_end+0xfffeb904>
   2ad5c:	1023883a 	mov	r17,r2
   2ad60:	d8801217 	ldw	r2,72(sp)
   2ad64:	dc800f17 	ldw	r18,60(sp)
   2ad68:	1829883a 	mov	r20,r3
   2ad6c:	b8af883a 	add	r23,r23,r2
   2ad70:	d9001417 	ldw	r4,80(sp)
   2ad74:	d9401517 	ldw	r5,84(sp)
   2ad78:	000d883a 	mov	r6,zero
   2ad7c:	01cff834 	movhi	r7,16352
   2ad80:	0024c8c0 	call	24c8c <__adddf3>
   2ad84:	880d883a 	mov	r6,r17
   2ad88:	a00f883a 	mov	r7,r20
   2ad8c:	1009883a 	mov	r4,r2
   2ad90:	180b883a 	mov	r5,r3
   2ad94:	00313b80 	call	313b8 <__ledf2>
   2ad98:	10003e0e 	bge	r2,zero,2ae94 <_dtoa_r+0x1548>
   2ad9c:	d9001317 	ldw	r4,76(sp)
   2ada0:	bd3fffc3 	ldbu	r20,-1(r23)
   2ada4:	d9000515 	stw	r4,20(sp)
   2ada8:	003d3b06 	br	2a298 <__alt_data_end+0xfffeae98>
   2adac:	0027883a 	mov	r19,zero
   2adb0:	003f1b06 	br	2aa20 <__alt_data_end+0xfffeb620>
   2adb4:	d8800817 	ldw	r2,32(sp)
   2adb8:	11e9c83a 	sub	r20,r2,r7
   2adbc:	0005883a 	mov	r2,zero
   2adc0:	003d5406 	br	2a314 <__alt_data_end+0xfffeaf14>
   2adc4:	00800044 	movi	r2,1
   2adc8:	003dc706 	br	2a4e8 <__alt_data_end+0xfffeb0e8>
   2adcc:	d8c00217 	ldw	r3,8(sp)
   2add0:	00800d84 	movi	r2,54
   2add4:	dd400a17 	ldw	r21,40(sp)
   2add8:	10c5c83a 	sub	r2,r2,r3
   2addc:	dd000817 	ldw	r20,32(sp)
   2ade0:	003d4c06 	br	2a314 <__alt_data_end+0xfffeaf14>
   2ade4:	dc800f15 	stw	r18,60(sp)
   2ade8:	dcc01015 	stw	r19,64(sp)
   2adec:	04000084 	movi	r16,2
   2adf0:	003bed06 	br	29da8 <__alt_data_end+0xfffea9a8>
   2adf4:	d9000617 	ldw	r4,24(sp)
   2adf8:	203f0d26 	beq	r4,zero,2aa30 <__alt_data_end+0xfffeb630>
   2adfc:	d9800c17 	ldw	r6,48(sp)
   2ae00:	01bcab0e 	bge	zero,r6,2a0b0 <__alt_data_end+0xfffeacb0>
   2ae04:	d9401017 	ldw	r5,64(sp)
   2ae08:	d9000f17 	ldw	r4,60(sp)
   2ae0c:	000d883a 	mov	r6,zero
   2ae10:	01d00934 	movhi	r7,16420
   2ae14:	0025e200 	call	25e20 <__muldf3>
   2ae18:	81000044 	addi	r4,r16,1
   2ae1c:	d8800f15 	stw	r2,60(sp)
   2ae20:	d8c01015 	stw	r3,64(sp)
   2ae24:	003152c0 	call	3152c <__floatsidf>
   2ae28:	d9800f17 	ldw	r6,60(sp)
   2ae2c:	d9c01017 	ldw	r7,64(sp)
   2ae30:	1009883a 	mov	r4,r2
   2ae34:	180b883a 	mov	r5,r3
   2ae38:	0025e200 	call	25e20 <__muldf3>
   2ae3c:	01d00734 	movhi	r7,16412
   2ae40:	000d883a 	mov	r6,zero
   2ae44:	1009883a 	mov	r4,r2
   2ae48:	180b883a 	mov	r5,r3
   2ae4c:	0024c8c0 	call	24c8c <__adddf3>
   2ae50:	d9c00517 	ldw	r7,20(sp)
   2ae54:	047f3034 	movhi	r17,64704
   2ae58:	1021883a 	mov	r16,r2
   2ae5c:	39ffffc4 	addi	r7,r7,-1
   2ae60:	d9c01315 	stw	r7,76(sp)
   2ae64:	1c63883a 	add	r17,r3,r17
   2ae68:	db000c17 	ldw	r12,48(sp)
   2ae6c:	003bea06 	br	29e18 <__alt_data_end+0xfffeaa18>
   2ae70:	dc000915 	stw	r16,36(sp)
   2ae74:	003e0e06 	br	2a6b0 <__alt_data_end+0xfffeb2b0>
   2ae78:	01000e44 	movi	r4,57
   2ae7c:	8825883a 	mov	r18,r17
   2ae80:	9dc00044 	addi	r23,r19,1
   2ae84:	99000005 	stb	r4,0(r19)
   2ae88:	a023883a 	mov	r17,r20
   2ae8c:	dc000915 	stw	r16,36(sp)
   2ae90:	003da406 	br	2a524 <__alt_data_end+0xfffeb124>
   2ae94:	d9801417 	ldw	r6,80(sp)
   2ae98:	d9c01517 	ldw	r7,84(sp)
   2ae9c:	0009883a 	mov	r4,zero
   2aea0:	014ff834 	movhi	r5,16352
   2aea4:	00265380 	call	26538 <__subdf3>
   2aea8:	880d883a 	mov	r6,r17
   2aeac:	a00f883a 	mov	r7,r20
   2aeb0:	1009883a 	mov	r4,r2
   2aeb4:	180b883a 	mov	r5,r3
   2aeb8:	00312dc0 	call	312dc <__gedf2>
   2aebc:	00bc7c0e 	bge	zero,r2,2a0b0 <__alt_data_end+0xfffeacb0>
   2aec0:	01000c04 	movi	r4,48
   2aec4:	00000106 	br	2aecc <_dtoa_r+0x1580>
   2aec8:	102f883a 	mov	r23,r2
   2aecc:	b8bfffc4 	addi	r2,r23,-1
   2aed0:	10c00007 	ldb	r3,0(r2)
   2aed4:	193ffc26 	beq	r3,r4,2aec8 <__alt_data_end+0xfffebac8>
   2aed8:	d9801317 	ldw	r6,76(sp)
   2aedc:	d9800515 	stw	r6,20(sp)
   2aee0:	003c4406 	br	29ff4 <__alt_data_end+0xfffeabf4>
   2aee4:	d9801317 	ldw	r6,76(sp)
   2aee8:	d9800515 	stw	r6,20(sp)
   2aeec:	003cea06 	br	2a298 <__alt_data_end+0xfffeae98>
   2aef0:	dd800f17 	ldw	r22,60(sp)
   2aef4:	dcc01017 	ldw	r19,64(sp)
   2aef8:	dc801217 	ldw	r18,72(sp)
   2aefc:	003c6c06 	br	2a0b0 <__alt_data_end+0xfffeacb0>
   2af00:	903e031e 	bne	r18,zero,2a710 <__alt_data_end+0xfffeb310>
   2af04:	003ebb06 	br	2a9f4 <__alt_data_end+0xfffeb5f4>
   2af08:	103e6c1e 	bne	r2,zero,2a8bc <__alt_data_end+0xfffeb4bc>
   2af0c:	4080004c 	andi	r2,r8,1
   2af10:	103e6a26 	beq	r2,zero,2a8bc <__alt_data_end+0xfffeb4bc>
   2af14:	003e6606 	br	2a8b0 <__alt_data_end+0xfffeb4b0>
   2af18:	d8c00317 	ldw	r3,12(sp)
   2af1c:	00800084 	movi	r2,2
   2af20:	10c02916 	blt	r2,r3,2afc8 <_dtoa_r+0x167c>
   2af24:	d9000c17 	ldw	r4,48(sp)
   2af28:	003e8806 	br	2a94c <__alt_data_end+0xfffeb54c>
   2af2c:	04000084 	movi	r16,2
   2af30:	003b9d06 	br	29da8 <__alt_data_end+0xfffea9a8>
   2af34:	d9001317 	ldw	r4,76(sp)
   2af38:	d9000515 	stw	r4,20(sp)
   2af3c:	003cd606 	br	2a298 <__alt_data_end+0xfffeae98>
   2af40:	d8801317 	ldw	r2,76(sp)
   2af44:	d8800515 	stw	r2,20(sp)
   2af48:	003c2a06 	br	29ff4 <__alt_data_end+0xfffeabf4>
   2af4c:	d9800317 	ldw	r6,12(sp)
   2af50:	00800084 	movi	r2,2
   2af54:	11801516 	blt	r2,r6,2afac <_dtoa_r+0x1660>
   2af58:	d9c00c17 	ldw	r7,48(sp)
   2af5c:	d9c00615 	stw	r7,24(sp)
   2af60:	003df706 	br	2a740 <__alt_data_end+0xfffeb340>
   2af64:	193d3926 	beq	r3,r4,2a44c <__alt_data_end+0xfffeb04c>
   2af68:	00c00f04 	movi	r3,60
   2af6c:	1885c83a 	sub	r2,r3,r2
   2af70:	003ddf06 	br	2a6f0 <__alt_data_end+0xfffeb2f0>
   2af74:	e009883a 	mov	r4,fp
   2af78:	e0001115 	stw	zero,68(fp)
   2af7c:	000b883a 	mov	r5,zero
   2af80:	002cfe80 	call	2cfe8 <_Balloc>
   2af84:	d8800715 	stw	r2,28(sp)
   2af88:	d8c00717 	ldw	r3,28(sp)
   2af8c:	00bfffc4 	movi	r2,-1
   2af90:	01000044 	movi	r4,1
   2af94:	d8800c15 	stw	r2,48(sp)
   2af98:	e0c01015 	stw	r3,64(fp)
   2af9c:	d9000b15 	stw	r4,44(sp)
   2afa0:	d8800615 	stw	r2,24(sp)
   2afa4:	d8002215 	stw	zero,136(sp)
   2afa8:	003c4106 	br	2a0b0 <__alt_data_end+0xfffeacb0>
   2afac:	d8c00c17 	ldw	r3,48(sp)
   2afb0:	d8c00615 	stw	r3,24(sp)
   2afb4:	003e7006 	br	2a978 <__alt_data_end+0xfffeb578>
   2afb8:	04400044 	movi	r17,1
   2afbc:	003b2006 	br	29c40 <__alt_data_end+0xfffea840>
   2afc0:	000b883a 	mov	r5,zero
   2afc4:	003b3d06 	br	29cbc <__alt_data_end+0xfffea8bc>
   2afc8:	d8800c17 	ldw	r2,48(sp)
   2afcc:	d8800615 	stw	r2,24(sp)
   2afd0:	003e6906 	br	2a978 <__alt_data_end+0xfffeb578>

0002afd4 <__sflush_r>:
   2afd4:	2880030b 	ldhu	r2,12(r5)
   2afd8:	defffb04 	addi	sp,sp,-20
   2afdc:	dcc00315 	stw	r19,12(sp)
   2afe0:	dc400115 	stw	r17,4(sp)
   2afe4:	dfc00415 	stw	ra,16(sp)
   2afe8:	dc800215 	stw	r18,8(sp)
   2afec:	dc000015 	stw	r16,0(sp)
   2aff0:	10c0020c 	andi	r3,r2,8
   2aff4:	2823883a 	mov	r17,r5
   2aff8:	2027883a 	mov	r19,r4
   2affc:	1800311e 	bne	r3,zero,2b0c4 <__sflush_r+0xf0>
   2b000:	28c00117 	ldw	r3,4(r5)
   2b004:	10820014 	ori	r2,r2,2048
   2b008:	2880030d 	sth	r2,12(r5)
   2b00c:	00c04b0e 	bge	zero,r3,2b13c <__sflush_r+0x168>
   2b010:	8a000a17 	ldw	r8,40(r17)
   2b014:	40002326 	beq	r8,zero,2b0a4 <__sflush_r+0xd0>
   2b018:	9c000017 	ldw	r16,0(r19)
   2b01c:	10c4000c 	andi	r3,r2,4096
   2b020:	98000015 	stw	zero,0(r19)
   2b024:	18004826 	beq	r3,zero,2b148 <__sflush_r+0x174>
   2b028:	89801417 	ldw	r6,80(r17)
   2b02c:	10c0010c 	andi	r3,r2,4
   2b030:	18000626 	beq	r3,zero,2b04c <__sflush_r+0x78>
   2b034:	88c00117 	ldw	r3,4(r17)
   2b038:	88800c17 	ldw	r2,48(r17)
   2b03c:	30cdc83a 	sub	r6,r6,r3
   2b040:	10000226 	beq	r2,zero,2b04c <__sflush_r+0x78>
   2b044:	88800f17 	ldw	r2,60(r17)
   2b048:	308dc83a 	sub	r6,r6,r2
   2b04c:	89400717 	ldw	r5,28(r17)
   2b050:	000f883a 	mov	r7,zero
   2b054:	9809883a 	mov	r4,r19
   2b058:	403ee83a 	callr	r8
   2b05c:	00ffffc4 	movi	r3,-1
   2b060:	10c04426 	beq	r2,r3,2b174 <__sflush_r+0x1a0>
   2b064:	88c0030b 	ldhu	r3,12(r17)
   2b068:	89000417 	ldw	r4,16(r17)
   2b06c:	88000115 	stw	zero,4(r17)
   2b070:	197dffcc 	andi	r5,r3,63487
   2b074:	8940030d 	sth	r5,12(r17)
   2b078:	89000015 	stw	r4,0(r17)
   2b07c:	18c4000c 	andi	r3,r3,4096
   2b080:	18002c1e 	bne	r3,zero,2b134 <__sflush_r+0x160>
   2b084:	89400c17 	ldw	r5,48(r17)
   2b088:	9c000015 	stw	r16,0(r19)
   2b08c:	28000526 	beq	r5,zero,2b0a4 <__sflush_r+0xd0>
   2b090:	88801004 	addi	r2,r17,64
   2b094:	28800226 	beq	r5,r2,2b0a0 <__sflush_r+0xcc>
   2b098:	9809883a 	mov	r4,r19
   2b09c:	002b7400 	call	2b740 <_free_r>
   2b0a0:	88000c15 	stw	zero,48(r17)
   2b0a4:	0005883a 	mov	r2,zero
   2b0a8:	dfc00417 	ldw	ra,16(sp)
   2b0ac:	dcc00317 	ldw	r19,12(sp)
   2b0b0:	dc800217 	ldw	r18,8(sp)
   2b0b4:	dc400117 	ldw	r17,4(sp)
   2b0b8:	dc000017 	ldw	r16,0(sp)
   2b0bc:	dec00504 	addi	sp,sp,20
   2b0c0:	f800283a 	ret
   2b0c4:	2c800417 	ldw	r18,16(r5)
   2b0c8:	903ff626 	beq	r18,zero,2b0a4 <__alt_data_end+0xfffebca4>
   2b0cc:	2c000017 	ldw	r16,0(r5)
   2b0d0:	108000cc 	andi	r2,r2,3
   2b0d4:	2c800015 	stw	r18,0(r5)
   2b0d8:	84a1c83a 	sub	r16,r16,r18
   2b0dc:	1000131e 	bne	r2,zero,2b12c <__sflush_r+0x158>
   2b0e0:	28800517 	ldw	r2,20(r5)
   2b0e4:	88800215 	stw	r2,8(r17)
   2b0e8:	04000316 	blt	zero,r16,2b0f8 <__sflush_r+0x124>
   2b0ec:	003fed06 	br	2b0a4 <__alt_data_end+0xfffebca4>
   2b0f0:	90a5883a 	add	r18,r18,r2
   2b0f4:	043feb0e 	bge	zero,r16,2b0a4 <__alt_data_end+0xfffebca4>
   2b0f8:	88800917 	ldw	r2,36(r17)
   2b0fc:	89400717 	ldw	r5,28(r17)
   2b100:	800f883a 	mov	r7,r16
   2b104:	900d883a 	mov	r6,r18
   2b108:	9809883a 	mov	r4,r19
   2b10c:	103ee83a 	callr	r2
   2b110:	80a1c83a 	sub	r16,r16,r2
   2b114:	00bff616 	blt	zero,r2,2b0f0 <__alt_data_end+0xfffebcf0>
   2b118:	88c0030b 	ldhu	r3,12(r17)
   2b11c:	00bfffc4 	movi	r2,-1
   2b120:	18c01014 	ori	r3,r3,64
   2b124:	88c0030d 	sth	r3,12(r17)
   2b128:	003fdf06 	br	2b0a8 <__alt_data_end+0xfffebca8>
   2b12c:	0005883a 	mov	r2,zero
   2b130:	003fec06 	br	2b0e4 <__alt_data_end+0xfffebce4>
   2b134:	88801415 	stw	r2,80(r17)
   2b138:	003fd206 	br	2b084 <__alt_data_end+0xfffebc84>
   2b13c:	28c00f17 	ldw	r3,60(r5)
   2b140:	00ffb316 	blt	zero,r3,2b010 <__alt_data_end+0xfffebc10>
   2b144:	003fd706 	br	2b0a4 <__alt_data_end+0xfffebca4>
   2b148:	89400717 	ldw	r5,28(r17)
   2b14c:	000d883a 	mov	r6,zero
   2b150:	01c00044 	movi	r7,1
   2b154:	9809883a 	mov	r4,r19
   2b158:	403ee83a 	callr	r8
   2b15c:	100d883a 	mov	r6,r2
   2b160:	00bfffc4 	movi	r2,-1
   2b164:	30801426 	beq	r6,r2,2b1b8 <__sflush_r+0x1e4>
   2b168:	8880030b 	ldhu	r2,12(r17)
   2b16c:	8a000a17 	ldw	r8,40(r17)
   2b170:	003fae06 	br	2b02c <__alt_data_end+0xfffebc2c>
   2b174:	98c00017 	ldw	r3,0(r19)
   2b178:	183fba26 	beq	r3,zero,2b064 <__alt_data_end+0xfffebc64>
   2b17c:	01000744 	movi	r4,29
   2b180:	19000626 	beq	r3,r4,2b19c <__sflush_r+0x1c8>
   2b184:	01000584 	movi	r4,22
   2b188:	19000426 	beq	r3,r4,2b19c <__sflush_r+0x1c8>
   2b18c:	88c0030b 	ldhu	r3,12(r17)
   2b190:	18c01014 	ori	r3,r3,64
   2b194:	88c0030d 	sth	r3,12(r17)
   2b198:	003fc306 	br	2b0a8 <__alt_data_end+0xfffebca8>
   2b19c:	8880030b 	ldhu	r2,12(r17)
   2b1a0:	88c00417 	ldw	r3,16(r17)
   2b1a4:	88000115 	stw	zero,4(r17)
   2b1a8:	10bdffcc 	andi	r2,r2,63487
   2b1ac:	8880030d 	sth	r2,12(r17)
   2b1b0:	88c00015 	stw	r3,0(r17)
   2b1b4:	003fb306 	br	2b084 <__alt_data_end+0xfffebc84>
   2b1b8:	98800017 	ldw	r2,0(r19)
   2b1bc:	103fea26 	beq	r2,zero,2b168 <__alt_data_end+0xfffebd68>
   2b1c0:	00c00744 	movi	r3,29
   2b1c4:	10c00226 	beq	r2,r3,2b1d0 <__sflush_r+0x1fc>
   2b1c8:	00c00584 	movi	r3,22
   2b1cc:	10c0031e 	bne	r2,r3,2b1dc <__sflush_r+0x208>
   2b1d0:	9c000015 	stw	r16,0(r19)
   2b1d4:	0005883a 	mov	r2,zero
   2b1d8:	003fb306 	br	2b0a8 <__alt_data_end+0xfffebca8>
   2b1dc:	88c0030b 	ldhu	r3,12(r17)
   2b1e0:	3005883a 	mov	r2,r6
   2b1e4:	18c01014 	ori	r3,r3,64
   2b1e8:	88c0030d 	sth	r3,12(r17)
   2b1ec:	003fae06 	br	2b0a8 <__alt_data_end+0xfffebca8>

0002b1f0 <_fflush_r>:
   2b1f0:	defffd04 	addi	sp,sp,-12
   2b1f4:	dc000115 	stw	r16,4(sp)
   2b1f8:	dfc00215 	stw	ra,8(sp)
   2b1fc:	2021883a 	mov	r16,r4
   2b200:	20000226 	beq	r4,zero,2b20c <_fflush_r+0x1c>
   2b204:	20800e17 	ldw	r2,56(r4)
   2b208:	10000c26 	beq	r2,zero,2b23c <_fflush_r+0x4c>
   2b20c:	2880030f 	ldh	r2,12(r5)
   2b210:	1000051e 	bne	r2,zero,2b228 <_fflush_r+0x38>
   2b214:	0005883a 	mov	r2,zero
   2b218:	dfc00217 	ldw	ra,8(sp)
   2b21c:	dc000117 	ldw	r16,4(sp)
   2b220:	dec00304 	addi	sp,sp,12
   2b224:	f800283a 	ret
   2b228:	8009883a 	mov	r4,r16
   2b22c:	dfc00217 	ldw	ra,8(sp)
   2b230:	dc000117 	ldw	r16,4(sp)
   2b234:	dec00304 	addi	sp,sp,12
   2b238:	002afd41 	jmpi	2afd4 <__sflush_r>
   2b23c:	d9400015 	stw	r5,0(sp)
   2b240:	002b5cc0 	call	2b5cc <__sinit>
   2b244:	d9400017 	ldw	r5,0(sp)
   2b248:	003ff006 	br	2b20c <__alt_data_end+0xfffebe0c>

0002b24c <fflush>:
   2b24c:	20000526 	beq	r4,zero,2b264 <fflush+0x18>
   2b250:	008000f4 	movhi	r2,3
   2b254:	10992a04 	addi	r2,r2,25768
   2b258:	200b883a 	mov	r5,r4
   2b25c:	11000017 	ldw	r4,0(r2)
   2b260:	002b1f01 	jmpi	2b1f0 <_fflush_r>
   2b264:	008000f4 	movhi	r2,3
   2b268:	10992904 	addi	r2,r2,25764
   2b26c:	11000017 	ldw	r4,0(r2)
   2b270:	014000f4 	movhi	r5,3
   2b274:	296c7c04 	addi	r5,r5,-19984
   2b278:	002bfd01 	jmpi	2bfd0 <_fwalk_reent>

0002b27c <__fp_unlock>:
   2b27c:	0005883a 	mov	r2,zero
   2b280:	f800283a 	ret

0002b284 <_cleanup_r>:
   2b284:	014000f4 	movhi	r5,3
   2b288:	297ffa04 	addi	r5,r5,-24
   2b28c:	002bfd01 	jmpi	2bfd0 <_fwalk_reent>

0002b290 <__sinit.part.1>:
   2b290:	defff704 	addi	sp,sp,-36
   2b294:	00c000f4 	movhi	r3,3
   2b298:	dfc00815 	stw	ra,32(sp)
   2b29c:	ddc00715 	stw	r23,28(sp)
   2b2a0:	dd800615 	stw	r22,24(sp)
   2b2a4:	dd400515 	stw	r21,20(sp)
   2b2a8:	dd000415 	stw	r20,16(sp)
   2b2ac:	dcc00315 	stw	r19,12(sp)
   2b2b0:	dc800215 	stw	r18,8(sp)
   2b2b4:	dc400115 	stw	r17,4(sp)
   2b2b8:	dc000015 	stw	r16,0(sp)
   2b2bc:	18eca104 	addi	r3,r3,-19836
   2b2c0:	24000117 	ldw	r16,4(r4)
   2b2c4:	20c00f15 	stw	r3,60(r4)
   2b2c8:	2080bb04 	addi	r2,r4,748
   2b2cc:	00c000c4 	movi	r3,3
   2b2d0:	20c0b915 	stw	r3,740(r4)
   2b2d4:	2080ba15 	stw	r2,744(r4)
   2b2d8:	2000b815 	stw	zero,736(r4)
   2b2dc:	05c00204 	movi	r23,8
   2b2e0:	00800104 	movi	r2,4
   2b2e4:	2025883a 	mov	r18,r4
   2b2e8:	b80d883a 	mov	r6,r23
   2b2ec:	81001704 	addi	r4,r16,92
   2b2f0:	000b883a 	mov	r5,zero
   2b2f4:	80000015 	stw	zero,0(r16)
   2b2f8:	80000115 	stw	zero,4(r16)
   2b2fc:	80000215 	stw	zero,8(r16)
   2b300:	8080030d 	sth	r2,12(r16)
   2b304:	80001915 	stw	zero,100(r16)
   2b308:	8000038d 	sth	zero,14(r16)
   2b30c:	80000415 	stw	zero,16(r16)
   2b310:	80000515 	stw	zero,20(r16)
   2b314:	80000615 	stw	zero,24(r16)
   2b318:	002cec00 	call	2cec0 <memset>
   2b31c:	058000f4 	movhi	r22,3
   2b320:	94400217 	ldw	r17,8(r18)
   2b324:	054000f4 	movhi	r21,3
   2b328:	050000f4 	movhi	r20,3
   2b32c:	04c000f4 	movhi	r19,3
   2b330:	b5b98404 	addi	r22,r22,-6640
   2b334:	ad799b04 	addi	r21,r21,-6548
   2b338:	a539ba04 	addi	r20,r20,-6424
   2b33c:	9cf9d104 	addi	r19,r19,-6332
   2b340:	85800815 	stw	r22,32(r16)
   2b344:	85400915 	stw	r21,36(r16)
   2b348:	85000a15 	stw	r20,40(r16)
   2b34c:	84c00b15 	stw	r19,44(r16)
   2b350:	84000715 	stw	r16,28(r16)
   2b354:	00800284 	movi	r2,10
   2b358:	8880030d 	sth	r2,12(r17)
   2b35c:	00800044 	movi	r2,1
   2b360:	b80d883a 	mov	r6,r23
   2b364:	89001704 	addi	r4,r17,92
   2b368:	000b883a 	mov	r5,zero
   2b36c:	88000015 	stw	zero,0(r17)
   2b370:	88000115 	stw	zero,4(r17)
   2b374:	88000215 	stw	zero,8(r17)
   2b378:	88001915 	stw	zero,100(r17)
   2b37c:	8880038d 	sth	r2,14(r17)
   2b380:	88000415 	stw	zero,16(r17)
   2b384:	88000515 	stw	zero,20(r17)
   2b388:	88000615 	stw	zero,24(r17)
   2b38c:	002cec00 	call	2cec0 <memset>
   2b390:	94000317 	ldw	r16,12(r18)
   2b394:	00800484 	movi	r2,18
   2b398:	8c400715 	stw	r17,28(r17)
   2b39c:	8d800815 	stw	r22,32(r17)
   2b3a0:	8d400915 	stw	r21,36(r17)
   2b3a4:	8d000a15 	stw	r20,40(r17)
   2b3a8:	8cc00b15 	stw	r19,44(r17)
   2b3ac:	8080030d 	sth	r2,12(r16)
   2b3b0:	00800084 	movi	r2,2
   2b3b4:	80000015 	stw	zero,0(r16)
   2b3b8:	80000115 	stw	zero,4(r16)
   2b3bc:	80000215 	stw	zero,8(r16)
   2b3c0:	80001915 	stw	zero,100(r16)
   2b3c4:	8080038d 	sth	r2,14(r16)
   2b3c8:	80000415 	stw	zero,16(r16)
   2b3cc:	80000515 	stw	zero,20(r16)
   2b3d0:	80000615 	stw	zero,24(r16)
   2b3d4:	b80d883a 	mov	r6,r23
   2b3d8:	000b883a 	mov	r5,zero
   2b3dc:	81001704 	addi	r4,r16,92
   2b3e0:	002cec00 	call	2cec0 <memset>
   2b3e4:	00800044 	movi	r2,1
   2b3e8:	84000715 	stw	r16,28(r16)
   2b3ec:	85800815 	stw	r22,32(r16)
   2b3f0:	85400915 	stw	r21,36(r16)
   2b3f4:	85000a15 	stw	r20,40(r16)
   2b3f8:	84c00b15 	stw	r19,44(r16)
   2b3fc:	90800e15 	stw	r2,56(r18)
   2b400:	dfc00817 	ldw	ra,32(sp)
   2b404:	ddc00717 	ldw	r23,28(sp)
   2b408:	dd800617 	ldw	r22,24(sp)
   2b40c:	dd400517 	ldw	r21,20(sp)
   2b410:	dd000417 	ldw	r20,16(sp)
   2b414:	dcc00317 	ldw	r19,12(sp)
   2b418:	dc800217 	ldw	r18,8(sp)
   2b41c:	dc400117 	ldw	r17,4(sp)
   2b420:	dc000017 	ldw	r16,0(sp)
   2b424:	dec00904 	addi	sp,sp,36
   2b428:	f800283a 	ret

0002b42c <__fp_lock>:
   2b42c:	0005883a 	mov	r2,zero
   2b430:	f800283a 	ret

0002b434 <__sfmoreglue>:
   2b434:	defffc04 	addi	sp,sp,-16
   2b438:	dc400115 	stw	r17,4(sp)
   2b43c:	2c7fffc4 	addi	r17,r5,-1
   2b440:	8c401a24 	muli	r17,r17,104
   2b444:	dc800215 	stw	r18,8(sp)
   2b448:	2825883a 	mov	r18,r5
   2b44c:	89401d04 	addi	r5,r17,116
   2b450:	dc000015 	stw	r16,0(sp)
   2b454:	dfc00315 	stw	ra,12(sp)
   2b458:	002c32c0 	call	2c32c <_malloc_r>
   2b45c:	1021883a 	mov	r16,r2
   2b460:	10000726 	beq	r2,zero,2b480 <__sfmoreglue+0x4c>
   2b464:	11000304 	addi	r4,r2,12
   2b468:	10000015 	stw	zero,0(r2)
   2b46c:	14800115 	stw	r18,4(r2)
   2b470:	11000215 	stw	r4,8(r2)
   2b474:	89801a04 	addi	r6,r17,104
   2b478:	000b883a 	mov	r5,zero
   2b47c:	002cec00 	call	2cec0 <memset>
   2b480:	8005883a 	mov	r2,r16
   2b484:	dfc00317 	ldw	ra,12(sp)
   2b488:	dc800217 	ldw	r18,8(sp)
   2b48c:	dc400117 	ldw	r17,4(sp)
   2b490:	dc000017 	ldw	r16,0(sp)
   2b494:	dec00404 	addi	sp,sp,16
   2b498:	f800283a 	ret

0002b49c <__sfp>:
   2b49c:	defffb04 	addi	sp,sp,-20
   2b4a0:	dc000015 	stw	r16,0(sp)
   2b4a4:	040000f4 	movhi	r16,3
   2b4a8:	84192904 	addi	r16,r16,25764
   2b4ac:	dcc00315 	stw	r19,12(sp)
   2b4b0:	2027883a 	mov	r19,r4
   2b4b4:	81000017 	ldw	r4,0(r16)
   2b4b8:	dfc00415 	stw	ra,16(sp)
   2b4bc:	dc800215 	stw	r18,8(sp)
   2b4c0:	20800e17 	ldw	r2,56(r4)
   2b4c4:	dc400115 	stw	r17,4(sp)
   2b4c8:	1000021e 	bne	r2,zero,2b4d4 <__sfp+0x38>
   2b4cc:	002b2900 	call	2b290 <__sinit.part.1>
   2b4d0:	81000017 	ldw	r4,0(r16)
   2b4d4:	2480b804 	addi	r18,r4,736
   2b4d8:	047fffc4 	movi	r17,-1
   2b4dc:	91000117 	ldw	r4,4(r18)
   2b4e0:	94000217 	ldw	r16,8(r18)
   2b4e4:	213fffc4 	addi	r4,r4,-1
   2b4e8:	20000a16 	blt	r4,zero,2b514 <__sfp+0x78>
   2b4ec:	8080030f 	ldh	r2,12(r16)
   2b4f0:	10000c26 	beq	r2,zero,2b524 <__sfp+0x88>
   2b4f4:	80c01d04 	addi	r3,r16,116
   2b4f8:	00000206 	br	2b504 <__sfp+0x68>
   2b4fc:	18bfe60f 	ldh	r2,-104(r3)
   2b500:	10000826 	beq	r2,zero,2b524 <__sfp+0x88>
   2b504:	213fffc4 	addi	r4,r4,-1
   2b508:	1c3ffd04 	addi	r16,r3,-12
   2b50c:	18c01a04 	addi	r3,r3,104
   2b510:	247ffa1e 	bne	r4,r17,2b4fc <__alt_data_end+0xfffec0fc>
   2b514:	90800017 	ldw	r2,0(r18)
   2b518:	10001d26 	beq	r2,zero,2b590 <__sfp+0xf4>
   2b51c:	1025883a 	mov	r18,r2
   2b520:	003fee06 	br	2b4dc <__alt_data_end+0xfffec0dc>
   2b524:	00bfffc4 	movi	r2,-1
   2b528:	8080038d 	sth	r2,14(r16)
   2b52c:	00800044 	movi	r2,1
   2b530:	8080030d 	sth	r2,12(r16)
   2b534:	80001915 	stw	zero,100(r16)
   2b538:	80000015 	stw	zero,0(r16)
   2b53c:	80000215 	stw	zero,8(r16)
   2b540:	80000115 	stw	zero,4(r16)
   2b544:	80000415 	stw	zero,16(r16)
   2b548:	80000515 	stw	zero,20(r16)
   2b54c:	80000615 	stw	zero,24(r16)
   2b550:	01800204 	movi	r6,8
   2b554:	000b883a 	mov	r5,zero
   2b558:	81001704 	addi	r4,r16,92
   2b55c:	002cec00 	call	2cec0 <memset>
   2b560:	8005883a 	mov	r2,r16
   2b564:	80000c15 	stw	zero,48(r16)
   2b568:	80000d15 	stw	zero,52(r16)
   2b56c:	80001115 	stw	zero,68(r16)
   2b570:	80001215 	stw	zero,72(r16)
   2b574:	dfc00417 	ldw	ra,16(sp)
   2b578:	dcc00317 	ldw	r19,12(sp)
   2b57c:	dc800217 	ldw	r18,8(sp)
   2b580:	dc400117 	ldw	r17,4(sp)
   2b584:	dc000017 	ldw	r16,0(sp)
   2b588:	dec00504 	addi	sp,sp,20
   2b58c:	f800283a 	ret
   2b590:	01400104 	movi	r5,4
   2b594:	9809883a 	mov	r4,r19
   2b598:	002b4340 	call	2b434 <__sfmoreglue>
   2b59c:	90800015 	stw	r2,0(r18)
   2b5a0:	103fde1e 	bne	r2,zero,2b51c <__alt_data_end+0xfffec11c>
   2b5a4:	00800304 	movi	r2,12
   2b5a8:	98800015 	stw	r2,0(r19)
   2b5ac:	0005883a 	mov	r2,zero
   2b5b0:	003ff006 	br	2b574 <__alt_data_end+0xfffec174>

0002b5b4 <_cleanup>:
   2b5b4:	008000f4 	movhi	r2,3
   2b5b8:	10992904 	addi	r2,r2,25764
   2b5bc:	11000017 	ldw	r4,0(r2)
   2b5c0:	014000f4 	movhi	r5,3
   2b5c4:	297ffa04 	addi	r5,r5,-24
   2b5c8:	002bfd01 	jmpi	2bfd0 <_fwalk_reent>

0002b5cc <__sinit>:
   2b5cc:	20800e17 	ldw	r2,56(r4)
   2b5d0:	10000126 	beq	r2,zero,2b5d8 <__sinit+0xc>
   2b5d4:	f800283a 	ret
   2b5d8:	002b2901 	jmpi	2b290 <__sinit.part.1>

0002b5dc <__sfp_lock_acquire>:
   2b5dc:	f800283a 	ret

0002b5e0 <__sfp_lock_release>:
   2b5e0:	f800283a 	ret

0002b5e4 <__sinit_lock_acquire>:
   2b5e4:	f800283a 	ret

0002b5e8 <__sinit_lock_release>:
   2b5e8:	f800283a 	ret

0002b5ec <__fp_lock_all>:
   2b5ec:	008000f4 	movhi	r2,3
   2b5f0:	10992a04 	addi	r2,r2,25768
   2b5f4:	11000017 	ldw	r4,0(r2)
   2b5f8:	014000f4 	movhi	r5,3
   2b5fc:	296d0b04 	addi	r5,r5,-19412
   2b600:	002bf0c1 	jmpi	2bf0c <_fwalk>

0002b604 <__fp_unlock_all>:
   2b604:	008000f4 	movhi	r2,3
   2b608:	10992a04 	addi	r2,r2,25768
   2b60c:	11000017 	ldw	r4,0(r2)
   2b610:	014000f4 	movhi	r5,3
   2b614:	296c9f04 	addi	r5,r5,-19844
   2b618:	002bf0c1 	jmpi	2bf0c <_fwalk>

0002b61c <_malloc_trim_r>:
   2b61c:	defffb04 	addi	sp,sp,-20
   2b620:	dcc00315 	stw	r19,12(sp)
   2b624:	04c000f4 	movhi	r19,3
   2b628:	dc800215 	stw	r18,8(sp)
   2b62c:	dc400115 	stw	r17,4(sp)
   2b630:	dc000015 	stw	r16,0(sp)
   2b634:	dfc00415 	stw	ra,16(sp)
   2b638:	2821883a 	mov	r16,r5
   2b63c:	9cd3a404 	addi	r19,r19,20112
   2b640:	2025883a 	mov	r18,r4
   2b644:	0031c2c0 	call	31c2c <__malloc_lock>
   2b648:	98800217 	ldw	r2,8(r19)
   2b64c:	14400117 	ldw	r17,4(r2)
   2b650:	00bfff04 	movi	r2,-4
   2b654:	88a2703a 	and	r17,r17,r2
   2b658:	8c21c83a 	sub	r16,r17,r16
   2b65c:	8403fbc4 	addi	r16,r16,4079
   2b660:	8020d33a 	srli	r16,r16,12
   2b664:	0083ffc4 	movi	r2,4095
   2b668:	843fffc4 	addi	r16,r16,-1
   2b66c:	8020933a 	slli	r16,r16,12
   2b670:	1400060e 	bge	r2,r16,2b68c <_malloc_trim_r+0x70>
   2b674:	000b883a 	mov	r5,zero
   2b678:	9009883a 	mov	r4,r18
   2b67c:	002e5bc0 	call	2e5bc <_sbrk_r>
   2b680:	98c00217 	ldw	r3,8(r19)
   2b684:	1c47883a 	add	r3,r3,r17
   2b688:	10c00a26 	beq	r2,r3,2b6b4 <_malloc_trim_r+0x98>
   2b68c:	9009883a 	mov	r4,r18
   2b690:	0031c500 	call	31c50 <__malloc_unlock>
   2b694:	0005883a 	mov	r2,zero
   2b698:	dfc00417 	ldw	ra,16(sp)
   2b69c:	dcc00317 	ldw	r19,12(sp)
   2b6a0:	dc800217 	ldw	r18,8(sp)
   2b6a4:	dc400117 	ldw	r17,4(sp)
   2b6a8:	dc000017 	ldw	r16,0(sp)
   2b6ac:	dec00504 	addi	sp,sp,20
   2b6b0:	f800283a 	ret
   2b6b4:	040bc83a 	sub	r5,zero,r16
   2b6b8:	9009883a 	mov	r4,r18
   2b6bc:	002e5bc0 	call	2e5bc <_sbrk_r>
   2b6c0:	00ffffc4 	movi	r3,-1
   2b6c4:	10c00d26 	beq	r2,r3,2b6fc <_malloc_trim_r+0xe0>
   2b6c8:	00c00134 	movhi	r3,4
   2b6cc:	18e00604 	addi	r3,r3,-32744
   2b6d0:	18800017 	ldw	r2,0(r3)
   2b6d4:	99000217 	ldw	r4,8(r19)
   2b6d8:	8c23c83a 	sub	r17,r17,r16
   2b6dc:	8c400054 	ori	r17,r17,1
   2b6e0:	1421c83a 	sub	r16,r2,r16
   2b6e4:	24400115 	stw	r17,4(r4)
   2b6e8:	9009883a 	mov	r4,r18
   2b6ec:	1c000015 	stw	r16,0(r3)
   2b6f0:	0031c500 	call	31c50 <__malloc_unlock>
   2b6f4:	00800044 	movi	r2,1
   2b6f8:	003fe706 	br	2b698 <__alt_data_end+0xfffec298>
   2b6fc:	000b883a 	mov	r5,zero
   2b700:	9009883a 	mov	r4,r18
   2b704:	002e5bc0 	call	2e5bc <_sbrk_r>
   2b708:	99000217 	ldw	r4,8(r19)
   2b70c:	014003c4 	movi	r5,15
   2b710:	1107c83a 	sub	r3,r2,r4
   2b714:	28ffdd0e 	bge	r5,r3,2b68c <__alt_data_end+0xfffec28c>
   2b718:	014000f4 	movhi	r5,3
   2b71c:	29592c04 	addi	r5,r5,25776
   2b720:	29400017 	ldw	r5,0(r5)
   2b724:	18c00054 	ori	r3,r3,1
   2b728:	20c00115 	stw	r3,4(r4)
   2b72c:	00c00134 	movhi	r3,4
   2b730:	1145c83a 	sub	r2,r2,r5
   2b734:	18e00604 	addi	r3,r3,-32744
   2b738:	18800015 	stw	r2,0(r3)
   2b73c:	003fd306 	br	2b68c <__alt_data_end+0xfffec28c>

0002b740 <_free_r>:
   2b740:	28004126 	beq	r5,zero,2b848 <_free_r+0x108>
   2b744:	defffd04 	addi	sp,sp,-12
   2b748:	dc400115 	stw	r17,4(sp)
   2b74c:	dc000015 	stw	r16,0(sp)
   2b750:	2023883a 	mov	r17,r4
   2b754:	2821883a 	mov	r16,r5
   2b758:	dfc00215 	stw	ra,8(sp)
   2b75c:	0031c2c0 	call	31c2c <__malloc_lock>
   2b760:	81ffff17 	ldw	r7,-4(r16)
   2b764:	00bfff84 	movi	r2,-2
   2b768:	010000f4 	movhi	r4,3
   2b76c:	81bffe04 	addi	r6,r16,-8
   2b770:	3884703a 	and	r2,r7,r2
   2b774:	2113a404 	addi	r4,r4,20112
   2b778:	308b883a 	add	r5,r6,r2
   2b77c:	2a400117 	ldw	r9,4(r5)
   2b780:	22000217 	ldw	r8,8(r4)
   2b784:	00ffff04 	movi	r3,-4
   2b788:	48c6703a 	and	r3,r9,r3
   2b78c:	2a005726 	beq	r5,r8,2b8ec <_free_r+0x1ac>
   2b790:	28c00115 	stw	r3,4(r5)
   2b794:	39c0004c 	andi	r7,r7,1
   2b798:	3800091e 	bne	r7,zero,2b7c0 <_free_r+0x80>
   2b79c:	823ffe17 	ldw	r8,-8(r16)
   2b7a0:	22400204 	addi	r9,r4,8
   2b7a4:	320dc83a 	sub	r6,r6,r8
   2b7a8:	31c00217 	ldw	r7,8(r6)
   2b7ac:	1205883a 	add	r2,r2,r8
   2b7b0:	3a406526 	beq	r7,r9,2b948 <_free_r+0x208>
   2b7b4:	32000317 	ldw	r8,12(r6)
   2b7b8:	3a000315 	stw	r8,12(r7)
   2b7bc:	41c00215 	stw	r7,8(r8)
   2b7c0:	28cf883a 	add	r7,r5,r3
   2b7c4:	39c00117 	ldw	r7,4(r7)
   2b7c8:	39c0004c 	andi	r7,r7,1
   2b7cc:	38003a26 	beq	r7,zero,2b8b8 <_free_r+0x178>
   2b7d0:	10c00054 	ori	r3,r2,1
   2b7d4:	30c00115 	stw	r3,4(r6)
   2b7d8:	3087883a 	add	r3,r6,r2
   2b7dc:	18800015 	stw	r2,0(r3)
   2b7e0:	00c07fc4 	movi	r3,511
   2b7e4:	18801936 	bltu	r3,r2,2b84c <_free_r+0x10c>
   2b7e8:	1004d0fa 	srli	r2,r2,3
   2b7ec:	01c00044 	movi	r7,1
   2b7f0:	21400117 	ldw	r5,4(r4)
   2b7f4:	10c00044 	addi	r3,r2,1
   2b7f8:	18c7883a 	add	r3,r3,r3
   2b7fc:	1005d0ba 	srai	r2,r2,2
   2b800:	18c7883a 	add	r3,r3,r3
   2b804:	18c7883a 	add	r3,r3,r3
   2b808:	1907883a 	add	r3,r3,r4
   2b80c:	3884983a 	sll	r2,r7,r2
   2b810:	19c00017 	ldw	r7,0(r3)
   2b814:	1a3ffe04 	addi	r8,r3,-8
   2b818:	1144b03a 	or	r2,r2,r5
   2b81c:	32000315 	stw	r8,12(r6)
   2b820:	31c00215 	stw	r7,8(r6)
   2b824:	20800115 	stw	r2,4(r4)
   2b828:	19800015 	stw	r6,0(r3)
   2b82c:	39800315 	stw	r6,12(r7)
   2b830:	8809883a 	mov	r4,r17
   2b834:	dfc00217 	ldw	ra,8(sp)
   2b838:	dc400117 	ldw	r17,4(sp)
   2b83c:	dc000017 	ldw	r16,0(sp)
   2b840:	dec00304 	addi	sp,sp,12
   2b844:	0031c501 	jmpi	31c50 <__malloc_unlock>
   2b848:	f800283a 	ret
   2b84c:	100ad27a 	srli	r5,r2,9
   2b850:	00c00104 	movi	r3,4
   2b854:	19404a36 	bltu	r3,r5,2b980 <_free_r+0x240>
   2b858:	100ad1ba 	srli	r5,r2,6
   2b85c:	28c00e44 	addi	r3,r5,57
   2b860:	18c7883a 	add	r3,r3,r3
   2b864:	29400e04 	addi	r5,r5,56
   2b868:	18c7883a 	add	r3,r3,r3
   2b86c:	18c7883a 	add	r3,r3,r3
   2b870:	1909883a 	add	r4,r3,r4
   2b874:	20c00017 	ldw	r3,0(r4)
   2b878:	01c000f4 	movhi	r7,3
   2b87c:	213ffe04 	addi	r4,r4,-8
   2b880:	39d3a404 	addi	r7,r7,20112
   2b884:	20c04426 	beq	r4,r3,2b998 <_free_r+0x258>
   2b888:	01ffff04 	movi	r7,-4
   2b88c:	19400117 	ldw	r5,4(r3)
   2b890:	29ca703a 	and	r5,r5,r7
   2b894:	1140022e 	bgeu	r2,r5,2b8a0 <_free_r+0x160>
   2b898:	18c00217 	ldw	r3,8(r3)
   2b89c:	20fffb1e 	bne	r4,r3,2b88c <__alt_data_end+0xfffec48c>
   2b8a0:	19000317 	ldw	r4,12(r3)
   2b8a4:	31000315 	stw	r4,12(r6)
   2b8a8:	30c00215 	stw	r3,8(r6)
   2b8ac:	21800215 	stw	r6,8(r4)
   2b8b0:	19800315 	stw	r6,12(r3)
   2b8b4:	003fde06 	br	2b830 <__alt_data_end+0xfffec430>
   2b8b8:	29c00217 	ldw	r7,8(r5)
   2b8bc:	10c5883a 	add	r2,r2,r3
   2b8c0:	00c000f4 	movhi	r3,3
   2b8c4:	18d3a604 	addi	r3,r3,20120
   2b8c8:	38c03b26 	beq	r7,r3,2b9b8 <_free_r+0x278>
   2b8cc:	2a000317 	ldw	r8,12(r5)
   2b8d0:	11400054 	ori	r5,r2,1
   2b8d4:	3087883a 	add	r3,r6,r2
   2b8d8:	3a000315 	stw	r8,12(r7)
   2b8dc:	41c00215 	stw	r7,8(r8)
   2b8e0:	31400115 	stw	r5,4(r6)
   2b8e4:	18800015 	stw	r2,0(r3)
   2b8e8:	003fbd06 	br	2b7e0 <__alt_data_end+0xfffec3e0>
   2b8ec:	39c0004c 	andi	r7,r7,1
   2b8f0:	10c5883a 	add	r2,r2,r3
   2b8f4:	3800071e 	bne	r7,zero,2b914 <_free_r+0x1d4>
   2b8f8:	81fffe17 	ldw	r7,-8(r16)
   2b8fc:	31cdc83a 	sub	r6,r6,r7
   2b900:	30c00317 	ldw	r3,12(r6)
   2b904:	31400217 	ldw	r5,8(r6)
   2b908:	11c5883a 	add	r2,r2,r7
   2b90c:	28c00315 	stw	r3,12(r5)
   2b910:	19400215 	stw	r5,8(r3)
   2b914:	10c00054 	ori	r3,r2,1
   2b918:	30c00115 	stw	r3,4(r6)
   2b91c:	00c000f4 	movhi	r3,3
   2b920:	18d92d04 	addi	r3,r3,25780
   2b924:	18c00017 	ldw	r3,0(r3)
   2b928:	21800215 	stw	r6,8(r4)
   2b92c:	10ffc036 	bltu	r2,r3,2b830 <__alt_data_end+0xfffec430>
   2b930:	008000f4 	movhi	r2,3
   2b934:	109ffd04 	addi	r2,r2,32756
   2b938:	11400017 	ldw	r5,0(r2)
   2b93c:	8809883a 	mov	r4,r17
   2b940:	002b61c0 	call	2b61c <_malloc_trim_r>
   2b944:	003fba06 	br	2b830 <__alt_data_end+0xfffec430>
   2b948:	28c9883a 	add	r4,r5,r3
   2b94c:	21000117 	ldw	r4,4(r4)
   2b950:	2100004c 	andi	r4,r4,1
   2b954:	2000391e 	bne	r4,zero,2ba3c <_free_r+0x2fc>
   2b958:	29c00217 	ldw	r7,8(r5)
   2b95c:	29000317 	ldw	r4,12(r5)
   2b960:	1885883a 	add	r2,r3,r2
   2b964:	10c00054 	ori	r3,r2,1
   2b968:	39000315 	stw	r4,12(r7)
   2b96c:	21c00215 	stw	r7,8(r4)
   2b970:	30c00115 	stw	r3,4(r6)
   2b974:	308d883a 	add	r6,r6,r2
   2b978:	30800015 	stw	r2,0(r6)
   2b97c:	003fac06 	br	2b830 <__alt_data_end+0xfffec430>
   2b980:	00c00504 	movi	r3,20
   2b984:	19401536 	bltu	r3,r5,2b9dc <_free_r+0x29c>
   2b988:	28c01704 	addi	r3,r5,92
   2b98c:	18c7883a 	add	r3,r3,r3
   2b990:	294016c4 	addi	r5,r5,91
   2b994:	003fb406 	br	2b868 <__alt_data_end+0xfffec468>
   2b998:	280bd0ba 	srai	r5,r5,2
   2b99c:	00c00044 	movi	r3,1
   2b9a0:	38800117 	ldw	r2,4(r7)
   2b9a4:	194a983a 	sll	r5,r3,r5
   2b9a8:	2007883a 	mov	r3,r4
   2b9ac:	2884b03a 	or	r2,r5,r2
   2b9b0:	38800115 	stw	r2,4(r7)
   2b9b4:	003fbb06 	br	2b8a4 <__alt_data_end+0xfffec4a4>
   2b9b8:	21800515 	stw	r6,20(r4)
   2b9bc:	21800415 	stw	r6,16(r4)
   2b9c0:	10c00054 	ori	r3,r2,1
   2b9c4:	31c00315 	stw	r7,12(r6)
   2b9c8:	31c00215 	stw	r7,8(r6)
   2b9cc:	30c00115 	stw	r3,4(r6)
   2b9d0:	308d883a 	add	r6,r6,r2
   2b9d4:	30800015 	stw	r2,0(r6)
   2b9d8:	003f9506 	br	2b830 <__alt_data_end+0xfffec430>
   2b9dc:	00c01504 	movi	r3,84
   2b9e0:	19400536 	bltu	r3,r5,2b9f8 <_free_r+0x2b8>
   2b9e4:	100ad33a 	srli	r5,r2,12
   2b9e8:	28c01bc4 	addi	r3,r5,111
   2b9ec:	18c7883a 	add	r3,r3,r3
   2b9f0:	29401b84 	addi	r5,r5,110
   2b9f4:	003f9c06 	br	2b868 <__alt_data_end+0xfffec468>
   2b9f8:	00c05504 	movi	r3,340
   2b9fc:	19400536 	bltu	r3,r5,2ba14 <_free_r+0x2d4>
   2ba00:	100ad3fa 	srli	r5,r2,15
   2ba04:	28c01e04 	addi	r3,r5,120
   2ba08:	18c7883a 	add	r3,r3,r3
   2ba0c:	29401dc4 	addi	r5,r5,119
   2ba10:	003f9506 	br	2b868 <__alt_data_end+0xfffec468>
   2ba14:	00c15504 	movi	r3,1364
   2ba18:	19400536 	bltu	r3,r5,2ba30 <_free_r+0x2f0>
   2ba1c:	100ad4ba 	srli	r5,r2,18
   2ba20:	28c01f44 	addi	r3,r5,125
   2ba24:	18c7883a 	add	r3,r3,r3
   2ba28:	29401f04 	addi	r5,r5,124
   2ba2c:	003f8e06 	br	2b868 <__alt_data_end+0xfffec468>
   2ba30:	00c03f84 	movi	r3,254
   2ba34:	01401f84 	movi	r5,126
   2ba38:	003f8b06 	br	2b868 <__alt_data_end+0xfffec468>
   2ba3c:	10c00054 	ori	r3,r2,1
   2ba40:	30c00115 	stw	r3,4(r6)
   2ba44:	308d883a 	add	r6,r6,r2
   2ba48:	30800015 	stw	r2,0(r6)
   2ba4c:	003f7806 	br	2b830 <__alt_data_end+0xfffec430>

0002ba50 <__sfvwrite_r>:
   2ba50:	30800217 	ldw	r2,8(r6)
   2ba54:	10006726 	beq	r2,zero,2bbf4 <__sfvwrite_r+0x1a4>
   2ba58:	28c0030b 	ldhu	r3,12(r5)
   2ba5c:	defff404 	addi	sp,sp,-48
   2ba60:	dd400715 	stw	r21,28(sp)
   2ba64:	dd000615 	stw	r20,24(sp)
   2ba68:	dc000215 	stw	r16,8(sp)
   2ba6c:	dfc00b15 	stw	ra,44(sp)
   2ba70:	df000a15 	stw	fp,40(sp)
   2ba74:	ddc00915 	stw	r23,36(sp)
   2ba78:	dd800815 	stw	r22,32(sp)
   2ba7c:	dcc00515 	stw	r19,20(sp)
   2ba80:	dc800415 	stw	r18,16(sp)
   2ba84:	dc400315 	stw	r17,12(sp)
   2ba88:	1880020c 	andi	r2,r3,8
   2ba8c:	2821883a 	mov	r16,r5
   2ba90:	202b883a 	mov	r21,r4
   2ba94:	3029883a 	mov	r20,r6
   2ba98:	10002726 	beq	r2,zero,2bb38 <__sfvwrite_r+0xe8>
   2ba9c:	28800417 	ldw	r2,16(r5)
   2baa0:	10002526 	beq	r2,zero,2bb38 <__sfvwrite_r+0xe8>
   2baa4:	1880008c 	andi	r2,r3,2
   2baa8:	a4400017 	ldw	r17,0(r20)
   2baac:	10002a26 	beq	r2,zero,2bb58 <__sfvwrite_r+0x108>
   2bab0:	05a00034 	movhi	r22,32768
   2bab4:	0027883a 	mov	r19,zero
   2bab8:	0025883a 	mov	r18,zero
   2babc:	b5bf0004 	addi	r22,r22,-1024
   2bac0:	980d883a 	mov	r6,r19
   2bac4:	a809883a 	mov	r4,r21
   2bac8:	90004626 	beq	r18,zero,2bbe4 <__sfvwrite_r+0x194>
   2bacc:	900f883a 	mov	r7,r18
   2bad0:	b480022e 	bgeu	r22,r18,2badc <__sfvwrite_r+0x8c>
   2bad4:	01e00034 	movhi	r7,32768
   2bad8:	39ff0004 	addi	r7,r7,-1024
   2badc:	80800917 	ldw	r2,36(r16)
   2bae0:	81400717 	ldw	r5,28(r16)
   2bae4:	103ee83a 	callr	r2
   2bae8:	0080570e 	bge	zero,r2,2bc48 <__sfvwrite_r+0x1f8>
   2baec:	a0c00217 	ldw	r3,8(r20)
   2baf0:	98a7883a 	add	r19,r19,r2
   2baf4:	90a5c83a 	sub	r18,r18,r2
   2baf8:	1885c83a 	sub	r2,r3,r2
   2bafc:	a0800215 	stw	r2,8(r20)
   2bb00:	103fef1e 	bne	r2,zero,2bac0 <__alt_data_end+0xfffec6c0>
   2bb04:	0005883a 	mov	r2,zero
   2bb08:	dfc00b17 	ldw	ra,44(sp)
   2bb0c:	df000a17 	ldw	fp,40(sp)
   2bb10:	ddc00917 	ldw	r23,36(sp)
   2bb14:	dd800817 	ldw	r22,32(sp)
   2bb18:	dd400717 	ldw	r21,28(sp)
   2bb1c:	dd000617 	ldw	r20,24(sp)
   2bb20:	dcc00517 	ldw	r19,20(sp)
   2bb24:	dc800417 	ldw	r18,16(sp)
   2bb28:	dc400317 	ldw	r17,12(sp)
   2bb2c:	dc000217 	ldw	r16,8(sp)
   2bb30:	dec00c04 	addi	sp,sp,48
   2bb34:	f800283a 	ret
   2bb38:	800b883a 	mov	r5,r16
   2bb3c:	a809883a 	mov	r4,r21
   2bb40:	00295f80 	call	295f8 <__swsetup_r>
   2bb44:	1000eb1e 	bne	r2,zero,2bef4 <__sfvwrite_r+0x4a4>
   2bb48:	80c0030b 	ldhu	r3,12(r16)
   2bb4c:	a4400017 	ldw	r17,0(r20)
   2bb50:	1880008c 	andi	r2,r3,2
   2bb54:	103fd61e 	bne	r2,zero,2bab0 <__alt_data_end+0xfffec6b0>
   2bb58:	1880004c 	andi	r2,r3,1
   2bb5c:	10003f1e 	bne	r2,zero,2bc5c <__sfvwrite_r+0x20c>
   2bb60:	0039883a 	mov	fp,zero
   2bb64:	0025883a 	mov	r18,zero
   2bb68:	90001a26 	beq	r18,zero,2bbd4 <__sfvwrite_r+0x184>
   2bb6c:	1880800c 	andi	r2,r3,512
   2bb70:	84c00217 	ldw	r19,8(r16)
   2bb74:	10002126 	beq	r2,zero,2bbfc <__sfvwrite_r+0x1ac>
   2bb78:	982f883a 	mov	r23,r19
   2bb7c:	94c09336 	bltu	r18,r19,2bdcc <__sfvwrite_r+0x37c>
   2bb80:	1881200c 	andi	r2,r3,1152
   2bb84:	10009e1e 	bne	r2,zero,2be00 <__sfvwrite_r+0x3b0>
   2bb88:	81000017 	ldw	r4,0(r16)
   2bb8c:	b80d883a 	mov	r6,r23
   2bb90:	e00b883a 	mov	r5,fp
   2bb94:	002cd640 	call	2cd64 <memmove>
   2bb98:	80c00217 	ldw	r3,8(r16)
   2bb9c:	81000017 	ldw	r4,0(r16)
   2bba0:	9005883a 	mov	r2,r18
   2bba4:	1ce7c83a 	sub	r19,r3,r19
   2bba8:	25cf883a 	add	r7,r4,r23
   2bbac:	84c00215 	stw	r19,8(r16)
   2bbb0:	81c00015 	stw	r7,0(r16)
   2bbb4:	a0c00217 	ldw	r3,8(r20)
   2bbb8:	e0b9883a 	add	fp,fp,r2
   2bbbc:	90a5c83a 	sub	r18,r18,r2
   2bbc0:	18a7c83a 	sub	r19,r3,r2
   2bbc4:	a4c00215 	stw	r19,8(r20)
   2bbc8:	983fce26 	beq	r19,zero,2bb04 <__alt_data_end+0xfffec704>
   2bbcc:	80c0030b 	ldhu	r3,12(r16)
   2bbd0:	903fe61e 	bne	r18,zero,2bb6c <__alt_data_end+0xfffec76c>
   2bbd4:	8f000017 	ldw	fp,0(r17)
   2bbd8:	8c800117 	ldw	r18,4(r17)
   2bbdc:	8c400204 	addi	r17,r17,8
   2bbe0:	003fe106 	br	2bb68 <__alt_data_end+0xfffec768>
   2bbe4:	8cc00017 	ldw	r19,0(r17)
   2bbe8:	8c800117 	ldw	r18,4(r17)
   2bbec:	8c400204 	addi	r17,r17,8
   2bbf0:	003fb306 	br	2bac0 <__alt_data_end+0xfffec6c0>
   2bbf4:	0005883a 	mov	r2,zero
   2bbf8:	f800283a 	ret
   2bbfc:	81000017 	ldw	r4,0(r16)
   2bc00:	80800417 	ldw	r2,16(r16)
   2bc04:	11005736 	bltu	r2,r4,2bd64 <__sfvwrite_r+0x314>
   2bc08:	85c00517 	ldw	r23,20(r16)
   2bc0c:	95c05536 	bltu	r18,r23,2bd64 <__sfvwrite_r+0x314>
   2bc10:	00a00034 	movhi	r2,32768
   2bc14:	10bfffc4 	addi	r2,r2,-1
   2bc18:	9009883a 	mov	r4,r18
   2bc1c:	1480012e 	bgeu	r2,r18,2bc24 <__sfvwrite_r+0x1d4>
   2bc20:	1009883a 	mov	r4,r2
   2bc24:	b80b883a 	mov	r5,r23
   2bc28:	00236dc0 	call	236dc <__divsi3>
   2bc2c:	15cf383a 	mul	r7,r2,r23
   2bc30:	81400717 	ldw	r5,28(r16)
   2bc34:	80800917 	ldw	r2,36(r16)
   2bc38:	e00d883a 	mov	r6,fp
   2bc3c:	a809883a 	mov	r4,r21
   2bc40:	103ee83a 	callr	r2
   2bc44:	00bfdb16 	blt	zero,r2,2bbb4 <__alt_data_end+0xfffec7b4>
   2bc48:	8080030b 	ldhu	r2,12(r16)
   2bc4c:	10801014 	ori	r2,r2,64
   2bc50:	8080030d 	sth	r2,12(r16)
   2bc54:	00bfffc4 	movi	r2,-1
   2bc58:	003fab06 	br	2bb08 <__alt_data_end+0xfffec708>
   2bc5c:	0027883a 	mov	r19,zero
   2bc60:	0011883a 	mov	r8,zero
   2bc64:	0039883a 	mov	fp,zero
   2bc68:	0025883a 	mov	r18,zero
   2bc6c:	90001f26 	beq	r18,zero,2bcec <__sfvwrite_r+0x29c>
   2bc70:	40005a26 	beq	r8,zero,2bddc <__sfvwrite_r+0x38c>
   2bc74:	982d883a 	mov	r22,r19
   2bc78:	94c0012e 	bgeu	r18,r19,2bc80 <__sfvwrite_r+0x230>
   2bc7c:	902d883a 	mov	r22,r18
   2bc80:	81000017 	ldw	r4,0(r16)
   2bc84:	80800417 	ldw	r2,16(r16)
   2bc88:	b02f883a 	mov	r23,r22
   2bc8c:	81c00517 	ldw	r7,20(r16)
   2bc90:	1100032e 	bgeu	r2,r4,2bca0 <__sfvwrite_r+0x250>
   2bc94:	80c00217 	ldw	r3,8(r16)
   2bc98:	38c7883a 	add	r3,r7,r3
   2bc9c:	1d801816 	blt	r3,r22,2bd00 <__sfvwrite_r+0x2b0>
   2bca0:	b1c03e16 	blt	r22,r7,2bd9c <__sfvwrite_r+0x34c>
   2bca4:	80800917 	ldw	r2,36(r16)
   2bca8:	81400717 	ldw	r5,28(r16)
   2bcac:	e00d883a 	mov	r6,fp
   2bcb0:	da000115 	stw	r8,4(sp)
   2bcb4:	a809883a 	mov	r4,r21
   2bcb8:	103ee83a 	callr	r2
   2bcbc:	102f883a 	mov	r23,r2
   2bcc0:	da000117 	ldw	r8,4(sp)
   2bcc4:	00bfe00e 	bge	zero,r2,2bc48 <__alt_data_end+0xfffec848>
   2bcc8:	9de7c83a 	sub	r19,r19,r23
   2bccc:	98001f26 	beq	r19,zero,2bd4c <__sfvwrite_r+0x2fc>
   2bcd0:	a0800217 	ldw	r2,8(r20)
   2bcd4:	e5f9883a 	add	fp,fp,r23
   2bcd8:	95e5c83a 	sub	r18,r18,r23
   2bcdc:	15efc83a 	sub	r23,r2,r23
   2bce0:	a5c00215 	stw	r23,8(r20)
   2bce4:	b83f8726 	beq	r23,zero,2bb04 <__alt_data_end+0xfffec704>
   2bce8:	903fe11e 	bne	r18,zero,2bc70 <__alt_data_end+0xfffec870>
   2bcec:	8f000017 	ldw	fp,0(r17)
   2bcf0:	8c800117 	ldw	r18,4(r17)
   2bcf4:	0011883a 	mov	r8,zero
   2bcf8:	8c400204 	addi	r17,r17,8
   2bcfc:	003fdb06 	br	2bc6c <__alt_data_end+0xfffec86c>
   2bd00:	180d883a 	mov	r6,r3
   2bd04:	e00b883a 	mov	r5,fp
   2bd08:	da000115 	stw	r8,4(sp)
   2bd0c:	d8c00015 	stw	r3,0(sp)
   2bd10:	002cd640 	call	2cd64 <memmove>
   2bd14:	d8c00017 	ldw	r3,0(sp)
   2bd18:	80800017 	ldw	r2,0(r16)
   2bd1c:	800b883a 	mov	r5,r16
   2bd20:	a809883a 	mov	r4,r21
   2bd24:	10c5883a 	add	r2,r2,r3
   2bd28:	80800015 	stw	r2,0(r16)
   2bd2c:	d8c00015 	stw	r3,0(sp)
   2bd30:	002b1f00 	call	2b1f0 <_fflush_r>
   2bd34:	d8c00017 	ldw	r3,0(sp)
   2bd38:	da000117 	ldw	r8,4(sp)
   2bd3c:	103fc21e 	bne	r2,zero,2bc48 <__alt_data_end+0xfffec848>
   2bd40:	182f883a 	mov	r23,r3
   2bd44:	9de7c83a 	sub	r19,r19,r23
   2bd48:	983fe11e 	bne	r19,zero,2bcd0 <__alt_data_end+0xfffec8d0>
   2bd4c:	800b883a 	mov	r5,r16
   2bd50:	a809883a 	mov	r4,r21
   2bd54:	002b1f00 	call	2b1f0 <_fflush_r>
   2bd58:	103fbb1e 	bne	r2,zero,2bc48 <__alt_data_end+0xfffec848>
   2bd5c:	0011883a 	mov	r8,zero
   2bd60:	003fdb06 	br	2bcd0 <__alt_data_end+0xfffec8d0>
   2bd64:	94c0012e 	bgeu	r18,r19,2bd6c <__sfvwrite_r+0x31c>
   2bd68:	9027883a 	mov	r19,r18
   2bd6c:	980d883a 	mov	r6,r19
   2bd70:	e00b883a 	mov	r5,fp
   2bd74:	002cd640 	call	2cd64 <memmove>
   2bd78:	80800217 	ldw	r2,8(r16)
   2bd7c:	80c00017 	ldw	r3,0(r16)
   2bd80:	14c5c83a 	sub	r2,r2,r19
   2bd84:	1cc7883a 	add	r3,r3,r19
   2bd88:	80800215 	stw	r2,8(r16)
   2bd8c:	80c00015 	stw	r3,0(r16)
   2bd90:	10004326 	beq	r2,zero,2bea0 <__sfvwrite_r+0x450>
   2bd94:	9805883a 	mov	r2,r19
   2bd98:	003f8606 	br	2bbb4 <__alt_data_end+0xfffec7b4>
   2bd9c:	b00d883a 	mov	r6,r22
   2bda0:	e00b883a 	mov	r5,fp
   2bda4:	da000115 	stw	r8,4(sp)
   2bda8:	002cd640 	call	2cd64 <memmove>
   2bdac:	80800217 	ldw	r2,8(r16)
   2bdb0:	80c00017 	ldw	r3,0(r16)
   2bdb4:	da000117 	ldw	r8,4(sp)
   2bdb8:	1585c83a 	sub	r2,r2,r22
   2bdbc:	1dad883a 	add	r22,r3,r22
   2bdc0:	80800215 	stw	r2,8(r16)
   2bdc4:	85800015 	stw	r22,0(r16)
   2bdc8:	003fbf06 	br	2bcc8 <__alt_data_end+0xfffec8c8>
   2bdcc:	81000017 	ldw	r4,0(r16)
   2bdd0:	9027883a 	mov	r19,r18
   2bdd4:	902f883a 	mov	r23,r18
   2bdd8:	003f6c06 	br	2bb8c <__alt_data_end+0xfffec78c>
   2bddc:	900d883a 	mov	r6,r18
   2bde0:	01400284 	movi	r5,10
   2bde4:	e009883a 	mov	r4,fp
   2bde8:	002cb380 	call	2cb38 <memchr>
   2bdec:	10003e26 	beq	r2,zero,2bee8 <__sfvwrite_r+0x498>
   2bdf0:	10800044 	addi	r2,r2,1
   2bdf4:	1727c83a 	sub	r19,r2,fp
   2bdf8:	02000044 	movi	r8,1
   2bdfc:	003f9d06 	br	2bc74 <__alt_data_end+0xfffec874>
   2be00:	80800517 	ldw	r2,20(r16)
   2be04:	81400417 	ldw	r5,16(r16)
   2be08:	81c00017 	ldw	r7,0(r16)
   2be0c:	10a7883a 	add	r19,r2,r2
   2be10:	9885883a 	add	r2,r19,r2
   2be14:	1026d7fa 	srli	r19,r2,31
   2be18:	396dc83a 	sub	r22,r7,r5
   2be1c:	b1000044 	addi	r4,r22,1
   2be20:	9885883a 	add	r2,r19,r2
   2be24:	1027d07a 	srai	r19,r2,1
   2be28:	2485883a 	add	r2,r4,r18
   2be2c:	980d883a 	mov	r6,r19
   2be30:	9880022e 	bgeu	r19,r2,2be3c <__sfvwrite_r+0x3ec>
   2be34:	1027883a 	mov	r19,r2
   2be38:	100d883a 	mov	r6,r2
   2be3c:	18c1000c 	andi	r3,r3,1024
   2be40:	18001c26 	beq	r3,zero,2beb4 <__sfvwrite_r+0x464>
   2be44:	300b883a 	mov	r5,r6
   2be48:	a809883a 	mov	r4,r21
   2be4c:	002c32c0 	call	2c32c <_malloc_r>
   2be50:	102f883a 	mov	r23,r2
   2be54:	10002926 	beq	r2,zero,2befc <__sfvwrite_r+0x4ac>
   2be58:	81400417 	ldw	r5,16(r16)
   2be5c:	b00d883a 	mov	r6,r22
   2be60:	1009883a 	mov	r4,r2
   2be64:	002cc1c0 	call	2cc1c <memcpy>
   2be68:	8080030b 	ldhu	r2,12(r16)
   2be6c:	00fedfc4 	movi	r3,-1153
   2be70:	10c4703a 	and	r2,r2,r3
   2be74:	10802014 	ori	r2,r2,128
   2be78:	8080030d 	sth	r2,12(r16)
   2be7c:	bd89883a 	add	r4,r23,r22
   2be80:	9d8fc83a 	sub	r7,r19,r22
   2be84:	85c00415 	stw	r23,16(r16)
   2be88:	84c00515 	stw	r19,20(r16)
   2be8c:	81000015 	stw	r4,0(r16)
   2be90:	9027883a 	mov	r19,r18
   2be94:	81c00215 	stw	r7,8(r16)
   2be98:	902f883a 	mov	r23,r18
   2be9c:	003f3b06 	br	2bb8c <__alt_data_end+0xfffec78c>
   2bea0:	800b883a 	mov	r5,r16
   2bea4:	a809883a 	mov	r4,r21
   2bea8:	002b1f00 	call	2b1f0 <_fflush_r>
   2beac:	103fb926 	beq	r2,zero,2bd94 <__alt_data_end+0xfffec994>
   2beb0:	003f6506 	br	2bc48 <__alt_data_end+0xfffec848>
   2beb4:	a809883a 	mov	r4,r21
   2beb8:	002dfe40 	call	2dfe4 <_realloc_r>
   2bebc:	102f883a 	mov	r23,r2
   2bec0:	103fee1e 	bne	r2,zero,2be7c <__alt_data_end+0xfffeca7c>
   2bec4:	81400417 	ldw	r5,16(r16)
   2bec8:	a809883a 	mov	r4,r21
   2becc:	002b7400 	call	2b740 <_free_r>
   2bed0:	8080030b 	ldhu	r2,12(r16)
   2bed4:	00ffdfc4 	movi	r3,-129
   2bed8:	1884703a 	and	r2,r3,r2
   2bedc:	00c00304 	movi	r3,12
   2bee0:	a8c00015 	stw	r3,0(r21)
   2bee4:	003f5906 	br	2bc4c <__alt_data_end+0xfffec84c>
   2bee8:	94c00044 	addi	r19,r18,1
   2beec:	02000044 	movi	r8,1
   2bef0:	003f6006 	br	2bc74 <__alt_data_end+0xfffec874>
   2bef4:	00bfffc4 	movi	r2,-1
   2bef8:	003f0306 	br	2bb08 <__alt_data_end+0xfffec708>
   2befc:	00800304 	movi	r2,12
   2bf00:	a8800015 	stw	r2,0(r21)
   2bf04:	8080030b 	ldhu	r2,12(r16)
   2bf08:	003f5006 	br	2bc4c <__alt_data_end+0xfffec84c>

0002bf0c <_fwalk>:
   2bf0c:	defff704 	addi	sp,sp,-36
   2bf10:	dd000415 	stw	r20,16(sp)
   2bf14:	dfc00815 	stw	ra,32(sp)
   2bf18:	ddc00715 	stw	r23,28(sp)
   2bf1c:	dd800615 	stw	r22,24(sp)
   2bf20:	dd400515 	stw	r21,20(sp)
   2bf24:	dcc00315 	stw	r19,12(sp)
   2bf28:	dc800215 	stw	r18,8(sp)
   2bf2c:	dc400115 	stw	r17,4(sp)
   2bf30:	dc000015 	stw	r16,0(sp)
   2bf34:	2500b804 	addi	r20,r4,736
   2bf38:	a0002326 	beq	r20,zero,2bfc8 <_fwalk+0xbc>
   2bf3c:	282b883a 	mov	r21,r5
   2bf40:	002f883a 	mov	r23,zero
   2bf44:	05800044 	movi	r22,1
   2bf48:	04ffffc4 	movi	r19,-1
   2bf4c:	a4400117 	ldw	r17,4(r20)
   2bf50:	a4800217 	ldw	r18,8(r20)
   2bf54:	8c7fffc4 	addi	r17,r17,-1
   2bf58:	88000d16 	blt	r17,zero,2bf90 <_fwalk+0x84>
   2bf5c:	94000304 	addi	r16,r18,12
   2bf60:	94800384 	addi	r18,r18,14
   2bf64:	8080000b 	ldhu	r2,0(r16)
   2bf68:	8c7fffc4 	addi	r17,r17,-1
   2bf6c:	813ffd04 	addi	r4,r16,-12
   2bf70:	b080042e 	bgeu	r22,r2,2bf84 <_fwalk+0x78>
   2bf74:	9080000f 	ldh	r2,0(r18)
   2bf78:	14c00226 	beq	r2,r19,2bf84 <_fwalk+0x78>
   2bf7c:	a83ee83a 	callr	r21
   2bf80:	b8aeb03a 	or	r23,r23,r2
   2bf84:	84001a04 	addi	r16,r16,104
   2bf88:	94801a04 	addi	r18,r18,104
   2bf8c:	8cfff51e 	bne	r17,r19,2bf64 <__alt_data_end+0xfffecb64>
   2bf90:	a5000017 	ldw	r20,0(r20)
   2bf94:	a03fed1e 	bne	r20,zero,2bf4c <__alt_data_end+0xfffecb4c>
   2bf98:	b805883a 	mov	r2,r23
   2bf9c:	dfc00817 	ldw	ra,32(sp)
   2bfa0:	ddc00717 	ldw	r23,28(sp)
   2bfa4:	dd800617 	ldw	r22,24(sp)
   2bfa8:	dd400517 	ldw	r21,20(sp)
   2bfac:	dd000417 	ldw	r20,16(sp)
   2bfb0:	dcc00317 	ldw	r19,12(sp)
   2bfb4:	dc800217 	ldw	r18,8(sp)
   2bfb8:	dc400117 	ldw	r17,4(sp)
   2bfbc:	dc000017 	ldw	r16,0(sp)
   2bfc0:	dec00904 	addi	sp,sp,36
   2bfc4:	f800283a 	ret
   2bfc8:	002f883a 	mov	r23,zero
   2bfcc:	003ff206 	br	2bf98 <__alt_data_end+0xfffecb98>

0002bfd0 <_fwalk_reent>:
   2bfd0:	defff704 	addi	sp,sp,-36
   2bfd4:	dd000415 	stw	r20,16(sp)
   2bfd8:	dfc00815 	stw	ra,32(sp)
   2bfdc:	ddc00715 	stw	r23,28(sp)
   2bfe0:	dd800615 	stw	r22,24(sp)
   2bfe4:	dd400515 	stw	r21,20(sp)
   2bfe8:	dcc00315 	stw	r19,12(sp)
   2bfec:	dc800215 	stw	r18,8(sp)
   2bff0:	dc400115 	stw	r17,4(sp)
   2bff4:	dc000015 	stw	r16,0(sp)
   2bff8:	2500b804 	addi	r20,r4,736
   2bffc:	a0002326 	beq	r20,zero,2c08c <_fwalk_reent+0xbc>
   2c000:	282b883a 	mov	r21,r5
   2c004:	2027883a 	mov	r19,r4
   2c008:	002f883a 	mov	r23,zero
   2c00c:	05800044 	movi	r22,1
   2c010:	04bfffc4 	movi	r18,-1
   2c014:	a4400117 	ldw	r17,4(r20)
   2c018:	a4000217 	ldw	r16,8(r20)
   2c01c:	8c7fffc4 	addi	r17,r17,-1
   2c020:	88000c16 	blt	r17,zero,2c054 <_fwalk_reent+0x84>
   2c024:	84000304 	addi	r16,r16,12
   2c028:	8080000b 	ldhu	r2,0(r16)
   2c02c:	8c7fffc4 	addi	r17,r17,-1
   2c030:	817ffd04 	addi	r5,r16,-12
   2c034:	b080052e 	bgeu	r22,r2,2c04c <_fwalk_reent+0x7c>
   2c038:	8080008f 	ldh	r2,2(r16)
   2c03c:	9809883a 	mov	r4,r19
   2c040:	14800226 	beq	r2,r18,2c04c <_fwalk_reent+0x7c>
   2c044:	a83ee83a 	callr	r21
   2c048:	b8aeb03a 	or	r23,r23,r2
   2c04c:	84001a04 	addi	r16,r16,104
   2c050:	8cbff51e 	bne	r17,r18,2c028 <__alt_data_end+0xfffecc28>
   2c054:	a5000017 	ldw	r20,0(r20)
   2c058:	a03fee1e 	bne	r20,zero,2c014 <__alt_data_end+0xfffecc14>
   2c05c:	b805883a 	mov	r2,r23
   2c060:	dfc00817 	ldw	ra,32(sp)
   2c064:	ddc00717 	ldw	r23,28(sp)
   2c068:	dd800617 	ldw	r22,24(sp)
   2c06c:	dd400517 	ldw	r21,20(sp)
   2c070:	dd000417 	ldw	r20,16(sp)
   2c074:	dcc00317 	ldw	r19,12(sp)
   2c078:	dc800217 	ldw	r18,8(sp)
   2c07c:	dc400117 	ldw	r17,4(sp)
   2c080:	dc000017 	ldw	r16,0(sp)
   2c084:	dec00904 	addi	sp,sp,36
   2c088:	f800283a 	ret
   2c08c:	002f883a 	mov	r23,zero
   2c090:	003ff206 	br	2c05c <__alt_data_end+0xfffecc5c>

0002c094 <_setlocale_r>:
   2c094:	30001b26 	beq	r6,zero,2c104 <_setlocale_r+0x70>
   2c098:	014000f4 	movhi	r5,3
   2c09c:	defffe04 	addi	sp,sp,-8
   2c0a0:	29521e04 	addi	r5,r5,18552
   2c0a4:	3009883a 	mov	r4,r6
   2c0a8:	dc000015 	stw	r16,0(sp)
   2c0ac:	dfc00115 	stw	ra,4(sp)
   2c0b0:	3021883a 	mov	r16,r6
   2c0b4:	002e74c0 	call	2e74c <strcmp>
   2c0b8:	1000061e 	bne	r2,zero,2c0d4 <_setlocale_r+0x40>
   2c0bc:	008000f4 	movhi	r2,3
   2c0c0:	10921d04 	addi	r2,r2,18548
   2c0c4:	dfc00117 	ldw	ra,4(sp)
   2c0c8:	dc000017 	ldw	r16,0(sp)
   2c0cc:	dec00204 	addi	sp,sp,8
   2c0d0:	f800283a 	ret
   2c0d4:	014000f4 	movhi	r5,3
   2c0d8:	29521d04 	addi	r5,r5,18548
   2c0dc:	8009883a 	mov	r4,r16
   2c0e0:	002e74c0 	call	2e74c <strcmp>
   2c0e4:	103ff526 	beq	r2,zero,2c0bc <__alt_data_end+0xfffeccbc>
   2c0e8:	014000f4 	movhi	r5,3
   2c0ec:	29520804 	addi	r5,r5,18464
   2c0f0:	8009883a 	mov	r4,r16
   2c0f4:	002e74c0 	call	2e74c <strcmp>
   2c0f8:	103ff026 	beq	r2,zero,2c0bc <__alt_data_end+0xfffeccbc>
   2c0fc:	0005883a 	mov	r2,zero
   2c100:	003ff006 	br	2c0c4 <__alt_data_end+0xfffeccc4>
   2c104:	008000f4 	movhi	r2,3
   2c108:	10921d04 	addi	r2,r2,18548
   2c10c:	f800283a 	ret

0002c110 <__locale_charset>:
   2c110:	008000f4 	movhi	r2,3
   2c114:	10938e04 	addi	r2,r2,20024
   2c118:	f800283a 	ret

0002c11c <__locale_mb_cur_max>:
   2c11c:	008000f4 	movhi	r2,3
   2c120:	10992b04 	addi	r2,r2,25772
   2c124:	10800017 	ldw	r2,0(r2)
   2c128:	f800283a 	ret

0002c12c <__locale_msgcharset>:
   2c12c:	008000f4 	movhi	r2,3
   2c130:	10938604 	addi	r2,r2,19992
   2c134:	f800283a 	ret

0002c138 <__locale_cjk_lang>:
   2c138:	0005883a 	mov	r2,zero
   2c13c:	f800283a 	ret

0002c140 <_localeconv_r>:
   2c140:	008000f4 	movhi	r2,3
   2c144:	10939604 	addi	r2,r2,20056
   2c148:	f800283a 	ret

0002c14c <setlocale>:
   2c14c:	008000f4 	movhi	r2,3
   2c150:	10992a04 	addi	r2,r2,25768
   2c154:	280d883a 	mov	r6,r5
   2c158:	200b883a 	mov	r5,r4
   2c15c:	11000017 	ldw	r4,0(r2)
   2c160:	002c0941 	jmpi	2c094 <_setlocale_r>

0002c164 <localeconv>:
   2c164:	008000f4 	movhi	r2,3
   2c168:	10939604 	addi	r2,r2,20056
   2c16c:	f800283a 	ret

0002c170 <__smakebuf_r>:
   2c170:	2880030b 	ldhu	r2,12(r5)
   2c174:	10c0008c 	andi	r3,r2,2
   2c178:	1800411e 	bne	r3,zero,2c280 <__smakebuf_r+0x110>
   2c17c:	deffec04 	addi	sp,sp,-80
   2c180:	dc000f15 	stw	r16,60(sp)
   2c184:	2821883a 	mov	r16,r5
   2c188:	2940038f 	ldh	r5,14(r5)
   2c18c:	dc401015 	stw	r17,64(sp)
   2c190:	dfc01315 	stw	ra,76(sp)
   2c194:	dcc01215 	stw	r19,72(sp)
   2c198:	dc801115 	stw	r18,68(sp)
   2c19c:	2023883a 	mov	r17,r4
   2c1a0:	28001c16 	blt	r5,zero,2c214 <__smakebuf_r+0xa4>
   2c1a4:	d80d883a 	mov	r6,sp
   2c1a8:	00302f40 	call	302f4 <_fstat_r>
   2c1ac:	10001816 	blt	r2,zero,2c210 <__smakebuf_r+0xa0>
   2c1b0:	d8800117 	ldw	r2,4(sp)
   2c1b4:	00e00014 	movui	r3,32768
   2c1b8:	10bc000c 	andi	r2,r2,61440
   2c1bc:	14c80020 	cmpeqi	r19,r2,8192
   2c1c0:	10c03726 	beq	r2,r3,2c2a0 <__smakebuf_r+0x130>
   2c1c4:	80c0030b 	ldhu	r3,12(r16)
   2c1c8:	18c20014 	ori	r3,r3,2048
   2c1cc:	80c0030d 	sth	r3,12(r16)
   2c1d0:	00c80004 	movi	r3,8192
   2c1d4:	10c0521e 	bne	r2,r3,2c320 <__smakebuf_r+0x1b0>
   2c1d8:	8140038f 	ldh	r5,14(r16)
   2c1dc:	8809883a 	mov	r4,r17
   2c1e0:	00303500 	call	30350 <_isatty_r>
   2c1e4:	10004c26 	beq	r2,zero,2c318 <__smakebuf_r+0x1a8>
   2c1e8:	8080030b 	ldhu	r2,12(r16)
   2c1ec:	80c010c4 	addi	r3,r16,67
   2c1f0:	80c00015 	stw	r3,0(r16)
   2c1f4:	10800054 	ori	r2,r2,1
   2c1f8:	8080030d 	sth	r2,12(r16)
   2c1fc:	00800044 	movi	r2,1
   2c200:	80c00415 	stw	r3,16(r16)
   2c204:	80800515 	stw	r2,20(r16)
   2c208:	04810004 	movi	r18,1024
   2c20c:	00000706 	br	2c22c <__smakebuf_r+0xbc>
   2c210:	8080030b 	ldhu	r2,12(r16)
   2c214:	10c0200c 	andi	r3,r2,128
   2c218:	18001f1e 	bne	r3,zero,2c298 <__smakebuf_r+0x128>
   2c21c:	04810004 	movi	r18,1024
   2c220:	10820014 	ori	r2,r2,2048
   2c224:	8080030d 	sth	r2,12(r16)
   2c228:	0027883a 	mov	r19,zero
   2c22c:	900b883a 	mov	r5,r18
   2c230:	8809883a 	mov	r4,r17
   2c234:	002c32c0 	call	2c32c <_malloc_r>
   2c238:	10002c26 	beq	r2,zero,2c2ec <__smakebuf_r+0x17c>
   2c23c:	80c0030b 	ldhu	r3,12(r16)
   2c240:	010000f4 	movhi	r4,3
   2c244:	212ca104 	addi	r4,r4,-19836
   2c248:	89000f15 	stw	r4,60(r17)
   2c24c:	18c02014 	ori	r3,r3,128
   2c250:	80c0030d 	sth	r3,12(r16)
   2c254:	80800015 	stw	r2,0(r16)
   2c258:	80800415 	stw	r2,16(r16)
   2c25c:	84800515 	stw	r18,20(r16)
   2c260:	98001a1e 	bne	r19,zero,2c2cc <__smakebuf_r+0x15c>
   2c264:	dfc01317 	ldw	ra,76(sp)
   2c268:	dcc01217 	ldw	r19,72(sp)
   2c26c:	dc801117 	ldw	r18,68(sp)
   2c270:	dc401017 	ldw	r17,64(sp)
   2c274:	dc000f17 	ldw	r16,60(sp)
   2c278:	dec01404 	addi	sp,sp,80
   2c27c:	f800283a 	ret
   2c280:	288010c4 	addi	r2,r5,67
   2c284:	28800015 	stw	r2,0(r5)
   2c288:	28800415 	stw	r2,16(r5)
   2c28c:	00800044 	movi	r2,1
   2c290:	28800515 	stw	r2,20(r5)
   2c294:	f800283a 	ret
   2c298:	04801004 	movi	r18,64
   2c29c:	003fe006 	br	2c220 <__alt_data_end+0xfffece20>
   2c2a0:	81000a17 	ldw	r4,40(r16)
   2c2a4:	00c000f4 	movhi	r3,3
   2c2a8:	18f9ba04 	addi	r3,r3,-6424
   2c2ac:	20ffc51e 	bne	r4,r3,2c1c4 <__alt_data_end+0xfffecdc4>
   2c2b0:	8080030b 	ldhu	r2,12(r16)
   2c2b4:	04810004 	movi	r18,1024
   2c2b8:	84801315 	stw	r18,76(r16)
   2c2bc:	1484b03a 	or	r2,r2,r18
   2c2c0:	8080030d 	sth	r2,12(r16)
   2c2c4:	0027883a 	mov	r19,zero
   2c2c8:	003fd806 	br	2c22c <__alt_data_end+0xfffece2c>
   2c2cc:	8140038f 	ldh	r5,14(r16)
   2c2d0:	8809883a 	mov	r4,r17
   2c2d4:	00303500 	call	30350 <_isatty_r>
   2c2d8:	103fe226 	beq	r2,zero,2c264 <__alt_data_end+0xfffece64>
   2c2dc:	8080030b 	ldhu	r2,12(r16)
   2c2e0:	10800054 	ori	r2,r2,1
   2c2e4:	8080030d 	sth	r2,12(r16)
   2c2e8:	003fde06 	br	2c264 <__alt_data_end+0xfffece64>
   2c2ec:	8080030b 	ldhu	r2,12(r16)
   2c2f0:	10c0800c 	andi	r3,r2,512
   2c2f4:	183fdb1e 	bne	r3,zero,2c264 <__alt_data_end+0xfffece64>
   2c2f8:	10800094 	ori	r2,r2,2
   2c2fc:	80c010c4 	addi	r3,r16,67
   2c300:	8080030d 	sth	r2,12(r16)
   2c304:	00800044 	movi	r2,1
   2c308:	80c00015 	stw	r3,0(r16)
   2c30c:	80c00415 	stw	r3,16(r16)
   2c310:	80800515 	stw	r2,20(r16)
   2c314:	003fd306 	br	2c264 <__alt_data_end+0xfffece64>
   2c318:	04810004 	movi	r18,1024
   2c31c:	003fc306 	br	2c22c <__alt_data_end+0xfffece2c>
   2c320:	0027883a 	mov	r19,zero
   2c324:	04810004 	movi	r18,1024
   2c328:	003fc006 	br	2c22c <__alt_data_end+0xfffece2c>

0002c32c <_malloc_r>:
   2c32c:	defff504 	addi	sp,sp,-44
   2c330:	dc800315 	stw	r18,12(sp)
   2c334:	dfc00a15 	stw	ra,40(sp)
   2c338:	df000915 	stw	fp,36(sp)
   2c33c:	ddc00815 	stw	r23,32(sp)
   2c340:	dd800715 	stw	r22,28(sp)
   2c344:	dd400615 	stw	r21,24(sp)
   2c348:	dd000515 	stw	r20,20(sp)
   2c34c:	dcc00415 	stw	r19,16(sp)
   2c350:	dc400215 	stw	r17,8(sp)
   2c354:	dc000115 	stw	r16,4(sp)
   2c358:	288002c4 	addi	r2,r5,11
   2c35c:	00c00584 	movi	r3,22
   2c360:	2025883a 	mov	r18,r4
   2c364:	18807f2e 	bgeu	r3,r2,2c564 <_malloc_r+0x238>
   2c368:	047ffe04 	movi	r17,-8
   2c36c:	1462703a 	and	r17,r2,r17
   2c370:	8800a316 	blt	r17,zero,2c600 <_malloc_r+0x2d4>
   2c374:	8940a236 	bltu	r17,r5,2c600 <_malloc_r+0x2d4>
   2c378:	0031c2c0 	call	31c2c <__malloc_lock>
   2c37c:	00807dc4 	movi	r2,503
   2c380:	1441e92e 	bgeu	r2,r17,2cb28 <_malloc_r+0x7fc>
   2c384:	8804d27a 	srli	r2,r17,9
   2c388:	1000a126 	beq	r2,zero,2c610 <_malloc_r+0x2e4>
   2c38c:	00c00104 	movi	r3,4
   2c390:	18811e36 	bltu	r3,r2,2c80c <_malloc_r+0x4e0>
   2c394:	8804d1ba 	srli	r2,r17,6
   2c398:	12000e44 	addi	r8,r2,57
   2c39c:	11c00e04 	addi	r7,r2,56
   2c3a0:	4209883a 	add	r4,r8,r8
   2c3a4:	04c000f4 	movhi	r19,3
   2c3a8:	2109883a 	add	r4,r4,r4
   2c3ac:	9cd3a404 	addi	r19,r19,20112
   2c3b0:	2109883a 	add	r4,r4,r4
   2c3b4:	9909883a 	add	r4,r19,r4
   2c3b8:	24000117 	ldw	r16,4(r4)
   2c3bc:	213ffe04 	addi	r4,r4,-8
   2c3c0:	24009726 	beq	r4,r16,2c620 <_malloc_r+0x2f4>
   2c3c4:	80800117 	ldw	r2,4(r16)
   2c3c8:	01bfff04 	movi	r6,-4
   2c3cc:	014003c4 	movi	r5,15
   2c3d0:	1184703a 	and	r2,r2,r6
   2c3d4:	1447c83a 	sub	r3,r2,r17
   2c3d8:	28c00716 	blt	r5,r3,2c3f8 <_malloc_r+0xcc>
   2c3dc:	1800920e 	bge	r3,zero,2c628 <_malloc_r+0x2fc>
   2c3e0:	84000317 	ldw	r16,12(r16)
   2c3e4:	24008e26 	beq	r4,r16,2c620 <_malloc_r+0x2f4>
   2c3e8:	80800117 	ldw	r2,4(r16)
   2c3ec:	1184703a 	and	r2,r2,r6
   2c3f0:	1447c83a 	sub	r3,r2,r17
   2c3f4:	28fff90e 	bge	r5,r3,2c3dc <__alt_data_end+0xfffecfdc>
   2c3f8:	3809883a 	mov	r4,r7
   2c3fc:	018000f4 	movhi	r6,3
   2c400:	9c000417 	ldw	r16,16(r19)
   2c404:	3193a404 	addi	r6,r6,20112
   2c408:	32000204 	addi	r8,r6,8
   2c40c:	82013426 	beq	r16,r8,2c8e0 <_malloc_r+0x5b4>
   2c410:	80c00117 	ldw	r3,4(r16)
   2c414:	00bfff04 	movi	r2,-4
   2c418:	188e703a 	and	r7,r3,r2
   2c41c:	3c45c83a 	sub	r2,r7,r17
   2c420:	00c003c4 	movi	r3,15
   2c424:	18811f16 	blt	r3,r2,2c8a4 <_malloc_r+0x578>
   2c428:	32000515 	stw	r8,20(r6)
   2c42c:	32000415 	stw	r8,16(r6)
   2c430:	10007f0e 	bge	r2,zero,2c630 <_malloc_r+0x304>
   2c434:	00807fc4 	movi	r2,511
   2c438:	11c0fd36 	bltu	r2,r7,2c830 <_malloc_r+0x504>
   2c43c:	3806d0fa 	srli	r3,r7,3
   2c440:	01c00044 	movi	r7,1
   2c444:	30800117 	ldw	r2,4(r6)
   2c448:	19400044 	addi	r5,r3,1
   2c44c:	294b883a 	add	r5,r5,r5
   2c450:	1807d0ba 	srai	r3,r3,2
   2c454:	294b883a 	add	r5,r5,r5
   2c458:	294b883a 	add	r5,r5,r5
   2c45c:	298b883a 	add	r5,r5,r6
   2c460:	38c6983a 	sll	r3,r7,r3
   2c464:	29c00017 	ldw	r7,0(r5)
   2c468:	2a7ffe04 	addi	r9,r5,-8
   2c46c:	1886b03a 	or	r3,r3,r2
   2c470:	82400315 	stw	r9,12(r16)
   2c474:	81c00215 	stw	r7,8(r16)
   2c478:	30c00115 	stw	r3,4(r6)
   2c47c:	2c000015 	stw	r16,0(r5)
   2c480:	3c000315 	stw	r16,12(r7)
   2c484:	2005d0ba 	srai	r2,r4,2
   2c488:	01400044 	movi	r5,1
   2c48c:	288a983a 	sll	r5,r5,r2
   2c490:	19406f36 	bltu	r3,r5,2c650 <_malloc_r+0x324>
   2c494:	28c4703a 	and	r2,r5,r3
   2c498:	10000a1e 	bne	r2,zero,2c4c4 <_malloc_r+0x198>
   2c49c:	00bfff04 	movi	r2,-4
   2c4a0:	294b883a 	add	r5,r5,r5
   2c4a4:	2088703a 	and	r4,r4,r2
   2c4a8:	28c4703a 	and	r2,r5,r3
   2c4ac:	21000104 	addi	r4,r4,4
   2c4b0:	1000041e 	bne	r2,zero,2c4c4 <_malloc_r+0x198>
   2c4b4:	294b883a 	add	r5,r5,r5
   2c4b8:	28c4703a 	and	r2,r5,r3
   2c4bc:	21000104 	addi	r4,r4,4
   2c4c0:	103ffc26 	beq	r2,zero,2c4b4 <__alt_data_end+0xfffed0b4>
   2c4c4:	02bfff04 	movi	r10,-4
   2c4c8:	024003c4 	movi	r9,15
   2c4cc:	21800044 	addi	r6,r4,1
   2c4d0:	318d883a 	add	r6,r6,r6
   2c4d4:	318d883a 	add	r6,r6,r6
   2c4d8:	318d883a 	add	r6,r6,r6
   2c4dc:	998d883a 	add	r6,r19,r6
   2c4e0:	333ffe04 	addi	r12,r6,-8
   2c4e4:	2017883a 	mov	r11,r4
   2c4e8:	31800104 	addi	r6,r6,4
   2c4ec:	34000017 	ldw	r16,0(r6)
   2c4f0:	31fffd04 	addi	r7,r6,-12
   2c4f4:	81c0041e 	bne	r16,r7,2c508 <_malloc_r+0x1dc>
   2c4f8:	0000fb06 	br	2c8e8 <_malloc_r+0x5bc>
   2c4fc:	1801030e 	bge	r3,zero,2c90c <_malloc_r+0x5e0>
   2c500:	84000317 	ldw	r16,12(r16)
   2c504:	81c0f826 	beq	r16,r7,2c8e8 <_malloc_r+0x5bc>
   2c508:	80800117 	ldw	r2,4(r16)
   2c50c:	1284703a 	and	r2,r2,r10
   2c510:	1447c83a 	sub	r3,r2,r17
   2c514:	48fff90e 	bge	r9,r3,2c4fc <__alt_data_end+0xfffed0fc>
   2c518:	80800317 	ldw	r2,12(r16)
   2c51c:	81000217 	ldw	r4,8(r16)
   2c520:	89400054 	ori	r5,r17,1
   2c524:	81400115 	stw	r5,4(r16)
   2c528:	20800315 	stw	r2,12(r4)
   2c52c:	11000215 	stw	r4,8(r2)
   2c530:	8463883a 	add	r17,r16,r17
   2c534:	9c400515 	stw	r17,20(r19)
   2c538:	9c400415 	stw	r17,16(r19)
   2c53c:	18800054 	ori	r2,r3,1
   2c540:	88800115 	stw	r2,4(r17)
   2c544:	8a000315 	stw	r8,12(r17)
   2c548:	8a000215 	stw	r8,8(r17)
   2c54c:	88e3883a 	add	r17,r17,r3
   2c550:	88c00015 	stw	r3,0(r17)
   2c554:	9009883a 	mov	r4,r18
   2c558:	0031c500 	call	31c50 <__malloc_unlock>
   2c55c:	80800204 	addi	r2,r16,8
   2c560:	00001b06 	br	2c5d0 <_malloc_r+0x2a4>
   2c564:	04400404 	movi	r17,16
   2c568:	89402536 	bltu	r17,r5,2c600 <_malloc_r+0x2d4>
   2c56c:	0031c2c0 	call	31c2c <__malloc_lock>
   2c570:	00800184 	movi	r2,6
   2c574:	01000084 	movi	r4,2
   2c578:	04c000f4 	movhi	r19,3
   2c57c:	1085883a 	add	r2,r2,r2
   2c580:	9cd3a404 	addi	r19,r19,20112
   2c584:	1085883a 	add	r2,r2,r2
   2c588:	9885883a 	add	r2,r19,r2
   2c58c:	14000117 	ldw	r16,4(r2)
   2c590:	10fffe04 	addi	r3,r2,-8
   2c594:	80c0d926 	beq	r16,r3,2c8fc <_malloc_r+0x5d0>
   2c598:	80c00117 	ldw	r3,4(r16)
   2c59c:	81000317 	ldw	r4,12(r16)
   2c5a0:	00bfff04 	movi	r2,-4
   2c5a4:	1884703a 	and	r2,r3,r2
   2c5a8:	81400217 	ldw	r5,8(r16)
   2c5ac:	8085883a 	add	r2,r16,r2
   2c5b0:	10c00117 	ldw	r3,4(r2)
   2c5b4:	29000315 	stw	r4,12(r5)
   2c5b8:	21400215 	stw	r5,8(r4)
   2c5bc:	18c00054 	ori	r3,r3,1
   2c5c0:	10c00115 	stw	r3,4(r2)
   2c5c4:	9009883a 	mov	r4,r18
   2c5c8:	0031c500 	call	31c50 <__malloc_unlock>
   2c5cc:	80800204 	addi	r2,r16,8
   2c5d0:	dfc00a17 	ldw	ra,40(sp)
   2c5d4:	df000917 	ldw	fp,36(sp)
   2c5d8:	ddc00817 	ldw	r23,32(sp)
   2c5dc:	dd800717 	ldw	r22,28(sp)
   2c5e0:	dd400617 	ldw	r21,24(sp)
   2c5e4:	dd000517 	ldw	r20,20(sp)
   2c5e8:	dcc00417 	ldw	r19,16(sp)
   2c5ec:	dc800317 	ldw	r18,12(sp)
   2c5f0:	dc400217 	ldw	r17,8(sp)
   2c5f4:	dc000117 	ldw	r16,4(sp)
   2c5f8:	dec00b04 	addi	sp,sp,44
   2c5fc:	f800283a 	ret
   2c600:	00800304 	movi	r2,12
   2c604:	90800015 	stw	r2,0(r18)
   2c608:	0005883a 	mov	r2,zero
   2c60c:	003ff006 	br	2c5d0 <__alt_data_end+0xfffed1d0>
   2c610:	01002004 	movi	r4,128
   2c614:	02001004 	movi	r8,64
   2c618:	01c00fc4 	movi	r7,63
   2c61c:	003f6106 	br	2c3a4 <__alt_data_end+0xfffecfa4>
   2c620:	4009883a 	mov	r4,r8
   2c624:	003f7506 	br	2c3fc <__alt_data_end+0xfffecffc>
   2c628:	81000317 	ldw	r4,12(r16)
   2c62c:	003fde06 	br	2c5a8 <__alt_data_end+0xfffed1a8>
   2c630:	81c5883a 	add	r2,r16,r7
   2c634:	11400117 	ldw	r5,4(r2)
   2c638:	9009883a 	mov	r4,r18
   2c63c:	29400054 	ori	r5,r5,1
   2c640:	11400115 	stw	r5,4(r2)
   2c644:	0031c500 	call	31c50 <__malloc_unlock>
   2c648:	80800204 	addi	r2,r16,8
   2c64c:	003fe006 	br	2c5d0 <__alt_data_end+0xfffed1d0>
   2c650:	9c000217 	ldw	r16,8(r19)
   2c654:	00bfff04 	movi	r2,-4
   2c658:	85800117 	ldw	r22,4(r16)
   2c65c:	b0ac703a 	and	r22,r22,r2
   2c660:	b4400336 	bltu	r22,r17,2c670 <_malloc_r+0x344>
   2c664:	b445c83a 	sub	r2,r22,r17
   2c668:	00c003c4 	movi	r3,15
   2c66c:	18805d16 	blt	r3,r2,2c7e4 <_malloc_r+0x4b8>
   2c670:	05c000f4 	movhi	r23,3
   2c674:	008000f4 	movhi	r2,3
   2c678:	109ffd04 	addi	r2,r2,32756
   2c67c:	bdd92c04 	addi	r23,r23,25776
   2c680:	15400017 	ldw	r21,0(r2)
   2c684:	b8c00017 	ldw	r3,0(r23)
   2c688:	00bfffc4 	movi	r2,-1
   2c68c:	858d883a 	add	r6,r16,r22
   2c690:	8d6b883a 	add	r21,r17,r21
   2c694:	1880ea26 	beq	r3,r2,2ca40 <_malloc_r+0x714>
   2c698:	ad4403c4 	addi	r21,r21,4111
   2c69c:	00bc0004 	movi	r2,-4096
   2c6a0:	a8aa703a 	and	r21,r21,r2
   2c6a4:	a80b883a 	mov	r5,r21
   2c6a8:	9009883a 	mov	r4,r18
   2c6ac:	d9800015 	stw	r6,0(sp)
   2c6b0:	002e5bc0 	call	2e5bc <_sbrk_r>
   2c6b4:	1029883a 	mov	r20,r2
   2c6b8:	00bfffc4 	movi	r2,-1
   2c6bc:	d9800017 	ldw	r6,0(sp)
   2c6c0:	a080e826 	beq	r20,r2,2ca64 <_malloc_r+0x738>
   2c6c4:	a180a636 	bltu	r20,r6,2c960 <_malloc_r+0x634>
   2c6c8:	07000134 	movhi	fp,4
   2c6cc:	e7200604 	addi	fp,fp,-32744
   2c6d0:	e0800017 	ldw	r2,0(fp)
   2c6d4:	a887883a 	add	r3,r21,r2
   2c6d8:	e0c00015 	stw	r3,0(fp)
   2c6dc:	3500e626 	beq	r6,r20,2ca78 <_malloc_r+0x74c>
   2c6e0:	b9000017 	ldw	r4,0(r23)
   2c6e4:	00bfffc4 	movi	r2,-1
   2c6e8:	2080ee26 	beq	r4,r2,2caa4 <_malloc_r+0x778>
   2c6ec:	a185c83a 	sub	r2,r20,r6
   2c6f0:	10c5883a 	add	r2,r2,r3
   2c6f4:	e0800015 	stw	r2,0(fp)
   2c6f8:	a0c001cc 	andi	r3,r20,7
   2c6fc:	1800bc26 	beq	r3,zero,2c9f0 <_malloc_r+0x6c4>
   2c700:	a0e9c83a 	sub	r20,r20,r3
   2c704:	00840204 	movi	r2,4104
   2c708:	a5000204 	addi	r20,r20,8
   2c70c:	10c7c83a 	sub	r3,r2,r3
   2c710:	a545883a 	add	r2,r20,r21
   2c714:	1083ffcc 	andi	r2,r2,4095
   2c718:	18abc83a 	sub	r21,r3,r2
   2c71c:	a80b883a 	mov	r5,r21
   2c720:	9009883a 	mov	r4,r18
   2c724:	002e5bc0 	call	2e5bc <_sbrk_r>
   2c728:	00ffffc4 	movi	r3,-1
   2c72c:	10c0e126 	beq	r2,r3,2cab4 <_malloc_r+0x788>
   2c730:	1505c83a 	sub	r2,r2,r20
   2c734:	1545883a 	add	r2,r2,r21
   2c738:	10800054 	ori	r2,r2,1
   2c73c:	e0c00017 	ldw	r3,0(fp)
   2c740:	9d000215 	stw	r20,8(r19)
   2c744:	a0800115 	stw	r2,4(r20)
   2c748:	a8c7883a 	add	r3,r21,r3
   2c74c:	e0c00015 	stw	r3,0(fp)
   2c750:	84c00e26 	beq	r16,r19,2c78c <_malloc_r+0x460>
   2c754:	018003c4 	movi	r6,15
   2c758:	3580a72e 	bgeu	r6,r22,2c9f8 <_malloc_r+0x6cc>
   2c75c:	81400117 	ldw	r5,4(r16)
   2c760:	013ffe04 	movi	r4,-8
   2c764:	b0bffd04 	addi	r2,r22,-12
   2c768:	1104703a 	and	r2,r2,r4
   2c76c:	2900004c 	andi	r4,r5,1
   2c770:	2088b03a 	or	r4,r4,r2
   2c774:	81000115 	stw	r4,4(r16)
   2c778:	01400144 	movi	r5,5
   2c77c:	8089883a 	add	r4,r16,r2
   2c780:	21400115 	stw	r5,4(r4)
   2c784:	21400215 	stw	r5,8(r4)
   2c788:	3080cd36 	bltu	r6,r2,2cac0 <_malloc_r+0x794>
   2c78c:	008000f4 	movhi	r2,3
   2c790:	109ffc04 	addi	r2,r2,32752
   2c794:	11000017 	ldw	r4,0(r2)
   2c798:	20c0012e 	bgeu	r4,r3,2c7a0 <_malloc_r+0x474>
   2c79c:	10c00015 	stw	r3,0(r2)
   2c7a0:	008000f4 	movhi	r2,3
   2c7a4:	109ffb04 	addi	r2,r2,32748
   2c7a8:	11000017 	ldw	r4,0(r2)
   2c7ac:	9c000217 	ldw	r16,8(r19)
   2c7b0:	20c0012e 	bgeu	r4,r3,2c7b8 <_malloc_r+0x48c>
   2c7b4:	10c00015 	stw	r3,0(r2)
   2c7b8:	80c00117 	ldw	r3,4(r16)
   2c7bc:	00bfff04 	movi	r2,-4
   2c7c0:	1886703a 	and	r3,r3,r2
   2c7c4:	1c45c83a 	sub	r2,r3,r17
   2c7c8:	1c400236 	bltu	r3,r17,2c7d4 <_malloc_r+0x4a8>
   2c7cc:	00c003c4 	movi	r3,15
   2c7d0:	18800416 	blt	r3,r2,2c7e4 <_malloc_r+0x4b8>
   2c7d4:	9009883a 	mov	r4,r18
   2c7d8:	0031c500 	call	31c50 <__malloc_unlock>
   2c7dc:	0005883a 	mov	r2,zero
   2c7e0:	003f7b06 	br	2c5d0 <__alt_data_end+0xfffed1d0>
   2c7e4:	88c00054 	ori	r3,r17,1
   2c7e8:	80c00115 	stw	r3,4(r16)
   2c7ec:	8463883a 	add	r17,r16,r17
   2c7f0:	10800054 	ori	r2,r2,1
   2c7f4:	9c400215 	stw	r17,8(r19)
   2c7f8:	88800115 	stw	r2,4(r17)
   2c7fc:	9009883a 	mov	r4,r18
   2c800:	0031c500 	call	31c50 <__malloc_unlock>
   2c804:	80800204 	addi	r2,r16,8
   2c808:	003f7106 	br	2c5d0 <__alt_data_end+0xfffed1d0>
   2c80c:	00c00504 	movi	r3,20
   2c810:	18804a2e 	bgeu	r3,r2,2c93c <_malloc_r+0x610>
   2c814:	00c01504 	movi	r3,84
   2c818:	18806e36 	bltu	r3,r2,2c9d4 <_malloc_r+0x6a8>
   2c81c:	8804d33a 	srli	r2,r17,12
   2c820:	12001bc4 	addi	r8,r2,111
   2c824:	11c01b84 	addi	r7,r2,110
   2c828:	4209883a 	add	r4,r8,r8
   2c82c:	003edd06 	br	2c3a4 <__alt_data_end+0xfffecfa4>
   2c830:	3804d27a 	srli	r2,r7,9
   2c834:	00c00104 	movi	r3,4
   2c838:	1880442e 	bgeu	r3,r2,2c94c <_malloc_r+0x620>
   2c83c:	00c00504 	movi	r3,20
   2c840:	18808136 	bltu	r3,r2,2ca48 <_malloc_r+0x71c>
   2c844:	11401704 	addi	r5,r2,92
   2c848:	10c016c4 	addi	r3,r2,91
   2c84c:	294b883a 	add	r5,r5,r5
   2c850:	294b883a 	add	r5,r5,r5
   2c854:	294b883a 	add	r5,r5,r5
   2c858:	994b883a 	add	r5,r19,r5
   2c85c:	28800017 	ldw	r2,0(r5)
   2c860:	018000f4 	movhi	r6,3
   2c864:	297ffe04 	addi	r5,r5,-8
   2c868:	3193a404 	addi	r6,r6,20112
   2c86c:	28806526 	beq	r5,r2,2ca04 <_malloc_r+0x6d8>
   2c870:	01bfff04 	movi	r6,-4
   2c874:	10c00117 	ldw	r3,4(r2)
   2c878:	1986703a 	and	r3,r3,r6
   2c87c:	38c0022e 	bgeu	r7,r3,2c888 <_malloc_r+0x55c>
   2c880:	10800217 	ldw	r2,8(r2)
   2c884:	28bffb1e 	bne	r5,r2,2c874 <__alt_data_end+0xfffed474>
   2c888:	11400317 	ldw	r5,12(r2)
   2c88c:	98c00117 	ldw	r3,4(r19)
   2c890:	81400315 	stw	r5,12(r16)
   2c894:	80800215 	stw	r2,8(r16)
   2c898:	2c000215 	stw	r16,8(r5)
   2c89c:	14000315 	stw	r16,12(r2)
   2c8a0:	003ef806 	br	2c484 <__alt_data_end+0xfffed084>
   2c8a4:	88c00054 	ori	r3,r17,1
   2c8a8:	80c00115 	stw	r3,4(r16)
   2c8ac:	8463883a 	add	r17,r16,r17
   2c8b0:	34400515 	stw	r17,20(r6)
   2c8b4:	34400415 	stw	r17,16(r6)
   2c8b8:	10c00054 	ori	r3,r2,1
   2c8bc:	8a000315 	stw	r8,12(r17)
   2c8c0:	8a000215 	stw	r8,8(r17)
   2c8c4:	88c00115 	stw	r3,4(r17)
   2c8c8:	88a3883a 	add	r17,r17,r2
   2c8cc:	88800015 	stw	r2,0(r17)
   2c8d0:	9009883a 	mov	r4,r18
   2c8d4:	0031c500 	call	31c50 <__malloc_unlock>
   2c8d8:	80800204 	addi	r2,r16,8
   2c8dc:	003f3c06 	br	2c5d0 <__alt_data_end+0xfffed1d0>
   2c8e0:	30c00117 	ldw	r3,4(r6)
   2c8e4:	003ee706 	br	2c484 <__alt_data_end+0xfffed084>
   2c8e8:	5ac00044 	addi	r11,r11,1
   2c8ec:	588000cc 	andi	r2,r11,3
   2c8f0:	31800204 	addi	r6,r6,8
   2c8f4:	103efd1e 	bne	r2,zero,2c4ec <__alt_data_end+0xfffed0ec>
   2c8f8:	00002406 	br	2c98c <_malloc_r+0x660>
   2c8fc:	14000317 	ldw	r16,12(r2)
   2c900:	143f251e 	bne	r2,r16,2c598 <__alt_data_end+0xfffed198>
   2c904:	21000084 	addi	r4,r4,2
   2c908:	003ebc06 	br	2c3fc <__alt_data_end+0xfffecffc>
   2c90c:	8085883a 	add	r2,r16,r2
   2c910:	10c00117 	ldw	r3,4(r2)
   2c914:	81000317 	ldw	r4,12(r16)
   2c918:	81400217 	ldw	r5,8(r16)
   2c91c:	18c00054 	ori	r3,r3,1
   2c920:	10c00115 	stw	r3,4(r2)
   2c924:	29000315 	stw	r4,12(r5)
   2c928:	21400215 	stw	r5,8(r4)
   2c92c:	9009883a 	mov	r4,r18
   2c930:	0031c500 	call	31c50 <__malloc_unlock>
   2c934:	80800204 	addi	r2,r16,8
   2c938:	003f2506 	br	2c5d0 <__alt_data_end+0xfffed1d0>
   2c93c:	12001704 	addi	r8,r2,92
   2c940:	11c016c4 	addi	r7,r2,91
   2c944:	4209883a 	add	r4,r8,r8
   2c948:	003e9606 	br	2c3a4 <__alt_data_end+0xfffecfa4>
   2c94c:	3804d1ba 	srli	r2,r7,6
   2c950:	11400e44 	addi	r5,r2,57
   2c954:	10c00e04 	addi	r3,r2,56
   2c958:	294b883a 	add	r5,r5,r5
   2c95c:	003fbc06 	br	2c850 <__alt_data_end+0xfffed450>
   2c960:	84ff5926 	beq	r16,r19,2c6c8 <__alt_data_end+0xfffed2c8>
   2c964:	008000f4 	movhi	r2,3
   2c968:	1093a404 	addi	r2,r2,20112
   2c96c:	14000217 	ldw	r16,8(r2)
   2c970:	00bfff04 	movi	r2,-4
   2c974:	80c00117 	ldw	r3,4(r16)
   2c978:	1886703a 	and	r3,r3,r2
   2c97c:	003f9106 	br	2c7c4 <__alt_data_end+0xfffed3c4>
   2c980:	60800217 	ldw	r2,8(r12)
   2c984:	213fffc4 	addi	r4,r4,-1
   2c988:	1300651e 	bne	r2,r12,2cb20 <_malloc_r+0x7f4>
   2c98c:	208000cc 	andi	r2,r4,3
   2c990:	633ffe04 	addi	r12,r12,-8
   2c994:	103ffa1e 	bne	r2,zero,2c980 <__alt_data_end+0xfffed580>
   2c998:	98800117 	ldw	r2,4(r19)
   2c99c:	0146303a 	nor	r3,zero,r5
   2c9a0:	1884703a 	and	r2,r3,r2
   2c9a4:	98800115 	stw	r2,4(r19)
   2c9a8:	294b883a 	add	r5,r5,r5
   2c9ac:	117f2836 	bltu	r2,r5,2c650 <__alt_data_end+0xfffed250>
   2c9b0:	283f2726 	beq	r5,zero,2c650 <__alt_data_end+0xfffed250>
   2c9b4:	2886703a 	and	r3,r5,r2
   2c9b8:	5809883a 	mov	r4,r11
   2c9bc:	183ec31e 	bne	r3,zero,2c4cc <__alt_data_end+0xfffed0cc>
   2c9c0:	294b883a 	add	r5,r5,r5
   2c9c4:	2886703a 	and	r3,r5,r2
   2c9c8:	21000104 	addi	r4,r4,4
   2c9cc:	183ffc26 	beq	r3,zero,2c9c0 <__alt_data_end+0xfffed5c0>
   2c9d0:	003ebe06 	br	2c4cc <__alt_data_end+0xfffed0cc>
   2c9d4:	00c05504 	movi	r3,340
   2c9d8:	18801236 	bltu	r3,r2,2ca24 <_malloc_r+0x6f8>
   2c9dc:	8804d3fa 	srli	r2,r17,15
   2c9e0:	12001e04 	addi	r8,r2,120
   2c9e4:	11c01dc4 	addi	r7,r2,119
   2c9e8:	4209883a 	add	r4,r8,r8
   2c9ec:	003e6d06 	br	2c3a4 <__alt_data_end+0xfffecfa4>
   2c9f0:	00c40004 	movi	r3,4096
   2c9f4:	003f4606 	br	2c710 <__alt_data_end+0xfffed310>
   2c9f8:	00800044 	movi	r2,1
   2c9fc:	a0800115 	stw	r2,4(r20)
   2ca00:	003f7406 	br	2c7d4 <__alt_data_end+0xfffed3d4>
   2ca04:	1805d0ba 	srai	r2,r3,2
   2ca08:	01c00044 	movi	r7,1
   2ca0c:	30c00117 	ldw	r3,4(r6)
   2ca10:	388e983a 	sll	r7,r7,r2
   2ca14:	2805883a 	mov	r2,r5
   2ca18:	38c6b03a 	or	r3,r7,r3
   2ca1c:	30c00115 	stw	r3,4(r6)
   2ca20:	003f9b06 	br	2c890 <__alt_data_end+0xfffed490>
   2ca24:	00c15504 	movi	r3,1364
   2ca28:	18801a36 	bltu	r3,r2,2ca94 <_malloc_r+0x768>
   2ca2c:	8804d4ba 	srli	r2,r17,18
   2ca30:	12001f44 	addi	r8,r2,125
   2ca34:	11c01f04 	addi	r7,r2,124
   2ca38:	4209883a 	add	r4,r8,r8
   2ca3c:	003e5906 	br	2c3a4 <__alt_data_end+0xfffecfa4>
   2ca40:	ad400404 	addi	r21,r21,16
   2ca44:	003f1706 	br	2c6a4 <__alt_data_end+0xfffed2a4>
   2ca48:	00c01504 	movi	r3,84
   2ca4c:	18802336 	bltu	r3,r2,2cadc <_malloc_r+0x7b0>
   2ca50:	3804d33a 	srli	r2,r7,12
   2ca54:	11401bc4 	addi	r5,r2,111
   2ca58:	10c01b84 	addi	r3,r2,110
   2ca5c:	294b883a 	add	r5,r5,r5
   2ca60:	003f7b06 	br	2c850 <__alt_data_end+0xfffed450>
   2ca64:	9c000217 	ldw	r16,8(r19)
   2ca68:	00bfff04 	movi	r2,-4
   2ca6c:	80c00117 	ldw	r3,4(r16)
   2ca70:	1886703a 	and	r3,r3,r2
   2ca74:	003f5306 	br	2c7c4 <__alt_data_end+0xfffed3c4>
   2ca78:	3083ffcc 	andi	r2,r6,4095
   2ca7c:	103f181e 	bne	r2,zero,2c6e0 <__alt_data_end+0xfffed2e0>
   2ca80:	99000217 	ldw	r4,8(r19)
   2ca84:	b545883a 	add	r2,r22,r21
   2ca88:	10800054 	ori	r2,r2,1
   2ca8c:	20800115 	stw	r2,4(r4)
   2ca90:	003f3e06 	br	2c78c <__alt_data_end+0xfffed38c>
   2ca94:	01003f84 	movi	r4,254
   2ca98:	02001fc4 	movi	r8,127
   2ca9c:	01c01f84 	movi	r7,126
   2caa0:	003e4006 	br	2c3a4 <__alt_data_end+0xfffecfa4>
   2caa4:	008000f4 	movhi	r2,3
   2caa8:	10992c04 	addi	r2,r2,25776
   2caac:	15000015 	stw	r20,0(r2)
   2cab0:	003f1106 	br	2c6f8 <__alt_data_end+0xfffed2f8>
   2cab4:	00800044 	movi	r2,1
   2cab8:	002b883a 	mov	r21,zero
   2cabc:	003f1f06 	br	2c73c <__alt_data_end+0xfffed33c>
   2cac0:	81400204 	addi	r5,r16,8
   2cac4:	9009883a 	mov	r4,r18
   2cac8:	002b7400 	call	2b740 <_free_r>
   2cacc:	00800134 	movhi	r2,4
   2cad0:	10a00604 	addi	r2,r2,-32744
   2cad4:	10c00017 	ldw	r3,0(r2)
   2cad8:	003f2c06 	br	2c78c <__alt_data_end+0xfffed38c>
   2cadc:	00c05504 	movi	r3,340
   2cae0:	18800536 	bltu	r3,r2,2caf8 <_malloc_r+0x7cc>
   2cae4:	3804d3fa 	srli	r2,r7,15
   2cae8:	11401e04 	addi	r5,r2,120
   2caec:	10c01dc4 	addi	r3,r2,119
   2caf0:	294b883a 	add	r5,r5,r5
   2caf4:	003f5606 	br	2c850 <__alt_data_end+0xfffed450>
   2caf8:	00c15504 	movi	r3,1364
   2cafc:	18800536 	bltu	r3,r2,2cb14 <_malloc_r+0x7e8>
   2cb00:	3804d4ba 	srli	r2,r7,18
   2cb04:	11401f44 	addi	r5,r2,125
   2cb08:	10c01f04 	addi	r3,r2,124
   2cb0c:	294b883a 	add	r5,r5,r5
   2cb10:	003f4f06 	br	2c850 <__alt_data_end+0xfffed450>
   2cb14:	01403f84 	movi	r5,254
   2cb18:	00c01f84 	movi	r3,126
   2cb1c:	003f4c06 	br	2c850 <__alt_data_end+0xfffed450>
   2cb20:	98800117 	ldw	r2,4(r19)
   2cb24:	003fa006 	br	2c9a8 <__alt_data_end+0xfffed5a8>
   2cb28:	8808d0fa 	srli	r4,r17,3
   2cb2c:	20800044 	addi	r2,r4,1
   2cb30:	1085883a 	add	r2,r2,r2
   2cb34:	003e9006 	br	2c578 <__alt_data_end+0xfffed178>

0002cb38 <memchr>:
   2cb38:	208000cc 	andi	r2,r4,3
   2cb3c:	280f883a 	mov	r7,r5
   2cb40:	10003426 	beq	r2,zero,2cc14 <memchr+0xdc>
   2cb44:	30bfffc4 	addi	r2,r6,-1
   2cb48:	30001a26 	beq	r6,zero,2cbb4 <memchr+0x7c>
   2cb4c:	20c00003 	ldbu	r3,0(r4)
   2cb50:	29803fcc 	andi	r6,r5,255
   2cb54:	30c0051e 	bne	r6,r3,2cb6c <memchr+0x34>
   2cb58:	00001806 	br	2cbbc <memchr+0x84>
   2cb5c:	10001526 	beq	r2,zero,2cbb4 <memchr+0x7c>
   2cb60:	20c00003 	ldbu	r3,0(r4)
   2cb64:	10bfffc4 	addi	r2,r2,-1
   2cb68:	30c01426 	beq	r6,r3,2cbbc <memchr+0x84>
   2cb6c:	21000044 	addi	r4,r4,1
   2cb70:	20c000cc 	andi	r3,r4,3
   2cb74:	183ff91e 	bne	r3,zero,2cb5c <__alt_data_end+0xfffed75c>
   2cb78:	020000c4 	movi	r8,3
   2cb7c:	40801136 	bltu	r8,r2,2cbc4 <memchr+0x8c>
   2cb80:	10000c26 	beq	r2,zero,2cbb4 <memchr+0x7c>
   2cb84:	20c00003 	ldbu	r3,0(r4)
   2cb88:	29403fcc 	andi	r5,r5,255
   2cb8c:	28c00b26 	beq	r5,r3,2cbbc <memchr+0x84>
   2cb90:	20c00044 	addi	r3,r4,1
   2cb94:	39803fcc 	andi	r6,r7,255
   2cb98:	2089883a 	add	r4,r4,r2
   2cb9c:	00000306 	br	2cbac <memchr+0x74>
   2cba0:	18c00044 	addi	r3,r3,1
   2cba4:	197fffc3 	ldbu	r5,-1(r3)
   2cba8:	31400526 	beq	r6,r5,2cbc0 <memchr+0x88>
   2cbac:	1805883a 	mov	r2,r3
   2cbb0:	20fffb1e 	bne	r4,r3,2cba0 <__alt_data_end+0xfffed7a0>
   2cbb4:	0005883a 	mov	r2,zero
   2cbb8:	f800283a 	ret
   2cbbc:	2005883a 	mov	r2,r4
   2cbc0:	f800283a 	ret
   2cbc4:	28c03fcc 	andi	r3,r5,255
   2cbc8:	1812923a 	slli	r9,r3,8
   2cbcc:	02ffbff4 	movhi	r11,65279
   2cbd0:	02a02074 	movhi	r10,32897
   2cbd4:	48d2b03a 	or	r9,r9,r3
   2cbd8:	4806943a 	slli	r3,r9,16
   2cbdc:	5affbfc4 	addi	r11,r11,-257
   2cbe0:	52a02004 	addi	r10,r10,-32640
   2cbe4:	48d2b03a 	or	r9,r9,r3
   2cbe8:	20c00017 	ldw	r3,0(r4)
   2cbec:	48c6f03a 	xor	r3,r9,r3
   2cbf0:	1acd883a 	add	r6,r3,r11
   2cbf4:	00c6303a 	nor	r3,zero,r3
   2cbf8:	30c6703a 	and	r3,r6,r3
   2cbfc:	1a86703a 	and	r3,r3,r10
   2cc00:	183fe01e 	bne	r3,zero,2cb84 <__alt_data_end+0xfffed784>
   2cc04:	10bfff04 	addi	r2,r2,-4
   2cc08:	21000104 	addi	r4,r4,4
   2cc0c:	40bff636 	bltu	r8,r2,2cbe8 <__alt_data_end+0xfffed7e8>
   2cc10:	003fdb06 	br	2cb80 <__alt_data_end+0xfffed780>
   2cc14:	3005883a 	mov	r2,r6
   2cc18:	003fd706 	br	2cb78 <__alt_data_end+0xfffed778>

0002cc1c <memcpy>:
   2cc1c:	defffd04 	addi	sp,sp,-12
   2cc20:	dfc00215 	stw	ra,8(sp)
   2cc24:	dc400115 	stw	r17,4(sp)
   2cc28:	dc000015 	stw	r16,0(sp)
   2cc2c:	00c003c4 	movi	r3,15
   2cc30:	2005883a 	mov	r2,r4
   2cc34:	1980452e 	bgeu	r3,r6,2cd4c <memcpy+0x130>
   2cc38:	2906b03a 	or	r3,r5,r4
   2cc3c:	18c000cc 	andi	r3,r3,3
   2cc40:	1800441e 	bne	r3,zero,2cd54 <memcpy+0x138>
   2cc44:	347ffc04 	addi	r17,r6,-16
   2cc48:	8822d13a 	srli	r17,r17,4
   2cc4c:	28c00104 	addi	r3,r5,4
   2cc50:	23400104 	addi	r13,r4,4
   2cc54:	8820913a 	slli	r16,r17,4
   2cc58:	2b000204 	addi	r12,r5,8
   2cc5c:	22c00204 	addi	r11,r4,8
   2cc60:	84000504 	addi	r16,r16,20
   2cc64:	2a800304 	addi	r10,r5,12
   2cc68:	22400304 	addi	r9,r4,12
   2cc6c:	2c21883a 	add	r16,r5,r16
   2cc70:	2811883a 	mov	r8,r5
   2cc74:	200f883a 	mov	r7,r4
   2cc78:	41000017 	ldw	r4,0(r8)
   2cc7c:	1fc00017 	ldw	ra,0(r3)
   2cc80:	63c00017 	ldw	r15,0(r12)
   2cc84:	39000015 	stw	r4,0(r7)
   2cc88:	53800017 	ldw	r14,0(r10)
   2cc8c:	6fc00015 	stw	ra,0(r13)
   2cc90:	5bc00015 	stw	r15,0(r11)
   2cc94:	4b800015 	stw	r14,0(r9)
   2cc98:	18c00404 	addi	r3,r3,16
   2cc9c:	39c00404 	addi	r7,r7,16
   2cca0:	42000404 	addi	r8,r8,16
   2cca4:	6b400404 	addi	r13,r13,16
   2cca8:	63000404 	addi	r12,r12,16
   2ccac:	5ac00404 	addi	r11,r11,16
   2ccb0:	52800404 	addi	r10,r10,16
   2ccb4:	4a400404 	addi	r9,r9,16
   2ccb8:	1c3fef1e 	bne	r3,r16,2cc78 <__alt_data_end+0xfffed878>
   2ccbc:	89c00044 	addi	r7,r17,1
   2ccc0:	380e913a 	slli	r7,r7,4
   2ccc4:	310003cc 	andi	r4,r6,15
   2ccc8:	02c000c4 	movi	r11,3
   2cccc:	11c7883a 	add	r3,r2,r7
   2ccd0:	29cb883a 	add	r5,r5,r7
   2ccd4:	5900212e 	bgeu	r11,r4,2cd5c <memcpy+0x140>
   2ccd8:	1813883a 	mov	r9,r3
   2ccdc:	2811883a 	mov	r8,r5
   2cce0:	200f883a 	mov	r7,r4
   2cce4:	42800017 	ldw	r10,0(r8)
   2cce8:	4a400104 	addi	r9,r9,4
   2ccec:	39ffff04 	addi	r7,r7,-4
   2ccf0:	4abfff15 	stw	r10,-4(r9)
   2ccf4:	42000104 	addi	r8,r8,4
   2ccf8:	59fffa36 	bltu	r11,r7,2cce4 <__alt_data_end+0xfffed8e4>
   2ccfc:	213fff04 	addi	r4,r4,-4
   2cd00:	2008d0ba 	srli	r4,r4,2
   2cd04:	318000cc 	andi	r6,r6,3
   2cd08:	21000044 	addi	r4,r4,1
   2cd0c:	2109883a 	add	r4,r4,r4
   2cd10:	2109883a 	add	r4,r4,r4
   2cd14:	1907883a 	add	r3,r3,r4
   2cd18:	290b883a 	add	r5,r5,r4
   2cd1c:	30000626 	beq	r6,zero,2cd38 <memcpy+0x11c>
   2cd20:	198d883a 	add	r6,r3,r6
   2cd24:	29c00003 	ldbu	r7,0(r5)
   2cd28:	18c00044 	addi	r3,r3,1
   2cd2c:	29400044 	addi	r5,r5,1
   2cd30:	19ffffc5 	stb	r7,-1(r3)
   2cd34:	19bffb1e 	bne	r3,r6,2cd24 <__alt_data_end+0xfffed924>
   2cd38:	dfc00217 	ldw	ra,8(sp)
   2cd3c:	dc400117 	ldw	r17,4(sp)
   2cd40:	dc000017 	ldw	r16,0(sp)
   2cd44:	dec00304 	addi	sp,sp,12
   2cd48:	f800283a 	ret
   2cd4c:	2007883a 	mov	r3,r4
   2cd50:	003ff206 	br	2cd1c <__alt_data_end+0xfffed91c>
   2cd54:	2007883a 	mov	r3,r4
   2cd58:	003ff106 	br	2cd20 <__alt_data_end+0xfffed920>
   2cd5c:	200d883a 	mov	r6,r4
   2cd60:	003fee06 	br	2cd1c <__alt_data_end+0xfffed91c>

0002cd64 <memmove>:
   2cd64:	2005883a 	mov	r2,r4
   2cd68:	29000b2e 	bgeu	r5,r4,2cd98 <memmove+0x34>
   2cd6c:	298f883a 	add	r7,r5,r6
   2cd70:	21c0092e 	bgeu	r4,r7,2cd98 <memmove+0x34>
   2cd74:	2187883a 	add	r3,r4,r6
   2cd78:	198bc83a 	sub	r5,r3,r6
   2cd7c:	30004826 	beq	r6,zero,2cea0 <memmove+0x13c>
   2cd80:	39ffffc4 	addi	r7,r7,-1
   2cd84:	39000003 	ldbu	r4,0(r7)
   2cd88:	18ffffc4 	addi	r3,r3,-1
   2cd8c:	19000005 	stb	r4,0(r3)
   2cd90:	28fffb1e 	bne	r5,r3,2cd80 <__alt_data_end+0xfffed980>
   2cd94:	f800283a 	ret
   2cd98:	00c003c4 	movi	r3,15
   2cd9c:	1980412e 	bgeu	r3,r6,2cea4 <memmove+0x140>
   2cda0:	2886b03a 	or	r3,r5,r2
   2cda4:	18c000cc 	andi	r3,r3,3
   2cda8:	1800401e 	bne	r3,zero,2ceac <memmove+0x148>
   2cdac:	33fffc04 	addi	r15,r6,-16
   2cdb0:	781ed13a 	srli	r15,r15,4
   2cdb4:	28c00104 	addi	r3,r5,4
   2cdb8:	13400104 	addi	r13,r2,4
   2cdbc:	781c913a 	slli	r14,r15,4
   2cdc0:	2b000204 	addi	r12,r5,8
   2cdc4:	12c00204 	addi	r11,r2,8
   2cdc8:	73800504 	addi	r14,r14,20
   2cdcc:	2a800304 	addi	r10,r5,12
   2cdd0:	12400304 	addi	r9,r2,12
   2cdd4:	2b9d883a 	add	r14,r5,r14
   2cdd8:	2811883a 	mov	r8,r5
   2cddc:	100f883a 	mov	r7,r2
   2cde0:	41000017 	ldw	r4,0(r8)
   2cde4:	39c00404 	addi	r7,r7,16
   2cde8:	18c00404 	addi	r3,r3,16
   2cdec:	393ffc15 	stw	r4,-16(r7)
   2cdf0:	193ffc17 	ldw	r4,-16(r3)
   2cdf4:	6b400404 	addi	r13,r13,16
   2cdf8:	5ac00404 	addi	r11,r11,16
   2cdfc:	693ffc15 	stw	r4,-16(r13)
   2ce00:	61000017 	ldw	r4,0(r12)
   2ce04:	4a400404 	addi	r9,r9,16
   2ce08:	42000404 	addi	r8,r8,16
   2ce0c:	593ffc15 	stw	r4,-16(r11)
   2ce10:	51000017 	ldw	r4,0(r10)
   2ce14:	63000404 	addi	r12,r12,16
   2ce18:	52800404 	addi	r10,r10,16
   2ce1c:	493ffc15 	stw	r4,-16(r9)
   2ce20:	1bbfef1e 	bne	r3,r14,2cde0 <__alt_data_end+0xfffed9e0>
   2ce24:	79000044 	addi	r4,r15,1
   2ce28:	2008913a 	slli	r4,r4,4
   2ce2c:	328003cc 	andi	r10,r6,15
   2ce30:	02c000c4 	movi	r11,3
   2ce34:	1107883a 	add	r3,r2,r4
   2ce38:	290b883a 	add	r5,r5,r4
   2ce3c:	5a801e2e 	bgeu	r11,r10,2ceb8 <memmove+0x154>
   2ce40:	1813883a 	mov	r9,r3
   2ce44:	2811883a 	mov	r8,r5
   2ce48:	500f883a 	mov	r7,r10
   2ce4c:	41000017 	ldw	r4,0(r8)
   2ce50:	4a400104 	addi	r9,r9,4
   2ce54:	39ffff04 	addi	r7,r7,-4
   2ce58:	493fff15 	stw	r4,-4(r9)
   2ce5c:	42000104 	addi	r8,r8,4
   2ce60:	59fffa36 	bltu	r11,r7,2ce4c <__alt_data_end+0xfffeda4c>
   2ce64:	513fff04 	addi	r4,r10,-4
   2ce68:	2008d0ba 	srli	r4,r4,2
   2ce6c:	318000cc 	andi	r6,r6,3
   2ce70:	21000044 	addi	r4,r4,1
   2ce74:	2109883a 	add	r4,r4,r4
   2ce78:	2109883a 	add	r4,r4,r4
   2ce7c:	1907883a 	add	r3,r3,r4
   2ce80:	290b883a 	add	r5,r5,r4
   2ce84:	30000b26 	beq	r6,zero,2ceb4 <memmove+0x150>
   2ce88:	198d883a 	add	r6,r3,r6
   2ce8c:	29c00003 	ldbu	r7,0(r5)
   2ce90:	18c00044 	addi	r3,r3,1
   2ce94:	29400044 	addi	r5,r5,1
   2ce98:	19ffffc5 	stb	r7,-1(r3)
   2ce9c:	19bffb1e 	bne	r3,r6,2ce8c <__alt_data_end+0xfffeda8c>
   2cea0:	f800283a 	ret
   2cea4:	1007883a 	mov	r3,r2
   2cea8:	003ff606 	br	2ce84 <__alt_data_end+0xfffeda84>
   2ceac:	1007883a 	mov	r3,r2
   2ceb0:	003ff506 	br	2ce88 <__alt_data_end+0xfffeda88>
   2ceb4:	f800283a 	ret
   2ceb8:	500d883a 	mov	r6,r10
   2cebc:	003ff106 	br	2ce84 <__alt_data_end+0xfffeda84>

0002cec0 <memset>:
   2cec0:	20c000cc 	andi	r3,r4,3
   2cec4:	2005883a 	mov	r2,r4
   2cec8:	18004426 	beq	r3,zero,2cfdc <memset+0x11c>
   2cecc:	31ffffc4 	addi	r7,r6,-1
   2ced0:	30004026 	beq	r6,zero,2cfd4 <memset+0x114>
   2ced4:	2813883a 	mov	r9,r5
   2ced8:	200d883a 	mov	r6,r4
   2cedc:	2007883a 	mov	r3,r4
   2cee0:	00000406 	br	2cef4 <memset+0x34>
   2cee4:	3a3fffc4 	addi	r8,r7,-1
   2cee8:	31800044 	addi	r6,r6,1
   2ceec:	38003926 	beq	r7,zero,2cfd4 <memset+0x114>
   2cef0:	400f883a 	mov	r7,r8
   2cef4:	18c00044 	addi	r3,r3,1
   2cef8:	32400005 	stb	r9,0(r6)
   2cefc:	1a0000cc 	andi	r8,r3,3
   2cf00:	403ff81e 	bne	r8,zero,2cee4 <__alt_data_end+0xfffedae4>
   2cf04:	010000c4 	movi	r4,3
   2cf08:	21c02d2e 	bgeu	r4,r7,2cfc0 <memset+0x100>
   2cf0c:	29003fcc 	andi	r4,r5,255
   2cf10:	200c923a 	slli	r6,r4,8
   2cf14:	3108b03a 	or	r4,r6,r4
   2cf18:	200c943a 	slli	r6,r4,16
   2cf1c:	218cb03a 	or	r6,r4,r6
   2cf20:	010003c4 	movi	r4,15
   2cf24:	21c0182e 	bgeu	r4,r7,2cf88 <memset+0xc8>
   2cf28:	3b3ffc04 	addi	r12,r7,-16
   2cf2c:	6018d13a 	srli	r12,r12,4
   2cf30:	1a000104 	addi	r8,r3,4
   2cf34:	1ac00204 	addi	r11,r3,8
   2cf38:	6008913a 	slli	r4,r12,4
   2cf3c:	1a800304 	addi	r10,r3,12
   2cf40:	1813883a 	mov	r9,r3
   2cf44:	21000504 	addi	r4,r4,20
   2cf48:	1909883a 	add	r4,r3,r4
   2cf4c:	49800015 	stw	r6,0(r9)
   2cf50:	41800015 	stw	r6,0(r8)
   2cf54:	59800015 	stw	r6,0(r11)
   2cf58:	51800015 	stw	r6,0(r10)
   2cf5c:	42000404 	addi	r8,r8,16
   2cf60:	4a400404 	addi	r9,r9,16
   2cf64:	5ac00404 	addi	r11,r11,16
   2cf68:	52800404 	addi	r10,r10,16
   2cf6c:	413ff71e 	bne	r8,r4,2cf4c <__alt_data_end+0xfffedb4c>
   2cf70:	63000044 	addi	r12,r12,1
   2cf74:	6018913a 	slli	r12,r12,4
   2cf78:	39c003cc 	andi	r7,r7,15
   2cf7c:	010000c4 	movi	r4,3
   2cf80:	1b07883a 	add	r3,r3,r12
   2cf84:	21c00e2e 	bgeu	r4,r7,2cfc0 <memset+0x100>
   2cf88:	1813883a 	mov	r9,r3
   2cf8c:	3811883a 	mov	r8,r7
   2cf90:	010000c4 	movi	r4,3
   2cf94:	49800015 	stw	r6,0(r9)
   2cf98:	423fff04 	addi	r8,r8,-4
   2cf9c:	4a400104 	addi	r9,r9,4
   2cfa0:	223ffc36 	bltu	r4,r8,2cf94 <__alt_data_end+0xfffedb94>
   2cfa4:	393fff04 	addi	r4,r7,-4
   2cfa8:	2008d0ba 	srli	r4,r4,2
   2cfac:	39c000cc 	andi	r7,r7,3
   2cfb0:	21000044 	addi	r4,r4,1
   2cfb4:	2109883a 	add	r4,r4,r4
   2cfb8:	2109883a 	add	r4,r4,r4
   2cfbc:	1907883a 	add	r3,r3,r4
   2cfc0:	38000526 	beq	r7,zero,2cfd8 <memset+0x118>
   2cfc4:	19cf883a 	add	r7,r3,r7
   2cfc8:	19400005 	stb	r5,0(r3)
   2cfcc:	18c00044 	addi	r3,r3,1
   2cfd0:	38fffd1e 	bne	r7,r3,2cfc8 <__alt_data_end+0xfffedbc8>
   2cfd4:	f800283a 	ret
   2cfd8:	f800283a 	ret
   2cfdc:	2007883a 	mov	r3,r4
   2cfe0:	300f883a 	mov	r7,r6
   2cfe4:	003fc706 	br	2cf04 <__alt_data_end+0xfffedb04>

0002cfe8 <_Balloc>:
   2cfe8:	20801317 	ldw	r2,76(r4)
   2cfec:	defffc04 	addi	sp,sp,-16
   2cff0:	dc400115 	stw	r17,4(sp)
   2cff4:	dc000015 	stw	r16,0(sp)
   2cff8:	dfc00315 	stw	ra,12(sp)
   2cffc:	dc800215 	stw	r18,8(sp)
   2d000:	2023883a 	mov	r17,r4
   2d004:	2821883a 	mov	r16,r5
   2d008:	10000f26 	beq	r2,zero,2d048 <_Balloc+0x60>
   2d00c:	8407883a 	add	r3,r16,r16
   2d010:	18c7883a 	add	r3,r3,r3
   2d014:	10c7883a 	add	r3,r2,r3
   2d018:	18800017 	ldw	r2,0(r3)
   2d01c:	10001126 	beq	r2,zero,2d064 <_Balloc+0x7c>
   2d020:	11000017 	ldw	r4,0(r2)
   2d024:	19000015 	stw	r4,0(r3)
   2d028:	10000415 	stw	zero,16(r2)
   2d02c:	10000315 	stw	zero,12(r2)
   2d030:	dfc00317 	ldw	ra,12(sp)
   2d034:	dc800217 	ldw	r18,8(sp)
   2d038:	dc400117 	ldw	r17,4(sp)
   2d03c:	dc000017 	ldw	r16,0(sp)
   2d040:	dec00404 	addi	sp,sp,16
   2d044:	f800283a 	ret
   2d048:	01800844 	movi	r6,33
   2d04c:	01400104 	movi	r5,4
   2d050:	002ff240 	call	2ff24 <_calloc_r>
   2d054:	88801315 	stw	r2,76(r17)
   2d058:	103fec1e 	bne	r2,zero,2d00c <__alt_data_end+0xfffedc0c>
   2d05c:	0005883a 	mov	r2,zero
   2d060:	003ff306 	br	2d030 <__alt_data_end+0xfffedc30>
   2d064:	01400044 	movi	r5,1
   2d068:	2c24983a 	sll	r18,r5,r16
   2d06c:	8809883a 	mov	r4,r17
   2d070:	91800144 	addi	r6,r18,5
   2d074:	318d883a 	add	r6,r6,r6
   2d078:	318d883a 	add	r6,r6,r6
   2d07c:	002ff240 	call	2ff24 <_calloc_r>
   2d080:	103ff626 	beq	r2,zero,2d05c <__alt_data_end+0xfffedc5c>
   2d084:	14000115 	stw	r16,4(r2)
   2d088:	14800215 	stw	r18,8(r2)
   2d08c:	003fe606 	br	2d028 <__alt_data_end+0xfffedc28>

0002d090 <_Bfree>:
   2d090:	28000826 	beq	r5,zero,2d0b4 <_Bfree+0x24>
   2d094:	28c00117 	ldw	r3,4(r5)
   2d098:	20801317 	ldw	r2,76(r4)
   2d09c:	18c7883a 	add	r3,r3,r3
   2d0a0:	18c7883a 	add	r3,r3,r3
   2d0a4:	10c5883a 	add	r2,r2,r3
   2d0a8:	10c00017 	ldw	r3,0(r2)
   2d0ac:	28c00015 	stw	r3,0(r5)
   2d0b0:	11400015 	stw	r5,0(r2)
   2d0b4:	f800283a 	ret

0002d0b8 <__multadd>:
   2d0b8:	defffa04 	addi	sp,sp,-24
   2d0bc:	dc800315 	stw	r18,12(sp)
   2d0c0:	dc400215 	stw	r17,8(sp)
   2d0c4:	dc000115 	stw	r16,4(sp)
   2d0c8:	2823883a 	mov	r17,r5
   2d0cc:	2c000417 	ldw	r16,16(r5)
   2d0d0:	dfc00515 	stw	ra,20(sp)
   2d0d4:	dcc00415 	stw	r19,16(sp)
   2d0d8:	2025883a 	mov	r18,r4
   2d0dc:	29400504 	addi	r5,r5,20
   2d0e0:	0011883a 	mov	r8,zero
   2d0e4:	28c00017 	ldw	r3,0(r5)
   2d0e8:	29400104 	addi	r5,r5,4
   2d0ec:	42000044 	addi	r8,r8,1
   2d0f0:	18bfffcc 	andi	r2,r3,65535
   2d0f4:	1185383a 	mul	r2,r2,r6
   2d0f8:	1806d43a 	srli	r3,r3,16
   2d0fc:	11cf883a 	add	r7,r2,r7
   2d100:	3808d43a 	srli	r4,r7,16
   2d104:	1987383a 	mul	r3,r3,r6
   2d108:	38bfffcc 	andi	r2,r7,65535
   2d10c:	1907883a 	add	r3,r3,r4
   2d110:	1808943a 	slli	r4,r3,16
   2d114:	180ed43a 	srli	r7,r3,16
   2d118:	2085883a 	add	r2,r4,r2
   2d11c:	28bfff15 	stw	r2,-4(r5)
   2d120:	443ff016 	blt	r8,r16,2d0e4 <__alt_data_end+0xfffedce4>
   2d124:	38000926 	beq	r7,zero,2d14c <__multadd+0x94>
   2d128:	88800217 	ldw	r2,8(r17)
   2d12c:	80800f0e 	bge	r16,r2,2d16c <__multadd+0xb4>
   2d130:	80800144 	addi	r2,r16,5
   2d134:	1085883a 	add	r2,r2,r2
   2d138:	1085883a 	add	r2,r2,r2
   2d13c:	8885883a 	add	r2,r17,r2
   2d140:	11c00015 	stw	r7,0(r2)
   2d144:	84000044 	addi	r16,r16,1
   2d148:	8c000415 	stw	r16,16(r17)
   2d14c:	8805883a 	mov	r2,r17
   2d150:	dfc00517 	ldw	ra,20(sp)
   2d154:	dcc00417 	ldw	r19,16(sp)
   2d158:	dc800317 	ldw	r18,12(sp)
   2d15c:	dc400217 	ldw	r17,8(sp)
   2d160:	dc000117 	ldw	r16,4(sp)
   2d164:	dec00604 	addi	sp,sp,24
   2d168:	f800283a 	ret
   2d16c:	89400117 	ldw	r5,4(r17)
   2d170:	9009883a 	mov	r4,r18
   2d174:	d9c00015 	stw	r7,0(sp)
   2d178:	29400044 	addi	r5,r5,1
   2d17c:	002cfe80 	call	2cfe8 <_Balloc>
   2d180:	89800417 	ldw	r6,16(r17)
   2d184:	89400304 	addi	r5,r17,12
   2d188:	11000304 	addi	r4,r2,12
   2d18c:	31800084 	addi	r6,r6,2
   2d190:	318d883a 	add	r6,r6,r6
   2d194:	318d883a 	add	r6,r6,r6
   2d198:	1027883a 	mov	r19,r2
   2d19c:	002cc1c0 	call	2cc1c <memcpy>
   2d1a0:	d9c00017 	ldw	r7,0(sp)
   2d1a4:	88000a26 	beq	r17,zero,2d1d0 <__multadd+0x118>
   2d1a8:	88c00117 	ldw	r3,4(r17)
   2d1ac:	90801317 	ldw	r2,76(r18)
   2d1b0:	18c7883a 	add	r3,r3,r3
   2d1b4:	18c7883a 	add	r3,r3,r3
   2d1b8:	10c5883a 	add	r2,r2,r3
   2d1bc:	10c00017 	ldw	r3,0(r2)
   2d1c0:	88c00015 	stw	r3,0(r17)
   2d1c4:	14400015 	stw	r17,0(r2)
   2d1c8:	9823883a 	mov	r17,r19
   2d1cc:	003fd806 	br	2d130 <__alt_data_end+0xfffedd30>
   2d1d0:	9823883a 	mov	r17,r19
   2d1d4:	003fd606 	br	2d130 <__alt_data_end+0xfffedd30>

0002d1d8 <__s2b>:
   2d1d8:	defff904 	addi	sp,sp,-28
   2d1dc:	dc400115 	stw	r17,4(sp)
   2d1e0:	dc000015 	stw	r16,0(sp)
   2d1e4:	2023883a 	mov	r17,r4
   2d1e8:	2821883a 	mov	r16,r5
   2d1ec:	39000204 	addi	r4,r7,8
   2d1f0:	01400244 	movi	r5,9
   2d1f4:	dcc00315 	stw	r19,12(sp)
   2d1f8:	dc800215 	stw	r18,8(sp)
   2d1fc:	dfc00615 	stw	ra,24(sp)
   2d200:	dd400515 	stw	r21,20(sp)
   2d204:	dd000415 	stw	r20,16(sp)
   2d208:	3825883a 	mov	r18,r7
   2d20c:	3027883a 	mov	r19,r6
   2d210:	00236dc0 	call	236dc <__divsi3>
   2d214:	00c00044 	movi	r3,1
   2d218:	000b883a 	mov	r5,zero
   2d21c:	1880030e 	bge	r3,r2,2d22c <__s2b+0x54>
   2d220:	18c7883a 	add	r3,r3,r3
   2d224:	29400044 	addi	r5,r5,1
   2d228:	18bffd16 	blt	r3,r2,2d220 <__alt_data_end+0xfffede20>
   2d22c:	8809883a 	mov	r4,r17
   2d230:	002cfe80 	call	2cfe8 <_Balloc>
   2d234:	d8c00717 	ldw	r3,28(sp)
   2d238:	10c00515 	stw	r3,20(r2)
   2d23c:	00c00044 	movi	r3,1
   2d240:	10c00415 	stw	r3,16(r2)
   2d244:	00c00244 	movi	r3,9
   2d248:	1cc0210e 	bge	r3,r19,2d2d0 <__s2b+0xf8>
   2d24c:	80eb883a 	add	r21,r16,r3
   2d250:	a829883a 	mov	r20,r21
   2d254:	84e1883a 	add	r16,r16,r19
   2d258:	a1c00007 	ldb	r7,0(r20)
   2d25c:	01800284 	movi	r6,10
   2d260:	a5000044 	addi	r20,r20,1
   2d264:	100b883a 	mov	r5,r2
   2d268:	39fff404 	addi	r7,r7,-48
   2d26c:	8809883a 	mov	r4,r17
   2d270:	002d0b80 	call	2d0b8 <__multadd>
   2d274:	a43ff81e 	bne	r20,r16,2d258 <__alt_data_end+0xfffede58>
   2d278:	ace1883a 	add	r16,r21,r19
   2d27c:	843ffe04 	addi	r16,r16,-8
   2d280:	9c800a0e 	bge	r19,r18,2d2ac <__s2b+0xd4>
   2d284:	94e5c83a 	sub	r18,r18,r19
   2d288:	84a5883a 	add	r18,r16,r18
   2d28c:	81c00007 	ldb	r7,0(r16)
   2d290:	01800284 	movi	r6,10
   2d294:	84000044 	addi	r16,r16,1
   2d298:	100b883a 	mov	r5,r2
   2d29c:	39fff404 	addi	r7,r7,-48
   2d2a0:	8809883a 	mov	r4,r17
   2d2a4:	002d0b80 	call	2d0b8 <__multadd>
   2d2a8:	84bff81e 	bne	r16,r18,2d28c <__alt_data_end+0xfffede8c>
   2d2ac:	dfc00617 	ldw	ra,24(sp)
   2d2b0:	dd400517 	ldw	r21,20(sp)
   2d2b4:	dd000417 	ldw	r20,16(sp)
   2d2b8:	dcc00317 	ldw	r19,12(sp)
   2d2bc:	dc800217 	ldw	r18,8(sp)
   2d2c0:	dc400117 	ldw	r17,4(sp)
   2d2c4:	dc000017 	ldw	r16,0(sp)
   2d2c8:	dec00704 	addi	sp,sp,28
   2d2cc:	f800283a 	ret
   2d2d0:	84000284 	addi	r16,r16,10
   2d2d4:	1827883a 	mov	r19,r3
   2d2d8:	003fe906 	br	2d280 <__alt_data_end+0xfffede80>

0002d2dc <__hi0bits>:
   2d2dc:	20bfffec 	andhi	r2,r4,65535
   2d2e0:	1000141e 	bne	r2,zero,2d334 <__hi0bits+0x58>
   2d2e4:	2008943a 	slli	r4,r4,16
   2d2e8:	00800404 	movi	r2,16
   2d2ec:	20ffc02c 	andhi	r3,r4,65280
   2d2f0:	1800021e 	bne	r3,zero,2d2fc <__hi0bits+0x20>
   2d2f4:	2008923a 	slli	r4,r4,8
   2d2f8:	10800204 	addi	r2,r2,8
   2d2fc:	20fc002c 	andhi	r3,r4,61440
   2d300:	1800021e 	bne	r3,zero,2d30c <__hi0bits+0x30>
   2d304:	2008913a 	slli	r4,r4,4
   2d308:	10800104 	addi	r2,r2,4
   2d30c:	20f0002c 	andhi	r3,r4,49152
   2d310:	1800031e 	bne	r3,zero,2d320 <__hi0bits+0x44>
   2d314:	2109883a 	add	r4,r4,r4
   2d318:	10800084 	addi	r2,r2,2
   2d31c:	2109883a 	add	r4,r4,r4
   2d320:	20000316 	blt	r4,zero,2d330 <__hi0bits+0x54>
   2d324:	2110002c 	andhi	r4,r4,16384
   2d328:	2000041e 	bne	r4,zero,2d33c <__hi0bits+0x60>
   2d32c:	00800804 	movi	r2,32
   2d330:	f800283a 	ret
   2d334:	0005883a 	mov	r2,zero
   2d338:	003fec06 	br	2d2ec <__alt_data_end+0xfffedeec>
   2d33c:	10800044 	addi	r2,r2,1
   2d340:	f800283a 	ret

0002d344 <__lo0bits>:
   2d344:	20c00017 	ldw	r3,0(r4)
   2d348:	188001cc 	andi	r2,r3,7
   2d34c:	10000826 	beq	r2,zero,2d370 <__lo0bits+0x2c>
   2d350:	1880004c 	andi	r2,r3,1
   2d354:	1000211e 	bne	r2,zero,2d3dc <__lo0bits+0x98>
   2d358:	1880008c 	andi	r2,r3,2
   2d35c:	1000211e 	bne	r2,zero,2d3e4 <__lo0bits+0xa0>
   2d360:	1806d0ba 	srli	r3,r3,2
   2d364:	00800084 	movi	r2,2
   2d368:	20c00015 	stw	r3,0(r4)
   2d36c:	f800283a 	ret
   2d370:	18bfffcc 	andi	r2,r3,65535
   2d374:	10001326 	beq	r2,zero,2d3c4 <__lo0bits+0x80>
   2d378:	0005883a 	mov	r2,zero
   2d37c:	19403fcc 	andi	r5,r3,255
   2d380:	2800021e 	bne	r5,zero,2d38c <__lo0bits+0x48>
   2d384:	1806d23a 	srli	r3,r3,8
   2d388:	10800204 	addi	r2,r2,8
   2d38c:	194003cc 	andi	r5,r3,15
   2d390:	2800021e 	bne	r5,zero,2d39c <__lo0bits+0x58>
   2d394:	1806d13a 	srli	r3,r3,4
   2d398:	10800104 	addi	r2,r2,4
   2d39c:	194000cc 	andi	r5,r3,3
   2d3a0:	2800021e 	bne	r5,zero,2d3ac <__lo0bits+0x68>
   2d3a4:	1806d0ba 	srli	r3,r3,2
   2d3a8:	10800084 	addi	r2,r2,2
   2d3ac:	1940004c 	andi	r5,r3,1
   2d3b0:	2800081e 	bne	r5,zero,2d3d4 <__lo0bits+0x90>
   2d3b4:	1806d07a 	srli	r3,r3,1
   2d3b8:	1800051e 	bne	r3,zero,2d3d0 <__lo0bits+0x8c>
   2d3bc:	00800804 	movi	r2,32
   2d3c0:	f800283a 	ret
   2d3c4:	1806d43a 	srli	r3,r3,16
   2d3c8:	00800404 	movi	r2,16
   2d3cc:	003feb06 	br	2d37c <__alt_data_end+0xfffedf7c>
   2d3d0:	10800044 	addi	r2,r2,1
   2d3d4:	20c00015 	stw	r3,0(r4)
   2d3d8:	f800283a 	ret
   2d3dc:	0005883a 	mov	r2,zero
   2d3e0:	f800283a 	ret
   2d3e4:	1806d07a 	srli	r3,r3,1
   2d3e8:	00800044 	movi	r2,1
   2d3ec:	20c00015 	stw	r3,0(r4)
   2d3f0:	f800283a 	ret

0002d3f4 <__i2b>:
   2d3f4:	defffd04 	addi	sp,sp,-12
   2d3f8:	dc000015 	stw	r16,0(sp)
   2d3fc:	04000044 	movi	r16,1
   2d400:	dc400115 	stw	r17,4(sp)
   2d404:	2823883a 	mov	r17,r5
   2d408:	800b883a 	mov	r5,r16
   2d40c:	dfc00215 	stw	ra,8(sp)
   2d410:	002cfe80 	call	2cfe8 <_Balloc>
   2d414:	14400515 	stw	r17,20(r2)
   2d418:	14000415 	stw	r16,16(r2)
   2d41c:	dfc00217 	ldw	ra,8(sp)
   2d420:	dc400117 	ldw	r17,4(sp)
   2d424:	dc000017 	ldw	r16,0(sp)
   2d428:	dec00304 	addi	sp,sp,12
   2d42c:	f800283a 	ret

0002d430 <__multiply>:
   2d430:	defffa04 	addi	sp,sp,-24
   2d434:	dcc00315 	stw	r19,12(sp)
   2d438:	dc800215 	stw	r18,8(sp)
   2d43c:	34c00417 	ldw	r19,16(r6)
   2d440:	2c800417 	ldw	r18,16(r5)
   2d444:	dd000415 	stw	r20,16(sp)
   2d448:	dc400115 	stw	r17,4(sp)
   2d44c:	dfc00515 	stw	ra,20(sp)
   2d450:	dc000015 	stw	r16,0(sp)
   2d454:	2829883a 	mov	r20,r5
   2d458:	3023883a 	mov	r17,r6
   2d45c:	94c0050e 	bge	r18,r19,2d474 <__multiply+0x44>
   2d460:	9007883a 	mov	r3,r18
   2d464:	3029883a 	mov	r20,r6
   2d468:	9825883a 	mov	r18,r19
   2d46c:	2823883a 	mov	r17,r5
   2d470:	1827883a 	mov	r19,r3
   2d474:	a0800217 	ldw	r2,8(r20)
   2d478:	94e1883a 	add	r16,r18,r19
   2d47c:	a1400117 	ldw	r5,4(r20)
   2d480:	1400010e 	bge	r2,r16,2d488 <__multiply+0x58>
   2d484:	29400044 	addi	r5,r5,1
   2d488:	002cfe80 	call	2cfe8 <_Balloc>
   2d48c:	8415883a 	add	r10,r16,r16
   2d490:	12c00504 	addi	r11,r2,20
   2d494:	5295883a 	add	r10,r10,r10
   2d498:	5a95883a 	add	r10,r11,r10
   2d49c:	5807883a 	mov	r3,r11
   2d4a0:	5a80032e 	bgeu	r11,r10,2d4b0 <__multiply+0x80>
   2d4a4:	18000015 	stw	zero,0(r3)
   2d4a8:	18c00104 	addi	r3,r3,4
   2d4ac:	1abffd36 	bltu	r3,r10,2d4a4 <__alt_data_end+0xfffee0a4>
   2d4b0:	9ce7883a 	add	r19,r19,r19
   2d4b4:	94a5883a 	add	r18,r18,r18
   2d4b8:	89800504 	addi	r6,r17,20
   2d4bc:	9ce7883a 	add	r19,r19,r19
   2d4c0:	a3400504 	addi	r13,r20,20
   2d4c4:	94a5883a 	add	r18,r18,r18
   2d4c8:	34d9883a 	add	r12,r6,r19
   2d4cc:	6c93883a 	add	r9,r13,r18
   2d4d0:	3300422e 	bgeu	r6,r12,2d5dc <__multiply+0x1ac>
   2d4d4:	37c00017 	ldw	ra,0(r6)
   2d4d8:	fbffffcc 	andi	r15,ra,65535
   2d4dc:	78001b26 	beq	r15,zero,2d54c <__multiply+0x11c>
   2d4e0:	5811883a 	mov	r8,r11
   2d4e4:	681d883a 	mov	r14,r13
   2d4e8:	000f883a 	mov	r7,zero
   2d4ec:	71000017 	ldw	r4,0(r14)
   2d4f0:	40c00017 	ldw	r3,0(r8)
   2d4f4:	73800104 	addi	r14,r14,4
   2d4f8:	217fffcc 	andi	r5,r4,65535
   2d4fc:	2bcb383a 	mul	r5,r5,r15
   2d500:	2008d43a 	srli	r4,r4,16
   2d504:	1c7fffcc 	andi	r17,r3,65535
   2d508:	2c4b883a 	add	r5,r5,r17
   2d50c:	29cb883a 	add	r5,r5,r7
   2d510:	23c9383a 	mul	r4,r4,r15
   2d514:	1806d43a 	srli	r3,r3,16
   2d518:	280ed43a 	srli	r7,r5,16
   2d51c:	297fffcc 	andi	r5,r5,65535
   2d520:	20c7883a 	add	r3,r4,r3
   2d524:	19c7883a 	add	r3,r3,r7
   2d528:	1808943a 	slli	r4,r3,16
   2d52c:	4023883a 	mov	r17,r8
   2d530:	180ed43a 	srli	r7,r3,16
   2d534:	214ab03a 	or	r5,r4,r5
   2d538:	41400015 	stw	r5,0(r8)
   2d53c:	42000104 	addi	r8,r8,4
   2d540:	727fea36 	bltu	r14,r9,2d4ec <__alt_data_end+0xfffee0ec>
   2d544:	89c00115 	stw	r7,4(r17)
   2d548:	37c00017 	ldw	ra,0(r6)
   2d54c:	f83ed43a 	srli	ra,ra,16
   2d550:	f8001f26 	beq	ra,zero,2d5d0 <__multiply+0x1a0>
   2d554:	58c00017 	ldw	r3,0(r11)
   2d558:	681d883a 	mov	r14,r13
   2d55c:	581f883a 	mov	r15,r11
   2d560:	1811883a 	mov	r8,r3
   2d564:	5825883a 	mov	r18,r11
   2d568:	000f883a 	mov	r7,zero
   2d56c:	00000106 	br	2d574 <__multiply+0x144>
   2d570:	8825883a 	mov	r18,r17
   2d574:	7140000b 	ldhu	r5,0(r14)
   2d578:	4010d43a 	srli	r8,r8,16
   2d57c:	193fffcc 	andi	r4,r3,65535
   2d580:	2fcb383a 	mul	r5,r5,ra
   2d584:	7bc00104 	addi	r15,r15,4
   2d588:	73800104 	addi	r14,r14,4
   2d58c:	2a0b883a 	add	r5,r5,r8
   2d590:	29cb883a 	add	r5,r5,r7
   2d594:	2806943a 	slli	r3,r5,16
   2d598:	94400104 	addi	r17,r18,4
   2d59c:	280ad43a 	srli	r5,r5,16
   2d5a0:	1908b03a 	or	r4,r3,r4
   2d5a4:	793fff15 	stw	r4,-4(r15)
   2d5a8:	70ffff17 	ldw	r3,-4(r14)
   2d5ac:	8a000017 	ldw	r8,0(r17)
   2d5b0:	1806d43a 	srli	r3,r3,16
   2d5b4:	413fffcc 	andi	r4,r8,65535
   2d5b8:	1fc7383a 	mul	r3,r3,ra
   2d5bc:	1907883a 	add	r3,r3,r4
   2d5c0:	1947883a 	add	r3,r3,r5
   2d5c4:	180ed43a 	srli	r7,r3,16
   2d5c8:	727fe936 	bltu	r14,r9,2d570 <__alt_data_end+0xfffee170>
   2d5cc:	90c00115 	stw	r3,4(r18)
   2d5d0:	31800104 	addi	r6,r6,4
   2d5d4:	5ac00104 	addi	r11,r11,4
   2d5d8:	333fbe36 	bltu	r6,r12,2d4d4 <__alt_data_end+0xfffee0d4>
   2d5dc:	0400090e 	bge	zero,r16,2d604 <__multiply+0x1d4>
   2d5e0:	50ffff17 	ldw	r3,-4(r10)
   2d5e4:	52bfff04 	addi	r10,r10,-4
   2d5e8:	18000326 	beq	r3,zero,2d5f8 <__multiply+0x1c8>
   2d5ec:	00000506 	br	2d604 <__multiply+0x1d4>
   2d5f0:	50c00017 	ldw	r3,0(r10)
   2d5f4:	1800031e 	bne	r3,zero,2d604 <__multiply+0x1d4>
   2d5f8:	843fffc4 	addi	r16,r16,-1
   2d5fc:	52bfff04 	addi	r10,r10,-4
   2d600:	803ffb1e 	bne	r16,zero,2d5f0 <__alt_data_end+0xfffee1f0>
   2d604:	14000415 	stw	r16,16(r2)
   2d608:	dfc00517 	ldw	ra,20(sp)
   2d60c:	dd000417 	ldw	r20,16(sp)
   2d610:	dcc00317 	ldw	r19,12(sp)
   2d614:	dc800217 	ldw	r18,8(sp)
   2d618:	dc400117 	ldw	r17,4(sp)
   2d61c:	dc000017 	ldw	r16,0(sp)
   2d620:	dec00604 	addi	sp,sp,24
   2d624:	f800283a 	ret

0002d628 <__pow5mult>:
   2d628:	defffa04 	addi	sp,sp,-24
   2d62c:	dcc00315 	stw	r19,12(sp)
   2d630:	dc000015 	stw	r16,0(sp)
   2d634:	dfc00515 	stw	ra,20(sp)
   2d638:	dd000415 	stw	r20,16(sp)
   2d63c:	dc800215 	stw	r18,8(sp)
   2d640:	dc400115 	stw	r17,4(sp)
   2d644:	308000cc 	andi	r2,r6,3
   2d648:	3021883a 	mov	r16,r6
   2d64c:	2027883a 	mov	r19,r4
   2d650:	10002f1e 	bne	r2,zero,2d710 <__pow5mult+0xe8>
   2d654:	2825883a 	mov	r18,r5
   2d658:	8021d0ba 	srai	r16,r16,2
   2d65c:	80001a26 	beq	r16,zero,2d6c8 <__pow5mult+0xa0>
   2d660:	9c401217 	ldw	r17,72(r19)
   2d664:	8800061e 	bne	r17,zero,2d680 <__pow5mult+0x58>
   2d668:	00003406 	br	2d73c <__pow5mult+0x114>
   2d66c:	8021d07a 	srai	r16,r16,1
   2d670:	80001526 	beq	r16,zero,2d6c8 <__pow5mult+0xa0>
   2d674:	88800017 	ldw	r2,0(r17)
   2d678:	10001c26 	beq	r2,zero,2d6ec <__pow5mult+0xc4>
   2d67c:	1023883a 	mov	r17,r2
   2d680:	8080004c 	andi	r2,r16,1
   2d684:	103ff926 	beq	r2,zero,2d66c <__alt_data_end+0xfffee26c>
   2d688:	880d883a 	mov	r6,r17
   2d68c:	900b883a 	mov	r5,r18
   2d690:	9809883a 	mov	r4,r19
   2d694:	002d4300 	call	2d430 <__multiply>
   2d698:	90001b26 	beq	r18,zero,2d708 <__pow5mult+0xe0>
   2d69c:	91000117 	ldw	r4,4(r18)
   2d6a0:	98c01317 	ldw	r3,76(r19)
   2d6a4:	8021d07a 	srai	r16,r16,1
   2d6a8:	2109883a 	add	r4,r4,r4
   2d6ac:	2109883a 	add	r4,r4,r4
   2d6b0:	1907883a 	add	r3,r3,r4
   2d6b4:	19000017 	ldw	r4,0(r3)
   2d6b8:	91000015 	stw	r4,0(r18)
   2d6bc:	1c800015 	stw	r18,0(r3)
   2d6c0:	1025883a 	mov	r18,r2
   2d6c4:	803feb1e 	bne	r16,zero,2d674 <__alt_data_end+0xfffee274>
   2d6c8:	9005883a 	mov	r2,r18
   2d6cc:	dfc00517 	ldw	ra,20(sp)
   2d6d0:	dd000417 	ldw	r20,16(sp)
   2d6d4:	dcc00317 	ldw	r19,12(sp)
   2d6d8:	dc800217 	ldw	r18,8(sp)
   2d6dc:	dc400117 	ldw	r17,4(sp)
   2d6e0:	dc000017 	ldw	r16,0(sp)
   2d6e4:	dec00604 	addi	sp,sp,24
   2d6e8:	f800283a 	ret
   2d6ec:	880d883a 	mov	r6,r17
   2d6f0:	880b883a 	mov	r5,r17
   2d6f4:	9809883a 	mov	r4,r19
   2d6f8:	002d4300 	call	2d430 <__multiply>
   2d6fc:	88800015 	stw	r2,0(r17)
   2d700:	10000015 	stw	zero,0(r2)
   2d704:	003fdd06 	br	2d67c <__alt_data_end+0xfffee27c>
   2d708:	1025883a 	mov	r18,r2
   2d70c:	003fd706 	br	2d66c <__alt_data_end+0xfffee26c>
   2d710:	10bfffc4 	addi	r2,r2,-1
   2d714:	1085883a 	add	r2,r2,r2
   2d718:	00c000f4 	movhi	r3,3
   2d71c:	18d22104 	addi	r3,r3,18564
   2d720:	1085883a 	add	r2,r2,r2
   2d724:	1885883a 	add	r2,r3,r2
   2d728:	11800017 	ldw	r6,0(r2)
   2d72c:	000f883a 	mov	r7,zero
   2d730:	002d0b80 	call	2d0b8 <__multadd>
   2d734:	1025883a 	mov	r18,r2
   2d738:	003fc706 	br	2d658 <__alt_data_end+0xfffee258>
   2d73c:	05000044 	movi	r20,1
   2d740:	a00b883a 	mov	r5,r20
   2d744:	9809883a 	mov	r4,r19
   2d748:	002cfe80 	call	2cfe8 <_Balloc>
   2d74c:	1023883a 	mov	r17,r2
   2d750:	00809c44 	movi	r2,625
   2d754:	88800515 	stw	r2,20(r17)
   2d758:	8d000415 	stw	r20,16(r17)
   2d75c:	9c401215 	stw	r17,72(r19)
   2d760:	88000015 	stw	zero,0(r17)
   2d764:	003fc606 	br	2d680 <__alt_data_end+0xfffee280>

0002d768 <__lshift>:
   2d768:	defff904 	addi	sp,sp,-28
   2d76c:	dd400515 	stw	r21,20(sp)
   2d770:	dcc00315 	stw	r19,12(sp)
   2d774:	302bd17a 	srai	r21,r6,5
   2d778:	2cc00417 	ldw	r19,16(r5)
   2d77c:	28800217 	ldw	r2,8(r5)
   2d780:	dd000415 	stw	r20,16(sp)
   2d784:	ace7883a 	add	r19,r21,r19
   2d788:	dc800215 	stw	r18,8(sp)
   2d78c:	dc400115 	stw	r17,4(sp)
   2d790:	dc000015 	stw	r16,0(sp)
   2d794:	dfc00615 	stw	ra,24(sp)
   2d798:	9c000044 	addi	r16,r19,1
   2d79c:	2823883a 	mov	r17,r5
   2d7a0:	3029883a 	mov	r20,r6
   2d7a4:	2025883a 	mov	r18,r4
   2d7a8:	29400117 	ldw	r5,4(r5)
   2d7ac:	1400030e 	bge	r2,r16,2d7bc <__lshift+0x54>
   2d7b0:	1085883a 	add	r2,r2,r2
   2d7b4:	29400044 	addi	r5,r5,1
   2d7b8:	143ffd16 	blt	r2,r16,2d7b0 <__alt_data_end+0xfffee3b0>
   2d7bc:	9009883a 	mov	r4,r18
   2d7c0:	002cfe80 	call	2cfe8 <_Balloc>
   2d7c4:	10c00504 	addi	r3,r2,20
   2d7c8:	0540070e 	bge	zero,r21,2d7e8 <__lshift+0x80>
   2d7cc:	ad6b883a 	add	r21,r21,r21
   2d7d0:	ad6b883a 	add	r21,r21,r21
   2d7d4:	1809883a 	mov	r4,r3
   2d7d8:	1d47883a 	add	r3,r3,r21
   2d7dc:	20000015 	stw	zero,0(r4)
   2d7e0:	21000104 	addi	r4,r4,4
   2d7e4:	193ffd1e 	bne	r3,r4,2d7dc <__alt_data_end+0xfffee3dc>
   2d7e8:	8a000417 	ldw	r8,16(r17)
   2d7ec:	89000504 	addi	r4,r17,20
   2d7f0:	a18007cc 	andi	r6,r20,31
   2d7f4:	4211883a 	add	r8,r8,r8
   2d7f8:	4211883a 	add	r8,r8,r8
   2d7fc:	2211883a 	add	r8,r4,r8
   2d800:	30002326 	beq	r6,zero,2d890 <__lshift+0x128>
   2d804:	02400804 	movi	r9,32
   2d808:	4993c83a 	sub	r9,r9,r6
   2d80c:	000b883a 	mov	r5,zero
   2d810:	21c00017 	ldw	r7,0(r4)
   2d814:	1815883a 	mov	r10,r3
   2d818:	18c00104 	addi	r3,r3,4
   2d81c:	398e983a 	sll	r7,r7,r6
   2d820:	21000104 	addi	r4,r4,4
   2d824:	394ab03a 	or	r5,r7,r5
   2d828:	197fff15 	stw	r5,-4(r3)
   2d82c:	217fff17 	ldw	r5,-4(r4)
   2d830:	2a4ad83a 	srl	r5,r5,r9
   2d834:	223ff636 	bltu	r4,r8,2d810 <__alt_data_end+0xfffee410>
   2d838:	51400115 	stw	r5,4(r10)
   2d83c:	28001a1e 	bne	r5,zero,2d8a8 <__lshift+0x140>
   2d840:	843fffc4 	addi	r16,r16,-1
   2d844:	14000415 	stw	r16,16(r2)
   2d848:	88000826 	beq	r17,zero,2d86c <__lshift+0x104>
   2d84c:	89000117 	ldw	r4,4(r17)
   2d850:	90c01317 	ldw	r3,76(r18)
   2d854:	2109883a 	add	r4,r4,r4
   2d858:	2109883a 	add	r4,r4,r4
   2d85c:	1907883a 	add	r3,r3,r4
   2d860:	19000017 	ldw	r4,0(r3)
   2d864:	89000015 	stw	r4,0(r17)
   2d868:	1c400015 	stw	r17,0(r3)
   2d86c:	dfc00617 	ldw	ra,24(sp)
   2d870:	dd400517 	ldw	r21,20(sp)
   2d874:	dd000417 	ldw	r20,16(sp)
   2d878:	dcc00317 	ldw	r19,12(sp)
   2d87c:	dc800217 	ldw	r18,8(sp)
   2d880:	dc400117 	ldw	r17,4(sp)
   2d884:	dc000017 	ldw	r16,0(sp)
   2d888:	dec00704 	addi	sp,sp,28
   2d88c:	f800283a 	ret
   2d890:	21400017 	ldw	r5,0(r4)
   2d894:	18c00104 	addi	r3,r3,4
   2d898:	21000104 	addi	r4,r4,4
   2d89c:	197fff15 	stw	r5,-4(r3)
   2d8a0:	223ffb36 	bltu	r4,r8,2d890 <__alt_data_end+0xfffee490>
   2d8a4:	003fe606 	br	2d840 <__alt_data_end+0xfffee440>
   2d8a8:	9c000084 	addi	r16,r19,2
   2d8ac:	003fe406 	br	2d840 <__alt_data_end+0xfffee440>

0002d8b0 <__mcmp>:
   2d8b0:	20800417 	ldw	r2,16(r4)
   2d8b4:	28c00417 	ldw	r3,16(r5)
   2d8b8:	10c5c83a 	sub	r2,r2,r3
   2d8bc:	1000111e 	bne	r2,zero,2d904 <__mcmp+0x54>
   2d8c0:	18c7883a 	add	r3,r3,r3
   2d8c4:	18c7883a 	add	r3,r3,r3
   2d8c8:	21000504 	addi	r4,r4,20
   2d8cc:	29400504 	addi	r5,r5,20
   2d8d0:	20c5883a 	add	r2,r4,r3
   2d8d4:	28cb883a 	add	r5,r5,r3
   2d8d8:	00000106 	br	2d8e0 <__mcmp+0x30>
   2d8dc:	20800a2e 	bgeu	r4,r2,2d908 <__mcmp+0x58>
   2d8e0:	10bfff04 	addi	r2,r2,-4
   2d8e4:	297fff04 	addi	r5,r5,-4
   2d8e8:	11800017 	ldw	r6,0(r2)
   2d8ec:	28c00017 	ldw	r3,0(r5)
   2d8f0:	30fffa26 	beq	r6,r3,2d8dc <__alt_data_end+0xfffee4dc>
   2d8f4:	30c00236 	bltu	r6,r3,2d900 <__mcmp+0x50>
   2d8f8:	00800044 	movi	r2,1
   2d8fc:	f800283a 	ret
   2d900:	00bfffc4 	movi	r2,-1
   2d904:	f800283a 	ret
   2d908:	0005883a 	mov	r2,zero
   2d90c:	f800283a 	ret

0002d910 <__mdiff>:
   2d910:	28c00417 	ldw	r3,16(r5)
   2d914:	30800417 	ldw	r2,16(r6)
   2d918:	defffa04 	addi	sp,sp,-24
   2d91c:	dcc00315 	stw	r19,12(sp)
   2d920:	dc800215 	stw	r18,8(sp)
   2d924:	dfc00515 	stw	ra,20(sp)
   2d928:	dd000415 	stw	r20,16(sp)
   2d92c:	dc400115 	stw	r17,4(sp)
   2d930:	dc000015 	stw	r16,0(sp)
   2d934:	1887c83a 	sub	r3,r3,r2
   2d938:	2825883a 	mov	r18,r5
   2d93c:	3027883a 	mov	r19,r6
   2d940:	1800141e 	bne	r3,zero,2d994 <__mdiff+0x84>
   2d944:	1085883a 	add	r2,r2,r2
   2d948:	1085883a 	add	r2,r2,r2
   2d94c:	2a000504 	addi	r8,r5,20
   2d950:	34000504 	addi	r16,r6,20
   2d954:	4087883a 	add	r3,r8,r2
   2d958:	8085883a 	add	r2,r16,r2
   2d95c:	00000106 	br	2d964 <__mdiff+0x54>
   2d960:	40c0592e 	bgeu	r8,r3,2dac8 <__mdiff+0x1b8>
   2d964:	18ffff04 	addi	r3,r3,-4
   2d968:	10bfff04 	addi	r2,r2,-4
   2d96c:	19c00017 	ldw	r7,0(r3)
   2d970:	11400017 	ldw	r5,0(r2)
   2d974:	397ffa26 	beq	r7,r5,2d960 <__alt_data_end+0xfffee560>
   2d978:	3940592e 	bgeu	r7,r5,2dae0 <__mdiff+0x1d0>
   2d97c:	9005883a 	mov	r2,r18
   2d980:	4023883a 	mov	r17,r8
   2d984:	9825883a 	mov	r18,r19
   2d988:	05000044 	movi	r20,1
   2d98c:	1027883a 	mov	r19,r2
   2d990:	00000406 	br	2d9a4 <__mdiff+0x94>
   2d994:	18005616 	blt	r3,zero,2daf0 <__mdiff+0x1e0>
   2d998:	34400504 	addi	r17,r6,20
   2d99c:	2c000504 	addi	r16,r5,20
   2d9a0:	0029883a 	mov	r20,zero
   2d9a4:	91400117 	ldw	r5,4(r18)
   2d9a8:	002cfe80 	call	2cfe8 <_Balloc>
   2d9ac:	92400417 	ldw	r9,16(r18)
   2d9b0:	9b000417 	ldw	r12,16(r19)
   2d9b4:	12c00504 	addi	r11,r2,20
   2d9b8:	4a51883a 	add	r8,r9,r9
   2d9bc:	6319883a 	add	r12,r12,r12
   2d9c0:	4211883a 	add	r8,r8,r8
   2d9c4:	6319883a 	add	r12,r12,r12
   2d9c8:	15000315 	stw	r20,12(r2)
   2d9cc:	8211883a 	add	r8,r16,r8
   2d9d0:	8b19883a 	add	r12,r17,r12
   2d9d4:	0007883a 	mov	r3,zero
   2d9d8:	81400017 	ldw	r5,0(r16)
   2d9dc:	89c00017 	ldw	r7,0(r17)
   2d9e0:	59800104 	addi	r6,r11,4
   2d9e4:	293fffcc 	andi	r4,r5,65535
   2d9e8:	20c7883a 	add	r3,r4,r3
   2d9ec:	393fffcc 	andi	r4,r7,65535
   2d9f0:	1909c83a 	sub	r4,r3,r4
   2d9f4:	280ad43a 	srli	r5,r5,16
   2d9f8:	380ed43a 	srli	r7,r7,16
   2d9fc:	2007d43a 	srai	r3,r4,16
   2da00:	213fffcc 	andi	r4,r4,65535
   2da04:	29cbc83a 	sub	r5,r5,r7
   2da08:	28c7883a 	add	r3,r5,r3
   2da0c:	180a943a 	slli	r5,r3,16
   2da10:	8c400104 	addi	r17,r17,4
   2da14:	84000104 	addi	r16,r16,4
   2da18:	2908b03a 	or	r4,r5,r4
   2da1c:	59000015 	stw	r4,0(r11)
   2da20:	1807d43a 	srai	r3,r3,16
   2da24:	3015883a 	mov	r10,r6
   2da28:	3017883a 	mov	r11,r6
   2da2c:	8b3fea36 	bltu	r17,r12,2d9d8 <__alt_data_end+0xfffee5d8>
   2da30:	8200162e 	bgeu	r16,r8,2da8c <__mdiff+0x17c>
   2da34:	8017883a 	mov	r11,r16
   2da38:	59400017 	ldw	r5,0(r11)
   2da3c:	31800104 	addi	r6,r6,4
   2da40:	5ac00104 	addi	r11,r11,4
   2da44:	293fffcc 	andi	r4,r5,65535
   2da48:	20c7883a 	add	r3,r4,r3
   2da4c:	280ed43a 	srli	r7,r5,16
   2da50:	180bd43a 	srai	r5,r3,16
   2da54:	193fffcc 	andi	r4,r3,65535
   2da58:	3947883a 	add	r3,r7,r5
   2da5c:	180a943a 	slli	r5,r3,16
   2da60:	1807d43a 	srai	r3,r3,16
   2da64:	2908b03a 	or	r4,r5,r4
   2da68:	313fff15 	stw	r4,-4(r6)
   2da6c:	5a3ff236 	bltu	r11,r8,2da38 <__alt_data_end+0xfffee638>
   2da70:	0406303a 	nor	r3,zero,r16
   2da74:	1a07883a 	add	r3,r3,r8
   2da78:	1806d0ba 	srli	r3,r3,2
   2da7c:	18c00044 	addi	r3,r3,1
   2da80:	18c7883a 	add	r3,r3,r3
   2da84:	18c7883a 	add	r3,r3,r3
   2da88:	50d5883a 	add	r10,r10,r3
   2da8c:	50ffff04 	addi	r3,r10,-4
   2da90:	2000041e 	bne	r4,zero,2daa4 <__mdiff+0x194>
   2da94:	18ffff04 	addi	r3,r3,-4
   2da98:	19000017 	ldw	r4,0(r3)
   2da9c:	4a7fffc4 	addi	r9,r9,-1
   2daa0:	203ffc26 	beq	r4,zero,2da94 <__alt_data_end+0xfffee694>
   2daa4:	12400415 	stw	r9,16(r2)
   2daa8:	dfc00517 	ldw	ra,20(sp)
   2daac:	dd000417 	ldw	r20,16(sp)
   2dab0:	dcc00317 	ldw	r19,12(sp)
   2dab4:	dc800217 	ldw	r18,8(sp)
   2dab8:	dc400117 	ldw	r17,4(sp)
   2dabc:	dc000017 	ldw	r16,0(sp)
   2dac0:	dec00604 	addi	sp,sp,24
   2dac4:	f800283a 	ret
   2dac8:	000b883a 	mov	r5,zero
   2dacc:	002cfe80 	call	2cfe8 <_Balloc>
   2dad0:	00c00044 	movi	r3,1
   2dad4:	10c00415 	stw	r3,16(r2)
   2dad8:	10000515 	stw	zero,20(r2)
   2dadc:	003ff206 	br	2daa8 <__alt_data_end+0xfffee6a8>
   2dae0:	8023883a 	mov	r17,r16
   2dae4:	0029883a 	mov	r20,zero
   2dae8:	4021883a 	mov	r16,r8
   2daec:	003fad06 	br	2d9a4 <__alt_data_end+0xfffee5a4>
   2daf0:	9005883a 	mov	r2,r18
   2daf4:	94400504 	addi	r17,r18,20
   2daf8:	9c000504 	addi	r16,r19,20
   2dafc:	9825883a 	mov	r18,r19
   2db00:	05000044 	movi	r20,1
   2db04:	1027883a 	mov	r19,r2
   2db08:	003fa606 	br	2d9a4 <__alt_data_end+0xfffee5a4>

0002db0c <__ulp>:
   2db0c:	295ffc2c 	andhi	r5,r5,32752
   2db10:	00bf3034 	movhi	r2,64704
   2db14:	2887883a 	add	r3,r5,r2
   2db18:	00c0020e 	bge	zero,r3,2db24 <__ulp+0x18>
   2db1c:	0005883a 	mov	r2,zero
   2db20:	f800283a 	ret
   2db24:	00c7c83a 	sub	r3,zero,r3
   2db28:	1807d53a 	srai	r3,r3,20
   2db2c:	008004c4 	movi	r2,19
   2db30:	10c00b0e 	bge	r2,r3,2db60 <__ulp+0x54>
   2db34:	18bffb04 	addi	r2,r3,-20
   2db38:	01000784 	movi	r4,30
   2db3c:	0007883a 	mov	r3,zero
   2db40:	20800516 	blt	r4,r2,2db58 <__ulp+0x4c>
   2db44:	010007c4 	movi	r4,31
   2db48:	2089c83a 	sub	r4,r4,r2
   2db4c:	00800044 	movi	r2,1
   2db50:	1104983a 	sll	r2,r2,r4
   2db54:	f800283a 	ret
   2db58:	00800044 	movi	r2,1
   2db5c:	f800283a 	ret
   2db60:	01400234 	movhi	r5,8
   2db64:	28c7d83a 	sra	r3,r5,r3
   2db68:	0005883a 	mov	r2,zero
   2db6c:	f800283a 	ret

0002db70 <__b2d>:
   2db70:	defffa04 	addi	sp,sp,-24
   2db74:	dc000015 	stw	r16,0(sp)
   2db78:	24000417 	ldw	r16,16(r4)
   2db7c:	dc400115 	stw	r17,4(sp)
   2db80:	24400504 	addi	r17,r4,20
   2db84:	8421883a 	add	r16,r16,r16
   2db88:	8421883a 	add	r16,r16,r16
   2db8c:	8c21883a 	add	r16,r17,r16
   2db90:	dc800215 	stw	r18,8(sp)
   2db94:	84bfff17 	ldw	r18,-4(r16)
   2db98:	dd000415 	stw	r20,16(sp)
   2db9c:	dcc00315 	stw	r19,12(sp)
   2dba0:	9009883a 	mov	r4,r18
   2dba4:	2829883a 	mov	r20,r5
   2dba8:	dfc00515 	stw	ra,20(sp)
   2dbac:	002d2dc0 	call	2d2dc <__hi0bits>
   2dbb0:	00c00804 	movi	r3,32
   2dbb4:	1889c83a 	sub	r4,r3,r2
   2dbb8:	a1000015 	stw	r4,0(r20)
   2dbbc:	01000284 	movi	r4,10
   2dbc0:	84ffff04 	addi	r19,r16,-4
   2dbc4:	20801216 	blt	r4,r2,2dc10 <__b2d+0xa0>
   2dbc8:	018002c4 	movi	r6,11
   2dbcc:	308dc83a 	sub	r6,r6,r2
   2dbd0:	9186d83a 	srl	r3,r18,r6
   2dbd4:	18cffc34 	orhi	r3,r3,16368
   2dbd8:	8cc0212e 	bgeu	r17,r19,2dc60 <__b2d+0xf0>
   2dbdc:	813ffe17 	ldw	r4,-8(r16)
   2dbe0:	218cd83a 	srl	r6,r4,r6
   2dbe4:	10800544 	addi	r2,r2,21
   2dbe8:	9084983a 	sll	r2,r18,r2
   2dbec:	1184b03a 	or	r2,r2,r6
   2dbf0:	dfc00517 	ldw	ra,20(sp)
   2dbf4:	dd000417 	ldw	r20,16(sp)
   2dbf8:	dcc00317 	ldw	r19,12(sp)
   2dbfc:	dc800217 	ldw	r18,8(sp)
   2dc00:	dc400117 	ldw	r17,4(sp)
   2dc04:	dc000017 	ldw	r16,0(sp)
   2dc08:	dec00604 	addi	sp,sp,24
   2dc0c:	f800283a 	ret
   2dc10:	8cc00f2e 	bgeu	r17,r19,2dc50 <__b2d+0xe0>
   2dc14:	117ffd44 	addi	r5,r2,-11
   2dc18:	80bffe17 	ldw	r2,-8(r16)
   2dc1c:	28000e26 	beq	r5,zero,2dc58 <__b2d+0xe8>
   2dc20:	1949c83a 	sub	r4,r3,r5
   2dc24:	9164983a 	sll	r18,r18,r5
   2dc28:	1106d83a 	srl	r3,r2,r4
   2dc2c:	81bffe04 	addi	r6,r16,-8
   2dc30:	948ffc34 	orhi	r18,r18,16368
   2dc34:	90c6b03a 	or	r3,r18,r3
   2dc38:	89800e2e 	bgeu	r17,r6,2dc74 <__b2d+0x104>
   2dc3c:	81bffd17 	ldw	r6,-12(r16)
   2dc40:	1144983a 	sll	r2,r2,r5
   2dc44:	310ad83a 	srl	r5,r6,r4
   2dc48:	2884b03a 	or	r2,r5,r2
   2dc4c:	003fe806 	br	2dbf0 <__alt_data_end+0xfffee7f0>
   2dc50:	10bffd44 	addi	r2,r2,-11
   2dc54:	1000041e 	bne	r2,zero,2dc68 <__b2d+0xf8>
   2dc58:	90cffc34 	orhi	r3,r18,16368
   2dc5c:	003fe406 	br	2dbf0 <__alt_data_end+0xfffee7f0>
   2dc60:	000d883a 	mov	r6,zero
   2dc64:	003fdf06 	br	2dbe4 <__alt_data_end+0xfffee7e4>
   2dc68:	90a4983a 	sll	r18,r18,r2
   2dc6c:	0005883a 	mov	r2,zero
   2dc70:	003ff906 	br	2dc58 <__alt_data_end+0xfffee858>
   2dc74:	1144983a 	sll	r2,r2,r5
   2dc78:	003fdd06 	br	2dbf0 <__alt_data_end+0xfffee7f0>

0002dc7c <__d2b>:
   2dc7c:	defff804 	addi	sp,sp,-32
   2dc80:	dc000215 	stw	r16,8(sp)
   2dc84:	3021883a 	mov	r16,r6
   2dc88:	dc400315 	stw	r17,12(sp)
   2dc8c:	8022907a 	slli	r17,r16,1
   2dc90:	dd000615 	stw	r20,24(sp)
   2dc94:	2829883a 	mov	r20,r5
   2dc98:	01400044 	movi	r5,1
   2dc9c:	dcc00515 	stw	r19,20(sp)
   2dca0:	dc800415 	stw	r18,16(sp)
   2dca4:	dfc00715 	stw	ra,28(sp)
   2dca8:	3825883a 	mov	r18,r7
   2dcac:	8822d57a 	srli	r17,r17,21
   2dcb0:	002cfe80 	call	2cfe8 <_Balloc>
   2dcb4:	1027883a 	mov	r19,r2
   2dcb8:	00800434 	movhi	r2,16
   2dcbc:	10bfffc4 	addi	r2,r2,-1
   2dcc0:	808c703a 	and	r6,r16,r2
   2dcc4:	88000126 	beq	r17,zero,2dccc <__d2b+0x50>
   2dcc8:	31800434 	orhi	r6,r6,16
   2dccc:	d9800015 	stw	r6,0(sp)
   2dcd0:	a0002426 	beq	r20,zero,2dd64 <__d2b+0xe8>
   2dcd4:	d9000104 	addi	r4,sp,4
   2dcd8:	dd000115 	stw	r20,4(sp)
   2dcdc:	002d3440 	call	2d344 <__lo0bits>
   2dce0:	d8c00017 	ldw	r3,0(sp)
   2dce4:	10002f1e 	bne	r2,zero,2dda4 <__d2b+0x128>
   2dce8:	d9000117 	ldw	r4,4(sp)
   2dcec:	99000515 	stw	r4,20(r19)
   2dcf0:	1821003a 	cmpeq	r16,r3,zero
   2dcf4:	01000084 	movi	r4,2
   2dcf8:	2421c83a 	sub	r16,r4,r16
   2dcfc:	98c00615 	stw	r3,24(r19)
   2dd00:	9c000415 	stw	r16,16(r19)
   2dd04:	88001f1e 	bne	r17,zero,2dd84 <__d2b+0x108>
   2dd08:	10bef384 	addi	r2,r2,-1074
   2dd0c:	90800015 	stw	r2,0(r18)
   2dd10:	00900034 	movhi	r2,16384
   2dd14:	10bfffc4 	addi	r2,r2,-1
   2dd18:	8085883a 	add	r2,r16,r2
   2dd1c:	1085883a 	add	r2,r2,r2
   2dd20:	1085883a 	add	r2,r2,r2
   2dd24:	9885883a 	add	r2,r19,r2
   2dd28:	11000517 	ldw	r4,20(r2)
   2dd2c:	8020917a 	slli	r16,r16,5
   2dd30:	002d2dc0 	call	2d2dc <__hi0bits>
   2dd34:	d8c00817 	ldw	r3,32(sp)
   2dd38:	8085c83a 	sub	r2,r16,r2
   2dd3c:	18800015 	stw	r2,0(r3)
   2dd40:	9805883a 	mov	r2,r19
   2dd44:	dfc00717 	ldw	ra,28(sp)
   2dd48:	dd000617 	ldw	r20,24(sp)
   2dd4c:	dcc00517 	ldw	r19,20(sp)
   2dd50:	dc800417 	ldw	r18,16(sp)
   2dd54:	dc400317 	ldw	r17,12(sp)
   2dd58:	dc000217 	ldw	r16,8(sp)
   2dd5c:	dec00804 	addi	sp,sp,32
   2dd60:	f800283a 	ret
   2dd64:	d809883a 	mov	r4,sp
   2dd68:	002d3440 	call	2d344 <__lo0bits>
   2dd6c:	d8c00017 	ldw	r3,0(sp)
   2dd70:	04000044 	movi	r16,1
   2dd74:	9c000415 	stw	r16,16(r19)
   2dd78:	98c00515 	stw	r3,20(r19)
   2dd7c:	10800804 	addi	r2,r2,32
   2dd80:	883fe126 	beq	r17,zero,2dd08 <__alt_data_end+0xfffee908>
   2dd84:	00c00d44 	movi	r3,53
   2dd88:	8c7ef344 	addi	r17,r17,-1075
   2dd8c:	88a3883a 	add	r17,r17,r2
   2dd90:	1885c83a 	sub	r2,r3,r2
   2dd94:	d8c00817 	ldw	r3,32(sp)
   2dd98:	94400015 	stw	r17,0(r18)
   2dd9c:	18800015 	stw	r2,0(r3)
   2dda0:	003fe706 	br	2dd40 <__alt_data_end+0xfffee940>
   2dda4:	01000804 	movi	r4,32
   2dda8:	2089c83a 	sub	r4,r4,r2
   2ddac:	1908983a 	sll	r4,r3,r4
   2ddb0:	d9400117 	ldw	r5,4(sp)
   2ddb4:	1886d83a 	srl	r3,r3,r2
   2ddb8:	2148b03a 	or	r4,r4,r5
   2ddbc:	99000515 	stw	r4,20(r19)
   2ddc0:	d8c00015 	stw	r3,0(sp)
   2ddc4:	003fca06 	br	2dcf0 <__alt_data_end+0xfffee8f0>

0002ddc8 <__ratio>:
   2ddc8:	defff904 	addi	sp,sp,-28
   2ddcc:	dc400315 	stw	r17,12(sp)
   2ddd0:	2823883a 	mov	r17,r5
   2ddd4:	d9400104 	addi	r5,sp,4
   2ddd8:	dfc00615 	stw	ra,24(sp)
   2dddc:	dcc00515 	stw	r19,20(sp)
   2dde0:	dc800415 	stw	r18,16(sp)
   2dde4:	2027883a 	mov	r19,r4
   2dde8:	dc000215 	stw	r16,8(sp)
   2ddec:	002db700 	call	2db70 <__b2d>
   2ddf0:	d80b883a 	mov	r5,sp
   2ddf4:	8809883a 	mov	r4,r17
   2ddf8:	1025883a 	mov	r18,r2
   2ddfc:	1821883a 	mov	r16,r3
   2de00:	002db700 	call	2db70 <__b2d>
   2de04:	8a000417 	ldw	r8,16(r17)
   2de08:	99000417 	ldw	r4,16(r19)
   2de0c:	d9400117 	ldw	r5,4(sp)
   2de10:	2209c83a 	sub	r4,r4,r8
   2de14:	2010917a 	slli	r8,r4,5
   2de18:	d9000017 	ldw	r4,0(sp)
   2de1c:	2909c83a 	sub	r4,r5,r4
   2de20:	4109883a 	add	r4,r8,r4
   2de24:	01000e0e 	bge	zero,r4,2de60 <__ratio+0x98>
   2de28:	2008953a 	slli	r4,r4,20
   2de2c:	2421883a 	add	r16,r4,r16
   2de30:	100d883a 	mov	r6,r2
   2de34:	180f883a 	mov	r7,r3
   2de38:	9009883a 	mov	r4,r18
   2de3c:	800b883a 	mov	r5,r16
   2de40:	00255380 	call	25538 <__divdf3>
   2de44:	dfc00617 	ldw	ra,24(sp)
   2de48:	dcc00517 	ldw	r19,20(sp)
   2de4c:	dc800417 	ldw	r18,16(sp)
   2de50:	dc400317 	ldw	r17,12(sp)
   2de54:	dc000217 	ldw	r16,8(sp)
   2de58:	dec00704 	addi	sp,sp,28
   2de5c:	f800283a 	ret
   2de60:	2008953a 	slli	r4,r4,20
   2de64:	1907c83a 	sub	r3,r3,r4
   2de68:	003ff106 	br	2de30 <__alt_data_end+0xfffeea30>

0002de6c <_mprec_log10>:
   2de6c:	defffe04 	addi	sp,sp,-8
   2de70:	dc000015 	stw	r16,0(sp)
   2de74:	dfc00115 	stw	ra,4(sp)
   2de78:	008005c4 	movi	r2,23
   2de7c:	2021883a 	mov	r16,r4
   2de80:	11000d0e 	bge	r2,r4,2deb8 <_mprec_log10+0x4c>
   2de84:	0005883a 	mov	r2,zero
   2de88:	00cffc34 	movhi	r3,16368
   2de8c:	843fffc4 	addi	r16,r16,-1
   2de90:	000d883a 	mov	r6,zero
   2de94:	01d00934 	movhi	r7,16420
   2de98:	1009883a 	mov	r4,r2
   2de9c:	180b883a 	mov	r5,r3
   2dea0:	0025e200 	call	25e20 <__muldf3>
   2dea4:	803ff91e 	bne	r16,zero,2de8c <__alt_data_end+0xfffeea8c>
   2dea8:	dfc00117 	ldw	ra,4(sp)
   2deac:	dc000017 	ldw	r16,0(sp)
   2deb0:	dec00204 	addi	sp,sp,8
   2deb4:	f800283a 	ret
   2deb8:	202090fa 	slli	r16,r4,3
   2debc:	008000f4 	movhi	r2,3
   2dec0:	10923804 	addi	r2,r2,18656
   2dec4:	1421883a 	add	r16,r2,r16
   2dec8:	80800017 	ldw	r2,0(r16)
   2decc:	80c00117 	ldw	r3,4(r16)
   2ded0:	dfc00117 	ldw	ra,4(sp)
   2ded4:	dc000017 	ldw	r16,0(sp)
   2ded8:	dec00204 	addi	sp,sp,8
   2dedc:	f800283a 	ret

0002dee0 <__copybits>:
   2dee0:	297fffc4 	addi	r5,r5,-1
   2dee4:	280fd17a 	srai	r7,r5,5
   2dee8:	30c00417 	ldw	r3,16(r6)
   2deec:	30800504 	addi	r2,r6,20
   2def0:	39c00044 	addi	r7,r7,1
   2def4:	18c7883a 	add	r3,r3,r3
   2def8:	39cf883a 	add	r7,r7,r7
   2defc:	18c7883a 	add	r3,r3,r3
   2df00:	39cf883a 	add	r7,r7,r7
   2df04:	10c7883a 	add	r3,r2,r3
   2df08:	21cf883a 	add	r7,r4,r7
   2df0c:	10c00d2e 	bgeu	r2,r3,2df44 <__copybits+0x64>
   2df10:	200b883a 	mov	r5,r4
   2df14:	12000017 	ldw	r8,0(r2)
   2df18:	29400104 	addi	r5,r5,4
   2df1c:	10800104 	addi	r2,r2,4
   2df20:	2a3fff15 	stw	r8,-4(r5)
   2df24:	10fffb36 	bltu	r2,r3,2df14 <__alt_data_end+0xfffeeb14>
   2df28:	1985c83a 	sub	r2,r3,r6
   2df2c:	10bffac4 	addi	r2,r2,-21
   2df30:	1004d0ba 	srli	r2,r2,2
   2df34:	10800044 	addi	r2,r2,1
   2df38:	1085883a 	add	r2,r2,r2
   2df3c:	1085883a 	add	r2,r2,r2
   2df40:	2089883a 	add	r4,r4,r2
   2df44:	21c0032e 	bgeu	r4,r7,2df54 <__copybits+0x74>
   2df48:	20000015 	stw	zero,0(r4)
   2df4c:	21000104 	addi	r4,r4,4
   2df50:	21fffd36 	bltu	r4,r7,2df48 <__alt_data_end+0xfffeeb48>
   2df54:	f800283a 	ret

0002df58 <__any_on>:
   2df58:	20c00417 	ldw	r3,16(r4)
   2df5c:	2805d17a 	srai	r2,r5,5
   2df60:	21000504 	addi	r4,r4,20
   2df64:	18800d0e 	bge	r3,r2,2df9c <__any_on+0x44>
   2df68:	18c7883a 	add	r3,r3,r3
   2df6c:	18c7883a 	add	r3,r3,r3
   2df70:	20c7883a 	add	r3,r4,r3
   2df74:	20c0192e 	bgeu	r4,r3,2dfdc <__any_on+0x84>
   2df78:	18bfff17 	ldw	r2,-4(r3)
   2df7c:	18ffff04 	addi	r3,r3,-4
   2df80:	1000041e 	bne	r2,zero,2df94 <__any_on+0x3c>
   2df84:	20c0142e 	bgeu	r4,r3,2dfd8 <__any_on+0x80>
   2df88:	18ffff04 	addi	r3,r3,-4
   2df8c:	19400017 	ldw	r5,0(r3)
   2df90:	283ffc26 	beq	r5,zero,2df84 <__alt_data_end+0xfffeeb84>
   2df94:	00800044 	movi	r2,1
   2df98:	f800283a 	ret
   2df9c:	10c00a0e 	bge	r2,r3,2dfc8 <__any_on+0x70>
   2dfa0:	1085883a 	add	r2,r2,r2
   2dfa4:	1085883a 	add	r2,r2,r2
   2dfa8:	294007cc 	andi	r5,r5,31
   2dfac:	2087883a 	add	r3,r4,r2
   2dfb0:	283ff026 	beq	r5,zero,2df74 <__alt_data_end+0xfffeeb74>
   2dfb4:	19800017 	ldw	r6,0(r3)
   2dfb8:	3144d83a 	srl	r2,r6,r5
   2dfbc:	114a983a 	sll	r5,r2,r5
   2dfc0:	317ff41e 	bne	r6,r5,2df94 <__alt_data_end+0xfffeeb94>
   2dfc4:	003feb06 	br	2df74 <__alt_data_end+0xfffeeb74>
   2dfc8:	1085883a 	add	r2,r2,r2
   2dfcc:	1085883a 	add	r2,r2,r2
   2dfd0:	2087883a 	add	r3,r4,r2
   2dfd4:	003fe706 	br	2df74 <__alt_data_end+0xfffeeb74>
   2dfd8:	f800283a 	ret
   2dfdc:	0005883a 	mov	r2,zero
   2dfe0:	f800283a 	ret

0002dfe4 <_realloc_r>:
   2dfe4:	defff604 	addi	sp,sp,-40
   2dfe8:	dc800215 	stw	r18,8(sp)
   2dfec:	dfc00915 	stw	ra,36(sp)
   2dff0:	df000815 	stw	fp,32(sp)
   2dff4:	ddc00715 	stw	r23,28(sp)
   2dff8:	dd800615 	stw	r22,24(sp)
   2dffc:	dd400515 	stw	r21,20(sp)
   2e000:	dd000415 	stw	r20,16(sp)
   2e004:	dcc00315 	stw	r19,12(sp)
   2e008:	dc400115 	stw	r17,4(sp)
   2e00c:	dc000015 	stw	r16,0(sp)
   2e010:	3025883a 	mov	r18,r6
   2e014:	2800b726 	beq	r5,zero,2e2f4 <_realloc_r+0x310>
   2e018:	282b883a 	mov	r21,r5
   2e01c:	2029883a 	mov	r20,r4
   2e020:	0031c2c0 	call	31c2c <__malloc_lock>
   2e024:	a8bfff17 	ldw	r2,-4(r21)
   2e028:	043fff04 	movi	r16,-4
   2e02c:	90c002c4 	addi	r3,r18,11
   2e030:	01000584 	movi	r4,22
   2e034:	acfffe04 	addi	r19,r21,-8
   2e038:	1420703a 	and	r16,r2,r16
   2e03c:	20c0332e 	bgeu	r4,r3,2e10c <_realloc_r+0x128>
   2e040:	047ffe04 	movi	r17,-8
   2e044:	1c62703a 	and	r17,r3,r17
   2e048:	8807883a 	mov	r3,r17
   2e04c:	88005816 	blt	r17,zero,2e1b0 <_realloc_r+0x1cc>
   2e050:	8c805736 	bltu	r17,r18,2e1b0 <_realloc_r+0x1cc>
   2e054:	80c0300e 	bge	r16,r3,2e118 <_realloc_r+0x134>
   2e058:	070000f4 	movhi	fp,3
   2e05c:	e713a404 	addi	fp,fp,20112
   2e060:	e1c00217 	ldw	r7,8(fp)
   2e064:	9c09883a 	add	r4,r19,r16
   2e068:	22000117 	ldw	r8,4(r4)
   2e06c:	21c06326 	beq	r4,r7,2e1fc <_realloc_r+0x218>
   2e070:	017fff84 	movi	r5,-2
   2e074:	414a703a 	and	r5,r8,r5
   2e078:	214b883a 	add	r5,r4,r5
   2e07c:	29800117 	ldw	r6,4(r5)
   2e080:	3180004c 	andi	r6,r6,1
   2e084:	30003f26 	beq	r6,zero,2e184 <_realloc_r+0x1a0>
   2e088:	1080004c 	andi	r2,r2,1
   2e08c:	10008326 	beq	r2,zero,2e29c <_realloc_r+0x2b8>
   2e090:	900b883a 	mov	r5,r18
   2e094:	a009883a 	mov	r4,r20
   2e098:	002c32c0 	call	2c32c <_malloc_r>
   2e09c:	1025883a 	mov	r18,r2
   2e0a0:	10011e26 	beq	r2,zero,2e51c <_realloc_r+0x538>
   2e0a4:	a93fff17 	ldw	r4,-4(r21)
   2e0a8:	10fffe04 	addi	r3,r2,-8
   2e0ac:	00bfff84 	movi	r2,-2
   2e0b0:	2084703a 	and	r2,r4,r2
   2e0b4:	9885883a 	add	r2,r19,r2
   2e0b8:	1880ee26 	beq	r3,r2,2e474 <_realloc_r+0x490>
   2e0bc:	81bfff04 	addi	r6,r16,-4
   2e0c0:	00800904 	movi	r2,36
   2e0c4:	1180b836 	bltu	r2,r6,2e3a8 <_realloc_r+0x3c4>
   2e0c8:	00c004c4 	movi	r3,19
   2e0cc:	19809636 	bltu	r3,r6,2e328 <_realloc_r+0x344>
   2e0d0:	9005883a 	mov	r2,r18
   2e0d4:	a807883a 	mov	r3,r21
   2e0d8:	19000017 	ldw	r4,0(r3)
   2e0dc:	11000015 	stw	r4,0(r2)
   2e0e0:	19000117 	ldw	r4,4(r3)
   2e0e4:	11000115 	stw	r4,4(r2)
   2e0e8:	18c00217 	ldw	r3,8(r3)
   2e0ec:	10c00215 	stw	r3,8(r2)
   2e0f0:	a80b883a 	mov	r5,r21
   2e0f4:	a009883a 	mov	r4,r20
   2e0f8:	002b7400 	call	2b740 <_free_r>
   2e0fc:	a009883a 	mov	r4,r20
   2e100:	0031c500 	call	31c50 <__malloc_unlock>
   2e104:	9005883a 	mov	r2,r18
   2e108:	00001206 	br	2e154 <_realloc_r+0x170>
   2e10c:	00c00404 	movi	r3,16
   2e110:	1823883a 	mov	r17,r3
   2e114:	003fce06 	br	2e050 <__alt_data_end+0xfffeec50>
   2e118:	a825883a 	mov	r18,r21
   2e11c:	8445c83a 	sub	r2,r16,r17
   2e120:	00c003c4 	movi	r3,15
   2e124:	18802636 	bltu	r3,r2,2e1c0 <_realloc_r+0x1dc>
   2e128:	99800117 	ldw	r6,4(r19)
   2e12c:	9c07883a 	add	r3,r19,r16
   2e130:	3180004c 	andi	r6,r6,1
   2e134:	3420b03a 	or	r16,r6,r16
   2e138:	9c000115 	stw	r16,4(r19)
   2e13c:	18800117 	ldw	r2,4(r3)
   2e140:	10800054 	ori	r2,r2,1
   2e144:	18800115 	stw	r2,4(r3)
   2e148:	a009883a 	mov	r4,r20
   2e14c:	0031c500 	call	31c50 <__malloc_unlock>
   2e150:	9005883a 	mov	r2,r18
   2e154:	dfc00917 	ldw	ra,36(sp)
   2e158:	df000817 	ldw	fp,32(sp)
   2e15c:	ddc00717 	ldw	r23,28(sp)
   2e160:	dd800617 	ldw	r22,24(sp)
   2e164:	dd400517 	ldw	r21,20(sp)
   2e168:	dd000417 	ldw	r20,16(sp)
   2e16c:	dcc00317 	ldw	r19,12(sp)
   2e170:	dc800217 	ldw	r18,8(sp)
   2e174:	dc400117 	ldw	r17,4(sp)
   2e178:	dc000017 	ldw	r16,0(sp)
   2e17c:	dec00a04 	addi	sp,sp,40
   2e180:	f800283a 	ret
   2e184:	017fff04 	movi	r5,-4
   2e188:	414a703a 	and	r5,r8,r5
   2e18c:	814d883a 	add	r6,r16,r5
   2e190:	30c01f16 	blt	r6,r3,2e210 <_realloc_r+0x22c>
   2e194:	20800317 	ldw	r2,12(r4)
   2e198:	20c00217 	ldw	r3,8(r4)
   2e19c:	a825883a 	mov	r18,r21
   2e1a0:	3021883a 	mov	r16,r6
   2e1a4:	18800315 	stw	r2,12(r3)
   2e1a8:	10c00215 	stw	r3,8(r2)
   2e1ac:	003fdb06 	br	2e11c <__alt_data_end+0xfffeed1c>
   2e1b0:	00800304 	movi	r2,12
   2e1b4:	a0800015 	stw	r2,0(r20)
   2e1b8:	0005883a 	mov	r2,zero
   2e1bc:	003fe506 	br	2e154 <__alt_data_end+0xfffeed54>
   2e1c0:	98c00117 	ldw	r3,4(r19)
   2e1c4:	9c4b883a 	add	r5,r19,r17
   2e1c8:	11000054 	ori	r4,r2,1
   2e1cc:	18c0004c 	andi	r3,r3,1
   2e1d0:	1c62b03a 	or	r17,r3,r17
   2e1d4:	9c400115 	stw	r17,4(r19)
   2e1d8:	29000115 	stw	r4,4(r5)
   2e1dc:	2885883a 	add	r2,r5,r2
   2e1e0:	10c00117 	ldw	r3,4(r2)
   2e1e4:	29400204 	addi	r5,r5,8
   2e1e8:	a009883a 	mov	r4,r20
   2e1ec:	18c00054 	ori	r3,r3,1
   2e1f0:	10c00115 	stw	r3,4(r2)
   2e1f4:	002b7400 	call	2b740 <_free_r>
   2e1f8:	003fd306 	br	2e148 <__alt_data_end+0xfffeed48>
   2e1fc:	017fff04 	movi	r5,-4
   2e200:	414a703a 	and	r5,r8,r5
   2e204:	89800404 	addi	r6,r17,16
   2e208:	8151883a 	add	r8,r16,r5
   2e20c:	4180590e 	bge	r8,r6,2e374 <_realloc_r+0x390>
   2e210:	1080004c 	andi	r2,r2,1
   2e214:	103f9e1e 	bne	r2,zero,2e090 <__alt_data_end+0xfffeec90>
   2e218:	adbffe17 	ldw	r22,-8(r21)
   2e21c:	00bfff04 	movi	r2,-4
   2e220:	9dadc83a 	sub	r22,r19,r22
   2e224:	b1800117 	ldw	r6,4(r22)
   2e228:	3084703a 	and	r2,r6,r2
   2e22c:	20002026 	beq	r4,zero,2e2b0 <_realloc_r+0x2cc>
   2e230:	80af883a 	add	r23,r16,r2
   2e234:	b96f883a 	add	r23,r23,r5
   2e238:	21c05f26 	beq	r4,r7,2e3b8 <_realloc_r+0x3d4>
   2e23c:	b8c01c16 	blt	r23,r3,2e2b0 <_realloc_r+0x2cc>
   2e240:	20800317 	ldw	r2,12(r4)
   2e244:	20c00217 	ldw	r3,8(r4)
   2e248:	81bfff04 	addi	r6,r16,-4
   2e24c:	01000904 	movi	r4,36
   2e250:	18800315 	stw	r2,12(r3)
   2e254:	10c00215 	stw	r3,8(r2)
   2e258:	b0c00217 	ldw	r3,8(r22)
   2e25c:	b0800317 	ldw	r2,12(r22)
   2e260:	b4800204 	addi	r18,r22,8
   2e264:	18800315 	stw	r2,12(r3)
   2e268:	10c00215 	stw	r3,8(r2)
   2e26c:	21801b36 	bltu	r4,r6,2e2dc <_realloc_r+0x2f8>
   2e270:	008004c4 	movi	r2,19
   2e274:	1180352e 	bgeu	r2,r6,2e34c <_realloc_r+0x368>
   2e278:	a8800017 	ldw	r2,0(r21)
   2e27c:	b0800215 	stw	r2,8(r22)
   2e280:	a8800117 	ldw	r2,4(r21)
   2e284:	b0800315 	stw	r2,12(r22)
   2e288:	008006c4 	movi	r2,27
   2e28c:	11807f36 	bltu	r2,r6,2e48c <_realloc_r+0x4a8>
   2e290:	b0800404 	addi	r2,r22,16
   2e294:	ad400204 	addi	r21,r21,8
   2e298:	00002d06 	br	2e350 <_realloc_r+0x36c>
   2e29c:	adbffe17 	ldw	r22,-8(r21)
   2e2a0:	00bfff04 	movi	r2,-4
   2e2a4:	9dadc83a 	sub	r22,r19,r22
   2e2a8:	b1000117 	ldw	r4,4(r22)
   2e2ac:	2084703a 	and	r2,r4,r2
   2e2b0:	b03f7726 	beq	r22,zero,2e090 <__alt_data_end+0xfffeec90>
   2e2b4:	80af883a 	add	r23,r16,r2
   2e2b8:	b8ff7516 	blt	r23,r3,2e090 <__alt_data_end+0xfffeec90>
   2e2bc:	b0800317 	ldw	r2,12(r22)
   2e2c0:	b0c00217 	ldw	r3,8(r22)
   2e2c4:	81bfff04 	addi	r6,r16,-4
   2e2c8:	01000904 	movi	r4,36
   2e2cc:	18800315 	stw	r2,12(r3)
   2e2d0:	10c00215 	stw	r3,8(r2)
   2e2d4:	b4800204 	addi	r18,r22,8
   2e2d8:	21bfe52e 	bgeu	r4,r6,2e270 <__alt_data_end+0xfffeee70>
   2e2dc:	a80b883a 	mov	r5,r21
   2e2e0:	9009883a 	mov	r4,r18
   2e2e4:	002cd640 	call	2cd64 <memmove>
   2e2e8:	b821883a 	mov	r16,r23
   2e2ec:	b027883a 	mov	r19,r22
   2e2f0:	003f8a06 	br	2e11c <__alt_data_end+0xfffeed1c>
   2e2f4:	300b883a 	mov	r5,r6
   2e2f8:	dfc00917 	ldw	ra,36(sp)
   2e2fc:	df000817 	ldw	fp,32(sp)
   2e300:	ddc00717 	ldw	r23,28(sp)
   2e304:	dd800617 	ldw	r22,24(sp)
   2e308:	dd400517 	ldw	r21,20(sp)
   2e30c:	dd000417 	ldw	r20,16(sp)
   2e310:	dcc00317 	ldw	r19,12(sp)
   2e314:	dc800217 	ldw	r18,8(sp)
   2e318:	dc400117 	ldw	r17,4(sp)
   2e31c:	dc000017 	ldw	r16,0(sp)
   2e320:	dec00a04 	addi	sp,sp,40
   2e324:	002c32c1 	jmpi	2c32c <_malloc_r>
   2e328:	a8c00017 	ldw	r3,0(r21)
   2e32c:	90c00015 	stw	r3,0(r18)
   2e330:	a8c00117 	ldw	r3,4(r21)
   2e334:	90c00115 	stw	r3,4(r18)
   2e338:	00c006c4 	movi	r3,27
   2e33c:	19804536 	bltu	r3,r6,2e454 <_realloc_r+0x470>
   2e340:	90800204 	addi	r2,r18,8
   2e344:	a8c00204 	addi	r3,r21,8
   2e348:	003f6306 	br	2e0d8 <__alt_data_end+0xfffeecd8>
   2e34c:	9005883a 	mov	r2,r18
   2e350:	a8c00017 	ldw	r3,0(r21)
   2e354:	b821883a 	mov	r16,r23
   2e358:	b027883a 	mov	r19,r22
   2e35c:	10c00015 	stw	r3,0(r2)
   2e360:	a8c00117 	ldw	r3,4(r21)
   2e364:	10c00115 	stw	r3,4(r2)
   2e368:	a8c00217 	ldw	r3,8(r21)
   2e36c:	10c00215 	stw	r3,8(r2)
   2e370:	003f6a06 	br	2e11c <__alt_data_end+0xfffeed1c>
   2e374:	9c67883a 	add	r19,r19,r17
   2e378:	4445c83a 	sub	r2,r8,r17
   2e37c:	e4c00215 	stw	r19,8(fp)
   2e380:	10800054 	ori	r2,r2,1
   2e384:	98800115 	stw	r2,4(r19)
   2e388:	a8bfff17 	ldw	r2,-4(r21)
   2e38c:	a009883a 	mov	r4,r20
   2e390:	1080004c 	andi	r2,r2,1
   2e394:	1462b03a 	or	r17,r2,r17
   2e398:	ac7fff15 	stw	r17,-4(r21)
   2e39c:	0031c500 	call	31c50 <__malloc_unlock>
   2e3a0:	a805883a 	mov	r2,r21
   2e3a4:	003f6b06 	br	2e154 <__alt_data_end+0xfffeed54>
   2e3a8:	a80b883a 	mov	r5,r21
   2e3ac:	9009883a 	mov	r4,r18
   2e3b0:	002cd640 	call	2cd64 <memmove>
   2e3b4:	003f4e06 	br	2e0f0 <__alt_data_end+0xfffeecf0>
   2e3b8:	89000404 	addi	r4,r17,16
   2e3bc:	b93fbc16 	blt	r23,r4,2e2b0 <__alt_data_end+0xfffeeeb0>
   2e3c0:	b0800317 	ldw	r2,12(r22)
   2e3c4:	b0c00217 	ldw	r3,8(r22)
   2e3c8:	81bfff04 	addi	r6,r16,-4
   2e3cc:	01000904 	movi	r4,36
   2e3d0:	18800315 	stw	r2,12(r3)
   2e3d4:	10c00215 	stw	r3,8(r2)
   2e3d8:	b4800204 	addi	r18,r22,8
   2e3dc:	21804336 	bltu	r4,r6,2e4ec <_realloc_r+0x508>
   2e3e0:	008004c4 	movi	r2,19
   2e3e4:	11803f2e 	bgeu	r2,r6,2e4e4 <_realloc_r+0x500>
   2e3e8:	a8800017 	ldw	r2,0(r21)
   2e3ec:	b0800215 	stw	r2,8(r22)
   2e3f0:	a8800117 	ldw	r2,4(r21)
   2e3f4:	b0800315 	stw	r2,12(r22)
   2e3f8:	008006c4 	movi	r2,27
   2e3fc:	11803f36 	bltu	r2,r6,2e4fc <_realloc_r+0x518>
   2e400:	b0800404 	addi	r2,r22,16
   2e404:	ad400204 	addi	r21,r21,8
   2e408:	a8c00017 	ldw	r3,0(r21)
   2e40c:	10c00015 	stw	r3,0(r2)
   2e410:	a8c00117 	ldw	r3,4(r21)
   2e414:	10c00115 	stw	r3,4(r2)
   2e418:	a8c00217 	ldw	r3,8(r21)
   2e41c:	10c00215 	stw	r3,8(r2)
   2e420:	b447883a 	add	r3,r22,r17
   2e424:	bc45c83a 	sub	r2,r23,r17
   2e428:	e0c00215 	stw	r3,8(fp)
   2e42c:	10800054 	ori	r2,r2,1
   2e430:	18800115 	stw	r2,4(r3)
   2e434:	b0800117 	ldw	r2,4(r22)
   2e438:	a009883a 	mov	r4,r20
   2e43c:	1080004c 	andi	r2,r2,1
   2e440:	1462b03a 	or	r17,r2,r17
   2e444:	b4400115 	stw	r17,4(r22)
   2e448:	0031c500 	call	31c50 <__malloc_unlock>
   2e44c:	9005883a 	mov	r2,r18
   2e450:	003f4006 	br	2e154 <__alt_data_end+0xfffeed54>
   2e454:	a8c00217 	ldw	r3,8(r21)
   2e458:	90c00215 	stw	r3,8(r18)
   2e45c:	a8c00317 	ldw	r3,12(r21)
   2e460:	90c00315 	stw	r3,12(r18)
   2e464:	30801126 	beq	r6,r2,2e4ac <_realloc_r+0x4c8>
   2e468:	90800404 	addi	r2,r18,16
   2e46c:	a8c00404 	addi	r3,r21,16
   2e470:	003f1906 	br	2e0d8 <__alt_data_end+0xfffeecd8>
   2e474:	90ffff17 	ldw	r3,-4(r18)
   2e478:	00bfff04 	movi	r2,-4
   2e47c:	a825883a 	mov	r18,r21
   2e480:	1884703a 	and	r2,r3,r2
   2e484:	80a1883a 	add	r16,r16,r2
   2e488:	003f2406 	br	2e11c <__alt_data_end+0xfffeed1c>
   2e48c:	a8800217 	ldw	r2,8(r21)
   2e490:	b0800415 	stw	r2,16(r22)
   2e494:	a8800317 	ldw	r2,12(r21)
   2e498:	b0800515 	stw	r2,20(r22)
   2e49c:	31000a26 	beq	r6,r4,2e4c8 <_realloc_r+0x4e4>
   2e4a0:	b0800604 	addi	r2,r22,24
   2e4a4:	ad400404 	addi	r21,r21,16
   2e4a8:	003fa906 	br	2e350 <__alt_data_end+0xfffeef50>
   2e4ac:	a9000417 	ldw	r4,16(r21)
   2e4b0:	90800604 	addi	r2,r18,24
   2e4b4:	a8c00604 	addi	r3,r21,24
   2e4b8:	91000415 	stw	r4,16(r18)
   2e4bc:	a9000517 	ldw	r4,20(r21)
   2e4c0:	91000515 	stw	r4,20(r18)
   2e4c4:	003f0406 	br	2e0d8 <__alt_data_end+0xfffeecd8>
   2e4c8:	a8c00417 	ldw	r3,16(r21)
   2e4cc:	ad400604 	addi	r21,r21,24
   2e4d0:	b0800804 	addi	r2,r22,32
   2e4d4:	b0c00615 	stw	r3,24(r22)
   2e4d8:	a8ffff17 	ldw	r3,-4(r21)
   2e4dc:	b0c00715 	stw	r3,28(r22)
   2e4e0:	003f9b06 	br	2e350 <__alt_data_end+0xfffeef50>
   2e4e4:	9005883a 	mov	r2,r18
   2e4e8:	003fc706 	br	2e408 <__alt_data_end+0xfffef008>
   2e4ec:	a80b883a 	mov	r5,r21
   2e4f0:	9009883a 	mov	r4,r18
   2e4f4:	002cd640 	call	2cd64 <memmove>
   2e4f8:	003fc906 	br	2e420 <__alt_data_end+0xfffef020>
   2e4fc:	a8800217 	ldw	r2,8(r21)
   2e500:	b0800415 	stw	r2,16(r22)
   2e504:	a8800317 	ldw	r2,12(r21)
   2e508:	b0800515 	stw	r2,20(r22)
   2e50c:	31000726 	beq	r6,r4,2e52c <_realloc_r+0x548>
   2e510:	b0800604 	addi	r2,r22,24
   2e514:	ad400404 	addi	r21,r21,16
   2e518:	003fbb06 	br	2e408 <__alt_data_end+0xfffef008>
   2e51c:	a009883a 	mov	r4,r20
   2e520:	0031c500 	call	31c50 <__malloc_unlock>
   2e524:	0005883a 	mov	r2,zero
   2e528:	003f0a06 	br	2e154 <__alt_data_end+0xfffeed54>
   2e52c:	a8c00417 	ldw	r3,16(r21)
   2e530:	ad400604 	addi	r21,r21,24
   2e534:	b0800804 	addi	r2,r22,32
   2e538:	b0c00615 	stw	r3,24(r22)
   2e53c:	a8ffff17 	ldw	r3,-4(r21)
   2e540:	b0c00715 	stw	r3,28(r22)
   2e544:	003fb006 	br	2e408 <__alt_data_end+0xfffef008>

0002e548 <__fpclassifyd>:
   2e548:	00a00034 	movhi	r2,32768
   2e54c:	10bfffc4 	addi	r2,r2,-1
   2e550:	2884703a 	and	r2,r5,r2
   2e554:	10000726 	beq	r2,zero,2e574 <__fpclassifyd+0x2c>
   2e558:	00fffc34 	movhi	r3,65520
   2e55c:	019ff834 	movhi	r6,32736
   2e560:	28c7883a 	add	r3,r5,r3
   2e564:	31bfffc4 	addi	r6,r6,-1
   2e568:	30c00536 	bltu	r6,r3,2e580 <__fpclassifyd+0x38>
   2e56c:	00800104 	movi	r2,4
   2e570:	f800283a 	ret
   2e574:	2000021e 	bne	r4,zero,2e580 <__fpclassifyd+0x38>
   2e578:	00800084 	movi	r2,2
   2e57c:	f800283a 	ret
   2e580:	00dffc34 	movhi	r3,32752
   2e584:	019ff834 	movhi	r6,32736
   2e588:	28cb883a 	add	r5,r5,r3
   2e58c:	31bfffc4 	addi	r6,r6,-1
   2e590:	317ff62e 	bgeu	r6,r5,2e56c <__alt_data_end+0xfffef16c>
   2e594:	01400434 	movhi	r5,16
   2e598:	297fffc4 	addi	r5,r5,-1
   2e59c:	28800236 	bltu	r5,r2,2e5a8 <__fpclassifyd+0x60>
   2e5a0:	008000c4 	movi	r2,3
   2e5a4:	f800283a 	ret
   2e5a8:	10c00226 	beq	r2,r3,2e5b4 <__fpclassifyd+0x6c>
   2e5ac:	0005883a 	mov	r2,zero
   2e5b0:	f800283a 	ret
   2e5b4:	2005003a 	cmpeq	r2,r4,zero
   2e5b8:	f800283a 	ret

0002e5bc <_sbrk_r>:
   2e5bc:	defffd04 	addi	sp,sp,-12
   2e5c0:	dc000015 	stw	r16,0(sp)
   2e5c4:	040000f4 	movhi	r16,3
   2e5c8:	dc400115 	stw	r17,4(sp)
   2e5cc:	841ffe04 	addi	r16,r16,32760
   2e5d0:	2023883a 	mov	r17,r4
   2e5d4:	2809883a 	mov	r4,r5
   2e5d8:	dfc00215 	stw	ra,8(sp)
   2e5dc:	80000015 	stw	zero,0(r16)
   2e5e0:	0031e100 	call	31e10 <sbrk>
   2e5e4:	00ffffc4 	movi	r3,-1
   2e5e8:	10c00526 	beq	r2,r3,2e600 <_sbrk_r+0x44>
   2e5ec:	dfc00217 	ldw	ra,8(sp)
   2e5f0:	dc400117 	ldw	r17,4(sp)
   2e5f4:	dc000017 	ldw	r16,0(sp)
   2e5f8:	dec00304 	addi	sp,sp,12
   2e5fc:	f800283a 	ret
   2e600:	80c00017 	ldw	r3,0(r16)
   2e604:	183ff926 	beq	r3,zero,2e5ec <__alt_data_end+0xfffef1ec>
   2e608:	88c00015 	stw	r3,0(r17)
   2e60c:	003ff706 	br	2e5ec <__alt_data_end+0xfffef1ec>

0002e610 <__sread>:
   2e610:	defffe04 	addi	sp,sp,-8
   2e614:	dc000015 	stw	r16,0(sp)
   2e618:	2821883a 	mov	r16,r5
   2e61c:	2940038f 	ldh	r5,14(r5)
   2e620:	dfc00115 	stw	ra,4(sp)
   2e624:	00304040 	call	30404 <_read_r>
   2e628:	10000716 	blt	r2,zero,2e648 <__sread+0x38>
   2e62c:	80c01417 	ldw	r3,80(r16)
   2e630:	1887883a 	add	r3,r3,r2
   2e634:	80c01415 	stw	r3,80(r16)
   2e638:	dfc00117 	ldw	ra,4(sp)
   2e63c:	dc000017 	ldw	r16,0(sp)
   2e640:	dec00204 	addi	sp,sp,8
   2e644:	f800283a 	ret
   2e648:	80c0030b 	ldhu	r3,12(r16)
   2e64c:	18fbffcc 	andi	r3,r3,61439
   2e650:	80c0030d 	sth	r3,12(r16)
   2e654:	dfc00117 	ldw	ra,4(sp)
   2e658:	dc000017 	ldw	r16,0(sp)
   2e65c:	dec00204 	addi	sp,sp,8
   2e660:	f800283a 	ret

0002e664 <__seofread>:
   2e664:	0005883a 	mov	r2,zero
   2e668:	f800283a 	ret

0002e66c <__swrite>:
   2e66c:	2880030b 	ldhu	r2,12(r5)
   2e670:	defffb04 	addi	sp,sp,-20
   2e674:	dcc00315 	stw	r19,12(sp)
   2e678:	dc800215 	stw	r18,8(sp)
   2e67c:	dc400115 	stw	r17,4(sp)
   2e680:	dc000015 	stw	r16,0(sp)
   2e684:	dfc00415 	stw	ra,16(sp)
   2e688:	10c0400c 	andi	r3,r2,256
   2e68c:	2821883a 	mov	r16,r5
   2e690:	2023883a 	mov	r17,r4
   2e694:	3025883a 	mov	r18,r6
   2e698:	3827883a 	mov	r19,r7
   2e69c:	18000526 	beq	r3,zero,2e6b4 <__swrite+0x48>
   2e6a0:	2940038f 	ldh	r5,14(r5)
   2e6a4:	01c00084 	movi	r7,2
   2e6a8:	000d883a 	mov	r6,zero
   2e6ac:	00303a40 	call	303a4 <_lseek_r>
   2e6b0:	8080030b 	ldhu	r2,12(r16)
   2e6b4:	8140038f 	ldh	r5,14(r16)
   2e6b8:	10bbffcc 	andi	r2,r2,61439
   2e6bc:	980f883a 	mov	r7,r19
   2e6c0:	900d883a 	mov	r6,r18
   2e6c4:	8809883a 	mov	r4,r17
   2e6c8:	8080030d 	sth	r2,12(r16)
   2e6cc:	dfc00417 	ldw	ra,16(sp)
   2e6d0:	dcc00317 	ldw	r19,12(sp)
   2e6d4:	dc800217 	ldw	r18,8(sp)
   2e6d8:	dc400117 	ldw	r17,4(sp)
   2e6dc:	dc000017 	ldw	r16,0(sp)
   2e6e0:	dec00504 	addi	sp,sp,20
   2e6e4:	002fe701 	jmpi	2fe70 <_write_r>

0002e6e8 <__sseek>:
   2e6e8:	defffe04 	addi	sp,sp,-8
   2e6ec:	dc000015 	stw	r16,0(sp)
   2e6f0:	2821883a 	mov	r16,r5
   2e6f4:	2940038f 	ldh	r5,14(r5)
   2e6f8:	dfc00115 	stw	ra,4(sp)
   2e6fc:	00303a40 	call	303a4 <_lseek_r>
   2e700:	00ffffc4 	movi	r3,-1
   2e704:	10c00826 	beq	r2,r3,2e728 <__sseek+0x40>
   2e708:	80c0030b 	ldhu	r3,12(r16)
   2e70c:	80801415 	stw	r2,80(r16)
   2e710:	18c40014 	ori	r3,r3,4096
   2e714:	80c0030d 	sth	r3,12(r16)
   2e718:	dfc00117 	ldw	ra,4(sp)
   2e71c:	dc000017 	ldw	r16,0(sp)
   2e720:	dec00204 	addi	sp,sp,8
   2e724:	f800283a 	ret
   2e728:	80c0030b 	ldhu	r3,12(r16)
   2e72c:	18fbffcc 	andi	r3,r3,61439
   2e730:	80c0030d 	sth	r3,12(r16)
   2e734:	dfc00117 	ldw	ra,4(sp)
   2e738:	dc000017 	ldw	r16,0(sp)
   2e73c:	dec00204 	addi	sp,sp,8
   2e740:	f800283a 	ret

0002e744 <__sclose>:
   2e744:	2940038f 	ldh	r5,14(r5)
   2e748:	002fed01 	jmpi	2fed0 <_close_r>

0002e74c <strcmp>:
   2e74c:	2144b03a 	or	r2,r4,r5
   2e750:	108000cc 	andi	r2,r2,3
   2e754:	1000171e 	bne	r2,zero,2e7b4 <strcmp+0x68>
   2e758:	20800017 	ldw	r2,0(r4)
   2e75c:	28c00017 	ldw	r3,0(r5)
   2e760:	10c0141e 	bne	r2,r3,2e7b4 <strcmp+0x68>
   2e764:	027fbff4 	movhi	r9,65279
   2e768:	4a7fbfc4 	addi	r9,r9,-257
   2e76c:	0086303a 	nor	r3,zero,r2
   2e770:	02202074 	movhi	r8,32897
   2e774:	1245883a 	add	r2,r2,r9
   2e778:	42202004 	addi	r8,r8,-32640
   2e77c:	10c4703a 	and	r2,r2,r3
   2e780:	1204703a 	and	r2,r2,r8
   2e784:	10000226 	beq	r2,zero,2e790 <strcmp+0x44>
   2e788:	00002306 	br	2e818 <strcmp+0xcc>
   2e78c:	1000221e 	bne	r2,zero,2e818 <strcmp+0xcc>
   2e790:	21000104 	addi	r4,r4,4
   2e794:	20c00017 	ldw	r3,0(r4)
   2e798:	29400104 	addi	r5,r5,4
   2e79c:	29800017 	ldw	r6,0(r5)
   2e7a0:	1a4f883a 	add	r7,r3,r9
   2e7a4:	00c4303a 	nor	r2,zero,r3
   2e7a8:	3884703a 	and	r2,r7,r2
   2e7ac:	1204703a 	and	r2,r2,r8
   2e7b0:	19bff626 	beq	r3,r6,2e78c <__alt_data_end+0xfffef38c>
   2e7b4:	20800003 	ldbu	r2,0(r4)
   2e7b8:	10c03fcc 	andi	r3,r2,255
   2e7bc:	18c0201c 	xori	r3,r3,128
   2e7c0:	18ffe004 	addi	r3,r3,-128
   2e7c4:	18000c26 	beq	r3,zero,2e7f8 <strcmp+0xac>
   2e7c8:	29800007 	ldb	r6,0(r5)
   2e7cc:	19800326 	beq	r3,r6,2e7dc <strcmp+0x90>
   2e7d0:	00001306 	br	2e820 <strcmp+0xd4>
   2e7d4:	29800007 	ldb	r6,0(r5)
   2e7d8:	11800b1e 	bne	r2,r6,2e808 <strcmp+0xbc>
   2e7dc:	21000044 	addi	r4,r4,1
   2e7e0:	20c00003 	ldbu	r3,0(r4)
   2e7e4:	29400044 	addi	r5,r5,1
   2e7e8:	18803fcc 	andi	r2,r3,255
   2e7ec:	1080201c 	xori	r2,r2,128
   2e7f0:	10bfe004 	addi	r2,r2,-128
   2e7f4:	103ff71e 	bne	r2,zero,2e7d4 <__alt_data_end+0xfffef3d4>
   2e7f8:	0007883a 	mov	r3,zero
   2e7fc:	28800003 	ldbu	r2,0(r5)
   2e800:	1885c83a 	sub	r2,r3,r2
   2e804:	f800283a 	ret
   2e808:	28800003 	ldbu	r2,0(r5)
   2e80c:	18c03fcc 	andi	r3,r3,255
   2e810:	1885c83a 	sub	r2,r3,r2
   2e814:	f800283a 	ret
   2e818:	0005883a 	mov	r2,zero
   2e81c:	f800283a 	ret
   2e820:	10c03fcc 	andi	r3,r2,255
   2e824:	003ff506 	br	2e7fc <__alt_data_end+0xfffef3fc>

0002e828 <__sprint_r.part.0>:
   2e828:	28801917 	ldw	r2,100(r5)
   2e82c:	defff604 	addi	sp,sp,-40
   2e830:	dd400515 	stw	r21,20(sp)
   2e834:	dfc00915 	stw	ra,36(sp)
   2e838:	df000815 	stw	fp,32(sp)
   2e83c:	ddc00715 	stw	r23,28(sp)
   2e840:	dd800615 	stw	r22,24(sp)
   2e844:	dd000415 	stw	r20,16(sp)
   2e848:	dcc00315 	stw	r19,12(sp)
   2e84c:	dc800215 	stw	r18,8(sp)
   2e850:	dc400115 	stw	r17,4(sp)
   2e854:	dc000015 	stw	r16,0(sp)
   2e858:	1088000c 	andi	r2,r2,8192
   2e85c:	302b883a 	mov	r21,r6
   2e860:	10002e26 	beq	r2,zero,2e91c <__sprint_r.part.0+0xf4>
   2e864:	30800217 	ldw	r2,8(r6)
   2e868:	35800017 	ldw	r22,0(r6)
   2e86c:	10002926 	beq	r2,zero,2e914 <__sprint_r.part.0+0xec>
   2e870:	2827883a 	mov	r19,r5
   2e874:	2029883a 	mov	r20,r4
   2e878:	b5c00104 	addi	r23,r22,4
   2e87c:	04bfffc4 	movi	r18,-1
   2e880:	bc400017 	ldw	r17,0(r23)
   2e884:	b4000017 	ldw	r16,0(r22)
   2e888:	0039883a 	mov	fp,zero
   2e88c:	8822d0ba 	srli	r17,r17,2
   2e890:	8800031e 	bne	r17,zero,2e8a0 <__sprint_r.part.0+0x78>
   2e894:	00001806 	br	2e8f8 <__sprint_r.part.0+0xd0>
   2e898:	84000104 	addi	r16,r16,4
   2e89c:	8f001526 	beq	r17,fp,2e8f4 <__sprint_r.part.0+0xcc>
   2e8a0:	81400017 	ldw	r5,0(r16)
   2e8a4:	980d883a 	mov	r6,r19
   2e8a8:	a009883a 	mov	r4,r20
   2e8ac:	00302500 	call	30250 <_fputwc_r>
   2e8b0:	e7000044 	addi	fp,fp,1
   2e8b4:	14bff81e 	bne	r2,r18,2e898 <__alt_data_end+0xfffef498>
   2e8b8:	9005883a 	mov	r2,r18
   2e8bc:	a8000215 	stw	zero,8(r21)
   2e8c0:	a8000115 	stw	zero,4(r21)
   2e8c4:	dfc00917 	ldw	ra,36(sp)
   2e8c8:	df000817 	ldw	fp,32(sp)
   2e8cc:	ddc00717 	ldw	r23,28(sp)
   2e8d0:	dd800617 	ldw	r22,24(sp)
   2e8d4:	dd400517 	ldw	r21,20(sp)
   2e8d8:	dd000417 	ldw	r20,16(sp)
   2e8dc:	dcc00317 	ldw	r19,12(sp)
   2e8e0:	dc800217 	ldw	r18,8(sp)
   2e8e4:	dc400117 	ldw	r17,4(sp)
   2e8e8:	dc000017 	ldw	r16,0(sp)
   2e8ec:	dec00a04 	addi	sp,sp,40
   2e8f0:	f800283a 	ret
   2e8f4:	a8800217 	ldw	r2,8(r21)
   2e8f8:	8c63883a 	add	r17,r17,r17
   2e8fc:	8c63883a 	add	r17,r17,r17
   2e900:	1445c83a 	sub	r2,r2,r17
   2e904:	a8800215 	stw	r2,8(r21)
   2e908:	b5800204 	addi	r22,r22,8
   2e90c:	bdc00204 	addi	r23,r23,8
   2e910:	103fdb1e 	bne	r2,zero,2e880 <__alt_data_end+0xfffef480>
   2e914:	0005883a 	mov	r2,zero
   2e918:	003fe806 	br	2e8bc <__alt_data_end+0xfffef4bc>
   2e91c:	002ba500 	call	2ba50 <__sfvwrite_r>
   2e920:	003fe606 	br	2e8bc <__alt_data_end+0xfffef4bc>

0002e924 <__sprint_r>:
   2e924:	30c00217 	ldw	r3,8(r6)
   2e928:	18000126 	beq	r3,zero,2e930 <__sprint_r+0xc>
   2e92c:	002e8281 	jmpi	2e828 <__sprint_r.part.0>
   2e930:	30000115 	stw	zero,4(r6)
   2e934:	0005883a 	mov	r2,zero
   2e938:	f800283a 	ret

0002e93c <___vfiprintf_internal_r>:
   2e93c:	deffc904 	addi	sp,sp,-220
   2e940:	df003515 	stw	fp,212(sp)
   2e944:	dd003115 	stw	r20,196(sp)
   2e948:	dfc03615 	stw	ra,216(sp)
   2e94c:	ddc03415 	stw	r23,208(sp)
   2e950:	dd803315 	stw	r22,204(sp)
   2e954:	dd403215 	stw	r21,200(sp)
   2e958:	dcc03015 	stw	r19,192(sp)
   2e95c:	dc802f15 	stw	r18,188(sp)
   2e960:	dc402e15 	stw	r17,184(sp)
   2e964:	dc002d15 	stw	r16,180(sp)
   2e968:	d9002015 	stw	r4,128(sp)
   2e96c:	d9c02215 	stw	r7,136(sp)
   2e970:	2829883a 	mov	r20,r5
   2e974:	3039883a 	mov	fp,r6
   2e978:	20000226 	beq	r4,zero,2e984 <___vfiprintf_internal_r+0x48>
   2e97c:	20800e17 	ldw	r2,56(r4)
   2e980:	1000cf26 	beq	r2,zero,2ecc0 <___vfiprintf_internal_r+0x384>
   2e984:	a080030b 	ldhu	r2,12(r20)
   2e988:	10c8000c 	andi	r3,r2,8192
   2e98c:	1800061e 	bne	r3,zero,2e9a8 <___vfiprintf_internal_r+0x6c>
   2e990:	a1001917 	ldw	r4,100(r20)
   2e994:	00f7ffc4 	movi	r3,-8193
   2e998:	10880014 	ori	r2,r2,8192
   2e99c:	20c6703a 	and	r3,r4,r3
   2e9a0:	a080030d 	sth	r2,12(r20)
   2e9a4:	a0c01915 	stw	r3,100(r20)
   2e9a8:	10c0020c 	andi	r3,r2,8
   2e9ac:	1800a926 	beq	r3,zero,2ec54 <___vfiprintf_internal_r+0x318>
   2e9b0:	a0c00417 	ldw	r3,16(r20)
   2e9b4:	1800a726 	beq	r3,zero,2ec54 <___vfiprintf_internal_r+0x318>
   2e9b8:	1080068c 	andi	r2,r2,26
   2e9bc:	00c00284 	movi	r3,10
   2e9c0:	10c0ac26 	beq	r2,r3,2ec74 <___vfiprintf_internal_r+0x338>
   2e9c4:	da801a04 	addi	r10,sp,104
   2e9c8:	da801e15 	stw	r10,120(sp)
   2e9cc:	d8801e17 	ldw	r2,120(sp)
   2e9d0:	da8019c4 	addi	r10,sp,103
   2e9d4:	058000f4 	movhi	r22,3
   2e9d8:	05c000f4 	movhi	r23,3
   2e9dc:	da801f15 	stw	r10,124(sp)
   2e9e0:	1295c83a 	sub	r10,r2,r10
   2e9e4:	b5926e04 	addi	r22,r22,18872
   2e9e8:	bdd26a04 	addi	r23,r23,18856
   2e9ec:	dec01a15 	stw	sp,104(sp)
   2e9f0:	d8001c15 	stw	zero,112(sp)
   2e9f4:	d8001b15 	stw	zero,108(sp)
   2e9f8:	d8002615 	stw	zero,152(sp)
   2e9fc:	d8002315 	stw	zero,140(sp)
   2ea00:	da802715 	stw	r10,156(sp)
   2ea04:	d811883a 	mov	r8,sp
   2ea08:	dd002115 	stw	r20,132(sp)
   2ea0c:	e021883a 	mov	r16,fp
   2ea10:	80800007 	ldb	r2,0(r16)
   2ea14:	1003ea26 	beq	r2,zero,2f9c0 <___vfiprintf_internal_r+0x1084>
   2ea18:	00c00944 	movi	r3,37
   2ea1c:	8025883a 	mov	r18,r16
   2ea20:	10c0021e 	bne	r2,r3,2ea2c <___vfiprintf_internal_r+0xf0>
   2ea24:	00001606 	br	2ea80 <___vfiprintf_internal_r+0x144>
   2ea28:	10c00326 	beq	r2,r3,2ea38 <___vfiprintf_internal_r+0xfc>
   2ea2c:	94800044 	addi	r18,r18,1
   2ea30:	90800007 	ldb	r2,0(r18)
   2ea34:	103ffc1e 	bne	r2,zero,2ea28 <__alt_data_end+0xfffef628>
   2ea38:	9423c83a 	sub	r17,r18,r16
   2ea3c:	88001026 	beq	r17,zero,2ea80 <___vfiprintf_internal_r+0x144>
   2ea40:	d8c01c17 	ldw	r3,112(sp)
   2ea44:	d8801b17 	ldw	r2,108(sp)
   2ea48:	44000015 	stw	r16,0(r8)
   2ea4c:	88c7883a 	add	r3,r17,r3
   2ea50:	10800044 	addi	r2,r2,1
   2ea54:	44400115 	stw	r17,4(r8)
   2ea58:	d8c01c15 	stw	r3,112(sp)
   2ea5c:	d8801b15 	stw	r2,108(sp)
   2ea60:	010001c4 	movi	r4,7
   2ea64:	2080760e 	bge	r4,r2,2ec40 <___vfiprintf_internal_r+0x304>
   2ea68:	1803821e 	bne	r3,zero,2f874 <___vfiprintf_internal_r+0xf38>
   2ea6c:	da802317 	ldw	r10,140(sp)
   2ea70:	d8001b15 	stw	zero,108(sp)
   2ea74:	d811883a 	mov	r8,sp
   2ea78:	5455883a 	add	r10,r10,r17
   2ea7c:	da802315 	stw	r10,140(sp)
   2ea80:	90800007 	ldb	r2,0(r18)
   2ea84:	10044626 	beq	r2,zero,2fba0 <___vfiprintf_internal_r+0x1264>
   2ea88:	90c00047 	ldb	r3,1(r18)
   2ea8c:	94000044 	addi	r16,r18,1
   2ea90:	d8001d85 	stb	zero,118(sp)
   2ea94:	0009883a 	mov	r4,zero
   2ea98:	000f883a 	mov	r7,zero
   2ea9c:	027fffc4 	movi	r9,-1
   2eaa0:	0023883a 	mov	r17,zero
   2eaa4:	0029883a 	mov	r20,zero
   2eaa8:	01401604 	movi	r5,88
   2eaac:	01800244 	movi	r6,9
   2eab0:	03400a84 	movi	r13,42
   2eab4:	03001b04 	movi	r12,108
   2eab8:	84000044 	addi	r16,r16,1
   2eabc:	18bff804 	addi	r2,r3,-32
   2eac0:	28827336 	bltu	r5,r2,2f490 <___vfiprintf_internal_r+0xb54>
   2eac4:	100490ba 	slli	r2,r2,2
   2eac8:	028000f4 	movhi	r10,3
   2eacc:	52bab704 	addi	r10,r10,-5412
   2ead0:	1285883a 	add	r2,r2,r10
   2ead4:	10800017 	ldw	r2,0(r2)
   2ead8:	1000683a 	jmp	r2
   2eadc:	0002f1c4 	movi	zero,3015
   2eae0:	0002f490 	cmplti	zero,zero,3026
   2eae4:	0002f490 	cmplti	zero,zero,3026
   2eae8:	0002f1e4 	muli	zero,zero,3015
   2eaec:	0002f490 	cmplti	zero,zero,3026
   2eaf0:	0002f490 	cmplti	zero,zero,3026
   2eaf4:	0002f490 	cmplti	zero,zero,3026
   2eaf8:	0002f490 	cmplti	zero,zero,3026
   2eafc:	0002f490 	cmplti	zero,zero,3026
   2eb00:	0002f490 	cmplti	zero,zero,3026
   2eb04:	0002f3cc 	andi	zero,zero,3023
   2eb08:	0002f3e8 	cmpgeui	zero,zero,3023
   2eb0c:	0002f490 	cmplti	zero,zero,3026
   2eb10:	0002ecd0 	cmplti	zero,zero,2995
   2eb14:	0002f3f8 	rdprs	zero,zero,3023
   2eb18:	0002f490 	cmplti	zero,zero,3026
   2eb1c:	0002f1f0 	cmpltui	zero,zero,3015
   2eb20:	0002f1fc 	xorhi	zero,zero,3015
   2eb24:	0002f1fc 	xorhi	zero,zero,3015
   2eb28:	0002f1fc 	xorhi	zero,zero,3015
   2eb2c:	0002f1fc 	xorhi	zero,zero,3015
   2eb30:	0002f1fc 	xorhi	zero,zero,3015
   2eb34:	0002f1fc 	xorhi	zero,zero,3015
   2eb38:	0002f1fc 	xorhi	zero,zero,3015
   2eb3c:	0002f1fc 	xorhi	zero,zero,3015
   2eb40:	0002f1fc 	xorhi	zero,zero,3015
   2eb44:	0002f490 	cmplti	zero,zero,3026
   2eb48:	0002f490 	cmplti	zero,zero,3026
   2eb4c:	0002f490 	cmplti	zero,zero,3026
   2eb50:	0002f490 	cmplti	zero,zero,3026
   2eb54:	0002f490 	cmplti	zero,zero,3026
   2eb58:	0002f490 	cmplti	zero,zero,3026
   2eb5c:	0002f490 	cmplti	zero,zero,3026
   2eb60:	0002f490 	cmplti	zero,zero,3026
   2eb64:	0002f490 	cmplti	zero,zero,3026
   2eb68:	0002f490 	cmplti	zero,zero,3026
   2eb6c:	0002f228 	cmpgeui	zero,zero,3016
   2eb70:	0002f490 	cmplti	zero,zero,3026
   2eb74:	0002f490 	cmplti	zero,zero,3026
   2eb78:	0002f490 	cmplti	zero,zero,3026
   2eb7c:	0002f490 	cmplti	zero,zero,3026
   2eb80:	0002f490 	cmplti	zero,zero,3026
   2eb84:	0002f490 	cmplti	zero,zero,3026
   2eb88:	0002f490 	cmplti	zero,zero,3026
   2eb8c:	0002f490 	cmplti	zero,zero,3026
   2eb90:	0002f490 	cmplti	zero,zero,3026
   2eb94:	0002f490 	cmplti	zero,zero,3026
   2eb98:	0002f260 	cmpeqi	zero,zero,3017
   2eb9c:	0002f490 	cmplti	zero,zero,3026
   2eba0:	0002f490 	cmplti	zero,zero,3026
   2eba4:	0002f490 	cmplti	zero,zero,3026
   2eba8:	0002f490 	cmplti	zero,zero,3026
   2ebac:	0002f490 	cmplti	zero,zero,3026
   2ebb0:	0002f2b8 	rdprs	zero,zero,3018
   2ebb4:	0002f490 	cmplti	zero,zero,3026
   2ebb8:	0002f490 	cmplti	zero,zero,3026
   2ebbc:	0002f328 	cmpgeui	zero,zero,3020
   2ebc0:	0002f490 	cmplti	zero,zero,3026
   2ebc4:	0002f490 	cmplti	zero,zero,3026
   2ebc8:	0002f490 	cmplti	zero,zero,3026
   2ebcc:	0002f490 	cmplti	zero,zero,3026
   2ebd0:	0002f490 	cmplti	zero,zero,3026
   2ebd4:	0002f490 	cmplti	zero,zero,3026
   2ebd8:	0002f490 	cmplti	zero,zero,3026
   2ebdc:	0002f490 	cmplti	zero,zero,3026
   2ebe0:	0002f490 	cmplti	zero,zero,3026
   2ebe4:	0002f490 	cmplti	zero,zero,3026
   2ebe8:	0002f0d4 	movui	zero,3011
   2ebec:	0002f100 	call	2f10 <__alt_mem_onchip_memory2-0x1d0f0>
   2ebf0:	0002f490 	cmplti	zero,zero,3026
   2ebf4:	0002f490 	cmplti	zero,zero,3026
   2ebf8:	0002f490 	cmplti	zero,zero,3026
   2ebfc:	0002f438 	rdprs	zero,zero,3024
   2ec00:	0002f100 	call	2f10 <__alt_mem_onchip_memory2-0x1d0f0>
   2ec04:	0002f490 	cmplti	zero,zero,3026
   2ec08:	0002f490 	cmplti	zero,zero,3026
   2ec0c:	0002ef94 	movui	zero,3006
   2ec10:	0002f490 	cmplti	zero,zero,3026
   2ec14:	0002efa4 	muli	zero,zero,3006
   2ec18:	0002efe0 	cmpeqi	zero,zero,3007
   2ec1c:	0002ecdc 	xori	zero,zero,2995
   2ec20:	0002ef88 	cmpgei	zero,zero,3006
   2ec24:	0002f490 	cmplti	zero,zero,3026
   2ec28:	0002f364 	muli	zero,zero,3021
   2ec2c:	0002f490 	cmplti	zero,zero,3026
   2ec30:	0002f3bc 	xorhi	zero,zero,3022
   2ec34:	0002f490 	cmplti	zero,zero,3026
   2ec38:	0002f490 	cmplti	zero,zero,3026
   2ec3c:	0002f080 	call	2f08 <__alt_mem_onchip_memory2-0x1d0f8>
   2ec40:	42000204 	addi	r8,r8,8
   2ec44:	da802317 	ldw	r10,140(sp)
   2ec48:	5455883a 	add	r10,r10,r17
   2ec4c:	da802315 	stw	r10,140(sp)
   2ec50:	003f8b06 	br	2ea80 <__alt_data_end+0xfffef680>
   2ec54:	d9002017 	ldw	r4,128(sp)
   2ec58:	a00b883a 	mov	r5,r20
   2ec5c:	00295f80 	call	295f8 <__swsetup_r>
   2ec60:	1003b11e 	bne	r2,zero,2fb28 <___vfiprintf_internal_r+0x11ec>
   2ec64:	a080030b 	ldhu	r2,12(r20)
   2ec68:	00c00284 	movi	r3,10
   2ec6c:	1080068c 	andi	r2,r2,26
   2ec70:	10ff541e 	bne	r2,r3,2e9c4 <__alt_data_end+0xfffef5c4>
   2ec74:	a080038f 	ldh	r2,14(r20)
   2ec78:	103f5216 	blt	r2,zero,2e9c4 <__alt_data_end+0xfffef5c4>
   2ec7c:	d9c02217 	ldw	r7,136(sp)
   2ec80:	d9002017 	ldw	r4,128(sp)
   2ec84:	e00d883a 	mov	r6,fp
   2ec88:	a00b883a 	mov	r5,r20
   2ec8c:	002fdb40 	call	2fdb4 <__sbprintf>
   2ec90:	dfc03617 	ldw	ra,216(sp)
   2ec94:	df003517 	ldw	fp,212(sp)
   2ec98:	ddc03417 	ldw	r23,208(sp)
   2ec9c:	dd803317 	ldw	r22,204(sp)
   2eca0:	dd403217 	ldw	r21,200(sp)
   2eca4:	dd003117 	ldw	r20,196(sp)
   2eca8:	dcc03017 	ldw	r19,192(sp)
   2ecac:	dc802f17 	ldw	r18,188(sp)
   2ecb0:	dc402e17 	ldw	r17,184(sp)
   2ecb4:	dc002d17 	ldw	r16,180(sp)
   2ecb8:	dec03704 	addi	sp,sp,220
   2ecbc:	f800283a 	ret
   2ecc0:	002b5cc0 	call	2b5cc <__sinit>
   2ecc4:	003f2f06 	br	2e984 <__alt_data_end+0xfffef584>
   2ecc8:	0463c83a 	sub	r17,zero,r17
   2eccc:	d8802215 	stw	r2,136(sp)
   2ecd0:	a5000114 	ori	r20,r20,4
   2ecd4:	80c00007 	ldb	r3,0(r16)
   2ecd8:	003f7706 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2ecdc:	00800c04 	movi	r2,48
   2ece0:	da802217 	ldw	r10,136(sp)
   2ece4:	d8801d05 	stb	r2,116(sp)
   2ece8:	00801e04 	movi	r2,120
   2ecec:	d8801d45 	stb	r2,117(sp)
   2ecf0:	d8001d85 	stb	zero,118(sp)
   2ecf4:	50c00104 	addi	r3,r10,4
   2ecf8:	54800017 	ldw	r18,0(r10)
   2ecfc:	0027883a 	mov	r19,zero
   2ed00:	a0800094 	ori	r2,r20,2
   2ed04:	48030b16 	blt	r9,zero,2f934 <___vfiprintf_internal_r+0xff8>
   2ed08:	00bfdfc4 	movi	r2,-129
   2ed0c:	a096703a 	and	r11,r20,r2
   2ed10:	d8c02215 	stw	r3,136(sp)
   2ed14:	5d000094 	ori	r20,r11,2
   2ed18:	90032b1e 	bne	r18,zero,2f9c8 <___vfiprintf_internal_r+0x108c>
   2ed1c:	008000f4 	movhi	r2,3
   2ed20:	10920904 	addi	r2,r2,18468
   2ed24:	d8802615 	stw	r2,152(sp)
   2ed28:	0039883a 	mov	fp,zero
   2ed2c:	48017b1e 	bne	r9,zero,2f31c <___vfiprintf_internal_r+0x9e0>
   2ed30:	0013883a 	mov	r9,zero
   2ed34:	0027883a 	mov	r19,zero
   2ed38:	dd401a04 	addi	r21,sp,104
   2ed3c:	4825883a 	mov	r18,r9
   2ed40:	4cc0010e 	bge	r9,r19,2ed48 <___vfiprintf_internal_r+0x40c>
   2ed44:	9825883a 	mov	r18,r19
   2ed48:	e7003fcc 	andi	fp,fp,255
   2ed4c:	e700201c 	xori	fp,fp,128
   2ed50:	e73fe004 	addi	fp,fp,-128
   2ed54:	e0000126 	beq	fp,zero,2ed5c <___vfiprintf_internal_r+0x420>
   2ed58:	94800044 	addi	r18,r18,1
   2ed5c:	a380008c 	andi	r14,r20,2
   2ed60:	70000126 	beq	r14,zero,2ed68 <___vfiprintf_internal_r+0x42c>
   2ed64:	94800084 	addi	r18,r18,2
   2ed68:	a700210c 	andi	fp,r20,132
   2ed6c:	e001df1e 	bne	fp,zero,2f4ec <___vfiprintf_internal_r+0xbb0>
   2ed70:	8c87c83a 	sub	r3,r17,r18
   2ed74:	00c1dd0e 	bge	zero,r3,2f4ec <___vfiprintf_internal_r+0xbb0>
   2ed78:	01c00404 	movi	r7,16
   2ed7c:	d8801c17 	ldw	r2,112(sp)
   2ed80:	38c3ad0e 	bge	r7,r3,2fc38 <___vfiprintf_internal_r+0x12fc>
   2ed84:	028000f4 	movhi	r10,3
   2ed88:	52926e04 	addi	r10,r10,18872
   2ed8c:	dc002915 	stw	r16,164(sp)
   2ed90:	d9801b17 	ldw	r6,108(sp)
   2ed94:	da802415 	stw	r10,144(sp)
   2ed98:	03c001c4 	movi	r15,7
   2ed9c:	da402515 	stw	r9,148(sp)
   2eda0:	db802815 	stw	r14,160(sp)
   2eda4:	1821883a 	mov	r16,r3
   2eda8:	00000506 	br	2edc0 <___vfiprintf_internal_r+0x484>
   2edac:	31400084 	addi	r5,r6,2
   2edb0:	42000204 	addi	r8,r8,8
   2edb4:	200d883a 	mov	r6,r4
   2edb8:	843ffc04 	addi	r16,r16,-16
   2edbc:	3c000d0e 	bge	r7,r16,2edf4 <___vfiprintf_internal_r+0x4b8>
   2edc0:	10800404 	addi	r2,r2,16
   2edc4:	31000044 	addi	r4,r6,1
   2edc8:	45800015 	stw	r22,0(r8)
   2edcc:	41c00115 	stw	r7,4(r8)
   2edd0:	d8801c15 	stw	r2,112(sp)
   2edd4:	d9001b15 	stw	r4,108(sp)
   2edd8:	793ff40e 	bge	r15,r4,2edac <__alt_data_end+0xfffef9ac>
   2eddc:	1001b51e 	bne	r2,zero,2f4b4 <___vfiprintf_internal_r+0xb78>
   2ede0:	843ffc04 	addi	r16,r16,-16
   2ede4:	000d883a 	mov	r6,zero
   2ede8:	01400044 	movi	r5,1
   2edec:	d811883a 	mov	r8,sp
   2edf0:	3c3ff316 	blt	r7,r16,2edc0 <__alt_data_end+0xfffef9c0>
   2edf4:	8007883a 	mov	r3,r16
   2edf8:	da402517 	ldw	r9,148(sp)
   2edfc:	db802817 	ldw	r14,160(sp)
   2ee00:	dc002917 	ldw	r16,164(sp)
   2ee04:	da802417 	ldw	r10,144(sp)
   2ee08:	1885883a 	add	r2,r3,r2
   2ee0c:	40c00115 	stw	r3,4(r8)
   2ee10:	42800015 	stw	r10,0(r8)
   2ee14:	d8801c15 	stw	r2,112(sp)
   2ee18:	d9401b15 	stw	r5,108(sp)
   2ee1c:	00c001c4 	movi	r3,7
   2ee20:	19426016 	blt	r3,r5,2f7a4 <___vfiprintf_internal_r+0xe68>
   2ee24:	d8c01d87 	ldb	r3,118(sp)
   2ee28:	42000204 	addi	r8,r8,8
   2ee2c:	29000044 	addi	r4,r5,1
   2ee30:	1801b31e 	bne	r3,zero,2f500 <___vfiprintf_internal_r+0xbc4>
   2ee34:	7001c026 	beq	r14,zero,2f538 <___vfiprintf_internal_r+0xbfc>
   2ee38:	d8c01d04 	addi	r3,sp,116
   2ee3c:	10800084 	addi	r2,r2,2
   2ee40:	40c00015 	stw	r3,0(r8)
   2ee44:	00c00084 	movi	r3,2
   2ee48:	40c00115 	stw	r3,4(r8)
   2ee4c:	d8801c15 	stw	r2,112(sp)
   2ee50:	d9001b15 	stw	r4,108(sp)
   2ee54:	00c001c4 	movi	r3,7
   2ee58:	1902650e 	bge	r3,r4,2f7f0 <___vfiprintf_internal_r+0xeb4>
   2ee5c:	10029a1e 	bne	r2,zero,2f8c8 <___vfiprintf_internal_r+0xf8c>
   2ee60:	00c02004 	movi	r3,128
   2ee64:	01000044 	movi	r4,1
   2ee68:	000b883a 	mov	r5,zero
   2ee6c:	d811883a 	mov	r8,sp
   2ee70:	e0c1b31e 	bne	fp,r3,2f540 <___vfiprintf_internal_r+0xc04>
   2ee74:	8cb9c83a 	sub	fp,r17,r18
   2ee78:	0701b10e 	bge	zero,fp,2f540 <___vfiprintf_internal_r+0xc04>
   2ee7c:	01c00404 	movi	r7,16
   2ee80:	3f03890e 	bge	r7,fp,2fca8 <___vfiprintf_internal_r+0x136c>
   2ee84:	00c000f4 	movhi	r3,3
   2ee88:	18d26a04 	addi	r3,r3,18856
   2ee8c:	d8c02415 	stw	r3,144(sp)
   2ee90:	8007883a 	mov	r3,r16
   2ee94:	034001c4 	movi	r13,7
   2ee98:	e021883a 	mov	r16,fp
   2ee9c:	da402515 	stw	r9,148(sp)
   2eea0:	1839883a 	mov	fp,r3
   2eea4:	00000506 	br	2eebc <___vfiprintf_internal_r+0x580>
   2eea8:	29800084 	addi	r6,r5,2
   2eeac:	42000204 	addi	r8,r8,8
   2eeb0:	180b883a 	mov	r5,r3
   2eeb4:	843ffc04 	addi	r16,r16,-16
   2eeb8:	3c000d0e 	bge	r7,r16,2eef0 <___vfiprintf_internal_r+0x5b4>
   2eebc:	10800404 	addi	r2,r2,16
   2eec0:	28c00044 	addi	r3,r5,1
   2eec4:	45c00015 	stw	r23,0(r8)
   2eec8:	41c00115 	stw	r7,4(r8)
   2eecc:	d8801c15 	stw	r2,112(sp)
   2eed0:	d8c01b15 	stw	r3,108(sp)
   2eed4:	68fff40e 	bge	r13,r3,2eea8 <__alt_data_end+0xfffefaa8>
   2eed8:	1002241e 	bne	r2,zero,2f76c <___vfiprintf_internal_r+0xe30>
   2eedc:	843ffc04 	addi	r16,r16,-16
   2eee0:	01800044 	movi	r6,1
   2eee4:	000b883a 	mov	r5,zero
   2eee8:	d811883a 	mov	r8,sp
   2eeec:	3c3ff316 	blt	r7,r16,2eebc <__alt_data_end+0xfffefabc>
   2eef0:	da402517 	ldw	r9,148(sp)
   2eef4:	e007883a 	mov	r3,fp
   2eef8:	8039883a 	mov	fp,r16
   2eefc:	1821883a 	mov	r16,r3
   2ef00:	d8c02417 	ldw	r3,144(sp)
   2ef04:	1705883a 	add	r2,r2,fp
   2ef08:	47000115 	stw	fp,4(r8)
   2ef0c:	40c00015 	stw	r3,0(r8)
   2ef10:	d8801c15 	stw	r2,112(sp)
   2ef14:	d9801b15 	stw	r6,108(sp)
   2ef18:	00c001c4 	movi	r3,7
   2ef1c:	19827616 	blt	r3,r6,2f8f8 <___vfiprintf_internal_r+0xfbc>
   2ef20:	4cf9c83a 	sub	fp,r9,r19
   2ef24:	42000204 	addi	r8,r8,8
   2ef28:	31000044 	addi	r4,r6,1
   2ef2c:	300b883a 	mov	r5,r6
   2ef30:	07018516 	blt	zero,fp,2f548 <___vfiprintf_internal_r+0xc0c>
   2ef34:	9885883a 	add	r2,r19,r2
   2ef38:	45400015 	stw	r21,0(r8)
   2ef3c:	44c00115 	stw	r19,4(r8)
   2ef40:	d8801c15 	stw	r2,112(sp)
   2ef44:	d9001b15 	stw	r4,108(sp)
   2ef48:	00c001c4 	movi	r3,7
   2ef4c:	1901dd0e 	bge	r3,r4,2f6c4 <___vfiprintf_internal_r+0xd88>
   2ef50:	1002401e 	bne	r2,zero,2f854 <___vfiprintf_internal_r+0xf18>
   2ef54:	d8001b15 	stw	zero,108(sp)
   2ef58:	a2c0010c 	andi	r11,r20,4
   2ef5c:	58000226 	beq	r11,zero,2ef68 <___vfiprintf_internal_r+0x62c>
   2ef60:	8ca7c83a 	sub	r19,r17,r18
   2ef64:	04c2f216 	blt	zero,r19,2fb30 <___vfiprintf_internal_r+0x11f4>
   2ef68:	8c80010e 	bge	r17,r18,2ef70 <___vfiprintf_internal_r+0x634>
   2ef6c:	9023883a 	mov	r17,r18
   2ef70:	da802317 	ldw	r10,140(sp)
   2ef74:	5455883a 	add	r10,r10,r17
   2ef78:	da802315 	stw	r10,140(sp)
   2ef7c:	d8001b15 	stw	zero,108(sp)
   2ef80:	d811883a 	mov	r8,sp
   2ef84:	003ea206 	br	2ea10 <__alt_data_end+0xfffef610>
   2ef88:	a5000814 	ori	r20,r20,32
   2ef8c:	80c00007 	ldb	r3,0(r16)
   2ef90:	003ec906 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2ef94:	80c00007 	ldb	r3,0(r16)
   2ef98:	1b030926 	beq	r3,r12,2fbc0 <___vfiprintf_internal_r+0x1284>
   2ef9c:	a5000414 	ori	r20,r20,16
   2efa0:	003ec506 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2efa4:	21003fcc 	andi	r4,r4,255
   2efa8:	20035e1e 	bne	r4,zero,2fd24 <___vfiprintf_internal_r+0x13e8>
   2efac:	a080080c 	andi	r2,r20,32
   2efb0:	1002a526 	beq	r2,zero,2fa48 <___vfiprintf_internal_r+0x110c>
   2efb4:	da802217 	ldw	r10,136(sp)
   2efb8:	50800017 	ldw	r2,0(r10)
   2efbc:	da802317 	ldw	r10,140(sp)
   2efc0:	5007d7fa 	srai	r3,r10,31
   2efc4:	da802217 	ldw	r10,136(sp)
   2efc8:	10c00115 	stw	r3,4(r2)
   2efcc:	52800104 	addi	r10,r10,4
   2efd0:	da802215 	stw	r10,136(sp)
   2efd4:	da802317 	ldw	r10,140(sp)
   2efd8:	12800015 	stw	r10,0(r2)
   2efdc:	003e8c06 	br	2ea10 <__alt_data_end+0xfffef610>
   2efe0:	21003fcc 	andi	r4,r4,255
   2efe4:	2003511e 	bne	r4,zero,2fd2c <___vfiprintf_internal_r+0x13f0>
   2efe8:	a080080c 	andi	r2,r20,32
   2efec:	1000a126 	beq	r2,zero,2f274 <___vfiprintf_internal_r+0x938>
   2eff0:	da802217 	ldw	r10,136(sp)
   2eff4:	d8001d85 	stb	zero,118(sp)
   2eff8:	50800204 	addi	r2,r10,8
   2effc:	54800017 	ldw	r18,0(r10)
   2f000:	54c00117 	ldw	r19,4(r10)
   2f004:	4802b416 	blt	r9,zero,2fad8 <___vfiprintf_internal_r+0x119c>
   2f008:	013fdfc4 	movi	r4,-129
   2f00c:	94c6b03a 	or	r3,r18,r19
   2f010:	d8802215 	stw	r2,136(sp)
   2f014:	a128703a 	and	r20,r20,r4
   2f018:	1800a226 	beq	r3,zero,2f2a4 <___vfiprintf_internal_r+0x968>
   2f01c:	0039883a 	mov	fp,zero
   2f020:	dd401a04 	addi	r21,sp,104
   2f024:	9006d0fa 	srli	r3,r18,3
   2f028:	9808977a 	slli	r4,r19,29
   2f02c:	9826d0fa 	srli	r19,r19,3
   2f030:	948001cc 	andi	r18,r18,7
   2f034:	90800c04 	addi	r2,r18,48
   2f038:	ad7fffc4 	addi	r21,r21,-1
   2f03c:	20e4b03a 	or	r18,r4,r3
   2f040:	a8800005 	stb	r2,0(r21)
   2f044:	94c6b03a 	or	r3,r18,r19
   2f048:	183ff61e 	bne	r3,zero,2f024 <__alt_data_end+0xfffefc24>
   2f04c:	a0c0004c 	andi	r3,r20,1
   2f050:	18005926 	beq	r3,zero,2f1b8 <___vfiprintf_internal_r+0x87c>
   2f054:	10803fcc 	andi	r2,r2,255
   2f058:	1080201c 	xori	r2,r2,128
   2f05c:	10bfe004 	addi	r2,r2,-128
   2f060:	00c00c04 	movi	r3,48
   2f064:	10c05426 	beq	r2,r3,2f1b8 <___vfiprintf_internal_r+0x87c>
   2f068:	da801e17 	ldw	r10,120(sp)
   2f06c:	a8bfffc4 	addi	r2,r21,-1
   2f070:	a8ffffc5 	stb	r3,-1(r21)
   2f074:	50a7c83a 	sub	r19,r10,r2
   2f078:	102b883a 	mov	r21,r2
   2f07c:	003f2f06 	br	2ed3c <__alt_data_end+0xfffef93c>
   2f080:	21003fcc 	andi	r4,r4,255
   2f084:	2003421e 	bne	r4,zero,2fd90 <___vfiprintf_internal_r+0x1454>
   2f088:	008000f4 	movhi	r2,3
   2f08c:	10920904 	addi	r2,r2,18468
   2f090:	d8802615 	stw	r2,152(sp)
   2f094:	a080080c 	andi	r2,r20,32
   2f098:	1000aa26 	beq	r2,zero,2f344 <___vfiprintf_internal_r+0xa08>
   2f09c:	da802217 	ldw	r10,136(sp)
   2f0a0:	54800017 	ldw	r18,0(r10)
   2f0a4:	54c00117 	ldw	r19,4(r10)
   2f0a8:	52800204 	addi	r10,r10,8
   2f0ac:	da802215 	stw	r10,136(sp)
   2f0b0:	a080004c 	andi	r2,r20,1
   2f0b4:	1001d226 	beq	r2,zero,2f800 <___vfiprintf_internal_r+0xec4>
   2f0b8:	94c4b03a 	or	r2,r18,r19
   2f0bc:	1002351e 	bne	r2,zero,2f994 <___vfiprintf_internal_r+0x1058>
   2f0c0:	d8001d85 	stb	zero,118(sp)
   2f0c4:	48022216 	blt	r9,zero,2f950 <___vfiprintf_internal_r+0x1014>
   2f0c8:	00bfdfc4 	movi	r2,-129
   2f0cc:	a0a8703a 	and	r20,r20,r2
   2f0d0:	003f1506 	br	2ed28 <__alt_data_end+0xfffef928>
   2f0d4:	da802217 	ldw	r10,136(sp)
   2f0d8:	04800044 	movi	r18,1
   2f0dc:	d8001d85 	stb	zero,118(sp)
   2f0e0:	50800017 	ldw	r2,0(r10)
   2f0e4:	52800104 	addi	r10,r10,4
   2f0e8:	da802215 	stw	r10,136(sp)
   2f0ec:	d8801005 	stb	r2,64(sp)
   2f0f0:	9027883a 	mov	r19,r18
   2f0f4:	dd401004 	addi	r21,sp,64
   2f0f8:	0013883a 	mov	r9,zero
   2f0fc:	003f1706 	br	2ed5c <__alt_data_end+0xfffef95c>
   2f100:	21003fcc 	andi	r4,r4,255
   2f104:	2003201e 	bne	r4,zero,2fd88 <___vfiprintf_internal_r+0x144c>
   2f108:	a080080c 	andi	r2,r20,32
   2f10c:	10004b26 	beq	r2,zero,2f23c <___vfiprintf_internal_r+0x900>
   2f110:	da802217 	ldw	r10,136(sp)
   2f114:	50800117 	ldw	r2,4(r10)
   2f118:	54800017 	ldw	r18,0(r10)
   2f11c:	52800204 	addi	r10,r10,8
   2f120:	da802215 	stw	r10,136(sp)
   2f124:	1027883a 	mov	r19,r2
   2f128:	10022c16 	blt	r2,zero,2f9dc <___vfiprintf_internal_r+0x10a0>
   2f12c:	df001d83 	ldbu	fp,118(sp)
   2f130:	48007216 	blt	r9,zero,2f2fc <___vfiprintf_internal_r+0x9c0>
   2f134:	00ffdfc4 	movi	r3,-129
   2f138:	94c4b03a 	or	r2,r18,r19
   2f13c:	a0e8703a 	and	r20,r20,r3
   2f140:	1000cc26 	beq	r2,zero,2f474 <___vfiprintf_internal_r+0xb38>
   2f144:	98021026 	beq	r19,zero,2f988 <___vfiprintf_internal_r+0x104c>
   2f148:	dc402415 	stw	r17,144(sp)
   2f14c:	dc002515 	stw	r16,148(sp)
   2f150:	9823883a 	mov	r17,r19
   2f154:	9021883a 	mov	r16,r18
   2f158:	dd401a04 	addi	r21,sp,104
   2f15c:	4825883a 	mov	r18,r9
   2f160:	4027883a 	mov	r19,r8
   2f164:	8009883a 	mov	r4,r16
   2f168:	880b883a 	mov	r5,r17
   2f16c:	01800284 	movi	r6,10
   2f170:	000f883a 	mov	r7,zero
   2f174:	0030d1c0 	call	30d1c <__umoddi3>
   2f178:	10800c04 	addi	r2,r2,48
   2f17c:	ad7fffc4 	addi	r21,r21,-1
   2f180:	8009883a 	mov	r4,r16
   2f184:	880b883a 	mov	r5,r17
   2f188:	a8800005 	stb	r2,0(r21)
   2f18c:	01800284 	movi	r6,10
   2f190:	000f883a 	mov	r7,zero
   2f194:	00307a40 	call	307a4 <__udivdi3>
   2f198:	1021883a 	mov	r16,r2
   2f19c:	10c4b03a 	or	r2,r2,r3
   2f1a0:	1823883a 	mov	r17,r3
   2f1a4:	103fef1e 	bne	r2,zero,2f164 <__alt_data_end+0xfffefd64>
   2f1a8:	dc402417 	ldw	r17,144(sp)
   2f1ac:	dc002517 	ldw	r16,148(sp)
   2f1b0:	9013883a 	mov	r9,r18
   2f1b4:	9811883a 	mov	r8,r19
   2f1b8:	da801e17 	ldw	r10,120(sp)
   2f1bc:	5567c83a 	sub	r19,r10,r21
   2f1c0:	003ede06 	br	2ed3c <__alt_data_end+0xfffef93c>
   2f1c4:	38803fcc 	andi	r2,r7,255
   2f1c8:	1080201c 	xori	r2,r2,128
   2f1cc:	10bfe004 	addi	r2,r2,-128
   2f1d0:	1002371e 	bne	r2,zero,2fab0 <___vfiprintf_internal_r+0x1174>
   2f1d4:	01000044 	movi	r4,1
   2f1d8:	01c00804 	movi	r7,32
   2f1dc:	80c00007 	ldb	r3,0(r16)
   2f1e0:	003e3506 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2f1e4:	a5000054 	ori	r20,r20,1
   2f1e8:	80c00007 	ldb	r3,0(r16)
   2f1ec:	003e3206 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2f1f0:	a5002014 	ori	r20,r20,128
   2f1f4:	80c00007 	ldb	r3,0(r16)
   2f1f8:	003e2f06 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2f1fc:	8015883a 	mov	r10,r16
   2f200:	0023883a 	mov	r17,zero
   2f204:	18bff404 	addi	r2,r3,-48
   2f208:	50c00007 	ldb	r3,0(r10)
   2f20c:	8c4002a4 	muli	r17,r17,10
   2f210:	84000044 	addi	r16,r16,1
   2f214:	8015883a 	mov	r10,r16
   2f218:	1463883a 	add	r17,r2,r17
   2f21c:	18bff404 	addi	r2,r3,-48
   2f220:	30bff92e 	bgeu	r6,r2,2f208 <__alt_data_end+0xfffefe08>
   2f224:	003e2506 	br	2eabc <__alt_data_end+0xfffef6bc>
   2f228:	21003fcc 	andi	r4,r4,255
   2f22c:	2002d41e 	bne	r4,zero,2fd80 <___vfiprintf_internal_r+0x1444>
   2f230:	a5000414 	ori	r20,r20,16
   2f234:	a080080c 	andi	r2,r20,32
   2f238:	103fb51e 	bne	r2,zero,2f110 <__alt_data_end+0xfffefd10>
   2f23c:	a080040c 	andi	r2,r20,16
   2f240:	1001f826 	beq	r2,zero,2fa24 <___vfiprintf_internal_r+0x10e8>
   2f244:	da802217 	ldw	r10,136(sp)
   2f248:	54800017 	ldw	r18,0(r10)
   2f24c:	52800104 	addi	r10,r10,4
   2f250:	da802215 	stw	r10,136(sp)
   2f254:	9027d7fa 	srai	r19,r18,31
   2f258:	9805883a 	mov	r2,r19
   2f25c:	003fb206 	br	2f128 <__alt_data_end+0xfffefd28>
   2f260:	21003fcc 	andi	r4,r4,255
   2f264:	2002c41e 	bne	r4,zero,2fd78 <___vfiprintf_internal_r+0x143c>
   2f268:	a5000414 	ori	r20,r20,16
   2f26c:	a080080c 	andi	r2,r20,32
   2f270:	103f5f1e 	bne	r2,zero,2eff0 <__alt_data_end+0xfffefbf0>
   2f274:	a080040c 	andi	r2,r20,16
   2f278:	10020f26 	beq	r2,zero,2fab8 <___vfiprintf_internal_r+0x117c>
   2f27c:	da802217 	ldw	r10,136(sp)
   2f280:	d8001d85 	stb	zero,118(sp)
   2f284:	0027883a 	mov	r19,zero
   2f288:	50800104 	addi	r2,r10,4
   2f28c:	54800017 	ldw	r18,0(r10)
   2f290:	48021116 	blt	r9,zero,2fad8 <___vfiprintf_internal_r+0x119c>
   2f294:	00ffdfc4 	movi	r3,-129
   2f298:	d8802215 	stw	r2,136(sp)
   2f29c:	a0e8703a 	and	r20,r20,r3
   2f2a0:	903f5e1e 	bne	r18,zero,2f01c <__alt_data_end+0xfffefc1c>
   2f2a4:	0039883a 	mov	fp,zero
   2f2a8:	4802a626 	beq	r9,zero,2fd44 <___vfiprintf_internal_r+0x1408>
   2f2ac:	0025883a 	mov	r18,zero
   2f2b0:	0027883a 	mov	r19,zero
   2f2b4:	003f5a06 	br	2f020 <__alt_data_end+0xfffefc20>
   2f2b8:	21003fcc 	andi	r4,r4,255
   2f2bc:	20029f1e 	bne	r4,zero,2fd3c <___vfiprintf_internal_r+0x1400>
   2f2c0:	a5000414 	ori	r20,r20,16
   2f2c4:	a080080c 	andi	r2,r20,32
   2f2c8:	10005e1e 	bne	r2,zero,2f444 <___vfiprintf_internal_r+0xb08>
   2f2cc:	a080040c 	andi	r2,r20,16
   2f2d0:	1001a21e 	bne	r2,zero,2f95c <___vfiprintf_internal_r+0x1020>
   2f2d4:	a080100c 	andi	r2,r20,64
   2f2d8:	d8001d85 	stb	zero,118(sp)
   2f2dc:	da802217 	ldw	r10,136(sp)
   2f2e0:	1002231e 	bne	r2,zero,2fb70 <___vfiprintf_internal_r+0x1234>
   2f2e4:	50800104 	addi	r2,r10,4
   2f2e8:	54800017 	ldw	r18,0(r10)
   2f2ec:	0027883a 	mov	r19,zero
   2f2f0:	4801a00e 	bge	r9,zero,2f974 <___vfiprintf_internal_r+0x1038>
   2f2f4:	d8802215 	stw	r2,136(sp)
   2f2f8:	0039883a 	mov	fp,zero
   2f2fc:	94c4b03a 	or	r2,r18,r19
   2f300:	103f901e 	bne	r2,zero,2f144 <__alt_data_end+0xfffefd44>
   2f304:	00800044 	movi	r2,1
   2f308:	10803fcc 	andi	r2,r2,255
   2f30c:	00c00044 	movi	r3,1
   2f310:	10c05926 	beq	r2,r3,2f478 <___vfiprintf_internal_r+0xb3c>
   2f314:	00c00084 	movi	r3,2
   2f318:	10ffe41e 	bne	r2,r3,2f2ac <__alt_data_end+0xfffefeac>
   2f31c:	0025883a 	mov	r18,zero
   2f320:	0027883a 	mov	r19,zero
   2f324:	00013d06 	br	2f81c <___vfiprintf_internal_r+0xee0>
   2f328:	21003fcc 	andi	r4,r4,255
   2f32c:	2002811e 	bne	r4,zero,2fd34 <___vfiprintf_internal_r+0x13f8>
   2f330:	008000f4 	movhi	r2,3
   2f334:	10920404 	addi	r2,r2,18448
   2f338:	d8802615 	stw	r2,152(sp)
   2f33c:	a080080c 	andi	r2,r20,32
   2f340:	103f561e 	bne	r2,zero,2f09c <__alt_data_end+0xfffefc9c>
   2f344:	a080040c 	andi	r2,r20,16
   2f348:	1001d126 	beq	r2,zero,2fa90 <___vfiprintf_internal_r+0x1154>
   2f34c:	da802217 	ldw	r10,136(sp)
   2f350:	0027883a 	mov	r19,zero
   2f354:	54800017 	ldw	r18,0(r10)
   2f358:	52800104 	addi	r10,r10,4
   2f35c:	da802215 	stw	r10,136(sp)
   2f360:	003f5306 	br	2f0b0 <__alt_data_end+0xfffefcb0>
   2f364:	da802217 	ldw	r10,136(sp)
   2f368:	d8001d85 	stb	zero,118(sp)
   2f36c:	55400017 	ldw	r21,0(r10)
   2f370:	50c00104 	addi	r3,r10,4
   2f374:	a8024226 	beq	r21,zero,2fc80 <___vfiprintf_internal_r+0x1344>
   2f378:	48021816 	blt	r9,zero,2fbdc <___vfiprintf_internal_r+0x12a0>
   2f37c:	480d883a 	mov	r6,r9
   2f380:	000b883a 	mov	r5,zero
   2f384:	a809883a 	mov	r4,r21
   2f388:	d8c02a15 	stw	r3,168(sp)
   2f38c:	da002b15 	stw	r8,172(sp)
   2f390:	da402c15 	stw	r9,176(sp)
   2f394:	002cb380 	call	2cb38 <memchr>
   2f398:	d8c02a17 	ldw	r3,168(sp)
   2f39c:	da002b17 	ldw	r8,172(sp)
   2f3a0:	da402c17 	ldw	r9,176(sp)
   2f3a4:	10024826 	beq	r2,zero,2fcc8 <___vfiprintf_internal_r+0x138c>
   2f3a8:	1567c83a 	sub	r19,r2,r21
   2f3ac:	df001d83 	ldbu	fp,118(sp)
   2f3b0:	d8c02215 	stw	r3,136(sp)
   2f3b4:	0013883a 	mov	r9,zero
   2f3b8:	003e6006 	br	2ed3c <__alt_data_end+0xfffef93c>
   2f3bc:	21003fcc 	andi	r4,r4,255
   2f3c0:	203fc026 	beq	r4,zero,2f2c4 <__alt_data_end+0xfffefec4>
   2f3c4:	d9c01d85 	stb	r7,118(sp)
   2f3c8:	003fbe06 	br	2f2c4 <__alt_data_end+0xfffefec4>
   2f3cc:	da802217 	ldw	r10,136(sp)
   2f3d0:	54400017 	ldw	r17,0(r10)
   2f3d4:	50800104 	addi	r2,r10,4
   2f3d8:	883e3b16 	blt	r17,zero,2ecc8 <__alt_data_end+0xfffef8c8>
   2f3dc:	d8802215 	stw	r2,136(sp)
   2f3e0:	80c00007 	ldb	r3,0(r16)
   2f3e4:	003db406 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2f3e8:	01000044 	movi	r4,1
   2f3ec:	01c00ac4 	movi	r7,43
   2f3f0:	80c00007 	ldb	r3,0(r16)
   2f3f4:	003db006 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2f3f8:	80c00007 	ldb	r3,0(r16)
   2f3fc:	82800044 	addi	r10,r16,1
   2f400:	1b423c26 	beq	r3,r13,2fcf4 <___vfiprintf_internal_r+0x13b8>
   2f404:	18bff404 	addi	r2,r3,-48
   2f408:	0013883a 	mov	r9,zero
   2f40c:	30822b36 	bltu	r6,r2,2fcbc <___vfiprintf_internal_r+0x1380>
   2f410:	50c00007 	ldb	r3,0(r10)
   2f414:	4a4002a4 	muli	r9,r9,10
   2f418:	54000044 	addi	r16,r10,1
   2f41c:	8015883a 	mov	r10,r16
   2f420:	4893883a 	add	r9,r9,r2
   2f424:	18bff404 	addi	r2,r3,-48
   2f428:	30bff92e 	bgeu	r6,r2,2f410 <__alt_data_end+0xffff0010>
   2f42c:	483da30e 	bge	r9,zero,2eabc <__alt_data_end+0xfffef6bc>
   2f430:	027fffc4 	movi	r9,-1
   2f434:	003da106 	br	2eabc <__alt_data_end+0xfffef6bc>
   2f438:	a5001014 	ori	r20,r20,64
   2f43c:	80c00007 	ldb	r3,0(r16)
   2f440:	003d9d06 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2f444:	da802217 	ldw	r10,136(sp)
   2f448:	d8001d85 	stb	zero,118(sp)
   2f44c:	50c00204 	addi	r3,r10,8
   2f450:	54800017 	ldw	r18,0(r10)
   2f454:	54c00117 	ldw	r19,4(r10)
   2f458:	4801ca16 	blt	r9,zero,2fb84 <___vfiprintf_internal_r+0x1248>
   2f45c:	013fdfc4 	movi	r4,-129
   2f460:	94c4b03a 	or	r2,r18,r19
   2f464:	d8c02215 	stw	r3,136(sp)
   2f468:	a128703a 	and	r20,r20,r4
   2f46c:	0039883a 	mov	fp,zero
   2f470:	103f341e 	bne	r2,zero,2f144 <__alt_data_end+0xfffefd44>
   2f474:	483e2e26 	beq	r9,zero,2ed30 <__alt_data_end+0xfffef930>
   2f478:	0025883a 	mov	r18,zero
   2f47c:	94800c04 	addi	r18,r18,48
   2f480:	dc8019c5 	stb	r18,103(sp)
   2f484:	dcc02717 	ldw	r19,156(sp)
   2f488:	dd4019c4 	addi	r21,sp,103
   2f48c:	003e2b06 	br	2ed3c <__alt_data_end+0xfffef93c>
   2f490:	21003fcc 	andi	r4,r4,255
   2f494:	2002361e 	bne	r4,zero,2fd70 <___vfiprintf_internal_r+0x1434>
   2f498:	1801c126 	beq	r3,zero,2fba0 <___vfiprintf_internal_r+0x1264>
   2f49c:	04800044 	movi	r18,1
   2f4a0:	d8c01005 	stb	r3,64(sp)
   2f4a4:	d8001d85 	stb	zero,118(sp)
   2f4a8:	9027883a 	mov	r19,r18
   2f4ac:	dd401004 	addi	r21,sp,64
   2f4b0:	003f1106 	br	2f0f8 <__alt_data_end+0xfffefcf8>
   2f4b4:	d9402117 	ldw	r5,132(sp)
   2f4b8:	d9002017 	ldw	r4,128(sp)
   2f4bc:	d9801a04 	addi	r6,sp,104
   2f4c0:	d9c02b15 	stw	r7,172(sp)
   2f4c4:	dbc02a15 	stw	r15,168(sp)
   2f4c8:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f4cc:	d9c02b17 	ldw	r7,172(sp)
   2f4d0:	dbc02a17 	ldw	r15,168(sp)
   2f4d4:	10006d1e 	bne	r2,zero,2f68c <___vfiprintf_internal_r+0xd50>
   2f4d8:	d9801b17 	ldw	r6,108(sp)
   2f4dc:	d8801c17 	ldw	r2,112(sp)
   2f4e0:	d811883a 	mov	r8,sp
   2f4e4:	31400044 	addi	r5,r6,1
   2f4e8:	003e3306 	br	2edb8 <__alt_data_end+0xfffef9b8>
   2f4ec:	d9401b17 	ldw	r5,108(sp)
   2f4f0:	d8801c17 	ldw	r2,112(sp)
   2f4f4:	29000044 	addi	r4,r5,1
   2f4f8:	d8c01d87 	ldb	r3,118(sp)
   2f4fc:	183e4d26 	beq	r3,zero,2ee34 <__alt_data_end+0xfffefa34>
   2f500:	00c00044 	movi	r3,1
   2f504:	d9401d84 	addi	r5,sp,118
   2f508:	10c5883a 	add	r2,r2,r3
   2f50c:	41400015 	stw	r5,0(r8)
   2f510:	40c00115 	stw	r3,4(r8)
   2f514:	d8801c15 	stw	r2,112(sp)
   2f518:	d9001b15 	stw	r4,108(sp)
   2f51c:	014001c4 	movi	r5,7
   2f520:	2900a90e 	bge	r5,r4,2f7c8 <___vfiprintf_internal_r+0xe8c>
   2f524:	1000da1e 	bne	r2,zero,2f890 <___vfiprintf_internal_r+0xf54>
   2f528:	7000ab1e 	bne	r14,zero,2f7d8 <___vfiprintf_internal_r+0xe9c>
   2f52c:	000b883a 	mov	r5,zero
   2f530:	1809883a 	mov	r4,r3
   2f534:	d811883a 	mov	r8,sp
   2f538:	00c02004 	movi	r3,128
   2f53c:	e0fe4d26 	beq	fp,r3,2ee74 <__alt_data_end+0xfffefa74>
   2f540:	4cf9c83a 	sub	fp,r9,r19
   2f544:	073e7b0e 	bge	zero,fp,2ef34 <__alt_data_end+0xfffefb34>
   2f548:	01c00404 	movi	r7,16
   2f54c:	3f01900e 	bge	r7,fp,2fb90 <___vfiprintf_internal_r+0x1254>
   2f550:	00c000f4 	movhi	r3,3
   2f554:	18d26a04 	addi	r3,r3,18856
   2f558:	d8c02415 	stw	r3,144(sp)
   2f55c:	034001c4 	movi	r13,7
   2f560:	00000506 	br	2f578 <___vfiprintf_internal_r+0xc3c>
   2f564:	29000084 	addi	r4,r5,2
   2f568:	42000204 	addi	r8,r8,8
   2f56c:	180b883a 	mov	r5,r3
   2f570:	e73ffc04 	addi	fp,fp,-16
   2f574:	3f000d0e 	bge	r7,fp,2f5ac <___vfiprintf_internal_r+0xc70>
   2f578:	10800404 	addi	r2,r2,16
   2f57c:	28c00044 	addi	r3,r5,1
   2f580:	45c00015 	stw	r23,0(r8)
   2f584:	41c00115 	stw	r7,4(r8)
   2f588:	d8801c15 	stw	r2,112(sp)
   2f58c:	d8c01b15 	stw	r3,108(sp)
   2f590:	68fff40e 	bge	r13,r3,2f564 <__alt_data_end+0xffff0164>
   2f594:	1000101e 	bne	r2,zero,2f5d8 <___vfiprintf_internal_r+0xc9c>
   2f598:	e73ffc04 	addi	fp,fp,-16
   2f59c:	01000044 	movi	r4,1
   2f5a0:	000b883a 	mov	r5,zero
   2f5a4:	d811883a 	mov	r8,sp
   2f5a8:	3f3ff316 	blt	r7,fp,2f578 <__alt_data_end+0xffff0178>
   2f5ac:	da802417 	ldw	r10,144(sp)
   2f5b0:	1705883a 	add	r2,r2,fp
   2f5b4:	47000115 	stw	fp,4(r8)
   2f5b8:	42800015 	stw	r10,0(r8)
   2f5bc:	d8801c15 	stw	r2,112(sp)
   2f5c0:	d9001b15 	stw	r4,108(sp)
   2f5c4:	00c001c4 	movi	r3,7
   2f5c8:	19003616 	blt	r3,r4,2f6a4 <___vfiprintf_internal_r+0xd68>
   2f5cc:	42000204 	addi	r8,r8,8
   2f5d0:	21000044 	addi	r4,r4,1
   2f5d4:	003e5706 	br	2ef34 <__alt_data_end+0xfffefb34>
   2f5d8:	d9402117 	ldw	r5,132(sp)
   2f5dc:	d9002017 	ldw	r4,128(sp)
   2f5e0:	d9801a04 	addi	r6,sp,104
   2f5e4:	d9c02b15 	stw	r7,172(sp)
   2f5e8:	db402a15 	stw	r13,168(sp)
   2f5ec:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f5f0:	d9c02b17 	ldw	r7,172(sp)
   2f5f4:	db402a17 	ldw	r13,168(sp)
   2f5f8:	1000241e 	bne	r2,zero,2f68c <___vfiprintf_internal_r+0xd50>
   2f5fc:	d9401b17 	ldw	r5,108(sp)
   2f600:	d8801c17 	ldw	r2,112(sp)
   2f604:	d811883a 	mov	r8,sp
   2f608:	29000044 	addi	r4,r5,1
   2f60c:	003fd806 	br	2f570 <__alt_data_end+0xffff0170>
   2f610:	d9401b17 	ldw	r5,108(sp)
   2f614:	00c000f4 	movhi	r3,3
   2f618:	18d26e04 	addi	r3,r3,18872
   2f61c:	d8c02415 	stw	r3,144(sp)
   2f620:	29400044 	addi	r5,r5,1
   2f624:	d8c02417 	ldw	r3,144(sp)
   2f628:	14c5883a 	add	r2,r2,r19
   2f62c:	44c00115 	stw	r19,4(r8)
   2f630:	40c00015 	stw	r3,0(r8)
   2f634:	d8801c15 	stw	r2,112(sp)
   2f638:	d9401b15 	stw	r5,108(sp)
   2f63c:	00c001c4 	movi	r3,7
   2f640:	1940070e 	bge	r3,r5,2f660 <___vfiprintf_internal_r+0xd24>
   2f644:	103e4826 	beq	r2,zero,2ef68 <__alt_data_end+0xfffefb68>
   2f648:	d9402117 	ldw	r5,132(sp)
   2f64c:	d9002017 	ldw	r4,128(sp)
   2f650:	d9801a04 	addi	r6,sp,104
   2f654:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f658:	10000c1e 	bne	r2,zero,2f68c <___vfiprintf_internal_r+0xd50>
   2f65c:	d8801c17 	ldw	r2,112(sp)
   2f660:	8c80010e 	bge	r17,r18,2f668 <___vfiprintf_internal_r+0xd2c>
   2f664:	9023883a 	mov	r17,r18
   2f668:	da802317 	ldw	r10,140(sp)
   2f66c:	5455883a 	add	r10,r10,r17
   2f670:	da802315 	stw	r10,140(sp)
   2f674:	103e4126 	beq	r2,zero,2ef7c <__alt_data_end+0xfffefb7c>
   2f678:	d9402117 	ldw	r5,132(sp)
   2f67c:	d9002017 	ldw	r4,128(sp)
   2f680:	d9801a04 	addi	r6,sp,104
   2f684:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f688:	103e3c26 	beq	r2,zero,2ef7c <__alt_data_end+0xfffefb7c>
   2f68c:	dd002117 	ldw	r20,132(sp)
   2f690:	a080030b 	ldhu	r2,12(r20)
   2f694:	1080100c 	andi	r2,r2,64
   2f698:	1001231e 	bne	r2,zero,2fb28 <___vfiprintf_internal_r+0x11ec>
   2f69c:	d8802317 	ldw	r2,140(sp)
   2f6a0:	003d7b06 	br	2ec90 <__alt_data_end+0xfffef890>
   2f6a4:	1000991e 	bne	r2,zero,2f90c <___vfiprintf_internal_r+0xfd0>
   2f6a8:	00c00044 	movi	r3,1
   2f6ac:	9805883a 	mov	r2,r19
   2f6b0:	dd400015 	stw	r21,0(sp)
   2f6b4:	dcc00115 	stw	r19,4(sp)
   2f6b8:	dcc01c15 	stw	r19,112(sp)
   2f6bc:	d8c01b15 	stw	r3,108(sp)
   2f6c0:	d811883a 	mov	r8,sp
   2f6c4:	42000204 	addi	r8,r8,8
   2f6c8:	a2c0010c 	andi	r11,r20,4
   2f6cc:	583fe426 	beq	r11,zero,2f660 <__alt_data_end+0xffff0260>
   2f6d0:	8ca7c83a 	sub	r19,r17,r18
   2f6d4:	04ffe20e 	bge	zero,r19,2f660 <__alt_data_end+0xffff0260>
   2f6d8:	01c00404 	movi	r7,16
   2f6dc:	3cffcc0e 	bge	r7,r19,2f610 <__alt_data_end+0xffff0210>
   2f6e0:	028000f4 	movhi	r10,3
   2f6e4:	52926e04 	addi	r10,r10,18872
   2f6e8:	d9001b17 	ldw	r4,108(sp)
   2f6ec:	da802415 	stw	r10,144(sp)
   2f6f0:	382b883a 	mov	r21,r7
   2f6f4:	050001c4 	movi	r20,7
   2f6f8:	df002017 	ldw	fp,128(sp)
   2f6fc:	00000506 	br	2f714 <___vfiprintf_internal_r+0xdd8>
   2f700:	21400084 	addi	r5,r4,2
   2f704:	42000204 	addi	r8,r8,8
   2f708:	1809883a 	mov	r4,r3
   2f70c:	9cfffc04 	addi	r19,r19,-16
   2f710:	acffc40e 	bge	r21,r19,2f624 <__alt_data_end+0xffff0224>
   2f714:	10800404 	addi	r2,r2,16
   2f718:	20c00044 	addi	r3,r4,1
   2f71c:	45800015 	stw	r22,0(r8)
   2f720:	45400115 	stw	r21,4(r8)
   2f724:	d8801c15 	stw	r2,112(sp)
   2f728:	d8c01b15 	stw	r3,108(sp)
   2f72c:	a0fff40e 	bge	r20,r3,2f700 <__alt_data_end+0xffff0300>
   2f730:	1000041e 	bne	r2,zero,2f744 <___vfiprintf_internal_r+0xe08>
   2f734:	01400044 	movi	r5,1
   2f738:	0009883a 	mov	r4,zero
   2f73c:	d811883a 	mov	r8,sp
   2f740:	003ff206 	br	2f70c <__alt_data_end+0xffff030c>
   2f744:	d9402117 	ldw	r5,132(sp)
   2f748:	d9801a04 	addi	r6,sp,104
   2f74c:	e009883a 	mov	r4,fp
   2f750:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f754:	103fcd1e 	bne	r2,zero,2f68c <__alt_data_end+0xffff028c>
   2f758:	d9001b17 	ldw	r4,108(sp)
   2f75c:	d8801c17 	ldw	r2,112(sp)
   2f760:	d811883a 	mov	r8,sp
   2f764:	21400044 	addi	r5,r4,1
   2f768:	003fe806 	br	2f70c <__alt_data_end+0xffff030c>
   2f76c:	d9402117 	ldw	r5,132(sp)
   2f770:	d9002017 	ldw	r4,128(sp)
   2f774:	d9801a04 	addi	r6,sp,104
   2f778:	d9c02b15 	stw	r7,172(sp)
   2f77c:	db402a15 	stw	r13,168(sp)
   2f780:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f784:	d9c02b17 	ldw	r7,172(sp)
   2f788:	db402a17 	ldw	r13,168(sp)
   2f78c:	103fbf1e 	bne	r2,zero,2f68c <__alt_data_end+0xffff028c>
   2f790:	d9401b17 	ldw	r5,108(sp)
   2f794:	d8801c17 	ldw	r2,112(sp)
   2f798:	d811883a 	mov	r8,sp
   2f79c:	29800044 	addi	r6,r5,1
   2f7a0:	003dc406 	br	2eeb4 <__alt_data_end+0xfffefab4>
   2f7a4:	1000d21e 	bne	r2,zero,2faf0 <___vfiprintf_internal_r+0x11b4>
   2f7a8:	d8c01d87 	ldb	r3,118(sp)
   2f7ac:	18009526 	beq	r3,zero,2fa04 <___vfiprintf_internal_r+0x10c8>
   2f7b0:	00800044 	movi	r2,1
   2f7b4:	d8c01d84 	addi	r3,sp,118
   2f7b8:	1009883a 	mov	r4,r2
   2f7bc:	d8c00015 	stw	r3,0(sp)
   2f7c0:	d8800115 	stw	r2,4(sp)
   2f7c4:	d811883a 	mov	r8,sp
   2f7c8:	200b883a 	mov	r5,r4
   2f7cc:	42000204 	addi	r8,r8,8
   2f7d0:	21000044 	addi	r4,r4,1
   2f7d4:	003d9706 	br	2ee34 <__alt_data_end+0xfffefa34>
   2f7d8:	d9001d04 	addi	r4,sp,116
   2f7dc:	00800084 	movi	r2,2
   2f7e0:	d9000015 	stw	r4,0(sp)
   2f7e4:	d8800115 	stw	r2,4(sp)
   2f7e8:	1809883a 	mov	r4,r3
   2f7ec:	d811883a 	mov	r8,sp
   2f7f0:	200b883a 	mov	r5,r4
   2f7f4:	42000204 	addi	r8,r8,8
   2f7f8:	21000044 	addi	r4,r4,1
   2f7fc:	003f4e06 	br	2f538 <__alt_data_end+0xffff0138>
   2f800:	d8001d85 	stb	zero,118(sp)
   2f804:	48005016 	blt	r9,zero,2f948 <___vfiprintf_internal_r+0x100c>
   2f808:	00ffdfc4 	movi	r3,-129
   2f80c:	94c4b03a 	or	r2,r18,r19
   2f810:	a0e8703a 	and	r20,r20,r3
   2f814:	103d4426 	beq	r2,zero,2ed28 <__alt_data_end+0xfffef928>
   2f818:	0039883a 	mov	fp,zero
   2f81c:	d9002617 	ldw	r4,152(sp)
   2f820:	dd401a04 	addi	r21,sp,104
   2f824:	908003cc 	andi	r2,r18,15
   2f828:	9806973a 	slli	r3,r19,28
   2f82c:	2085883a 	add	r2,r4,r2
   2f830:	9024d13a 	srli	r18,r18,4
   2f834:	10800003 	ldbu	r2,0(r2)
   2f838:	9826d13a 	srli	r19,r19,4
   2f83c:	ad7fffc4 	addi	r21,r21,-1
   2f840:	1ca4b03a 	or	r18,r3,r18
   2f844:	a8800005 	stb	r2,0(r21)
   2f848:	94c4b03a 	or	r2,r18,r19
   2f84c:	103ff51e 	bne	r2,zero,2f824 <__alt_data_end+0xffff0424>
   2f850:	003e5906 	br	2f1b8 <__alt_data_end+0xfffefdb8>
   2f854:	d9402117 	ldw	r5,132(sp)
   2f858:	d9002017 	ldw	r4,128(sp)
   2f85c:	d9801a04 	addi	r6,sp,104
   2f860:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f864:	103f891e 	bne	r2,zero,2f68c <__alt_data_end+0xffff028c>
   2f868:	d8801c17 	ldw	r2,112(sp)
   2f86c:	d811883a 	mov	r8,sp
   2f870:	003f9506 	br	2f6c8 <__alt_data_end+0xffff02c8>
   2f874:	d9402117 	ldw	r5,132(sp)
   2f878:	d9002017 	ldw	r4,128(sp)
   2f87c:	d9801a04 	addi	r6,sp,104
   2f880:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f884:	103f811e 	bne	r2,zero,2f68c <__alt_data_end+0xffff028c>
   2f888:	d811883a 	mov	r8,sp
   2f88c:	003ced06 	br	2ec44 <__alt_data_end+0xfffef844>
   2f890:	d9402117 	ldw	r5,132(sp)
   2f894:	d9002017 	ldw	r4,128(sp)
   2f898:	d9801a04 	addi	r6,sp,104
   2f89c:	da402c15 	stw	r9,176(sp)
   2f8a0:	db802a15 	stw	r14,168(sp)
   2f8a4:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f8a8:	da402c17 	ldw	r9,176(sp)
   2f8ac:	db802a17 	ldw	r14,168(sp)
   2f8b0:	103f761e 	bne	r2,zero,2f68c <__alt_data_end+0xffff028c>
   2f8b4:	d9401b17 	ldw	r5,108(sp)
   2f8b8:	d8801c17 	ldw	r2,112(sp)
   2f8bc:	d811883a 	mov	r8,sp
   2f8c0:	29000044 	addi	r4,r5,1
   2f8c4:	003d5b06 	br	2ee34 <__alt_data_end+0xfffefa34>
   2f8c8:	d9402117 	ldw	r5,132(sp)
   2f8cc:	d9002017 	ldw	r4,128(sp)
   2f8d0:	d9801a04 	addi	r6,sp,104
   2f8d4:	da402c15 	stw	r9,176(sp)
   2f8d8:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f8dc:	da402c17 	ldw	r9,176(sp)
   2f8e0:	103f6a1e 	bne	r2,zero,2f68c <__alt_data_end+0xffff028c>
   2f8e4:	d9401b17 	ldw	r5,108(sp)
   2f8e8:	d8801c17 	ldw	r2,112(sp)
   2f8ec:	d811883a 	mov	r8,sp
   2f8f0:	29000044 	addi	r4,r5,1
   2f8f4:	003f1006 	br	2f538 <__alt_data_end+0xffff0138>
   2f8f8:	1000c31e 	bne	r2,zero,2fc08 <___vfiprintf_internal_r+0x12cc>
   2f8fc:	01000044 	movi	r4,1
   2f900:	000b883a 	mov	r5,zero
   2f904:	d811883a 	mov	r8,sp
   2f908:	003f0d06 	br	2f540 <__alt_data_end+0xffff0140>
   2f90c:	d9402117 	ldw	r5,132(sp)
   2f910:	d9002017 	ldw	r4,128(sp)
   2f914:	d9801a04 	addi	r6,sp,104
   2f918:	002e8280 	call	2e828 <__sprint_r.part.0>
   2f91c:	103f5b1e 	bne	r2,zero,2f68c <__alt_data_end+0xffff028c>
   2f920:	d9001b17 	ldw	r4,108(sp)
   2f924:	d8801c17 	ldw	r2,112(sp)
   2f928:	d811883a 	mov	r8,sp
   2f92c:	21000044 	addi	r4,r4,1
   2f930:	003d8006 	br	2ef34 <__alt_data_end+0xfffefb34>
   2f934:	010000f4 	movhi	r4,3
   2f938:	21120904 	addi	r4,r4,18468
   2f93c:	d9002615 	stw	r4,152(sp)
   2f940:	d8c02215 	stw	r3,136(sp)
   2f944:	1029883a 	mov	r20,r2
   2f948:	94c4b03a 	or	r2,r18,r19
   2f94c:	103fb21e 	bne	r2,zero,2f818 <__alt_data_end+0xffff0418>
   2f950:	0039883a 	mov	fp,zero
   2f954:	00800084 	movi	r2,2
   2f958:	003e6b06 	br	2f308 <__alt_data_end+0xfffeff08>
   2f95c:	da802217 	ldw	r10,136(sp)
   2f960:	d8001d85 	stb	zero,118(sp)
   2f964:	0027883a 	mov	r19,zero
   2f968:	50800104 	addi	r2,r10,4
   2f96c:	54800017 	ldw	r18,0(r10)
   2f970:	483e6016 	blt	r9,zero,2f2f4 <__alt_data_end+0xfffefef4>
   2f974:	00ffdfc4 	movi	r3,-129
   2f978:	d8802215 	stw	r2,136(sp)
   2f97c:	a0e8703a 	and	r20,r20,r3
   2f980:	0039883a 	mov	fp,zero
   2f984:	903ebb26 	beq	r18,zero,2f474 <__alt_data_end+0xffff0074>
   2f988:	00800244 	movi	r2,9
   2f98c:	14bdee36 	bltu	r2,r18,2f148 <__alt_data_end+0xfffefd48>
   2f990:	003eba06 	br	2f47c <__alt_data_end+0xffff007c>
   2f994:	00800c04 	movi	r2,48
   2f998:	d8c01d45 	stb	r3,117(sp)
   2f99c:	d8801d05 	stb	r2,116(sp)
   2f9a0:	d8001d85 	stb	zero,118(sp)
   2f9a4:	a0c00094 	ori	r3,r20,2
   2f9a8:	4800a916 	blt	r9,zero,2fc50 <___vfiprintf_internal_r+0x1314>
   2f9ac:	00bfdfc4 	movi	r2,-129
   2f9b0:	a096703a 	and	r11,r20,r2
   2f9b4:	5d000094 	ori	r20,r11,2
   2f9b8:	0039883a 	mov	fp,zero
   2f9bc:	003f9706 	br	2f81c <__alt_data_end+0xffff041c>
   2f9c0:	8025883a 	mov	r18,r16
   2f9c4:	003c2e06 	br	2ea80 <__alt_data_end+0xfffef680>
   2f9c8:	008000f4 	movhi	r2,3
   2f9cc:	10920904 	addi	r2,r2,18468
   2f9d0:	0039883a 	mov	fp,zero
   2f9d4:	d8802615 	stw	r2,152(sp)
   2f9d8:	003f9006 	br	2f81c <__alt_data_end+0xffff041c>
   2f9dc:	04a5c83a 	sub	r18,zero,r18
   2f9e0:	07000b44 	movi	fp,45
   2f9e4:	9004c03a 	cmpne	r2,r18,zero
   2f9e8:	04e7c83a 	sub	r19,zero,r19
   2f9ec:	df001d85 	stb	fp,118(sp)
   2f9f0:	98a7c83a 	sub	r19,r19,r2
   2f9f4:	48009f16 	blt	r9,zero,2fc74 <___vfiprintf_internal_r+0x1338>
   2f9f8:	00bfdfc4 	movi	r2,-129
   2f9fc:	a0a8703a 	and	r20,r20,r2
   2fa00:	003dd006 	br	2f144 <__alt_data_end+0xfffefd44>
   2fa04:	70004c26 	beq	r14,zero,2fb38 <___vfiprintf_internal_r+0x11fc>
   2fa08:	00800084 	movi	r2,2
   2fa0c:	d8c01d04 	addi	r3,sp,116
   2fa10:	d8c00015 	stw	r3,0(sp)
   2fa14:	d8800115 	stw	r2,4(sp)
   2fa18:	01000044 	movi	r4,1
   2fa1c:	d811883a 	mov	r8,sp
   2fa20:	003f7306 	br	2f7f0 <__alt_data_end+0xffff03f0>
   2fa24:	a080100c 	andi	r2,r20,64
   2fa28:	da802217 	ldw	r10,136(sp)
   2fa2c:	103e0626 	beq	r2,zero,2f248 <__alt_data_end+0xfffefe48>
   2fa30:	5480000f 	ldh	r18,0(r10)
   2fa34:	52800104 	addi	r10,r10,4
   2fa38:	da802215 	stw	r10,136(sp)
   2fa3c:	9027d7fa 	srai	r19,r18,31
   2fa40:	9805883a 	mov	r2,r19
   2fa44:	003db806 	br	2f128 <__alt_data_end+0xfffefd28>
   2fa48:	a080040c 	andi	r2,r20,16
   2fa4c:	1000091e 	bne	r2,zero,2fa74 <___vfiprintf_internal_r+0x1138>
   2fa50:	a2c0100c 	andi	r11,r20,64
   2fa54:	58000726 	beq	r11,zero,2fa74 <___vfiprintf_internal_r+0x1138>
   2fa58:	da802217 	ldw	r10,136(sp)
   2fa5c:	50800017 	ldw	r2,0(r10)
   2fa60:	52800104 	addi	r10,r10,4
   2fa64:	da802215 	stw	r10,136(sp)
   2fa68:	da802317 	ldw	r10,140(sp)
   2fa6c:	1280000d 	sth	r10,0(r2)
   2fa70:	003be706 	br	2ea10 <__alt_data_end+0xfffef610>
   2fa74:	da802217 	ldw	r10,136(sp)
   2fa78:	50800017 	ldw	r2,0(r10)
   2fa7c:	52800104 	addi	r10,r10,4
   2fa80:	da802215 	stw	r10,136(sp)
   2fa84:	da802317 	ldw	r10,140(sp)
   2fa88:	12800015 	stw	r10,0(r2)
   2fa8c:	003be006 	br	2ea10 <__alt_data_end+0xfffef610>
   2fa90:	a080100c 	andi	r2,r20,64
   2fa94:	da802217 	ldw	r10,136(sp)
   2fa98:	10003026 	beq	r2,zero,2fb5c <___vfiprintf_internal_r+0x1220>
   2fa9c:	5480000b 	ldhu	r18,0(r10)
   2faa0:	52800104 	addi	r10,r10,4
   2faa4:	0027883a 	mov	r19,zero
   2faa8:	da802215 	stw	r10,136(sp)
   2faac:	003d8006 	br	2f0b0 <__alt_data_end+0xfffefcb0>
   2fab0:	80c00007 	ldb	r3,0(r16)
   2fab4:	003c0006 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2fab8:	a080100c 	andi	r2,r20,64
   2fabc:	d8001d85 	stb	zero,118(sp)
   2fac0:	da802217 	ldw	r10,136(sp)
   2fac4:	1000201e 	bne	r2,zero,2fb48 <___vfiprintf_internal_r+0x120c>
   2fac8:	50800104 	addi	r2,r10,4
   2facc:	54800017 	ldw	r18,0(r10)
   2fad0:	0027883a 	mov	r19,zero
   2fad4:	483def0e 	bge	r9,zero,2f294 <__alt_data_end+0xfffefe94>
   2fad8:	94c6b03a 	or	r3,r18,r19
   2fadc:	d8802215 	stw	r2,136(sp)
   2fae0:	183d4e1e 	bne	r3,zero,2f01c <__alt_data_end+0xfffefc1c>
   2fae4:	0039883a 	mov	fp,zero
   2fae8:	0005883a 	mov	r2,zero
   2faec:	003e0606 	br	2f308 <__alt_data_end+0xfffeff08>
   2faf0:	d9402117 	ldw	r5,132(sp)
   2faf4:	d9002017 	ldw	r4,128(sp)
   2faf8:	d9801a04 	addi	r6,sp,104
   2fafc:	da402c15 	stw	r9,176(sp)
   2fb00:	db802a15 	stw	r14,168(sp)
   2fb04:	002e8280 	call	2e828 <__sprint_r.part.0>
   2fb08:	da402c17 	ldw	r9,176(sp)
   2fb0c:	db802a17 	ldw	r14,168(sp)
   2fb10:	103ede1e 	bne	r2,zero,2f68c <__alt_data_end+0xffff028c>
   2fb14:	d9401b17 	ldw	r5,108(sp)
   2fb18:	d8801c17 	ldw	r2,112(sp)
   2fb1c:	d811883a 	mov	r8,sp
   2fb20:	29000044 	addi	r4,r5,1
   2fb24:	003e7406 	br	2f4f8 <__alt_data_end+0xffff00f8>
   2fb28:	00bfffc4 	movi	r2,-1
   2fb2c:	003c5806 	br	2ec90 <__alt_data_end+0xfffef890>
   2fb30:	d811883a 	mov	r8,sp
   2fb34:	003ee806 	br	2f6d8 <__alt_data_end+0xffff02d8>
   2fb38:	000b883a 	mov	r5,zero
   2fb3c:	01000044 	movi	r4,1
   2fb40:	d811883a 	mov	r8,sp
   2fb44:	003e7c06 	br	2f538 <__alt_data_end+0xffff0138>
   2fb48:	50800104 	addi	r2,r10,4
   2fb4c:	5480000b 	ldhu	r18,0(r10)
   2fb50:	0027883a 	mov	r19,zero
   2fb54:	483dcf0e 	bge	r9,zero,2f294 <__alt_data_end+0xfffefe94>
   2fb58:	003fdf06 	br	2fad8 <__alt_data_end+0xffff06d8>
   2fb5c:	54800017 	ldw	r18,0(r10)
   2fb60:	52800104 	addi	r10,r10,4
   2fb64:	0027883a 	mov	r19,zero
   2fb68:	da802215 	stw	r10,136(sp)
   2fb6c:	003d5006 	br	2f0b0 <__alt_data_end+0xfffefcb0>
   2fb70:	50800104 	addi	r2,r10,4
   2fb74:	5480000b 	ldhu	r18,0(r10)
   2fb78:	0027883a 	mov	r19,zero
   2fb7c:	483f7d0e 	bge	r9,zero,2f974 <__alt_data_end+0xffff0574>
   2fb80:	003ddc06 	br	2f2f4 <__alt_data_end+0xfffefef4>
   2fb84:	d8c02215 	stw	r3,136(sp)
   2fb88:	0039883a 	mov	fp,zero
   2fb8c:	003ddb06 	br	2f2fc <__alt_data_end+0xfffefefc>
   2fb90:	028000f4 	movhi	r10,3
   2fb94:	52926a04 	addi	r10,r10,18856
   2fb98:	da802415 	stw	r10,144(sp)
   2fb9c:	003e8306 	br	2f5ac <__alt_data_end+0xffff01ac>
   2fba0:	d8801c17 	ldw	r2,112(sp)
   2fba4:	dd002117 	ldw	r20,132(sp)
   2fba8:	103eb926 	beq	r2,zero,2f690 <__alt_data_end+0xffff0290>
   2fbac:	d9002017 	ldw	r4,128(sp)
   2fbb0:	d9801a04 	addi	r6,sp,104
   2fbb4:	a00b883a 	mov	r5,r20
   2fbb8:	002e8280 	call	2e828 <__sprint_r.part.0>
   2fbbc:	003eb406 	br	2f690 <__alt_data_end+0xffff0290>
   2fbc0:	80c00043 	ldbu	r3,1(r16)
   2fbc4:	a5000814 	ori	r20,r20,32
   2fbc8:	84000044 	addi	r16,r16,1
   2fbcc:	18c03fcc 	andi	r3,r3,255
   2fbd0:	18c0201c 	xori	r3,r3,128
   2fbd4:	18ffe004 	addi	r3,r3,-128
   2fbd8:	003bb706 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2fbdc:	a809883a 	mov	r4,r21
   2fbe0:	d8c02a15 	stw	r3,168(sp)
   2fbe4:	da002b15 	stw	r8,172(sp)
   2fbe8:	00272900 	call	27290 <strlen>
   2fbec:	d8c02a17 	ldw	r3,168(sp)
   2fbf0:	1027883a 	mov	r19,r2
   2fbf4:	df001d83 	ldbu	fp,118(sp)
   2fbf8:	d8c02215 	stw	r3,136(sp)
   2fbfc:	0013883a 	mov	r9,zero
   2fc00:	da002b17 	ldw	r8,172(sp)
   2fc04:	003c4d06 	br	2ed3c <__alt_data_end+0xfffef93c>
   2fc08:	d9402117 	ldw	r5,132(sp)
   2fc0c:	d9002017 	ldw	r4,128(sp)
   2fc10:	d9801a04 	addi	r6,sp,104
   2fc14:	da402c15 	stw	r9,176(sp)
   2fc18:	002e8280 	call	2e828 <__sprint_r.part.0>
   2fc1c:	da402c17 	ldw	r9,176(sp)
   2fc20:	103e9a1e 	bne	r2,zero,2f68c <__alt_data_end+0xffff028c>
   2fc24:	d9401b17 	ldw	r5,108(sp)
   2fc28:	d8801c17 	ldw	r2,112(sp)
   2fc2c:	d811883a 	mov	r8,sp
   2fc30:	29000044 	addi	r4,r5,1
   2fc34:	003e4206 	br	2f540 <__alt_data_end+0xffff0140>
   2fc38:	d9401b17 	ldw	r5,108(sp)
   2fc3c:	010000f4 	movhi	r4,3
   2fc40:	21126e04 	addi	r4,r4,18872
   2fc44:	d9002415 	stw	r4,144(sp)
   2fc48:	29400044 	addi	r5,r5,1
   2fc4c:	003c6d06 	br	2ee04 <__alt_data_end+0xfffefa04>
   2fc50:	0039883a 	mov	fp,zero
   2fc54:	00800084 	movi	r2,2
   2fc58:	10803fcc 	andi	r2,r2,255
   2fc5c:	01000044 	movi	r4,1
   2fc60:	11001e26 	beq	r2,r4,2fcdc <___vfiprintf_internal_r+0x13a0>
   2fc64:	01000084 	movi	r4,2
   2fc68:	11001e1e 	bne	r2,r4,2fce4 <___vfiprintf_internal_r+0x13a8>
   2fc6c:	1829883a 	mov	r20,r3
   2fc70:	003eea06 	br	2f81c <__alt_data_end+0xffff041c>
   2fc74:	a007883a 	mov	r3,r20
   2fc78:	00800044 	movi	r2,1
   2fc7c:	003ff606 	br	2fc58 <__alt_data_end+0xffff0858>
   2fc80:	00800184 	movi	r2,6
   2fc84:	1240012e 	bgeu	r2,r9,2fc8c <___vfiprintf_internal_r+0x1350>
   2fc88:	1013883a 	mov	r9,r2
   2fc8c:	4827883a 	mov	r19,r9
   2fc90:	4825883a 	mov	r18,r9
   2fc94:	48001516 	blt	r9,zero,2fcec <___vfiprintf_internal_r+0x13b0>
   2fc98:	054000f4 	movhi	r21,3
   2fc9c:	d8c02215 	stw	r3,136(sp)
   2fca0:	ad520e04 	addi	r21,r21,18488
   2fca4:	003d1406 	br	2f0f8 <__alt_data_end+0xfffefcf8>
   2fca8:	028000f4 	movhi	r10,3
   2fcac:	52926a04 	addi	r10,r10,18856
   2fcb0:	da802415 	stw	r10,144(sp)
   2fcb4:	200d883a 	mov	r6,r4
   2fcb8:	003c9106 	br	2ef00 <__alt_data_end+0xfffefb00>
   2fcbc:	5021883a 	mov	r16,r10
   2fcc0:	0013883a 	mov	r9,zero
   2fcc4:	003b7d06 	br	2eabc <__alt_data_end+0xfffef6bc>
   2fcc8:	4827883a 	mov	r19,r9
   2fccc:	df001d83 	ldbu	fp,118(sp)
   2fcd0:	d8c02215 	stw	r3,136(sp)
   2fcd4:	0013883a 	mov	r9,zero
   2fcd8:	003c1806 	br	2ed3c <__alt_data_end+0xfffef93c>
   2fcdc:	1829883a 	mov	r20,r3
   2fce0:	003d1806 	br	2f144 <__alt_data_end+0xfffefd44>
   2fce4:	1829883a 	mov	r20,r3
   2fce8:	003ccd06 	br	2f020 <__alt_data_end+0xfffefc20>
   2fcec:	0025883a 	mov	r18,zero
   2fcf0:	003fe906 	br	2fc98 <__alt_data_end+0xffff0898>
   2fcf4:	d8802217 	ldw	r2,136(sp)
   2fcf8:	80c00043 	ldbu	r3,1(r16)
   2fcfc:	5021883a 	mov	r16,r10
   2fd00:	12400017 	ldw	r9,0(r2)
   2fd04:	10800104 	addi	r2,r2,4
   2fd08:	d8802215 	stw	r2,136(sp)
   2fd0c:	483faf0e 	bge	r9,zero,2fbcc <__alt_data_end+0xffff07cc>
   2fd10:	18c03fcc 	andi	r3,r3,255
   2fd14:	18c0201c 	xori	r3,r3,128
   2fd18:	027fffc4 	movi	r9,-1
   2fd1c:	18ffe004 	addi	r3,r3,-128
   2fd20:	003b6506 	br	2eab8 <__alt_data_end+0xfffef6b8>
   2fd24:	d9c01d85 	stb	r7,118(sp)
   2fd28:	003ca006 	br	2efac <__alt_data_end+0xfffefbac>
   2fd2c:	d9c01d85 	stb	r7,118(sp)
   2fd30:	003cad06 	br	2efe8 <__alt_data_end+0xfffefbe8>
   2fd34:	d9c01d85 	stb	r7,118(sp)
   2fd38:	003d7d06 	br	2f330 <__alt_data_end+0xfffeff30>
   2fd3c:	d9c01d85 	stb	r7,118(sp)
   2fd40:	003d5f06 	br	2f2c0 <__alt_data_end+0xfffefec0>
   2fd44:	a080004c 	andi	r2,r20,1
   2fd48:	0039883a 	mov	fp,zero
   2fd4c:	10000526 	beq	r2,zero,2fd64 <___vfiprintf_internal_r+0x1428>
   2fd50:	00800c04 	movi	r2,48
   2fd54:	d88019c5 	stb	r2,103(sp)
   2fd58:	dcc02717 	ldw	r19,156(sp)
   2fd5c:	dd4019c4 	addi	r21,sp,103
   2fd60:	003bf606 	br	2ed3c <__alt_data_end+0xfffef93c>
   2fd64:	0027883a 	mov	r19,zero
   2fd68:	dd401a04 	addi	r21,sp,104
   2fd6c:	003bf306 	br	2ed3c <__alt_data_end+0xfffef93c>
   2fd70:	d9c01d85 	stb	r7,118(sp)
   2fd74:	003dc806 	br	2f498 <__alt_data_end+0xffff0098>
   2fd78:	d9c01d85 	stb	r7,118(sp)
   2fd7c:	003d3a06 	br	2f268 <__alt_data_end+0xfffefe68>
   2fd80:	d9c01d85 	stb	r7,118(sp)
   2fd84:	003d2a06 	br	2f230 <__alt_data_end+0xfffefe30>
   2fd88:	d9c01d85 	stb	r7,118(sp)
   2fd8c:	003cde06 	br	2f108 <__alt_data_end+0xfffefd08>
   2fd90:	d9c01d85 	stb	r7,118(sp)
   2fd94:	003cbc06 	br	2f088 <__alt_data_end+0xfffefc88>

0002fd98 <__vfiprintf_internal>:
   2fd98:	008000f4 	movhi	r2,3
   2fd9c:	10992a04 	addi	r2,r2,25768
   2fda0:	300f883a 	mov	r7,r6
   2fda4:	280d883a 	mov	r6,r5
   2fda8:	200b883a 	mov	r5,r4
   2fdac:	11000017 	ldw	r4,0(r2)
   2fdb0:	002e93c1 	jmpi	2e93c <___vfiprintf_internal_r>

0002fdb4 <__sbprintf>:
   2fdb4:	2880030b 	ldhu	r2,12(r5)
   2fdb8:	2ac01917 	ldw	r11,100(r5)
   2fdbc:	2a80038b 	ldhu	r10,14(r5)
   2fdc0:	2a400717 	ldw	r9,28(r5)
   2fdc4:	2a000917 	ldw	r8,36(r5)
   2fdc8:	defee204 	addi	sp,sp,-1144
   2fdcc:	00c10004 	movi	r3,1024
   2fdd0:	dc011a15 	stw	r16,1128(sp)
   2fdd4:	10bfff4c 	andi	r2,r2,65533
   2fdd8:	2821883a 	mov	r16,r5
   2fddc:	d8cb883a 	add	r5,sp,r3
   2fde0:	dc811c15 	stw	r18,1136(sp)
   2fde4:	dc411b15 	stw	r17,1132(sp)
   2fde8:	dfc11d15 	stw	ra,1140(sp)
   2fdec:	2025883a 	mov	r18,r4
   2fdf0:	d881030d 	sth	r2,1036(sp)
   2fdf4:	dac11915 	stw	r11,1124(sp)
   2fdf8:	da81038d 	sth	r10,1038(sp)
   2fdfc:	da410715 	stw	r9,1052(sp)
   2fe00:	da010915 	stw	r8,1060(sp)
   2fe04:	dec10015 	stw	sp,1024(sp)
   2fe08:	dec10415 	stw	sp,1040(sp)
   2fe0c:	d8c10215 	stw	r3,1032(sp)
   2fe10:	d8c10515 	stw	r3,1044(sp)
   2fe14:	d8010615 	stw	zero,1048(sp)
   2fe18:	002e93c0 	call	2e93c <___vfiprintf_internal_r>
   2fe1c:	1023883a 	mov	r17,r2
   2fe20:	10000416 	blt	r2,zero,2fe34 <__sbprintf+0x80>
   2fe24:	d9410004 	addi	r5,sp,1024
   2fe28:	9009883a 	mov	r4,r18
   2fe2c:	002b1f00 	call	2b1f0 <_fflush_r>
   2fe30:	10000d1e 	bne	r2,zero,2fe68 <__sbprintf+0xb4>
   2fe34:	d881030b 	ldhu	r2,1036(sp)
   2fe38:	1080100c 	andi	r2,r2,64
   2fe3c:	10000326 	beq	r2,zero,2fe4c <__sbprintf+0x98>
   2fe40:	8080030b 	ldhu	r2,12(r16)
   2fe44:	10801014 	ori	r2,r2,64
   2fe48:	8080030d 	sth	r2,12(r16)
   2fe4c:	8805883a 	mov	r2,r17
   2fe50:	dfc11d17 	ldw	ra,1140(sp)
   2fe54:	dc811c17 	ldw	r18,1136(sp)
   2fe58:	dc411b17 	ldw	r17,1132(sp)
   2fe5c:	dc011a17 	ldw	r16,1128(sp)
   2fe60:	dec11e04 	addi	sp,sp,1144
   2fe64:	f800283a 	ret
   2fe68:	047fffc4 	movi	r17,-1
   2fe6c:	003ff106 	br	2fe34 <__alt_data_end+0xffff0a34>

0002fe70 <_write_r>:
   2fe70:	defffd04 	addi	sp,sp,-12
   2fe74:	2805883a 	mov	r2,r5
   2fe78:	dc000015 	stw	r16,0(sp)
   2fe7c:	040000f4 	movhi	r16,3
   2fe80:	dc400115 	stw	r17,4(sp)
   2fe84:	300b883a 	mov	r5,r6
   2fe88:	841ffe04 	addi	r16,r16,32760
   2fe8c:	2023883a 	mov	r17,r4
   2fe90:	380d883a 	mov	r6,r7
   2fe94:	1009883a 	mov	r4,r2
   2fe98:	dfc00215 	stw	ra,8(sp)
   2fe9c:	80000015 	stw	zero,0(r16)
   2fea0:	00320d00 	call	320d0 <write>
   2fea4:	00ffffc4 	movi	r3,-1
   2fea8:	10c00526 	beq	r2,r3,2fec0 <_write_r+0x50>
   2feac:	dfc00217 	ldw	ra,8(sp)
   2feb0:	dc400117 	ldw	r17,4(sp)
   2feb4:	dc000017 	ldw	r16,0(sp)
   2feb8:	dec00304 	addi	sp,sp,12
   2febc:	f800283a 	ret
   2fec0:	80c00017 	ldw	r3,0(r16)
   2fec4:	183ff926 	beq	r3,zero,2feac <__alt_data_end+0xffff0aac>
   2fec8:	88c00015 	stw	r3,0(r17)
   2fecc:	003ff706 	br	2feac <__alt_data_end+0xffff0aac>

0002fed0 <_close_r>:
   2fed0:	defffd04 	addi	sp,sp,-12
   2fed4:	dc000015 	stw	r16,0(sp)
   2fed8:	040000f4 	movhi	r16,3
   2fedc:	dc400115 	stw	r17,4(sp)
   2fee0:	841ffe04 	addi	r16,r16,32760
   2fee4:	2023883a 	mov	r17,r4
   2fee8:	2809883a 	mov	r4,r5
   2feec:	dfc00215 	stw	ra,8(sp)
   2fef0:	80000015 	stw	zero,0(r16)
   2fef4:	00316ec0 	call	316ec <close>
   2fef8:	00ffffc4 	movi	r3,-1
   2fefc:	10c00526 	beq	r2,r3,2ff14 <_close_r+0x44>
   2ff00:	dfc00217 	ldw	ra,8(sp)
   2ff04:	dc400117 	ldw	r17,4(sp)
   2ff08:	dc000017 	ldw	r16,0(sp)
   2ff0c:	dec00304 	addi	sp,sp,12
   2ff10:	f800283a 	ret
   2ff14:	80c00017 	ldw	r3,0(r16)
   2ff18:	183ff926 	beq	r3,zero,2ff00 <__alt_data_end+0xffff0b00>
   2ff1c:	88c00015 	stw	r3,0(r17)
   2ff20:	003ff706 	br	2ff00 <__alt_data_end+0xffff0b00>

0002ff24 <_calloc_r>:
   2ff24:	298b383a 	mul	r5,r5,r6
   2ff28:	defffe04 	addi	sp,sp,-8
   2ff2c:	dfc00115 	stw	ra,4(sp)
   2ff30:	dc000015 	stw	r16,0(sp)
   2ff34:	002c32c0 	call	2c32c <_malloc_r>
   2ff38:	10002926 	beq	r2,zero,2ffe0 <_calloc_r+0xbc>
   2ff3c:	11bfff17 	ldw	r6,-4(r2)
   2ff40:	1021883a 	mov	r16,r2
   2ff44:	00bfff04 	movi	r2,-4
   2ff48:	308c703a 	and	r6,r6,r2
   2ff4c:	00c00904 	movi	r3,36
   2ff50:	308d883a 	add	r6,r6,r2
   2ff54:	19801636 	bltu	r3,r6,2ffb0 <_calloc_r+0x8c>
   2ff58:	008004c4 	movi	r2,19
   2ff5c:	11800b2e 	bgeu	r2,r6,2ff8c <_calloc_r+0x68>
   2ff60:	80000015 	stw	zero,0(r16)
   2ff64:	80000115 	stw	zero,4(r16)
   2ff68:	008006c4 	movi	r2,27
   2ff6c:	11801a2e 	bgeu	r2,r6,2ffd8 <_calloc_r+0xb4>
   2ff70:	80000215 	stw	zero,8(r16)
   2ff74:	80000315 	stw	zero,12(r16)
   2ff78:	30c0151e 	bne	r6,r3,2ffd0 <_calloc_r+0xac>
   2ff7c:	80000415 	stw	zero,16(r16)
   2ff80:	80800604 	addi	r2,r16,24
   2ff84:	80000515 	stw	zero,20(r16)
   2ff88:	00000106 	br	2ff90 <_calloc_r+0x6c>
   2ff8c:	8005883a 	mov	r2,r16
   2ff90:	10000015 	stw	zero,0(r2)
   2ff94:	10000115 	stw	zero,4(r2)
   2ff98:	10000215 	stw	zero,8(r2)
   2ff9c:	8005883a 	mov	r2,r16
   2ffa0:	dfc00117 	ldw	ra,4(sp)
   2ffa4:	dc000017 	ldw	r16,0(sp)
   2ffa8:	dec00204 	addi	sp,sp,8
   2ffac:	f800283a 	ret
   2ffb0:	000b883a 	mov	r5,zero
   2ffb4:	8009883a 	mov	r4,r16
   2ffb8:	002cec00 	call	2cec0 <memset>
   2ffbc:	8005883a 	mov	r2,r16
   2ffc0:	dfc00117 	ldw	ra,4(sp)
   2ffc4:	dc000017 	ldw	r16,0(sp)
   2ffc8:	dec00204 	addi	sp,sp,8
   2ffcc:	f800283a 	ret
   2ffd0:	80800404 	addi	r2,r16,16
   2ffd4:	003fee06 	br	2ff90 <__alt_data_end+0xffff0b90>
   2ffd8:	80800204 	addi	r2,r16,8
   2ffdc:	003fec06 	br	2ff90 <__alt_data_end+0xffff0b90>
   2ffe0:	0005883a 	mov	r2,zero
   2ffe4:	003fee06 	br	2ffa0 <__alt_data_end+0xffff0ba0>

0002ffe8 <_fclose_r>:
   2ffe8:	28003926 	beq	r5,zero,300d0 <_fclose_r+0xe8>
   2ffec:	defffc04 	addi	sp,sp,-16
   2fff0:	dc400115 	stw	r17,4(sp)
   2fff4:	dc000015 	stw	r16,0(sp)
   2fff8:	dfc00315 	stw	ra,12(sp)
   2fffc:	dc800215 	stw	r18,8(sp)
   30000:	2023883a 	mov	r17,r4
   30004:	2821883a 	mov	r16,r5
   30008:	20000226 	beq	r4,zero,30014 <_fclose_r+0x2c>
   3000c:	20800e17 	ldw	r2,56(r4)
   30010:	10002726 	beq	r2,zero,300b0 <_fclose_r+0xc8>
   30014:	8080030f 	ldh	r2,12(r16)
   30018:	1000071e 	bne	r2,zero,30038 <_fclose_r+0x50>
   3001c:	0005883a 	mov	r2,zero
   30020:	dfc00317 	ldw	ra,12(sp)
   30024:	dc800217 	ldw	r18,8(sp)
   30028:	dc400117 	ldw	r17,4(sp)
   3002c:	dc000017 	ldw	r16,0(sp)
   30030:	dec00404 	addi	sp,sp,16
   30034:	f800283a 	ret
   30038:	800b883a 	mov	r5,r16
   3003c:	8809883a 	mov	r4,r17
   30040:	002afd40 	call	2afd4 <__sflush_r>
   30044:	1025883a 	mov	r18,r2
   30048:	80800b17 	ldw	r2,44(r16)
   3004c:	10000426 	beq	r2,zero,30060 <_fclose_r+0x78>
   30050:	81400717 	ldw	r5,28(r16)
   30054:	8809883a 	mov	r4,r17
   30058:	103ee83a 	callr	r2
   3005c:	10001616 	blt	r2,zero,300b8 <_fclose_r+0xd0>
   30060:	8080030b 	ldhu	r2,12(r16)
   30064:	1080200c 	andi	r2,r2,128
   30068:	1000151e 	bne	r2,zero,300c0 <_fclose_r+0xd8>
   3006c:	81400c17 	ldw	r5,48(r16)
   30070:	28000526 	beq	r5,zero,30088 <_fclose_r+0xa0>
   30074:	80801004 	addi	r2,r16,64
   30078:	28800226 	beq	r5,r2,30084 <_fclose_r+0x9c>
   3007c:	8809883a 	mov	r4,r17
   30080:	002b7400 	call	2b740 <_free_r>
   30084:	80000c15 	stw	zero,48(r16)
   30088:	81401117 	ldw	r5,68(r16)
   3008c:	28000326 	beq	r5,zero,3009c <_fclose_r+0xb4>
   30090:	8809883a 	mov	r4,r17
   30094:	002b7400 	call	2b740 <_free_r>
   30098:	80001115 	stw	zero,68(r16)
   3009c:	002b5dc0 	call	2b5dc <__sfp_lock_acquire>
   300a0:	8000030d 	sth	zero,12(r16)
   300a4:	002b5e00 	call	2b5e0 <__sfp_lock_release>
   300a8:	9005883a 	mov	r2,r18
   300ac:	003fdc06 	br	30020 <__alt_data_end+0xffff0c20>
   300b0:	002b5cc0 	call	2b5cc <__sinit>
   300b4:	003fd706 	br	30014 <__alt_data_end+0xffff0c14>
   300b8:	04bfffc4 	movi	r18,-1
   300bc:	003fe806 	br	30060 <__alt_data_end+0xffff0c60>
   300c0:	81400417 	ldw	r5,16(r16)
   300c4:	8809883a 	mov	r4,r17
   300c8:	002b7400 	call	2b740 <_free_r>
   300cc:	003fe706 	br	3006c <__alt_data_end+0xffff0c6c>
   300d0:	0005883a 	mov	r2,zero
   300d4:	f800283a 	ret

000300d8 <fclose>:
   300d8:	008000f4 	movhi	r2,3
   300dc:	10992a04 	addi	r2,r2,25768
   300e0:	200b883a 	mov	r5,r4
   300e4:	11000017 	ldw	r4,0(r2)
   300e8:	002ffe81 	jmpi	2ffe8 <_fclose_r>

000300ec <__fputwc>:
   300ec:	defff804 	addi	sp,sp,-32
   300f0:	dcc00415 	stw	r19,16(sp)
   300f4:	dc800315 	stw	r18,12(sp)
   300f8:	dc000115 	stw	r16,4(sp)
   300fc:	dfc00715 	stw	ra,28(sp)
   30100:	dd400615 	stw	r21,24(sp)
   30104:	dd000515 	stw	r20,20(sp)
   30108:	dc400215 	stw	r17,8(sp)
   3010c:	2027883a 	mov	r19,r4
   30110:	2825883a 	mov	r18,r5
   30114:	3021883a 	mov	r16,r6
   30118:	002c11c0 	call	2c11c <__locale_mb_cur_max>
   3011c:	00c00044 	movi	r3,1
   30120:	10c03e26 	beq	r2,r3,3021c <__fputwc+0x130>
   30124:	81c01704 	addi	r7,r16,92
   30128:	900d883a 	mov	r6,r18
   3012c:	d80b883a 	mov	r5,sp
   30130:	9809883a 	mov	r4,r19
   30134:	00305bc0 	call	305bc <_wcrtomb_r>
   30138:	1029883a 	mov	r20,r2
   3013c:	00bfffc4 	movi	r2,-1
   30140:	a0802026 	beq	r20,r2,301c4 <__fputwc+0xd8>
   30144:	d9400003 	ldbu	r5,0(sp)
   30148:	a0001c26 	beq	r20,zero,301bc <__fputwc+0xd0>
   3014c:	0023883a 	mov	r17,zero
   30150:	05400284 	movi	r21,10
   30154:	00000906 	br	3017c <__fputwc+0x90>
   30158:	80800017 	ldw	r2,0(r16)
   3015c:	11400005 	stb	r5,0(r2)
   30160:	80c00017 	ldw	r3,0(r16)
   30164:	18c00044 	addi	r3,r3,1
   30168:	80c00015 	stw	r3,0(r16)
   3016c:	8c400044 	addi	r17,r17,1
   30170:	dc45883a 	add	r2,sp,r17
   30174:	8d00112e 	bgeu	r17,r20,301bc <__fputwc+0xd0>
   30178:	11400003 	ldbu	r5,0(r2)
   3017c:	80c00217 	ldw	r3,8(r16)
   30180:	18ffffc4 	addi	r3,r3,-1
   30184:	80c00215 	stw	r3,8(r16)
   30188:	183ff30e 	bge	r3,zero,30158 <__alt_data_end+0xffff0d58>
   3018c:	80800617 	ldw	r2,24(r16)
   30190:	18801916 	blt	r3,r2,301f8 <__fputwc+0x10c>
   30194:	80800017 	ldw	r2,0(r16)
   30198:	11400005 	stb	r5,0(r2)
   3019c:	80800017 	ldw	r2,0(r16)
   301a0:	10c00003 	ldbu	r3,0(r2)
   301a4:	10800044 	addi	r2,r2,1
   301a8:	1d402326 	beq	r3,r21,30238 <__fputwc+0x14c>
   301ac:	80800015 	stw	r2,0(r16)
   301b0:	8c400044 	addi	r17,r17,1
   301b4:	dc45883a 	add	r2,sp,r17
   301b8:	8d3fef36 	bltu	r17,r20,30178 <__alt_data_end+0xffff0d78>
   301bc:	9005883a 	mov	r2,r18
   301c0:	00000406 	br	301d4 <__fputwc+0xe8>
   301c4:	80c0030b 	ldhu	r3,12(r16)
   301c8:	a005883a 	mov	r2,r20
   301cc:	18c01014 	ori	r3,r3,64
   301d0:	80c0030d 	sth	r3,12(r16)
   301d4:	dfc00717 	ldw	ra,28(sp)
   301d8:	dd400617 	ldw	r21,24(sp)
   301dc:	dd000517 	ldw	r20,20(sp)
   301e0:	dcc00417 	ldw	r19,16(sp)
   301e4:	dc800317 	ldw	r18,12(sp)
   301e8:	dc400217 	ldw	r17,8(sp)
   301ec:	dc000117 	ldw	r16,4(sp)
   301f0:	dec00804 	addi	sp,sp,32
   301f4:	f800283a 	ret
   301f8:	800d883a 	mov	r6,r16
   301fc:	29403fcc 	andi	r5,r5,255
   30200:	9809883a 	mov	r4,r19
   30204:	00304640 	call	30464 <__swbuf_r>
   30208:	10bfffe0 	cmpeqi	r2,r2,-1
   3020c:	10803fcc 	andi	r2,r2,255
   30210:	103fd626 	beq	r2,zero,3016c <__alt_data_end+0xffff0d6c>
   30214:	00bfffc4 	movi	r2,-1
   30218:	003fee06 	br	301d4 <__alt_data_end+0xffff0dd4>
   3021c:	90ffffc4 	addi	r3,r18,-1
   30220:	01003f84 	movi	r4,254
   30224:	20ffbf36 	bltu	r4,r3,30124 <__alt_data_end+0xffff0d24>
   30228:	900b883a 	mov	r5,r18
   3022c:	dc800005 	stb	r18,0(sp)
   30230:	1029883a 	mov	r20,r2
   30234:	003fc506 	br	3014c <__alt_data_end+0xffff0d4c>
   30238:	800d883a 	mov	r6,r16
   3023c:	a80b883a 	mov	r5,r21
   30240:	9809883a 	mov	r4,r19
   30244:	00304640 	call	30464 <__swbuf_r>
   30248:	10bfffe0 	cmpeqi	r2,r2,-1
   3024c:	003fef06 	br	3020c <__alt_data_end+0xffff0e0c>

00030250 <_fputwc_r>:
   30250:	3080030b 	ldhu	r2,12(r6)
   30254:	10c8000c 	andi	r3,r2,8192
   30258:	1800051e 	bne	r3,zero,30270 <_fputwc_r+0x20>
   3025c:	30c01917 	ldw	r3,100(r6)
   30260:	10880014 	ori	r2,r2,8192
   30264:	3080030d 	sth	r2,12(r6)
   30268:	18880014 	ori	r2,r3,8192
   3026c:	30801915 	stw	r2,100(r6)
   30270:	00300ec1 	jmpi	300ec <__fputwc>

00030274 <fputwc>:
   30274:	008000f4 	movhi	r2,3
   30278:	defffc04 	addi	sp,sp,-16
   3027c:	10992a04 	addi	r2,r2,25768
   30280:	dc000115 	stw	r16,4(sp)
   30284:	14000017 	ldw	r16,0(r2)
   30288:	dc400215 	stw	r17,8(sp)
   3028c:	dfc00315 	stw	ra,12(sp)
   30290:	2023883a 	mov	r17,r4
   30294:	80000226 	beq	r16,zero,302a0 <fputwc+0x2c>
   30298:	80800e17 	ldw	r2,56(r16)
   3029c:	10001026 	beq	r2,zero,302e0 <fputwc+0x6c>
   302a0:	2880030b 	ldhu	r2,12(r5)
   302a4:	10c8000c 	andi	r3,r2,8192
   302a8:	1800051e 	bne	r3,zero,302c0 <fputwc+0x4c>
   302ac:	28c01917 	ldw	r3,100(r5)
   302b0:	10880014 	ori	r2,r2,8192
   302b4:	2880030d 	sth	r2,12(r5)
   302b8:	18880014 	ori	r2,r3,8192
   302bc:	28801915 	stw	r2,100(r5)
   302c0:	280d883a 	mov	r6,r5
   302c4:	8009883a 	mov	r4,r16
   302c8:	880b883a 	mov	r5,r17
   302cc:	dfc00317 	ldw	ra,12(sp)
   302d0:	dc400217 	ldw	r17,8(sp)
   302d4:	dc000117 	ldw	r16,4(sp)
   302d8:	dec00404 	addi	sp,sp,16
   302dc:	00300ec1 	jmpi	300ec <__fputwc>
   302e0:	8009883a 	mov	r4,r16
   302e4:	d9400015 	stw	r5,0(sp)
   302e8:	002b5cc0 	call	2b5cc <__sinit>
   302ec:	d9400017 	ldw	r5,0(sp)
   302f0:	003feb06 	br	302a0 <__alt_data_end+0xffff0ea0>

000302f4 <_fstat_r>:
   302f4:	defffd04 	addi	sp,sp,-12
   302f8:	2805883a 	mov	r2,r5
   302fc:	dc000015 	stw	r16,0(sp)
   30300:	040000f4 	movhi	r16,3
   30304:	dc400115 	stw	r17,4(sp)
   30308:	841ffe04 	addi	r16,r16,32760
   3030c:	2023883a 	mov	r17,r4
   30310:	300b883a 	mov	r5,r6
   30314:	1009883a 	mov	r4,r2
   30318:	dfc00215 	stw	ra,8(sp)
   3031c:	80000015 	stw	zero,0(r16)
   30320:	00318240 	call	31824 <fstat>
   30324:	00ffffc4 	movi	r3,-1
   30328:	10c00526 	beq	r2,r3,30340 <_fstat_r+0x4c>
   3032c:	dfc00217 	ldw	ra,8(sp)
   30330:	dc400117 	ldw	r17,4(sp)
   30334:	dc000017 	ldw	r16,0(sp)
   30338:	dec00304 	addi	sp,sp,12
   3033c:	f800283a 	ret
   30340:	80c00017 	ldw	r3,0(r16)
   30344:	183ff926 	beq	r3,zero,3032c <__alt_data_end+0xffff0f2c>
   30348:	88c00015 	stw	r3,0(r17)
   3034c:	003ff706 	br	3032c <__alt_data_end+0xffff0f2c>

00030350 <_isatty_r>:
   30350:	defffd04 	addi	sp,sp,-12
   30354:	dc000015 	stw	r16,0(sp)
   30358:	040000f4 	movhi	r16,3
   3035c:	dc400115 	stw	r17,4(sp)
   30360:	841ffe04 	addi	r16,r16,32760
   30364:	2023883a 	mov	r17,r4
   30368:	2809883a 	mov	r4,r5
   3036c:	dfc00215 	stw	ra,8(sp)
   30370:	80000015 	stw	zero,0(r16)
   30374:	00319100 	call	31910 <isatty>
   30378:	00ffffc4 	movi	r3,-1
   3037c:	10c00526 	beq	r2,r3,30394 <_isatty_r+0x44>
   30380:	dfc00217 	ldw	ra,8(sp)
   30384:	dc400117 	ldw	r17,4(sp)
   30388:	dc000017 	ldw	r16,0(sp)
   3038c:	dec00304 	addi	sp,sp,12
   30390:	f800283a 	ret
   30394:	80c00017 	ldw	r3,0(r16)
   30398:	183ff926 	beq	r3,zero,30380 <__alt_data_end+0xffff0f80>
   3039c:	88c00015 	stw	r3,0(r17)
   303a0:	003ff706 	br	30380 <__alt_data_end+0xffff0f80>

000303a4 <_lseek_r>:
   303a4:	defffd04 	addi	sp,sp,-12
   303a8:	2805883a 	mov	r2,r5
   303ac:	dc000015 	stw	r16,0(sp)
   303b0:	040000f4 	movhi	r16,3
   303b4:	dc400115 	stw	r17,4(sp)
   303b8:	300b883a 	mov	r5,r6
   303bc:	841ffe04 	addi	r16,r16,32760
   303c0:	2023883a 	mov	r17,r4
   303c4:	380d883a 	mov	r6,r7
   303c8:	1009883a 	mov	r4,r2
   303cc:	dfc00215 	stw	ra,8(sp)
   303d0:	80000015 	stw	zero,0(r16)
   303d4:	0031adc0 	call	31adc <lseek>
   303d8:	00ffffc4 	movi	r3,-1
   303dc:	10c00526 	beq	r2,r3,303f4 <_lseek_r+0x50>
   303e0:	dfc00217 	ldw	ra,8(sp)
   303e4:	dc400117 	ldw	r17,4(sp)
   303e8:	dc000017 	ldw	r16,0(sp)
   303ec:	dec00304 	addi	sp,sp,12
   303f0:	f800283a 	ret
   303f4:	80c00017 	ldw	r3,0(r16)
   303f8:	183ff926 	beq	r3,zero,303e0 <__alt_data_end+0xffff0fe0>
   303fc:	88c00015 	stw	r3,0(r17)
   30400:	003ff706 	br	303e0 <__alt_data_end+0xffff0fe0>

00030404 <_read_r>:
   30404:	defffd04 	addi	sp,sp,-12
   30408:	2805883a 	mov	r2,r5
   3040c:	dc000015 	stw	r16,0(sp)
   30410:	040000f4 	movhi	r16,3
   30414:	dc400115 	stw	r17,4(sp)
   30418:	300b883a 	mov	r5,r6
   3041c:	841ffe04 	addi	r16,r16,32760
   30420:	2023883a 	mov	r17,r4
   30424:	380d883a 	mov	r6,r7
   30428:	1009883a 	mov	r4,r2
   3042c:	dfc00215 	stw	ra,8(sp)
   30430:	80000015 	stw	zero,0(r16)
   30434:	0031cb00 	call	31cb0 <read>
   30438:	00ffffc4 	movi	r3,-1
   3043c:	10c00526 	beq	r2,r3,30454 <_read_r+0x50>
   30440:	dfc00217 	ldw	ra,8(sp)
   30444:	dc400117 	ldw	r17,4(sp)
   30448:	dc000017 	ldw	r16,0(sp)
   3044c:	dec00304 	addi	sp,sp,12
   30450:	f800283a 	ret
   30454:	80c00017 	ldw	r3,0(r16)
   30458:	183ff926 	beq	r3,zero,30440 <__alt_data_end+0xffff1040>
   3045c:	88c00015 	stw	r3,0(r17)
   30460:	003ff706 	br	30440 <__alt_data_end+0xffff1040>

00030464 <__swbuf_r>:
   30464:	defffb04 	addi	sp,sp,-20
   30468:	dcc00315 	stw	r19,12(sp)
   3046c:	dc800215 	stw	r18,8(sp)
   30470:	dc000015 	stw	r16,0(sp)
   30474:	dfc00415 	stw	ra,16(sp)
   30478:	dc400115 	stw	r17,4(sp)
   3047c:	2025883a 	mov	r18,r4
   30480:	2827883a 	mov	r19,r5
   30484:	3021883a 	mov	r16,r6
   30488:	20000226 	beq	r4,zero,30494 <__swbuf_r+0x30>
   3048c:	20800e17 	ldw	r2,56(r4)
   30490:	10004226 	beq	r2,zero,3059c <__swbuf_r+0x138>
   30494:	80800617 	ldw	r2,24(r16)
   30498:	8100030b 	ldhu	r4,12(r16)
   3049c:	80800215 	stw	r2,8(r16)
   304a0:	2080020c 	andi	r2,r4,8
   304a4:	10003626 	beq	r2,zero,30580 <__swbuf_r+0x11c>
   304a8:	80c00417 	ldw	r3,16(r16)
   304ac:	18003426 	beq	r3,zero,30580 <__swbuf_r+0x11c>
   304b0:	2088000c 	andi	r2,r4,8192
   304b4:	9c403fcc 	andi	r17,r19,255
   304b8:	10001a26 	beq	r2,zero,30524 <__swbuf_r+0xc0>
   304bc:	80800017 	ldw	r2,0(r16)
   304c0:	81000517 	ldw	r4,20(r16)
   304c4:	10c7c83a 	sub	r3,r2,r3
   304c8:	1900200e 	bge	r3,r4,3054c <__swbuf_r+0xe8>
   304cc:	18c00044 	addi	r3,r3,1
   304d0:	81000217 	ldw	r4,8(r16)
   304d4:	11400044 	addi	r5,r2,1
   304d8:	81400015 	stw	r5,0(r16)
   304dc:	213fffc4 	addi	r4,r4,-1
   304e0:	81000215 	stw	r4,8(r16)
   304e4:	14c00005 	stb	r19,0(r2)
   304e8:	80800517 	ldw	r2,20(r16)
   304ec:	10c01e26 	beq	r2,r3,30568 <__swbuf_r+0x104>
   304f0:	8080030b 	ldhu	r2,12(r16)
   304f4:	1080004c 	andi	r2,r2,1
   304f8:	10000226 	beq	r2,zero,30504 <__swbuf_r+0xa0>
   304fc:	00800284 	movi	r2,10
   30500:	88801926 	beq	r17,r2,30568 <__swbuf_r+0x104>
   30504:	8805883a 	mov	r2,r17
   30508:	dfc00417 	ldw	ra,16(sp)
   3050c:	dcc00317 	ldw	r19,12(sp)
   30510:	dc800217 	ldw	r18,8(sp)
   30514:	dc400117 	ldw	r17,4(sp)
   30518:	dc000017 	ldw	r16,0(sp)
   3051c:	dec00504 	addi	sp,sp,20
   30520:	f800283a 	ret
   30524:	81401917 	ldw	r5,100(r16)
   30528:	00b7ffc4 	movi	r2,-8193
   3052c:	21080014 	ori	r4,r4,8192
   30530:	2884703a 	and	r2,r5,r2
   30534:	80801915 	stw	r2,100(r16)
   30538:	80800017 	ldw	r2,0(r16)
   3053c:	8100030d 	sth	r4,12(r16)
   30540:	81000517 	ldw	r4,20(r16)
   30544:	10c7c83a 	sub	r3,r2,r3
   30548:	193fe016 	blt	r3,r4,304cc <__alt_data_end+0xffff10cc>
   3054c:	800b883a 	mov	r5,r16
   30550:	9009883a 	mov	r4,r18
   30554:	002b1f00 	call	2b1f0 <_fflush_r>
   30558:	1000071e 	bne	r2,zero,30578 <__swbuf_r+0x114>
   3055c:	80800017 	ldw	r2,0(r16)
   30560:	00c00044 	movi	r3,1
   30564:	003fda06 	br	304d0 <__alt_data_end+0xffff10d0>
   30568:	800b883a 	mov	r5,r16
   3056c:	9009883a 	mov	r4,r18
   30570:	002b1f00 	call	2b1f0 <_fflush_r>
   30574:	103fe326 	beq	r2,zero,30504 <__alt_data_end+0xffff1104>
   30578:	00bfffc4 	movi	r2,-1
   3057c:	003fe206 	br	30508 <__alt_data_end+0xffff1108>
   30580:	800b883a 	mov	r5,r16
   30584:	9009883a 	mov	r4,r18
   30588:	00295f80 	call	295f8 <__swsetup_r>
   3058c:	103ffa1e 	bne	r2,zero,30578 <__alt_data_end+0xffff1178>
   30590:	8100030b 	ldhu	r4,12(r16)
   30594:	80c00417 	ldw	r3,16(r16)
   30598:	003fc506 	br	304b0 <__alt_data_end+0xffff10b0>
   3059c:	002b5cc0 	call	2b5cc <__sinit>
   305a0:	003fbc06 	br	30494 <__alt_data_end+0xffff1094>

000305a4 <__swbuf>:
   305a4:	008000f4 	movhi	r2,3
   305a8:	10992a04 	addi	r2,r2,25768
   305ac:	280d883a 	mov	r6,r5
   305b0:	200b883a 	mov	r5,r4
   305b4:	11000017 	ldw	r4,0(r2)
   305b8:	00304641 	jmpi	30464 <__swbuf_r>

000305bc <_wcrtomb_r>:
   305bc:	defff604 	addi	sp,sp,-40
   305c0:	008000f4 	movhi	r2,3
   305c4:	dc800815 	stw	r18,32(sp)
   305c8:	dc400715 	stw	r17,28(sp)
   305cc:	dc000615 	stw	r16,24(sp)
   305d0:	10992e04 	addi	r2,r2,25784
   305d4:	dfc00915 	stw	ra,36(sp)
   305d8:	2021883a 	mov	r16,r4
   305dc:	3823883a 	mov	r17,r7
   305e0:	14800017 	ldw	r18,0(r2)
   305e4:	28001426 	beq	r5,zero,30638 <_wcrtomb_r+0x7c>
   305e8:	d9400415 	stw	r5,16(sp)
   305ec:	d9800515 	stw	r6,20(sp)
   305f0:	002c1100 	call	2c110 <__locale_charset>
   305f4:	d9800517 	ldw	r6,20(sp)
   305f8:	d9400417 	ldw	r5,16(sp)
   305fc:	100f883a 	mov	r7,r2
   30600:	dc400015 	stw	r17,0(sp)
   30604:	8009883a 	mov	r4,r16
   30608:	903ee83a 	callr	r18
   3060c:	00ffffc4 	movi	r3,-1
   30610:	10c0031e 	bne	r2,r3,30620 <_wcrtomb_r+0x64>
   30614:	88000015 	stw	zero,0(r17)
   30618:	00c02284 	movi	r3,138
   3061c:	80c00015 	stw	r3,0(r16)
   30620:	dfc00917 	ldw	ra,36(sp)
   30624:	dc800817 	ldw	r18,32(sp)
   30628:	dc400717 	ldw	r17,28(sp)
   3062c:	dc000617 	ldw	r16,24(sp)
   30630:	dec00a04 	addi	sp,sp,40
   30634:	f800283a 	ret
   30638:	002c1100 	call	2c110 <__locale_charset>
   3063c:	100f883a 	mov	r7,r2
   30640:	dc400015 	stw	r17,0(sp)
   30644:	000d883a 	mov	r6,zero
   30648:	d9400104 	addi	r5,sp,4
   3064c:	8009883a 	mov	r4,r16
   30650:	903ee83a 	callr	r18
   30654:	003fed06 	br	3060c <__alt_data_end+0xffff120c>

00030658 <wcrtomb>:
   30658:	defff604 	addi	sp,sp,-40
   3065c:	008000f4 	movhi	r2,3
   30660:	dc800615 	stw	r18,24(sp)
   30664:	dc400515 	stw	r17,20(sp)
   30668:	10992a04 	addi	r2,r2,25768
   3066c:	dfc00915 	stw	ra,36(sp)
   30670:	dd000815 	stw	r20,32(sp)
   30674:	dcc00715 	stw	r19,28(sp)
   30678:	dc000415 	stw	r16,16(sp)
   3067c:	3025883a 	mov	r18,r6
   30680:	14400017 	ldw	r17,0(r2)
   30684:	20001926 	beq	r4,zero,306ec <wcrtomb+0x94>
   30688:	008000f4 	movhi	r2,3
   3068c:	10992e04 	addi	r2,r2,25784
   30690:	15000017 	ldw	r20,0(r2)
   30694:	2021883a 	mov	r16,r4
   30698:	2827883a 	mov	r19,r5
   3069c:	002c1100 	call	2c110 <__locale_charset>
   306a0:	100f883a 	mov	r7,r2
   306a4:	dc800015 	stw	r18,0(sp)
   306a8:	980d883a 	mov	r6,r19
   306ac:	800b883a 	mov	r5,r16
   306b0:	8809883a 	mov	r4,r17
   306b4:	a03ee83a 	callr	r20
   306b8:	00ffffc4 	movi	r3,-1
   306bc:	10c0031e 	bne	r2,r3,306cc <wcrtomb+0x74>
   306c0:	90000015 	stw	zero,0(r18)
   306c4:	00c02284 	movi	r3,138
   306c8:	88c00015 	stw	r3,0(r17)
   306cc:	dfc00917 	ldw	ra,36(sp)
   306d0:	dd000817 	ldw	r20,32(sp)
   306d4:	dcc00717 	ldw	r19,28(sp)
   306d8:	dc800617 	ldw	r18,24(sp)
   306dc:	dc400517 	ldw	r17,20(sp)
   306e0:	dc000417 	ldw	r16,16(sp)
   306e4:	dec00a04 	addi	sp,sp,40
   306e8:	f800283a 	ret
   306ec:	008000f4 	movhi	r2,3
   306f0:	10992e04 	addi	r2,r2,25784
   306f4:	14000017 	ldw	r16,0(r2)
   306f8:	002c1100 	call	2c110 <__locale_charset>
   306fc:	100f883a 	mov	r7,r2
   30700:	dc800015 	stw	r18,0(sp)
   30704:	000d883a 	mov	r6,zero
   30708:	d9400104 	addi	r5,sp,4
   3070c:	8809883a 	mov	r4,r17
   30710:	803ee83a 	callr	r16
   30714:	003fe806 	br	306b8 <__alt_data_end+0xffff12b8>

00030718 <__ascii_wctomb>:
   30718:	28000526 	beq	r5,zero,30730 <__ascii_wctomb+0x18>
   3071c:	00803fc4 	movi	r2,255
   30720:	11800536 	bltu	r2,r6,30738 <__ascii_wctomb+0x20>
   30724:	29800005 	stb	r6,0(r5)
   30728:	00800044 	movi	r2,1
   3072c:	f800283a 	ret
   30730:	0005883a 	mov	r2,zero
   30734:	f800283a 	ret
   30738:	00802284 	movi	r2,138
   3073c:	20800015 	stw	r2,0(r4)
   30740:	00bfffc4 	movi	r2,-1
   30744:	f800283a 	ret

00030748 <_wctomb_r>:
   30748:	008000f4 	movhi	r2,3
   3074c:	defff904 	addi	sp,sp,-28
   30750:	10992e04 	addi	r2,r2,25784
   30754:	dfc00615 	stw	ra,24(sp)
   30758:	dc400515 	stw	r17,20(sp)
   3075c:	dc000415 	stw	r16,16(sp)
   30760:	3823883a 	mov	r17,r7
   30764:	14000017 	ldw	r16,0(r2)
   30768:	d9000115 	stw	r4,4(sp)
   3076c:	d9400215 	stw	r5,8(sp)
   30770:	d9800315 	stw	r6,12(sp)
   30774:	002c1100 	call	2c110 <__locale_charset>
   30778:	d9800317 	ldw	r6,12(sp)
   3077c:	d9400217 	ldw	r5,8(sp)
   30780:	d9000117 	ldw	r4,4(sp)
   30784:	100f883a 	mov	r7,r2
   30788:	dc400015 	stw	r17,0(sp)
   3078c:	803ee83a 	callr	r16
   30790:	dfc00617 	ldw	ra,24(sp)
   30794:	dc400517 	ldw	r17,20(sp)
   30798:	dc000417 	ldw	r16,16(sp)
   3079c:	dec00704 	addi	sp,sp,28
   307a0:	f800283a 	ret

000307a4 <__udivdi3>:
   307a4:	defff504 	addi	sp,sp,-44
   307a8:	dcc00415 	stw	r19,16(sp)
   307ac:	dc000115 	stw	r16,4(sp)
   307b0:	dfc00a15 	stw	ra,40(sp)
   307b4:	df000915 	stw	fp,36(sp)
   307b8:	ddc00815 	stw	r23,32(sp)
   307bc:	dd800715 	stw	r22,28(sp)
   307c0:	dd400615 	stw	r21,24(sp)
   307c4:	dd000515 	stw	r20,20(sp)
   307c8:	dc800315 	stw	r18,12(sp)
   307cc:	dc400215 	stw	r17,8(sp)
   307d0:	2027883a 	mov	r19,r4
   307d4:	2821883a 	mov	r16,r5
   307d8:	3800411e 	bne	r7,zero,308e0 <__udivdi3+0x13c>
   307dc:	3023883a 	mov	r17,r6
   307e0:	2025883a 	mov	r18,r4
   307e4:	2980522e 	bgeu	r5,r6,30930 <__udivdi3+0x18c>
   307e8:	00bfffd4 	movui	r2,65535
   307ec:	282d883a 	mov	r22,r5
   307f0:	1180a836 	bltu	r2,r6,30a94 <__udivdi3+0x2f0>
   307f4:	00803fc4 	movi	r2,255
   307f8:	1185803a 	cmpltu	r2,r2,r6
   307fc:	100490fa 	slli	r2,r2,3
   30800:	3086d83a 	srl	r3,r6,r2
   30804:	010000f4 	movhi	r4,3
   30808:	2111bec4 	addi	r4,r4,18171
   3080c:	20c7883a 	add	r3,r4,r3
   30810:	18c00003 	ldbu	r3,0(r3)
   30814:	1885883a 	add	r2,r3,r2
   30818:	00c00804 	movi	r3,32
   3081c:	1887c83a 	sub	r3,r3,r2
   30820:	18000526 	beq	r3,zero,30838 <__udivdi3+0x94>
   30824:	80e0983a 	sll	r16,r16,r3
   30828:	9884d83a 	srl	r2,r19,r2
   3082c:	30e2983a 	sll	r17,r6,r3
   30830:	98e4983a 	sll	r18,r19,r3
   30834:	142cb03a 	or	r22,r2,r16
   30838:	882ad43a 	srli	r21,r17,16
   3083c:	b009883a 	mov	r4,r22
   30840:	8d3fffcc 	andi	r20,r17,65535
   30844:	a80b883a 	mov	r5,r21
   30848:	00238380 	call	23838 <__umodsi3>
   3084c:	b009883a 	mov	r4,r22
   30850:	a80b883a 	mov	r5,r21
   30854:	1027883a 	mov	r19,r2
   30858:	00237d40 	call	237d4 <__udivsi3>
   3085c:	102d883a 	mov	r22,r2
   30860:	9826943a 	slli	r19,r19,16
   30864:	9004d43a 	srli	r2,r18,16
   30868:	a5a1383a 	mul	r16,r20,r22
   3086c:	14c4b03a 	or	r2,r2,r19
   30870:	1400052e 	bgeu	r2,r16,30888 <__udivdi3+0xe4>
   30874:	1445883a 	add	r2,r2,r17
   30878:	b0ffffc4 	addi	r3,r22,-1
   3087c:	14400136 	bltu	r2,r17,30884 <__udivdi3+0xe0>
   30880:	14012336 	bltu	r2,r16,30d10 <__udivdi3+0x56c>
   30884:	182d883a 	mov	r22,r3
   30888:	1421c83a 	sub	r16,r2,r16
   3088c:	a80b883a 	mov	r5,r21
   30890:	8009883a 	mov	r4,r16
   30894:	00238380 	call	23838 <__umodsi3>
   30898:	1027883a 	mov	r19,r2
   3089c:	a80b883a 	mov	r5,r21
   308a0:	8009883a 	mov	r4,r16
   308a4:	00237d40 	call	237d4 <__udivsi3>
   308a8:	9826943a 	slli	r19,r19,16
   308ac:	a0a9383a 	mul	r20,r20,r2
   308b0:	94bfffcc 	andi	r18,r18,65535
   308b4:	94e4b03a 	or	r18,r18,r19
   308b8:	9500052e 	bgeu	r18,r20,308d0 <__udivdi3+0x12c>
   308bc:	8ca5883a 	add	r18,r17,r18
   308c0:	10ffffc4 	addi	r3,r2,-1
   308c4:	9440f136 	bltu	r18,r17,30c8c <__udivdi3+0x4e8>
   308c8:	9500f02e 	bgeu	r18,r20,30c8c <__udivdi3+0x4e8>
   308cc:	10bfff84 	addi	r2,r2,-2
   308d0:	b00c943a 	slli	r6,r22,16
   308d4:	0007883a 	mov	r3,zero
   308d8:	3084b03a 	or	r2,r6,r2
   308dc:	00005906 	br	30a44 <__udivdi3+0x2a0>
   308e0:	29c05636 	bltu	r5,r7,30a3c <__udivdi3+0x298>
   308e4:	00bfffd4 	movui	r2,65535
   308e8:	11c0622e 	bgeu	r2,r7,30a74 <__udivdi3+0x2d0>
   308ec:	00804034 	movhi	r2,256
   308f0:	10bfffc4 	addi	r2,r2,-1
   308f4:	11c0ee36 	bltu	r2,r7,30cb0 <__udivdi3+0x50c>
   308f8:	00800404 	movi	r2,16
   308fc:	3886d83a 	srl	r3,r7,r2
   30900:	010000f4 	movhi	r4,3
   30904:	2111bec4 	addi	r4,r4,18171
   30908:	20c7883a 	add	r3,r4,r3
   3090c:	18c00003 	ldbu	r3,0(r3)
   30910:	05400804 	movi	r21,32
   30914:	1885883a 	add	r2,r3,r2
   30918:	a8abc83a 	sub	r21,r21,r2
   3091c:	a800621e 	bne	r21,zero,30aa8 <__udivdi3+0x304>
   30920:	3c00e936 	bltu	r7,r16,30cc8 <__udivdi3+0x524>
   30924:	9985403a 	cmpgeu	r2,r19,r6
   30928:	0007883a 	mov	r3,zero
   3092c:	00004506 	br	30a44 <__udivdi3+0x2a0>
   30930:	3000041e 	bne	r6,zero,30944 <__udivdi3+0x1a0>
   30934:	000b883a 	mov	r5,zero
   30938:	01000044 	movi	r4,1
   3093c:	00237d40 	call	237d4 <__udivsi3>
   30940:	1023883a 	mov	r17,r2
   30944:	00bfffd4 	movui	r2,65535
   30948:	14404e2e 	bgeu	r2,r17,30a84 <__udivdi3+0x2e0>
   3094c:	00804034 	movhi	r2,256
   30950:	10bfffc4 	addi	r2,r2,-1
   30954:	1440d836 	bltu	r2,r17,30cb8 <__udivdi3+0x514>
   30958:	00800404 	movi	r2,16
   3095c:	8886d83a 	srl	r3,r17,r2
   30960:	010000f4 	movhi	r4,3
   30964:	2111bec4 	addi	r4,r4,18171
   30968:	20c7883a 	add	r3,r4,r3
   3096c:	18c00003 	ldbu	r3,0(r3)
   30970:	1885883a 	add	r2,r3,r2
   30974:	00c00804 	movi	r3,32
   30978:	1887c83a 	sub	r3,r3,r2
   3097c:	18008f1e 	bne	r3,zero,30bbc <__udivdi3+0x418>
   30980:	882ad43a 	srli	r21,r17,16
   30984:	8461c83a 	sub	r16,r16,r17
   30988:	8d3fffcc 	andi	r20,r17,65535
   3098c:	00c00044 	movi	r3,1
   30990:	8009883a 	mov	r4,r16
   30994:	a80b883a 	mov	r5,r21
   30998:	d8c00015 	stw	r3,0(sp)
   3099c:	00238380 	call	23838 <__umodsi3>
   309a0:	8009883a 	mov	r4,r16
   309a4:	a80b883a 	mov	r5,r21
   309a8:	1027883a 	mov	r19,r2
   309ac:	00237d40 	call	237d4 <__udivsi3>
   309b0:	9826943a 	slli	r19,r19,16
   309b4:	9008d43a 	srli	r4,r18,16
   309b8:	1521383a 	mul	r16,r2,r20
   309bc:	102d883a 	mov	r22,r2
   309c0:	24c8b03a 	or	r4,r4,r19
   309c4:	d8c00017 	ldw	r3,0(sp)
   309c8:	2400052e 	bgeu	r4,r16,309e0 <__udivdi3+0x23c>
   309cc:	2449883a 	add	r4,r4,r17
   309d0:	b0bfffc4 	addi	r2,r22,-1
   309d4:	24400136 	bltu	r4,r17,309dc <__udivdi3+0x238>
   309d8:	2400ca36 	bltu	r4,r16,30d04 <__udivdi3+0x560>
   309dc:	102d883a 	mov	r22,r2
   309e0:	2421c83a 	sub	r16,r4,r16
   309e4:	a80b883a 	mov	r5,r21
   309e8:	8009883a 	mov	r4,r16
   309ec:	d8c00015 	stw	r3,0(sp)
   309f0:	00238380 	call	23838 <__umodsi3>
   309f4:	1027883a 	mov	r19,r2
   309f8:	a80b883a 	mov	r5,r21
   309fc:	8009883a 	mov	r4,r16
   30a00:	00237d40 	call	237d4 <__udivsi3>
   30a04:	9826943a 	slli	r19,r19,16
   30a08:	1529383a 	mul	r20,r2,r20
   30a0c:	94bfffcc 	andi	r18,r18,65535
   30a10:	94e4b03a 	or	r18,r18,r19
   30a14:	d8c00017 	ldw	r3,0(sp)
   30a18:	9500052e 	bgeu	r18,r20,30a30 <__udivdi3+0x28c>
   30a1c:	8ca5883a 	add	r18,r17,r18
   30a20:	113fffc4 	addi	r4,r2,-1
   30a24:	94409736 	bltu	r18,r17,30c84 <__udivdi3+0x4e0>
   30a28:	9500962e 	bgeu	r18,r20,30c84 <__udivdi3+0x4e0>
   30a2c:	10bfff84 	addi	r2,r2,-2
   30a30:	b00c943a 	slli	r6,r22,16
   30a34:	3084b03a 	or	r2,r6,r2
   30a38:	00000206 	br	30a44 <__udivdi3+0x2a0>
   30a3c:	0007883a 	mov	r3,zero
   30a40:	0005883a 	mov	r2,zero
   30a44:	dfc00a17 	ldw	ra,40(sp)
   30a48:	df000917 	ldw	fp,36(sp)
   30a4c:	ddc00817 	ldw	r23,32(sp)
   30a50:	dd800717 	ldw	r22,28(sp)
   30a54:	dd400617 	ldw	r21,24(sp)
   30a58:	dd000517 	ldw	r20,20(sp)
   30a5c:	dcc00417 	ldw	r19,16(sp)
   30a60:	dc800317 	ldw	r18,12(sp)
   30a64:	dc400217 	ldw	r17,8(sp)
   30a68:	dc000117 	ldw	r16,4(sp)
   30a6c:	dec00b04 	addi	sp,sp,44
   30a70:	f800283a 	ret
   30a74:	00803fc4 	movi	r2,255
   30a78:	11c5803a 	cmpltu	r2,r2,r7
   30a7c:	100490fa 	slli	r2,r2,3
   30a80:	003f9e06 	br	308fc <__alt_data_end+0xffff14fc>
   30a84:	00803fc4 	movi	r2,255
   30a88:	1445803a 	cmpltu	r2,r2,r17
   30a8c:	100490fa 	slli	r2,r2,3
   30a90:	003fb206 	br	3095c <__alt_data_end+0xffff155c>
   30a94:	00804034 	movhi	r2,256
   30a98:	10bfffc4 	addi	r2,r2,-1
   30a9c:	11808836 	bltu	r2,r6,30cc0 <__udivdi3+0x51c>
   30aa0:	00800404 	movi	r2,16
   30aa4:	003f5606 	br	30800 <__alt_data_end+0xffff1400>
   30aa8:	30aed83a 	srl	r23,r6,r2
   30aac:	3d4e983a 	sll	r7,r7,r21
   30ab0:	80acd83a 	srl	r22,r16,r2
   30ab4:	9884d83a 	srl	r2,r19,r2
   30ab8:	3deeb03a 	or	r23,r7,r23
   30abc:	b824d43a 	srli	r18,r23,16
   30ac0:	8560983a 	sll	r16,r16,r21
   30ac4:	b009883a 	mov	r4,r22
   30ac8:	900b883a 	mov	r5,r18
   30acc:	3568983a 	sll	r20,r6,r21
   30ad0:	1420b03a 	or	r16,r2,r16
   30ad4:	00238380 	call	23838 <__umodsi3>
   30ad8:	b009883a 	mov	r4,r22
   30adc:	900b883a 	mov	r5,r18
   30ae0:	1023883a 	mov	r17,r2
   30ae4:	00237d40 	call	237d4 <__udivsi3>
   30ae8:	8808943a 	slli	r4,r17,16
   30aec:	bf3fffcc 	andi	fp,r23,65535
   30af0:	8006d43a 	srli	r3,r16,16
   30af4:	e0a3383a 	mul	r17,fp,r2
   30af8:	100d883a 	mov	r6,r2
   30afc:	1906b03a 	or	r3,r3,r4
   30b00:	1c40042e 	bgeu	r3,r17,30b14 <__udivdi3+0x370>
   30b04:	1dc7883a 	add	r3,r3,r23
   30b08:	10bfffc4 	addi	r2,r2,-1
   30b0c:	1dc0752e 	bgeu	r3,r23,30ce4 <__udivdi3+0x540>
   30b10:	100d883a 	mov	r6,r2
   30b14:	1c63c83a 	sub	r17,r3,r17
   30b18:	900b883a 	mov	r5,r18
   30b1c:	8809883a 	mov	r4,r17
   30b20:	d9800015 	stw	r6,0(sp)
   30b24:	00238380 	call	23838 <__umodsi3>
   30b28:	102d883a 	mov	r22,r2
   30b2c:	8809883a 	mov	r4,r17
   30b30:	900b883a 	mov	r5,r18
   30b34:	00237d40 	call	237d4 <__udivsi3>
   30b38:	b02c943a 	slli	r22,r22,16
   30b3c:	e089383a 	mul	r4,fp,r2
   30b40:	843fffcc 	andi	r16,r16,65535
   30b44:	85a0b03a 	or	r16,r16,r22
   30b48:	d9800017 	ldw	r6,0(sp)
   30b4c:	8100042e 	bgeu	r16,r4,30b60 <__udivdi3+0x3bc>
   30b50:	85e1883a 	add	r16,r16,r23
   30b54:	10ffffc4 	addi	r3,r2,-1
   30b58:	85c05e2e 	bgeu	r16,r23,30cd4 <__udivdi3+0x530>
   30b5c:	1805883a 	mov	r2,r3
   30b60:	300c943a 	slli	r6,r6,16
   30b64:	a17fffcc 	andi	r5,r20,65535
   30b68:	a028d43a 	srli	r20,r20,16
   30b6c:	3084b03a 	or	r2,r6,r2
   30b70:	10ffffcc 	andi	r3,r2,65535
   30b74:	100cd43a 	srli	r6,r2,16
   30b78:	194f383a 	mul	r7,r3,r5
   30b7c:	1d07383a 	mul	r3,r3,r20
   30b80:	314b383a 	mul	r5,r6,r5
   30b84:	3810d43a 	srli	r8,r7,16
   30b88:	8121c83a 	sub	r16,r16,r4
   30b8c:	1947883a 	add	r3,r3,r5
   30b90:	40c7883a 	add	r3,r8,r3
   30b94:	350d383a 	mul	r6,r6,r20
   30b98:	1940022e 	bgeu	r3,r5,30ba4 <__udivdi3+0x400>
   30b9c:	01000074 	movhi	r4,1
   30ba0:	310d883a 	add	r6,r6,r4
   30ba4:	1828d43a 	srli	r20,r3,16
   30ba8:	a18d883a 	add	r6,r20,r6
   30bac:	81803e36 	bltu	r16,r6,30ca8 <__udivdi3+0x504>
   30bb0:	81803826 	beq	r16,r6,30c94 <__udivdi3+0x4f0>
   30bb4:	0007883a 	mov	r3,zero
   30bb8:	003fa206 	br	30a44 <__alt_data_end+0xffff1644>
   30bbc:	88e2983a 	sll	r17,r17,r3
   30bc0:	80a8d83a 	srl	r20,r16,r2
   30bc4:	80e0983a 	sll	r16,r16,r3
   30bc8:	882ad43a 	srli	r21,r17,16
   30bcc:	9884d83a 	srl	r2,r19,r2
   30bd0:	a009883a 	mov	r4,r20
   30bd4:	a80b883a 	mov	r5,r21
   30bd8:	142eb03a 	or	r23,r2,r16
   30bdc:	98e4983a 	sll	r18,r19,r3
   30be0:	00238380 	call	23838 <__umodsi3>
   30be4:	a009883a 	mov	r4,r20
   30be8:	a80b883a 	mov	r5,r21
   30bec:	1021883a 	mov	r16,r2
   30bf0:	00237d40 	call	237d4 <__udivsi3>
   30bf4:	1039883a 	mov	fp,r2
   30bf8:	8d3fffcc 	andi	r20,r17,65535
   30bfc:	8020943a 	slli	r16,r16,16
   30c00:	b804d43a 	srli	r2,r23,16
   30c04:	a72d383a 	mul	r22,r20,fp
   30c08:	1404b03a 	or	r2,r2,r16
   30c0c:	1580062e 	bgeu	r2,r22,30c28 <__udivdi3+0x484>
   30c10:	1445883a 	add	r2,r2,r17
   30c14:	e0ffffc4 	addi	r3,fp,-1
   30c18:	14403836 	bltu	r2,r17,30cfc <__udivdi3+0x558>
   30c1c:	1580372e 	bgeu	r2,r22,30cfc <__udivdi3+0x558>
   30c20:	e73fff84 	addi	fp,fp,-2
   30c24:	1445883a 	add	r2,r2,r17
   30c28:	15adc83a 	sub	r22,r2,r22
   30c2c:	a80b883a 	mov	r5,r21
   30c30:	b009883a 	mov	r4,r22
   30c34:	00238380 	call	23838 <__umodsi3>
   30c38:	1027883a 	mov	r19,r2
   30c3c:	b009883a 	mov	r4,r22
   30c40:	a80b883a 	mov	r5,r21
   30c44:	00237d40 	call	237d4 <__udivsi3>
   30c48:	9826943a 	slli	r19,r19,16
   30c4c:	a0a1383a 	mul	r16,r20,r2
   30c50:	b93fffcc 	andi	r4,r23,65535
   30c54:	24c8b03a 	or	r4,r4,r19
   30c58:	2400062e 	bgeu	r4,r16,30c74 <__udivdi3+0x4d0>
   30c5c:	2449883a 	add	r4,r4,r17
   30c60:	10ffffc4 	addi	r3,r2,-1
   30c64:	24402336 	bltu	r4,r17,30cf4 <__udivdi3+0x550>
   30c68:	2400222e 	bgeu	r4,r16,30cf4 <__udivdi3+0x550>
   30c6c:	10bfff84 	addi	r2,r2,-2
   30c70:	2449883a 	add	r4,r4,r17
   30c74:	e038943a 	slli	fp,fp,16
   30c78:	2421c83a 	sub	r16,r4,r16
   30c7c:	e086b03a 	or	r3,fp,r2
   30c80:	003f4306 	br	30990 <__alt_data_end+0xffff1590>
   30c84:	2005883a 	mov	r2,r4
   30c88:	003f6906 	br	30a30 <__alt_data_end+0xffff1630>
   30c8c:	1805883a 	mov	r2,r3
   30c90:	003f0f06 	br	308d0 <__alt_data_end+0xffff14d0>
   30c94:	1806943a 	slli	r3,r3,16
   30c98:	9d66983a 	sll	r19,r19,r21
   30c9c:	39ffffcc 	andi	r7,r7,65535
   30ca0:	19c7883a 	add	r3,r3,r7
   30ca4:	98ffc32e 	bgeu	r19,r3,30bb4 <__alt_data_end+0xffff17b4>
   30ca8:	10bfffc4 	addi	r2,r2,-1
   30cac:	003fc106 	br	30bb4 <__alt_data_end+0xffff17b4>
   30cb0:	00800604 	movi	r2,24
   30cb4:	003f1106 	br	308fc <__alt_data_end+0xffff14fc>
   30cb8:	00800604 	movi	r2,24
   30cbc:	003f2706 	br	3095c <__alt_data_end+0xffff155c>
   30cc0:	00800604 	movi	r2,24
   30cc4:	003ece06 	br	30800 <__alt_data_end+0xffff1400>
   30cc8:	0007883a 	mov	r3,zero
   30ccc:	00800044 	movi	r2,1
   30cd0:	003f5c06 	br	30a44 <__alt_data_end+0xffff1644>
   30cd4:	813fa12e 	bgeu	r16,r4,30b5c <__alt_data_end+0xffff175c>
   30cd8:	10bfff84 	addi	r2,r2,-2
   30cdc:	85e1883a 	add	r16,r16,r23
   30ce0:	003f9f06 	br	30b60 <__alt_data_end+0xffff1760>
   30ce4:	1c7f8a2e 	bgeu	r3,r17,30b10 <__alt_data_end+0xffff1710>
   30ce8:	31bfff84 	addi	r6,r6,-2
   30cec:	1dc7883a 	add	r3,r3,r23
   30cf0:	003f8806 	br	30b14 <__alt_data_end+0xffff1714>
   30cf4:	1805883a 	mov	r2,r3
   30cf8:	003fde06 	br	30c74 <__alt_data_end+0xffff1874>
   30cfc:	1839883a 	mov	fp,r3
   30d00:	003fc906 	br	30c28 <__alt_data_end+0xffff1828>
   30d04:	b5bfff84 	addi	r22,r22,-2
   30d08:	2449883a 	add	r4,r4,r17
   30d0c:	003f3406 	br	309e0 <__alt_data_end+0xffff15e0>
   30d10:	b5bfff84 	addi	r22,r22,-2
   30d14:	1445883a 	add	r2,r2,r17
   30d18:	003edb06 	br	30888 <__alt_data_end+0xffff1488>

00030d1c <__umoddi3>:
   30d1c:	defff404 	addi	sp,sp,-48
   30d20:	df000a15 	stw	fp,40(sp)
   30d24:	dc400315 	stw	r17,12(sp)
   30d28:	dc000215 	stw	r16,8(sp)
   30d2c:	dfc00b15 	stw	ra,44(sp)
   30d30:	ddc00915 	stw	r23,36(sp)
   30d34:	dd800815 	stw	r22,32(sp)
   30d38:	dd400715 	stw	r21,28(sp)
   30d3c:	dd000615 	stw	r20,24(sp)
   30d40:	dcc00515 	stw	r19,20(sp)
   30d44:	dc800415 	stw	r18,16(sp)
   30d48:	2021883a 	mov	r16,r4
   30d4c:	2823883a 	mov	r17,r5
   30d50:	2839883a 	mov	fp,r5
   30d54:	38003c1e 	bne	r7,zero,30e48 <__umoddi3+0x12c>
   30d58:	3027883a 	mov	r19,r6
   30d5c:	2029883a 	mov	r20,r4
   30d60:	2980512e 	bgeu	r5,r6,30ea8 <__umoddi3+0x18c>
   30d64:	00bfffd4 	movui	r2,65535
   30d68:	11809a36 	bltu	r2,r6,30fd4 <__umoddi3+0x2b8>
   30d6c:	01003fc4 	movi	r4,255
   30d70:	2189803a 	cmpltu	r4,r4,r6
   30d74:	200890fa 	slli	r4,r4,3
   30d78:	3104d83a 	srl	r2,r6,r4
   30d7c:	00c000f4 	movhi	r3,3
   30d80:	18d1bec4 	addi	r3,r3,18171
   30d84:	1885883a 	add	r2,r3,r2
   30d88:	10c00003 	ldbu	r3,0(r2)
   30d8c:	00800804 	movi	r2,32
   30d90:	1909883a 	add	r4,r3,r4
   30d94:	1125c83a 	sub	r18,r2,r4
   30d98:	90000526 	beq	r18,zero,30db0 <__umoddi3+0x94>
   30d9c:	8ca2983a 	sll	r17,r17,r18
   30da0:	8108d83a 	srl	r4,r16,r4
   30da4:	34a6983a 	sll	r19,r6,r18
   30da8:	84a8983a 	sll	r20,r16,r18
   30dac:	2478b03a 	or	fp,r4,r17
   30db0:	982ed43a 	srli	r23,r19,16
   30db4:	e009883a 	mov	r4,fp
   30db8:	9dbfffcc 	andi	r22,r19,65535
   30dbc:	b80b883a 	mov	r5,r23
   30dc0:	00238380 	call	23838 <__umodsi3>
   30dc4:	e009883a 	mov	r4,fp
   30dc8:	b80b883a 	mov	r5,r23
   30dcc:	102b883a 	mov	r21,r2
   30dd0:	00237d40 	call	237d4 <__udivsi3>
   30dd4:	a806943a 	slli	r3,r21,16
   30dd8:	a008d43a 	srli	r4,r20,16
   30ddc:	b085383a 	mul	r2,r22,r2
   30de0:	20c8b03a 	or	r4,r4,r3
   30de4:	2080032e 	bgeu	r4,r2,30df4 <__umoddi3+0xd8>
   30de8:	24c9883a 	add	r4,r4,r19
   30dec:	24c00136 	bltu	r4,r19,30df4 <__umoddi3+0xd8>
   30df0:	20811036 	bltu	r4,r2,31234 <__umoddi3+0x518>
   30df4:	20abc83a 	sub	r21,r4,r2
   30df8:	b80b883a 	mov	r5,r23
   30dfc:	a809883a 	mov	r4,r21
   30e00:	00238380 	call	23838 <__umodsi3>
   30e04:	1023883a 	mov	r17,r2
   30e08:	b80b883a 	mov	r5,r23
   30e0c:	a809883a 	mov	r4,r21
   30e10:	00237d40 	call	237d4 <__udivsi3>
   30e14:	8822943a 	slli	r17,r17,16
   30e18:	b085383a 	mul	r2,r22,r2
   30e1c:	a0ffffcc 	andi	r3,r20,65535
   30e20:	1c46b03a 	or	r3,r3,r17
   30e24:	1880042e 	bgeu	r3,r2,30e38 <__umoddi3+0x11c>
   30e28:	1cc7883a 	add	r3,r3,r19
   30e2c:	1cc00236 	bltu	r3,r19,30e38 <__umoddi3+0x11c>
   30e30:	1880012e 	bgeu	r3,r2,30e38 <__umoddi3+0x11c>
   30e34:	1cc7883a 	add	r3,r3,r19
   30e38:	1885c83a 	sub	r2,r3,r2
   30e3c:	1484d83a 	srl	r2,r2,r18
   30e40:	0007883a 	mov	r3,zero
   30e44:	00004f06 	br	30f84 <__umoddi3+0x268>
   30e48:	29c04c36 	bltu	r5,r7,30f7c <__umoddi3+0x260>
   30e4c:	00bfffd4 	movui	r2,65535
   30e50:	11c0582e 	bgeu	r2,r7,30fb4 <__umoddi3+0x298>
   30e54:	00804034 	movhi	r2,256
   30e58:	10bfffc4 	addi	r2,r2,-1
   30e5c:	11c0e736 	bltu	r2,r7,311fc <__umoddi3+0x4e0>
   30e60:	01000404 	movi	r4,16
   30e64:	3904d83a 	srl	r2,r7,r4
   30e68:	00c000f4 	movhi	r3,3
   30e6c:	18d1bec4 	addi	r3,r3,18171
   30e70:	1885883a 	add	r2,r3,r2
   30e74:	14c00003 	ldbu	r19,0(r2)
   30e78:	00c00804 	movi	r3,32
   30e7c:	9927883a 	add	r19,r19,r4
   30e80:	1ce9c83a 	sub	r20,r3,r19
   30e84:	a000581e 	bne	r20,zero,30fe8 <__umoddi3+0x2cc>
   30e88:	3c400136 	bltu	r7,r17,30e90 <__umoddi3+0x174>
   30e8c:	8180eb36 	bltu	r16,r6,3123c <__umoddi3+0x520>
   30e90:	8185c83a 	sub	r2,r16,r6
   30e94:	89e3c83a 	sub	r17,r17,r7
   30e98:	8089803a 	cmpltu	r4,r16,r2
   30e9c:	8939c83a 	sub	fp,r17,r4
   30ea0:	e007883a 	mov	r3,fp
   30ea4:	00003706 	br	30f84 <__umoddi3+0x268>
   30ea8:	3000041e 	bne	r6,zero,30ebc <__umoddi3+0x1a0>
   30eac:	000b883a 	mov	r5,zero
   30eb0:	01000044 	movi	r4,1
   30eb4:	00237d40 	call	237d4 <__udivsi3>
   30eb8:	1027883a 	mov	r19,r2
   30ebc:	00bfffd4 	movui	r2,65535
   30ec0:	14c0402e 	bgeu	r2,r19,30fc4 <__umoddi3+0x2a8>
   30ec4:	00804034 	movhi	r2,256
   30ec8:	10bfffc4 	addi	r2,r2,-1
   30ecc:	14c0cd36 	bltu	r2,r19,31204 <__umoddi3+0x4e8>
   30ed0:	00800404 	movi	r2,16
   30ed4:	9886d83a 	srl	r3,r19,r2
   30ed8:	010000f4 	movhi	r4,3
   30edc:	2111bec4 	addi	r4,r4,18171
   30ee0:	20c7883a 	add	r3,r4,r3
   30ee4:	18c00003 	ldbu	r3,0(r3)
   30ee8:	1887883a 	add	r3,r3,r2
   30eec:	00800804 	movi	r2,32
   30ef0:	10e5c83a 	sub	r18,r2,r3
   30ef4:	9000901e 	bne	r18,zero,31138 <__umoddi3+0x41c>
   30ef8:	982cd43a 	srli	r22,r19,16
   30efc:	8ce3c83a 	sub	r17,r17,r19
   30f00:	9d7fffcc 	andi	r21,r19,65535
   30f04:	b00b883a 	mov	r5,r22
   30f08:	8809883a 	mov	r4,r17
   30f0c:	00238380 	call	23838 <__umodsi3>
   30f10:	8809883a 	mov	r4,r17
   30f14:	b00b883a 	mov	r5,r22
   30f18:	1021883a 	mov	r16,r2
   30f1c:	00237d40 	call	237d4 <__udivsi3>
   30f20:	8006943a 	slli	r3,r16,16
   30f24:	a008d43a 	srli	r4,r20,16
   30f28:	1545383a 	mul	r2,r2,r21
   30f2c:	20c8b03a 	or	r4,r4,r3
   30f30:	2080042e 	bgeu	r4,r2,30f44 <__umoddi3+0x228>
   30f34:	24c9883a 	add	r4,r4,r19
   30f38:	24c00236 	bltu	r4,r19,30f44 <__umoddi3+0x228>
   30f3c:	2080012e 	bgeu	r4,r2,30f44 <__umoddi3+0x228>
   30f40:	24c9883a 	add	r4,r4,r19
   30f44:	20a1c83a 	sub	r16,r4,r2
   30f48:	b00b883a 	mov	r5,r22
   30f4c:	8009883a 	mov	r4,r16
   30f50:	00238380 	call	23838 <__umodsi3>
   30f54:	1023883a 	mov	r17,r2
   30f58:	b00b883a 	mov	r5,r22
   30f5c:	8009883a 	mov	r4,r16
   30f60:	00237d40 	call	237d4 <__udivsi3>
   30f64:	8822943a 	slli	r17,r17,16
   30f68:	1545383a 	mul	r2,r2,r21
   30f6c:	a53fffcc 	andi	r20,r20,65535
   30f70:	a446b03a 	or	r3,r20,r17
   30f74:	18bfb02e 	bgeu	r3,r2,30e38 <__alt_data_end+0xffff1a38>
   30f78:	003fab06 	br	30e28 <__alt_data_end+0xffff1a28>
   30f7c:	2005883a 	mov	r2,r4
   30f80:	2807883a 	mov	r3,r5
   30f84:	dfc00b17 	ldw	ra,44(sp)
   30f88:	df000a17 	ldw	fp,40(sp)
   30f8c:	ddc00917 	ldw	r23,36(sp)
   30f90:	dd800817 	ldw	r22,32(sp)
   30f94:	dd400717 	ldw	r21,28(sp)
   30f98:	dd000617 	ldw	r20,24(sp)
   30f9c:	dcc00517 	ldw	r19,20(sp)
   30fa0:	dc800417 	ldw	r18,16(sp)
   30fa4:	dc400317 	ldw	r17,12(sp)
   30fa8:	dc000217 	ldw	r16,8(sp)
   30fac:	dec00c04 	addi	sp,sp,48
   30fb0:	f800283a 	ret
   30fb4:	04c03fc4 	movi	r19,255
   30fb8:	99c9803a 	cmpltu	r4,r19,r7
   30fbc:	200890fa 	slli	r4,r4,3
   30fc0:	003fa806 	br	30e64 <__alt_data_end+0xffff1a64>
   30fc4:	00803fc4 	movi	r2,255
   30fc8:	14c5803a 	cmpltu	r2,r2,r19
   30fcc:	100490fa 	slli	r2,r2,3
   30fd0:	003fc006 	br	30ed4 <__alt_data_end+0xffff1ad4>
   30fd4:	00804034 	movhi	r2,256
   30fd8:	10bfffc4 	addi	r2,r2,-1
   30fdc:	11808b36 	bltu	r2,r6,3120c <__umoddi3+0x4f0>
   30fe0:	01000404 	movi	r4,16
   30fe4:	003f6406 	br	30d78 <__alt_data_end+0xffff1978>
   30fe8:	34c4d83a 	srl	r2,r6,r19
   30fec:	3d0e983a 	sll	r7,r7,r20
   30ff0:	8cf8d83a 	srl	fp,r17,r19
   30ff4:	8d10983a 	sll	r8,r17,r20
   30ff8:	38aab03a 	or	r21,r7,r2
   30ffc:	a82cd43a 	srli	r22,r21,16
   31000:	84e2d83a 	srl	r17,r16,r19
   31004:	e009883a 	mov	r4,fp
   31008:	b00b883a 	mov	r5,r22
   3100c:	8a22b03a 	or	r17,r17,r8
   31010:	3524983a 	sll	r18,r6,r20
   31014:	00238380 	call	23838 <__umodsi3>
   31018:	e009883a 	mov	r4,fp
   3101c:	b00b883a 	mov	r5,r22
   31020:	102f883a 	mov	r23,r2
   31024:	00237d40 	call	237d4 <__udivsi3>
   31028:	100d883a 	mov	r6,r2
   3102c:	b808943a 	slli	r4,r23,16
   31030:	aa3fffcc 	andi	r8,r21,65535
   31034:	8804d43a 	srli	r2,r17,16
   31038:	41af383a 	mul	r23,r8,r6
   3103c:	8520983a 	sll	r16,r16,r20
   31040:	1104b03a 	or	r2,r2,r4
   31044:	15c0042e 	bgeu	r2,r23,31058 <__umoddi3+0x33c>
   31048:	1545883a 	add	r2,r2,r21
   3104c:	30ffffc4 	addi	r3,r6,-1
   31050:	1540742e 	bgeu	r2,r21,31224 <__umoddi3+0x508>
   31054:	180d883a 	mov	r6,r3
   31058:	15efc83a 	sub	r23,r2,r23
   3105c:	b00b883a 	mov	r5,r22
   31060:	b809883a 	mov	r4,r23
   31064:	d9800115 	stw	r6,4(sp)
   31068:	da000015 	stw	r8,0(sp)
   3106c:	00238380 	call	23838 <__umodsi3>
   31070:	b00b883a 	mov	r5,r22
   31074:	b809883a 	mov	r4,r23
   31078:	1039883a 	mov	fp,r2
   3107c:	00237d40 	call	237d4 <__udivsi3>
   31080:	da000017 	ldw	r8,0(sp)
   31084:	e038943a 	slli	fp,fp,16
   31088:	100b883a 	mov	r5,r2
   3108c:	4089383a 	mul	r4,r8,r2
   31090:	8a3fffcc 	andi	r8,r17,65535
   31094:	4710b03a 	or	r8,r8,fp
   31098:	d9800117 	ldw	r6,4(sp)
   3109c:	4100042e 	bgeu	r8,r4,310b0 <__umoddi3+0x394>
   310a0:	4551883a 	add	r8,r8,r21
   310a4:	10bfffc4 	addi	r2,r2,-1
   310a8:	45405a2e 	bgeu	r8,r21,31214 <__umoddi3+0x4f8>
   310ac:	100b883a 	mov	r5,r2
   310b0:	300c943a 	slli	r6,r6,16
   310b4:	91ffffcc 	andi	r7,r18,65535
   310b8:	9004d43a 	srli	r2,r18,16
   310bc:	314cb03a 	or	r6,r6,r5
   310c0:	317fffcc 	andi	r5,r6,65535
   310c4:	300cd43a 	srli	r6,r6,16
   310c8:	29d3383a 	mul	r9,r5,r7
   310cc:	288b383a 	mul	r5,r5,r2
   310d0:	31cf383a 	mul	r7,r6,r7
   310d4:	4806d43a 	srli	r3,r9,16
   310d8:	4111c83a 	sub	r8,r8,r4
   310dc:	29cb883a 	add	r5,r5,r7
   310e0:	194b883a 	add	r5,r3,r5
   310e4:	3085383a 	mul	r2,r6,r2
   310e8:	29c0022e 	bgeu	r5,r7,310f4 <__umoddi3+0x3d8>
   310ec:	00c00074 	movhi	r3,1
   310f0:	10c5883a 	add	r2,r2,r3
   310f4:	2808d43a 	srli	r4,r5,16
   310f8:	280a943a 	slli	r5,r5,16
   310fc:	4a7fffcc 	andi	r9,r9,65535
   31100:	2085883a 	add	r2,r4,r2
   31104:	2a4b883a 	add	r5,r5,r9
   31108:	40803636 	bltu	r8,r2,311e4 <__umoddi3+0x4c8>
   3110c:	40804d26 	beq	r8,r2,31244 <__umoddi3+0x528>
   31110:	4089c83a 	sub	r4,r8,r2
   31114:	280f883a 	mov	r7,r5
   31118:	81cfc83a 	sub	r7,r16,r7
   3111c:	81c7803a 	cmpltu	r3,r16,r7
   31120:	20c7c83a 	sub	r3,r4,r3
   31124:	1cc4983a 	sll	r2,r3,r19
   31128:	3d0ed83a 	srl	r7,r7,r20
   3112c:	1d06d83a 	srl	r3,r3,r20
   31130:	11c4b03a 	or	r2,r2,r7
   31134:	003f9306 	br	30f84 <__alt_data_end+0xffff1b84>
   31138:	9ca6983a 	sll	r19,r19,r18
   3113c:	88e8d83a 	srl	r20,r17,r3
   31140:	80c4d83a 	srl	r2,r16,r3
   31144:	982cd43a 	srli	r22,r19,16
   31148:	8ca2983a 	sll	r17,r17,r18
   3114c:	a009883a 	mov	r4,r20
   31150:	b00b883a 	mov	r5,r22
   31154:	1478b03a 	or	fp,r2,r17
   31158:	00238380 	call	23838 <__umodsi3>
   3115c:	a009883a 	mov	r4,r20
   31160:	b00b883a 	mov	r5,r22
   31164:	1023883a 	mov	r17,r2
   31168:	00237d40 	call	237d4 <__udivsi3>
   3116c:	9d7fffcc 	andi	r21,r19,65535
   31170:	880a943a 	slli	r5,r17,16
   31174:	e008d43a 	srli	r4,fp,16
   31178:	a885383a 	mul	r2,r21,r2
   3117c:	84a8983a 	sll	r20,r16,r18
   31180:	2148b03a 	or	r4,r4,r5
   31184:	2080042e 	bgeu	r4,r2,31198 <__umoddi3+0x47c>
   31188:	24c9883a 	add	r4,r4,r19
   3118c:	24c00236 	bltu	r4,r19,31198 <__umoddi3+0x47c>
   31190:	2080012e 	bgeu	r4,r2,31198 <__umoddi3+0x47c>
   31194:	24c9883a 	add	r4,r4,r19
   31198:	20a3c83a 	sub	r17,r4,r2
   3119c:	b00b883a 	mov	r5,r22
   311a0:	8809883a 	mov	r4,r17
   311a4:	00238380 	call	23838 <__umodsi3>
   311a8:	102f883a 	mov	r23,r2
   311ac:	8809883a 	mov	r4,r17
   311b0:	b00b883a 	mov	r5,r22
   311b4:	00237d40 	call	237d4 <__udivsi3>
   311b8:	b82e943a 	slli	r23,r23,16
   311bc:	a885383a 	mul	r2,r21,r2
   311c0:	e13fffcc 	andi	r4,fp,65535
   311c4:	25c8b03a 	or	r4,r4,r23
   311c8:	2080042e 	bgeu	r4,r2,311dc <__umoddi3+0x4c0>
   311cc:	24c9883a 	add	r4,r4,r19
   311d0:	24c00236 	bltu	r4,r19,311dc <__umoddi3+0x4c0>
   311d4:	2080012e 	bgeu	r4,r2,311dc <__umoddi3+0x4c0>
   311d8:	24c9883a 	add	r4,r4,r19
   311dc:	20a3c83a 	sub	r17,r4,r2
   311e0:	003f4806 	br	30f04 <__alt_data_end+0xffff1b04>
   311e4:	2c8fc83a 	sub	r7,r5,r18
   311e8:	1545c83a 	sub	r2,r2,r21
   311ec:	29cb803a 	cmpltu	r5,r5,r7
   311f0:	1145c83a 	sub	r2,r2,r5
   311f4:	4089c83a 	sub	r4,r8,r2
   311f8:	003fc706 	br	31118 <__alt_data_end+0xffff1d18>
   311fc:	01000604 	movi	r4,24
   31200:	003f1806 	br	30e64 <__alt_data_end+0xffff1a64>
   31204:	00800604 	movi	r2,24
   31208:	003f3206 	br	30ed4 <__alt_data_end+0xffff1ad4>
   3120c:	01000604 	movi	r4,24
   31210:	003ed906 	br	30d78 <__alt_data_end+0xffff1978>
   31214:	413fa52e 	bgeu	r8,r4,310ac <__alt_data_end+0xffff1cac>
   31218:	297fff84 	addi	r5,r5,-2
   3121c:	4551883a 	add	r8,r8,r21
   31220:	003fa306 	br	310b0 <__alt_data_end+0xffff1cb0>
   31224:	15ff8b2e 	bgeu	r2,r23,31054 <__alt_data_end+0xffff1c54>
   31228:	31bfff84 	addi	r6,r6,-2
   3122c:	1545883a 	add	r2,r2,r21
   31230:	003f8906 	br	31058 <__alt_data_end+0xffff1c58>
   31234:	24c9883a 	add	r4,r4,r19
   31238:	003eee06 	br	30df4 <__alt_data_end+0xffff19f4>
   3123c:	8005883a 	mov	r2,r16
   31240:	003f1706 	br	30ea0 <__alt_data_end+0xffff1aa0>
   31244:	817fe736 	bltu	r16,r5,311e4 <__alt_data_end+0xffff1de4>
   31248:	280f883a 	mov	r7,r5
   3124c:	0009883a 	mov	r4,zero
   31250:	003fb106 	br	31118 <__alt_data_end+0xffff1d18>

00031254 <__eqdf2>:
   31254:	2804d53a 	srli	r2,r5,20
   31258:	3806d53a 	srli	r3,r7,20
   3125c:	02000434 	movhi	r8,16
   31260:	423fffc4 	addi	r8,r8,-1
   31264:	1081ffcc 	andi	r2,r2,2047
   31268:	0281ffc4 	movi	r10,2047
   3126c:	2a12703a 	and	r9,r5,r8
   31270:	18c1ffcc 	andi	r3,r3,2047
   31274:	3a10703a 	and	r8,r7,r8
   31278:	280ad7fa 	srli	r5,r5,31
   3127c:	380ed7fa 	srli	r7,r7,31
   31280:	12801026 	beq	r2,r10,312c4 <__eqdf2+0x70>
   31284:	0281ffc4 	movi	r10,2047
   31288:	1a800a26 	beq	r3,r10,312b4 <__eqdf2+0x60>
   3128c:	10c00226 	beq	r2,r3,31298 <__eqdf2+0x44>
   31290:	00800044 	movi	r2,1
   31294:	f800283a 	ret
   31298:	4a3ffd1e 	bne	r9,r8,31290 <__alt_data_end+0xffff1e90>
   3129c:	21bffc1e 	bne	r4,r6,31290 <__alt_data_end+0xffff1e90>
   312a0:	29c00c26 	beq	r5,r7,312d4 <__eqdf2+0x80>
   312a4:	103ffa1e 	bne	r2,zero,31290 <__alt_data_end+0xffff1e90>
   312a8:	2244b03a 	or	r2,r4,r9
   312ac:	1004c03a 	cmpne	r2,r2,zero
   312b0:	f800283a 	ret
   312b4:	3214b03a 	or	r10,r6,r8
   312b8:	503ff426 	beq	r10,zero,3128c <__alt_data_end+0xffff1e8c>
   312bc:	00800044 	movi	r2,1
   312c0:	f800283a 	ret
   312c4:	2254b03a 	or	r10,r4,r9
   312c8:	503fee26 	beq	r10,zero,31284 <__alt_data_end+0xffff1e84>
   312cc:	00800044 	movi	r2,1
   312d0:	f800283a 	ret
   312d4:	0005883a 	mov	r2,zero
   312d8:	f800283a 	ret

000312dc <__gedf2>:
   312dc:	2804d53a 	srli	r2,r5,20
   312e0:	3806d53a 	srli	r3,r7,20
   312e4:	02000434 	movhi	r8,16
   312e8:	423fffc4 	addi	r8,r8,-1
   312ec:	1081ffcc 	andi	r2,r2,2047
   312f0:	0241ffc4 	movi	r9,2047
   312f4:	2a14703a 	and	r10,r5,r8
   312f8:	18c1ffcc 	andi	r3,r3,2047
   312fc:	3a10703a 	and	r8,r7,r8
   31300:	280ad7fa 	srli	r5,r5,31
   31304:	380ed7fa 	srli	r7,r7,31
   31308:	12401d26 	beq	r2,r9,31380 <__gedf2+0xa4>
   3130c:	0241ffc4 	movi	r9,2047
   31310:	1a401226 	beq	r3,r9,3135c <__gedf2+0x80>
   31314:	1000081e 	bne	r2,zero,31338 <__gedf2+0x5c>
   31318:	2296b03a 	or	r11,r4,r10
   3131c:	5813003a 	cmpeq	r9,r11,zero
   31320:	1800091e 	bne	r3,zero,31348 <__gedf2+0x6c>
   31324:	3218b03a 	or	r12,r6,r8
   31328:	6000071e 	bne	r12,zero,31348 <__gedf2+0x6c>
   3132c:	0005883a 	mov	r2,zero
   31330:	5800101e 	bne	r11,zero,31374 <__gedf2+0x98>
   31334:	f800283a 	ret
   31338:	18000c1e 	bne	r3,zero,3136c <__gedf2+0x90>
   3133c:	3212b03a 	or	r9,r6,r8
   31340:	48000c26 	beq	r9,zero,31374 <__gedf2+0x98>
   31344:	0013883a 	mov	r9,zero
   31348:	39c03fcc 	andi	r7,r7,255
   3134c:	48000826 	beq	r9,zero,31370 <__gedf2+0x94>
   31350:	38000926 	beq	r7,zero,31378 <__gedf2+0x9c>
   31354:	00800044 	movi	r2,1
   31358:	f800283a 	ret
   3135c:	3212b03a 	or	r9,r6,r8
   31360:	483fec26 	beq	r9,zero,31314 <__alt_data_end+0xffff1f14>
   31364:	00bfff84 	movi	r2,-2
   31368:	f800283a 	ret
   3136c:	39c03fcc 	andi	r7,r7,255
   31370:	29c00626 	beq	r5,r7,3138c <__gedf2+0xb0>
   31374:	283ff726 	beq	r5,zero,31354 <__alt_data_end+0xffff1f54>
   31378:	00bfffc4 	movi	r2,-1
   3137c:	f800283a 	ret
   31380:	2292b03a 	or	r9,r4,r10
   31384:	483fe126 	beq	r9,zero,3130c <__alt_data_end+0xffff1f0c>
   31388:	003ff606 	br	31364 <__alt_data_end+0xffff1f64>
   3138c:	18bff916 	blt	r3,r2,31374 <__alt_data_end+0xffff1f74>
   31390:	10c00316 	blt	r2,r3,313a0 <__gedf2+0xc4>
   31394:	42bff736 	bltu	r8,r10,31374 <__alt_data_end+0xffff1f74>
   31398:	52000326 	beq	r10,r8,313a8 <__gedf2+0xcc>
   3139c:	5200042e 	bgeu	r10,r8,313b0 <__gedf2+0xd4>
   313a0:	283fec1e 	bne	r5,zero,31354 <__alt_data_end+0xffff1f54>
   313a4:	003ff406 	br	31378 <__alt_data_end+0xffff1f78>
   313a8:	313ff236 	bltu	r6,r4,31374 <__alt_data_end+0xffff1f74>
   313ac:	21bffc36 	bltu	r4,r6,313a0 <__alt_data_end+0xffff1fa0>
   313b0:	0005883a 	mov	r2,zero
   313b4:	f800283a 	ret

000313b8 <__ledf2>:
   313b8:	2804d53a 	srli	r2,r5,20
   313bc:	3810d53a 	srli	r8,r7,20
   313c0:	00c00434 	movhi	r3,16
   313c4:	18ffffc4 	addi	r3,r3,-1
   313c8:	1081ffcc 	andi	r2,r2,2047
   313cc:	0241ffc4 	movi	r9,2047
   313d0:	28d4703a 	and	r10,r5,r3
   313d4:	4201ffcc 	andi	r8,r8,2047
   313d8:	38c6703a 	and	r3,r7,r3
   313dc:	280ad7fa 	srli	r5,r5,31
   313e0:	380ed7fa 	srli	r7,r7,31
   313e4:	12401f26 	beq	r2,r9,31464 <__ledf2+0xac>
   313e8:	0241ffc4 	movi	r9,2047
   313ec:	42401426 	beq	r8,r9,31440 <__ledf2+0x88>
   313f0:	1000091e 	bne	r2,zero,31418 <__ledf2+0x60>
   313f4:	2296b03a 	or	r11,r4,r10
   313f8:	5813003a 	cmpeq	r9,r11,zero
   313fc:	29403fcc 	andi	r5,r5,255
   31400:	40000a1e 	bne	r8,zero,3142c <__ledf2+0x74>
   31404:	30d8b03a 	or	r12,r6,r3
   31408:	6000081e 	bne	r12,zero,3142c <__ledf2+0x74>
   3140c:	0005883a 	mov	r2,zero
   31410:	5800111e 	bne	r11,zero,31458 <__ledf2+0xa0>
   31414:	f800283a 	ret
   31418:	29403fcc 	andi	r5,r5,255
   3141c:	40000c1e 	bne	r8,zero,31450 <__ledf2+0x98>
   31420:	30d2b03a 	or	r9,r6,r3
   31424:	48000c26 	beq	r9,zero,31458 <__ledf2+0xa0>
   31428:	0013883a 	mov	r9,zero
   3142c:	39c03fcc 	andi	r7,r7,255
   31430:	48000826 	beq	r9,zero,31454 <__ledf2+0x9c>
   31434:	38001126 	beq	r7,zero,3147c <__ledf2+0xc4>
   31438:	00800044 	movi	r2,1
   3143c:	f800283a 	ret
   31440:	30d2b03a 	or	r9,r6,r3
   31444:	483fea26 	beq	r9,zero,313f0 <__alt_data_end+0xffff1ff0>
   31448:	00800084 	movi	r2,2
   3144c:	f800283a 	ret
   31450:	39c03fcc 	andi	r7,r7,255
   31454:	39400726 	beq	r7,r5,31474 <__ledf2+0xbc>
   31458:	2800081e 	bne	r5,zero,3147c <__ledf2+0xc4>
   3145c:	00800044 	movi	r2,1
   31460:	f800283a 	ret
   31464:	2292b03a 	or	r9,r4,r10
   31468:	483fdf26 	beq	r9,zero,313e8 <__alt_data_end+0xffff1fe8>
   3146c:	00800084 	movi	r2,2
   31470:	f800283a 	ret
   31474:	4080030e 	bge	r8,r2,31484 <__ledf2+0xcc>
   31478:	383fef26 	beq	r7,zero,31438 <__alt_data_end+0xffff2038>
   3147c:	00bfffc4 	movi	r2,-1
   31480:	f800283a 	ret
   31484:	123feb16 	blt	r2,r8,31434 <__alt_data_end+0xffff2034>
   31488:	1abff336 	bltu	r3,r10,31458 <__alt_data_end+0xffff2058>
   3148c:	50c00326 	beq	r10,r3,3149c <__ledf2+0xe4>
   31490:	50c0042e 	bgeu	r10,r3,314a4 <__ledf2+0xec>
   31494:	283fe81e 	bne	r5,zero,31438 <__alt_data_end+0xffff2038>
   31498:	003ff806 	br	3147c <__alt_data_end+0xffff207c>
   3149c:	313fee36 	bltu	r6,r4,31458 <__alt_data_end+0xffff2058>
   314a0:	21bffc36 	bltu	r4,r6,31494 <__alt_data_end+0xffff2094>
   314a4:	0005883a 	mov	r2,zero
   314a8:	f800283a 	ret

000314ac <__fixdfsi>:
   314ac:	280cd53a 	srli	r6,r5,20
   314b0:	00c00434 	movhi	r3,16
   314b4:	18ffffc4 	addi	r3,r3,-1
   314b8:	3181ffcc 	andi	r6,r6,2047
   314bc:	01c0ff84 	movi	r7,1022
   314c0:	28c6703a 	and	r3,r5,r3
   314c4:	280ad7fa 	srli	r5,r5,31
   314c8:	3980120e 	bge	r7,r6,31514 <__fixdfsi+0x68>
   314cc:	00810744 	movi	r2,1053
   314d0:	11800c16 	blt	r2,r6,31504 <__fixdfsi+0x58>
   314d4:	00810cc4 	movi	r2,1075
   314d8:	1185c83a 	sub	r2,r2,r6
   314dc:	01c007c4 	movi	r7,31
   314e0:	18c00434 	orhi	r3,r3,16
   314e4:	38800d16 	blt	r7,r2,3151c <__fixdfsi+0x70>
   314e8:	31befb44 	addi	r6,r6,-1043
   314ec:	2084d83a 	srl	r2,r4,r2
   314f0:	1986983a 	sll	r3,r3,r6
   314f4:	1884b03a 	or	r2,r3,r2
   314f8:	28000726 	beq	r5,zero,31518 <__fixdfsi+0x6c>
   314fc:	0085c83a 	sub	r2,zero,r2
   31500:	f800283a 	ret
   31504:	00a00034 	movhi	r2,32768
   31508:	10bfffc4 	addi	r2,r2,-1
   3150c:	2885883a 	add	r2,r5,r2
   31510:	f800283a 	ret
   31514:	0005883a 	mov	r2,zero
   31518:	f800283a 	ret
   3151c:	008104c4 	movi	r2,1043
   31520:	1185c83a 	sub	r2,r2,r6
   31524:	1884d83a 	srl	r2,r3,r2
   31528:	003ff306 	br	314f8 <__alt_data_end+0xffff20f8>

0003152c <__floatsidf>:
   3152c:	defffd04 	addi	sp,sp,-12
   31530:	dfc00215 	stw	ra,8(sp)
   31534:	dc400115 	stw	r17,4(sp)
   31538:	dc000015 	stw	r16,0(sp)
   3153c:	20002b26 	beq	r4,zero,315ec <__floatsidf+0xc0>
   31540:	2023883a 	mov	r17,r4
   31544:	2020d7fa 	srli	r16,r4,31
   31548:	20002d16 	blt	r4,zero,31600 <__floatsidf+0xd4>
   3154c:	8809883a 	mov	r4,r17
   31550:	00270ec0 	call	270ec <__clzsi2>
   31554:	01410784 	movi	r5,1054
   31558:	288bc83a 	sub	r5,r5,r2
   3155c:	01010cc4 	movi	r4,1075
   31560:	2149c83a 	sub	r4,r4,r5
   31564:	00c007c4 	movi	r3,31
   31568:	1900160e 	bge	r3,r4,315c4 <__floatsidf+0x98>
   3156c:	00c104c4 	movi	r3,1043
   31570:	1947c83a 	sub	r3,r3,r5
   31574:	88c6983a 	sll	r3,r17,r3
   31578:	00800434 	movhi	r2,16
   3157c:	10bfffc4 	addi	r2,r2,-1
   31580:	1886703a 	and	r3,r3,r2
   31584:	2941ffcc 	andi	r5,r5,2047
   31588:	800d883a 	mov	r6,r16
   3158c:	0005883a 	mov	r2,zero
   31590:	280a953a 	slli	r5,r5,20
   31594:	31803fcc 	andi	r6,r6,255
   31598:	01000434 	movhi	r4,16
   3159c:	300c97fa 	slli	r6,r6,31
   315a0:	213fffc4 	addi	r4,r4,-1
   315a4:	1906703a 	and	r3,r3,r4
   315a8:	1946b03a 	or	r3,r3,r5
   315ac:	1986b03a 	or	r3,r3,r6
   315b0:	dfc00217 	ldw	ra,8(sp)
   315b4:	dc400117 	ldw	r17,4(sp)
   315b8:	dc000017 	ldw	r16,0(sp)
   315bc:	dec00304 	addi	sp,sp,12
   315c0:	f800283a 	ret
   315c4:	00c002c4 	movi	r3,11
   315c8:	1887c83a 	sub	r3,r3,r2
   315cc:	88c6d83a 	srl	r3,r17,r3
   315d0:	8904983a 	sll	r2,r17,r4
   315d4:	01000434 	movhi	r4,16
   315d8:	213fffc4 	addi	r4,r4,-1
   315dc:	2941ffcc 	andi	r5,r5,2047
   315e0:	1906703a 	and	r3,r3,r4
   315e4:	800d883a 	mov	r6,r16
   315e8:	003fe906 	br	31590 <__alt_data_end+0xffff2190>
   315ec:	000d883a 	mov	r6,zero
   315f0:	000b883a 	mov	r5,zero
   315f4:	0007883a 	mov	r3,zero
   315f8:	0005883a 	mov	r2,zero
   315fc:	003fe406 	br	31590 <__alt_data_end+0xffff2190>
   31600:	0123c83a 	sub	r17,zero,r4
   31604:	003fd106 	br	3154c <__alt_data_end+0xffff214c>

00031608 <__floatunsidf>:
   31608:	defffe04 	addi	sp,sp,-8
   3160c:	dc000015 	stw	r16,0(sp)
   31610:	dfc00115 	stw	ra,4(sp)
   31614:	2021883a 	mov	r16,r4
   31618:	20002226 	beq	r4,zero,316a4 <__floatunsidf+0x9c>
   3161c:	00270ec0 	call	270ec <__clzsi2>
   31620:	01010784 	movi	r4,1054
   31624:	2089c83a 	sub	r4,r4,r2
   31628:	01810cc4 	movi	r6,1075
   3162c:	310dc83a 	sub	r6,r6,r4
   31630:	00c007c4 	movi	r3,31
   31634:	1980120e 	bge	r3,r6,31680 <__floatunsidf+0x78>
   31638:	00c104c4 	movi	r3,1043
   3163c:	1907c83a 	sub	r3,r3,r4
   31640:	80ca983a 	sll	r5,r16,r3
   31644:	00800434 	movhi	r2,16
   31648:	10bfffc4 	addi	r2,r2,-1
   3164c:	2101ffcc 	andi	r4,r4,2047
   31650:	0021883a 	mov	r16,zero
   31654:	288a703a 	and	r5,r5,r2
   31658:	2008953a 	slli	r4,r4,20
   3165c:	00c00434 	movhi	r3,16
   31660:	18ffffc4 	addi	r3,r3,-1
   31664:	28c6703a 	and	r3,r5,r3
   31668:	8005883a 	mov	r2,r16
   3166c:	1906b03a 	or	r3,r3,r4
   31670:	dfc00117 	ldw	ra,4(sp)
   31674:	dc000017 	ldw	r16,0(sp)
   31678:	dec00204 	addi	sp,sp,8
   3167c:	f800283a 	ret
   31680:	00c002c4 	movi	r3,11
   31684:	188bc83a 	sub	r5,r3,r2
   31688:	814ad83a 	srl	r5,r16,r5
   3168c:	00c00434 	movhi	r3,16
   31690:	18ffffc4 	addi	r3,r3,-1
   31694:	81a0983a 	sll	r16,r16,r6
   31698:	2101ffcc 	andi	r4,r4,2047
   3169c:	28ca703a 	and	r5,r5,r3
   316a0:	003fed06 	br	31658 <__alt_data_end+0xffff2258>
   316a4:	0009883a 	mov	r4,zero
   316a8:	000b883a 	mov	r5,zero
   316ac:	003fea06 	br	31658 <__alt_data_end+0xffff2258>

000316b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   316b0:	defffe04 	addi	sp,sp,-8
   316b4:	dfc00115 	stw	ra,4(sp)
   316b8:	df000015 	stw	fp,0(sp)
   316bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   316c0:	d0a00c17 	ldw	r2,-32720(gp)
   316c4:	10000326 	beq	r2,zero,316d4 <alt_get_errno+0x24>
   316c8:	d0a00c17 	ldw	r2,-32720(gp)
   316cc:	103ee83a 	callr	r2
   316d0:	00000106 	br	316d8 <alt_get_errno+0x28>
   316d4:	d0a6d604 	addi	r2,gp,-25768
}
   316d8:	e037883a 	mov	sp,fp
   316dc:	dfc00117 	ldw	ra,4(sp)
   316e0:	df000017 	ldw	fp,0(sp)
   316e4:	dec00204 	addi	sp,sp,8
   316e8:	f800283a 	ret

000316ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   316ec:	defffb04 	addi	sp,sp,-20
   316f0:	dfc00415 	stw	ra,16(sp)
   316f4:	df000315 	stw	fp,12(sp)
   316f8:	df000304 	addi	fp,sp,12
   316fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   31700:	e0bfff17 	ldw	r2,-4(fp)
   31704:	10000616 	blt	r2,zero,31720 <close+0x34>
   31708:	e0bfff17 	ldw	r2,-4(fp)
   3170c:	10c00324 	muli	r3,r2,12
   31710:	008000f4 	movhi	r2,3
   31714:	1094b004 	addi	r2,r2,21184
   31718:	1885883a 	add	r2,r3,r2
   3171c:	00000106 	br	31724 <close+0x38>
   31720:	0005883a 	mov	r2,zero
   31724:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   31728:	e0bffd17 	ldw	r2,-12(fp)
   3172c:	10001926 	beq	r2,zero,31794 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   31730:	e0bffd17 	ldw	r2,-12(fp)
   31734:	10800017 	ldw	r2,0(r2)
   31738:	10800417 	ldw	r2,16(r2)
   3173c:	10000626 	beq	r2,zero,31758 <close+0x6c>
   31740:	e0bffd17 	ldw	r2,-12(fp)
   31744:	10800017 	ldw	r2,0(r2)
   31748:	10800417 	ldw	r2,16(r2)
   3174c:	e13ffd17 	ldw	r4,-12(fp)
   31750:	103ee83a 	callr	r2
   31754:	00000106 	br	3175c <close+0x70>
   31758:	0005883a 	mov	r2,zero
   3175c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   31760:	e13fff17 	ldw	r4,-4(fp)
   31764:	0031dac0 	call	31dac <alt_release_fd>
    if (rval < 0)
   31768:	e0bffe17 	ldw	r2,-8(fp)
   3176c:	1000070e 	bge	r2,zero,3178c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   31770:	00316b00 	call	316b0 <alt_get_errno>
   31774:	1007883a 	mov	r3,r2
   31778:	e0bffe17 	ldw	r2,-8(fp)
   3177c:	0085c83a 	sub	r2,zero,r2
   31780:	18800015 	stw	r2,0(r3)
      return -1;
   31784:	00bfffc4 	movi	r2,-1
   31788:	00000706 	br	317a8 <close+0xbc>
    }
    return 0;
   3178c:	0005883a 	mov	r2,zero
   31790:	00000506 	br	317a8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   31794:	00316b00 	call	316b0 <alt_get_errno>
   31798:	1007883a 	mov	r3,r2
   3179c:	00801444 	movi	r2,81
   317a0:	18800015 	stw	r2,0(r3)
    return -1;
   317a4:	00bfffc4 	movi	r2,-1
  }
}
   317a8:	e037883a 	mov	sp,fp
   317ac:	dfc00117 	ldw	ra,4(sp)
   317b0:	df000017 	ldw	fp,0(sp)
   317b4:	dec00204 	addi	sp,sp,8
   317b8:	f800283a 	ret

000317bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   317bc:	defffc04 	addi	sp,sp,-16
   317c0:	df000315 	stw	fp,12(sp)
   317c4:	df000304 	addi	fp,sp,12
   317c8:	e13ffd15 	stw	r4,-12(fp)
   317cc:	e17ffe15 	stw	r5,-8(fp)
   317d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   317d4:	e0bfff17 	ldw	r2,-4(fp)
}
   317d8:	e037883a 	mov	sp,fp
   317dc:	df000017 	ldw	fp,0(sp)
   317e0:	dec00104 	addi	sp,sp,4
   317e4:	f800283a 	ret

000317e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   317e8:	defffe04 	addi	sp,sp,-8
   317ec:	dfc00115 	stw	ra,4(sp)
   317f0:	df000015 	stw	fp,0(sp)
   317f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   317f8:	d0a00c17 	ldw	r2,-32720(gp)
   317fc:	10000326 	beq	r2,zero,3180c <alt_get_errno+0x24>
   31800:	d0a00c17 	ldw	r2,-32720(gp)
   31804:	103ee83a 	callr	r2
   31808:	00000106 	br	31810 <alt_get_errno+0x28>
   3180c:	d0a6d604 	addi	r2,gp,-25768
}
   31810:	e037883a 	mov	sp,fp
   31814:	dfc00117 	ldw	ra,4(sp)
   31818:	df000017 	ldw	fp,0(sp)
   3181c:	dec00204 	addi	sp,sp,8
   31820:	f800283a 	ret

00031824 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   31824:	defffb04 	addi	sp,sp,-20
   31828:	dfc00415 	stw	ra,16(sp)
   3182c:	df000315 	stw	fp,12(sp)
   31830:	df000304 	addi	fp,sp,12
   31834:	e13ffe15 	stw	r4,-8(fp)
   31838:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3183c:	e0bffe17 	ldw	r2,-8(fp)
   31840:	10000616 	blt	r2,zero,3185c <fstat+0x38>
   31844:	e0bffe17 	ldw	r2,-8(fp)
   31848:	10c00324 	muli	r3,r2,12
   3184c:	008000f4 	movhi	r2,3
   31850:	1094b004 	addi	r2,r2,21184
   31854:	1885883a 	add	r2,r3,r2
   31858:	00000106 	br	31860 <fstat+0x3c>
   3185c:	0005883a 	mov	r2,zero
   31860:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   31864:	e0bffd17 	ldw	r2,-12(fp)
   31868:	10001026 	beq	r2,zero,318ac <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   3186c:	e0bffd17 	ldw	r2,-12(fp)
   31870:	10800017 	ldw	r2,0(r2)
   31874:	10800817 	ldw	r2,32(r2)
   31878:	10000726 	beq	r2,zero,31898 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   3187c:	e0bffd17 	ldw	r2,-12(fp)
   31880:	10800017 	ldw	r2,0(r2)
   31884:	10800817 	ldw	r2,32(r2)
   31888:	e17fff17 	ldw	r5,-4(fp)
   3188c:	e13ffd17 	ldw	r4,-12(fp)
   31890:	103ee83a 	callr	r2
   31894:	00000a06 	br	318c0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   31898:	e0bfff17 	ldw	r2,-4(fp)
   3189c:	00c80004 	movi	r3,8192
   318a0:	10c00115 	stw	r3,4(r2)
      return 0;
   318a4:	0005883a 	mov	r2,zero
   318a8:	00000506 	br	318c0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   318ac:	00317e80 	call	317e8 <alt_get_errno>
   318b0:	1007883a 	mov	r3,r2
   318b4:	00801444 	movi	r2,81
   318b8:	18800015 	stw	r2,0(r3)
    return -1;
   318bc:	00bfffc4 	movi	r2,-1
  }
}
   318c0:	e037883a 	mov	sp,fp
   318c4:	dfc00117 	ldw	ra,4(sp)
   318c8:	df000017 	ldw	fp,0(sp)
   318cc:	dec00204 	addi	sp,sp,8
   318d0:	f800283a 	ret

000318d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   318d4:	defffe04 	addi	sp,sp,-8
   318d8:	dfc00115 	stw	ra,4(sp)
   318dc:	df000015 	stw	fp,0(sp)
   318e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   318e4:	d0a00c17 	ldw	r2,-32720(gp)
   318e8:	10000326 	beq	r2,zero,318f8 <alt_get_errno+0x24>
   318ec:	d0a00c17 	ldw	r2,-32720(gp)
   318f0:	103ee83a 	callr	r2
   318f4:	00000106 	br	318fc <alt_get_errno+0x28>
   318f8:	d0a6d604 	addi	r2,gp,-25768
}
   318fc:	e037883a 	mov	sp,fp
   31900:	dfc00117 	ldw	ra,4(sp)
   31904:	df000017 	ldw	fp,0(sp)
   31908:	dec00204 	addi	sp,sp,8
   3190c:	f800283a 	ret

00031910 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   31910:	deffed04 	addi	sp,sp,-76
   31914:	dfc01215 	stw	ra,72(sp)
   31918:	df001115 	stw	fp,68(sp)
   3191c:	df001104 	addi	fp,sp,68
   31920:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31924:	e0bfff17 	ldw	r2,-4(fp)
   31928:	10000616 	blt	r2,zero,31944 <isatty+0x34>
   3192c:	e0bfff17 	ldw	r2,-4(fp)
   31930:	10c00324 	muli	r3,r2,12
   31934:	008000f4 	movhi	r2,3
   31938:	1094b004 	addi	r2,r2,21184
   3193c:	1885883a 	add	r2,r3,r2
   31940:	00000106 	br	31948 <isatty+0x38>
   31944:	0005883a 	mov	r2,zero
   31948:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   3194c:	e0bfef17 	ldw	r2,-68(fp)
   31950:	10000e26 	beq	r2,zero,3198c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   31954:	e0bfef17 	ldw	r2,-68(fp)
   31958:	10800017 	ldw	r2,0(r2)
   3195c:	10800817 	ldw	r2,32(r2)
   31960:	1000021e 	bne	r2,zero,3196c <isatty+0x5c>
    {
      return 1;
   31964:	00800044 	movi	r2,1
   31968:	00000d06 	br	319a0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   3196c:	e0bff004 	addi	r2,fp,-64
   31970:	100b883a 	mov	r5,r2
   31974:	e13fff17 	ldw	r4,-4(fp)
   31978:	00318240 	call	31824 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   3197c:	e0bff117 	ldw	r2,-60(fp)
   31980:	10880020 	cmpeqi	r2,r2,8192
   31984:	10803fcc 	andi	r2,r2,255
   31988:	00000506 	br	319a0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   3198c:	00318d40 	call	318d4 <alt_get_errno>
   31990:	1007883a 	mov	r3,r2
   31994:	00801444 	movi	r2,81
   31998:	18800015 	stw	r2,0(r3)
    return 0;
   3199c:	0005883a 	mov	r2,zero
  }
}
   319a0:	e037883a 	mov	sp,fp
   319a4:	dfc00117 	ldw	ra,4(sp)
   319a8:	df000017 	ldw	fp,0(sp)
   319ac:	dec00204 	addi	sp,sp,8
   319b0:	f800283a 	ret

000319b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   319b4:	defffc04 	addi	sp,sp,-16
   319b8:	df000315 	stw	fp,12(sp)
   319bc:	df000304 	addi	fp,sp,12
   319c0:	e13ffd15 	stw	r4,-12(fp)
   319c4:	e17ffe15 	stw	r5,-8(fp)
   319c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   319cc:	e0fffe17 	ldw	r3,-8(fp)
   319d0:	e0bffd17 	ldw	r2,-12(fp)
   319d4:	18800c26 	beq	r3,r2,31a08 <alt_load_section+0x54>
  {
    while( to != end )
   319d8:	00000806 	br	319fc <alt_load_section+0x48>
    {
      *to++ = *from++;
   319dc:	e0bffe17 	ldw	r2,-8(fp)
   319e0:	10c00104 	addi	r3,r2,4
   319e4:	e0fffe15 	stw	r3,-8(fp)
   319e8:	e0fffd17 	ldw	r3,-12(fp)
   319ec:	19000104 	addi	r4,r3,4
   319f0:	e13ffd15 	stw	r4,-12(fp)
   319f4:	18c00017 	ldw	r3,0(r3)
   319f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   319fc:	e0fffe17 	ldw	r3,-8(fp)
   31a00:	e0bfff17 	ldw	r2,-4(fp)
   31a04:	18bff51e 	bne	r3,r2,319dc <__alt_data_end+0xffff25dc>
    {
      *to++ = *from++;
    }
  }
}
   31a08:	0001883a 	nop
   31a0c:	e037883a 	mov	sp,fp
   31a10:	df000017 	ldw	fp,0(sp)
   31a14:	dec00104 	addi	sp,sp,4
   31a18:	f800283a 	ret

00031a1c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   31a1c:	defffe04 	addi	sp,sp,-8
   31a20:	dfc00115 	stw	ra,4(sp)
   31a24:	df000015 	stw	fp,0(sp)
   31a28:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   31a2c:	018000f4 	movhi	r6,3
   31a30:	31993904 	addi	r6,r6,25828
   31a34:	014000f4 	movhi	r5,3
   31a38:	29527d04 	addi	r5,r5,18932
   31a3c:	010000f4 	movhi	r4,3
   31a40:	21193904 	addi	r4,r4,25828
   31a44:	00319b40 	call	319b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   31a48:	018000b4 	movhi	r6,2
   31a4c:	31809104 	addi	r6,r6,580
   31a50:	014000b4 	movhi	r5,2
   31a54:	29400804 	addi	r5,r5,32
   31a58:	010000b4 	movhi	r4,2
   31a5c:	21000804 	addi	r4,r4,32
   31a60:	00319b40 	call	319b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   31a64:	018000f4 	movhi	r6,3
   31a68:	31927d04 	addi	r6,r6,18932
   31a6c:	014000f4 	movhi	r5,3
   31a70:	294ffa04 	addi	r5,r5,16360
   31a74:	010000f4 	movhi	r4,3
   31a78:	210ffa04 	addi	r4,r4,16360
   31a7c:	00319b40 	call	319b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   31a80:	00330780 	call	33078 <alt_dcache_flush_all>
  alt_icache_flush_all();
   31a84:	00332600 	call	33260 <alt_icache_flush_all>
}
   31a88:	0001883a 	nop
   31a8c:	e037883a 	mov	sp,fp
   31a90:	dfc00117 	ldw	ra,4(sp)
   31a94:	df000017 	ldw	fp,0(sp)
   31a98:	dec00204 	addi	sp,sp,8
   31a9c:	f800283a 	ret

00031aa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31aa0:	defffe04 	addi	sp,sp,-8
   31aa4:	dfc00115 	stw	ra,4(sp)
   31aa8:	df000015 	stw	fp,0(sp)
   31aac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31ab0:	d0a00c17 	ldw	r2,-32720(gp)
   31ab4:	10000326 	beq	r2,zero,31ac4 <alt_get_errno+0x24>
   31ab8:	d0a00c17 	ldw	r2,-32720(gp)
   31abc:	103ee83a 	callr	r2
   31ac0:	00000106 	br	31ac8 <alt_get_errno+0x28>
   31ac4:	d0a6d604 	addi	r2,gp,-25768
}
   31ac8:	e037883a 	mov	sp,fp
   31acc:	dfc00117 	ldw	ra,4(sp)
   31ad0:	df000017 	ldw	fp,0(sp)
   31ad4:	dec00204 	addi	sp,sp,8
   31ad8:	f800283a 	ret

00031adc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   31adc:	defff904 	addi	sp,sp,-28
   31ae0:	dfc00615 	stw	ra,24(sp)
   31ae4:	df000515 	stw	fp,20(sp)
   31ae8:	df000504 	addi	fp,sp,20
   31aec:	e13ffd15 	stw	r4,-12(fp)
   31af0:	e17ffe15 	stw	r5,-8(fp)
   31af4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   31af8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31afc:	e0bffd17 	ldw	r2,-12(fp)
   31b00:	10000616 	blt	r2,zero,31b1c <lseek+0x40>
   31b04:	e0bffd17 	ldw	r2,-12(fp)
   31b08:	10c00324 	muli	r3,r2,12
   31b0c:	008000f4 	movhi	r2,3
   31b10:	1094b004 	addi	r2,r2,21184
   31b14:	1885883a 	add	r2,r3,r2
   31b18:	00000106 	br	31b20 <lseek+0x44>
   31b1c:	0005883a 	mov	r2,zero
   31b20:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   31b24:	e0bffc17 	ldw	r2,-16(fp)
   31b28:	10001026 	beq	r2,zero,31b6c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   31b2c:	e0bffc17 	ldw	r2,-16(fp)
   31b30:	10800017 	ldw	r2,0(r2)
   31b34:	10800717 	ldw	r2,28(r2)
   31b38:	10000926 	beq	r2,zero,31b60 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   31b3c:	e0bffc17 	ldw	r2,-16(fp)
   31b40:	10800017 	ldw	r2,0(r2)
   31b44:	10800717 	ldw	r2,28(r2)
   31b48:	e1bfff17 	ldw	r6,-4(fp)
   31b4c:	e17ffe17 	ldw	r5,-8(fp)
   31b50:	e13ffc17 	ldw	r4,-16(fp)
   31b54:	103ee83a 	callr	r2
   31b58:	e0bffb15 	stw	r2,-20(fp)
   31b5c:	00000506 	br	31b74 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   31b60:	00bfde84 	movi	r2,-134
   31b64:	e0bffb15 	stw	r2,-20(fp)
   31b68:	00000206 	br	31b74 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   31b6c:	00bfebc4 	movi	r2,-81
   31b70:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   31b74:	e0bffb17 	ldw	r2,-20(fp)
   31b78:	1000070e 	bge	r2,zero,31b98 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   31b7c:	0031aa00 	call	31aa0 <alt_get_errno>
   31b80:	1007883a 	mov	r3,r2
   31b84:	e0bffb17 	ldw	r2,-20(fp)
   31b88:	0085c83a 	sub	r2,zero,r2
   31b8c:	18800015 	stw	r2,0(r3)
    rc = -1;
   31b90:	00bfffc4 	movi	r2,-1
   31b94:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   31b98:	e0bffb17 	ldw	r2,-20(fp)
}
   31b9c:	e037883a 	mov	sp,fp
   31ba0:	dfc00117 	ldw	ra,4(sp)
   31ba4:	df000017 	ldw	fp,0(sp)
   31ba8:	dec00204 	addi	sp,sp,8
   31bac:	f800283a 	ret

00031bb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   31bb0:	defffd04 	addi	sp,sp,-12
   31bb4:	dfc00215 	stw	ra,8(sp)
   31bb8:	df000115 	stw	fp,4(sp)
   31bbc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   31bc0:	0009883a 	mov	r4,zero
   31bc4:	00321fc0 	call	321fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   31bc8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   31bcc:	00322340 	call	32234 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   31bd0:	018000f4 	movhi	r6,3
   31bd4:	31927504 	addi	r6,r6,18900
   31bd8:	014000f4 	movhi	r5,3
   31bdc:	29527504 	addi	r5,r5,18900
   31be0:	010000f4 	movhi	r4,3
   31be4:	21127504 	addi	r4,r4,18900
   31be8:	00335f80 	call	335f8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   31bec:	00331a00 	call	331a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   31bf0:	010000f4 	movhi	r4,3
   31bf4:	210c8004 	addi	r4,r4,12800
   31bf8:	0033c540 	call	33c54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   31bfc:	d0a6d717 	ldw	r2,-25764(gp)
   31c00:	d0e6d817 	ldw	r3,-25760(gp)
   31c04:	d126d917 	ldw	r4,-25756(gp)
   31c08:	200d883a 	mov	r6,r4
   31c0c:	180b883a 	mov	r5,r3
   31c10:	1009883a 	mov	r4,r2
   31c14:	0021b740 	call	21b74 <main>
   31c18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   31c1c:	01000044 	movi	r4,1
   31c20:	00316ec0 	call	316ec <close>
  exit (result);
   31c24:	e13fff17 	ldw	r4,-4(fp)
   31c28:	0033c680 	call	33c68 <exit>

00031c2c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   31c2c:	defffe04 	addi	sp,sp,-8
   31c30:	df000115 	stw	fp,4(sp)
   31c34:	df000104 	addi	fp,sp,4
   31c38:	e13fff15 	stw	r4,-4(fp)
}
   31c3c:	0001883a 	nop
   31c40:	e037883a 	mov	sp,fp
   31c44:	df000017 	ldw	fp,0(sp)
   31c48:	dec00104 	addi	sp,sp,4
   31c4c:	f800283a 	ret

00031c50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   31c50:	defffe04 	addi	sp,sp,-8
   31c54:	df000115 	stw	fp,4(sp)
   31c58:	df000104 	addi	fp,sp,4
   31c5c:	e13fff15 	stw	r4,-4(fp)
}
   31c60:	0001883a 	nop
   31c64:	e037883a 	mov	sp,fp
   31c68:	df000017 	ldw	fp,0(sp)
   31c6c:	dec00104 	addi	sp,sp,4
   31c70:	f800283a 	ret

00031c74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31c74:	defffe04 	addi	sp,sp,-8
   31c78:	dfc00115 	stw	ra,4(sp)
   31c7c:	df000015 	stw	fp,0(sp)
   31c80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31c84:	d0a00c17 	ldw	r2,-32720(gp)
   31c88:	10000326 	beq	r2,zero,31c98 <alt_get_errno+0x24>
   31c8c:	d0a00c17 	ldw	r2,-32720(gp)
   31c90:	103ee83a 	callr	r2
   31c94:	00000106 	br	31c9c <alt_get_errno+0x28>
   31c98:	d0a6d604 	addi	r2,gp,-25768
}
   31c9c:	e037883a 	mov	sp,fp
   31ca0:	dfc00117 	ldw	ra,4(sp)
   31ca4:	df000017 	ldw	fp,0(sp)
   31ca8:	dec00204 	addi	sp,sp,8
   31cac:	f800283a 	ret

00031cb0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   31cb0:	defff904 	addi	sp,sp,-28
   31cb4:	dfc00615 	stw	ra,24(sp)
   31cb8:	df000515 	stw	fp,20(sp)
   31cbc:	df000504 	addi	fp,sp,20
   31cc0:	e13ffd15 	stw	r4,-12(fp)
   31cc4:	e17ffe15 	stw	r5,-8(fp)
   31cc8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31ccc:	e0bffd17 	ldw	r2,-12(fp)
   31cd0:	10000616 	blt	r2,zero,31cec <read+0x3c>
   31cd4:	e0bffd17 	ldw	r2,-12(fp)
   31cd8:	10c00324 	muli	r3,r2,12
   31cdc:	008000f4 	movhi	r2,3
   31ce0:	1094b004 	addi	r2,r2,21184
   31ce4:	1885883a 	add	r2,r3,r2
   31ce8:	00000106 	br	31cf0 <read+0x40>
   31cec:	0005883a 	mov	r2,zero
   31cf0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   31cf4:	e0bffb17 	ldw	r2,-20(fp)
   31cf8:	10002226 	beq	r2,zero,31d84 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   31cfc:	e0bffb17 	ldw	r2,-20(fp)
   31d00:	10800217 	ldw	r2,8(r2)
   31d04:	108000cc 	andi	r2,r2,3
   31d08:	10800060 	cmpeqi	r2,r2,1
   31d0c:	1000181e 	bne	r2,zero,31d70 <read+0xc0>
        (fd->dev->read))
   31d10:	e0bffb17 	ldw	r2,-20(fp)
   31d14:	10800017 	ldw	r2,0(r2)
   31d18:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   31d1c:	10001426 	beq	r2,zero,31d70 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   31d20:	e0bffb17 	ldw	r2,-20(fp)
   31d24:	10800017 	ldw	r2,0(r2)
   31d28:	10800517 	ldw	r2,20(r2)
   31d2c:	e0ffff17 	ldw	r3,-4(fp)
   31d30:	180d883a 	mov	r6,r3
   31d34:	e17ffe17 	ldw	r5,-8(fp)
   31d38:	e13ffb17 	ldw	r4,-20(fp)
   31d3c:	103ee83a 	callr	r2
   31d40:	e0bffc15 	stw	r2,-16(fp)
   31d44:	e0bffc17 	ldw	r2,-16(fp)
   31d48:	1000070e 	bge	r2,zero,31d68 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   31d4c:	0031c740 	call	31c74 <alt_get_errno>
   31d50:	1007883a 	mov	r3,r2
   31d54:	e0bffc17 	ldw	r2,-16(fp)
   31d58:	0085c83a 	sub	r2,zero,r2
   31d5c:	18800015 	stw	r2,0(r3)
          return -1;
   31d60:	00bfffc4 	movi	r2,-1
   31d64:	00000c06 	br	31d98 <read+0xe8>
        }
        return rval;
   31d68:	e0bffc17 	ldw	r2,-16(fp)
   31d6c:	00000a06 	br	31d98 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   31d70:	0031c740 	call	31c74 <alt_get_errno>
   31d74:	1007883a 	mov	r3,r2
   31d78:	00800344 	movi	r2,13
   31d7c:	18800015 	stw	r2,0(r3)
   31d80:	00000406 	br	31d94 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   31d84:	0031c740 	call	31c74 <alt_get_errno>
   31d88:	1007883a 	mov	r3,r2
   31d8c:	00801444 	movi	r2,81
   31d90:	18800015 	stw	r2,0(r3)
  }
  return -1;
   31d94:	00bfffc4 	movi	r2,-1
}
   31d98:	e037883a 	mov	sp,fp
   31d9c:	dfc00117 	ldw	ra,4(sp)
   31da0:	df000017 	ldw	fp,0(sp)
   31da4:	dec00204 	addi	sp,sp,8
   31da8:	f800283a 	ret

00031dac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   31dac:	defffe04 	addi	sp,sp,-8
   31db0:	df000115 	stw	fp,4(sp)
   31db4:	df000104 	addi	fp,sp,4
   31db8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   31dbc:	e0bfff17 	ldw	r2,-4(fp)
   31dc0:	108000d0 	cmplti	r2,r2,3
   31dc4:	10000d1e 	bne	r2,zero,31dfc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   31dc8:	008000f4 	movhi	r2,3
   31dcc:	1094b004 	addi	r2,r2,21184
   31dd0:	e0ffff17 	ldw	r3,-4(fp)
   31dd4:	18c00324 	muli	r3,r3,12
   31dd8:	10c5883a 	add	r2,r2,r3
   31ddc:	10800204 	addi	r2,r2,8
   31de0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   31de4:	008000f4 	movhi	r2,3
   31de8:	1094b004 	addi	r2,r2,21184
   31dec:	e0ffff17 	ldw	r3,-4(fp)
   31df0:	18c00324 	muli	r3,r3,12
   31df4:	10c5883a 	add	r2,r2,r3
   31df8:	10000015 	stw	zero,0(r2)
  }
}
   31dfc:	0001883a 	nop
   31e00:	e037883a 	mov	sp,fp
   31e04:	df000017 	ldw	fp,0(sp)
   31e08:	dec00104 	addi	sp,sp,4
   31e0c:	f800283a 	ret

00031e10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   31e10:	defff904 	addi	sp,sp,-28
   31e14:	df000615 	stw	fp,24(sp)
   31e18:	df000604 	addi	fp,sp,24
   31e1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31e20:	0005303a 	rdctl	r2,status
   31e24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31e28:	e0fffe17 	ldw	r3,-8(fp)
   31e2c:	00bfff84 	movi	r2,-2
   31e30:	1884703a 	and	r2,r3,r2
   31e34:	1001703a 	wrctl	status,r2
  
  return context;
   31e38:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   31e3c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   31e40:	d0a00d17 	ldw	r2,-32716(gp)
   31e44:	10c000c4 	addi	r3,r2,3
   31e48:	00bfff04 	movi	r2,-4
   31e4c:	1884703a 	and	r2,r3,r2
   31e50:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   31e54:	d0e00d17 	ldw	r3,-32716(gp)
   31e58:	e0bfff17 	ldw	r2,-4(fp)
   31e5c:	1887883a 	add	r3,r3,r2
   31e60:	00800134 	movhi	r2,4
   31e64:	10bd0004 	addi	r2,r2,-3072
   31e68:	10c0062e 	bgeu	r2,r3,31e84 <sbrk+0x74>
   31e6c:	e0bffb17 	ldw	r2,-20(fp)
   31e70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31e74:	e0bffa17 	ldw	r2,-24(fp)
   31e78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   31e7c:	00bfffc4 	movi	r2,-1
   31e80:	00000b06 	br	31eb0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   31e84:	d0a00d17 	ldw	r2,-32716(gp)
   31e88:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   31e8c:	d0e00d17 	ldw	r3,-32716(gp)
   31e90:	e0bfff17 	ldw	r2,-4(fp)
   31e94:	1885883a 	add	r2,r3,r2
   31e98:	d0a00d15 	stw	r2,-32716(gp)
   31e9c:	e0bffb17 	ldw	r2,-20(fp)
   31ea0:	e0bffc15 	stw	r2,-16(fp)
   31ea4:	e0bffc17 	ldw	r2,-16(fp)
   31ea8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   31eac:	e0bffd17 	ldw	r2,-12(fp)
} 
   31eb0:	e037883a 	mov	sp,fp
   31eb4:	df000017 	ldw	fp,0(sp)
   31eb8:	dec00104 	addi	sp,sp,4
   31ebc:	f800283a 	ret

00031ec0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   31ec0:	defffa04 	addi	sp,sp,-24
   31ec4:	df000515 	stw	fp,20(sp)
   31ec8:	df000504 	addi	fp,sp,20
   31ecc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31ed0:	0005303a 	rdctl	r2,status
   31ed4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31ed8:	e0fffc17 	ldw	r3,-16(fp)
   31edc:	00bfff84 	movi	r2,-2
   31ee0:	1884703a 	and	r2,r3,r2
   31ee4:	1001703a 	wrctl	status,r2
  
  return context;
   31ee8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   31eec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   31ef0:	e0bfff17 	ldw	r2,-4(fp)
   31ef4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   31ef8:	e0bffd17 	ldw	r2,-12(fp)
   31efc:	10800017 	ldw	r2,0(r2)
   31f00:	e0fffd17 	ldw	r3,-12(fp)
   31f04:	18c00117 	ldw	r3,4(r3)
   31f08:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   31f0c:	e0bffd17 	ldw	r2,-12(fp)
   31f10:	10800117 	ldw	r2,4(r2)
   31f14:	e0fffd17 	ldw	r3,-12(fp)
   31f18:	18c00017 	ldw	r3,0(r3)
   31f1c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   31f20:	e0bffd17 	ldw	r2,-12(fp)
   31f24:	e0fffd17 	ldw	r3,-12(fp)
   31f28:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   31f2c:	e0bffd17 	ldw	r2,-12(fp)
   31f30:	e0fffd17 	ldw	r3,-12(fp)
   31f34:	10c00015 	stw	r3,0(r2)
   31f38:	e0bffb17 	ldw	r2,-20(fp)
   31f3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31f40:	e0bffe17 	ldw	r2,-8(fp)
   31f44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   31f48:	0001883a 	nop
   31f4c:	e037883a 	mov	sp,fp
   31f50:	df000017 	ldw	fp,0(sp)
   31f54:	dec00104 	addi	sp,sp,4
   31f58:	f800283a 	ret

00031f5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   31f5c:	defffb04 	addi	sp,sp,-20
   31f60:	dfc00415 	stw	ra,16(sp)
   31f64:	df000315 	stw	fp,12(sp)
   31f68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   31f6c:	d0a00e17 	ldw	r2,-32712(gp)
   31f70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   31f74:	d0a6db17 	ldw	r2,-25748(gp)
   31f78:	10800044 	addi	r2,r2,1
   31f7c:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   31f80:	00002e06 	br	3203c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   31f84:	e0bffd17 	ldw	r2,-12(fp)
   31f88:	10800017 	ldw	r2,0(r2)
   31f8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   31f90:	e0bffd17 	ldw	r2,-12(fp)
   31f94:	10800403 	ldbu	r2,16(r2)
   31f98:	10803fcc 	andi	r2,r2,255
   31f9c:	10000426 	beq	r2,zero,31fb0 <alt_tick+0x54>
   31fa0:	d0a6db17 	ldw	r2,-25748(gp)
   31fa4:	1000021e 	bne	r2,zero,31fb0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   31fa8:	e0bffd17 	ldw	r2,-12(fp)
   31fac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   31fb0:	e0bffd17 	ldw	r2,-12(fp)
   31fb4:	10800217 	ldw	r2,8(r2)
   31fb8:	d0e6db17 	ldw	r3,-25748(gp)
   31fbc:	18801d36 	bltu	r3,r2,32034 <alt_tick+0xd8>
   31fc0:	e0bffd17 	ldw	r2,-12(fp)
   31fc4:	10800403 	ldbu	r2,16(r2)
   31fc8:	10803fcc 	andi	r2,r2,255
   31fcc:	1000191e 	bne	r2,zero,32034 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   31fd0:	e0bffd17 	ldw	r2,-12(fp)
   31fd4:	10800317 	ldw	r2,12(r2)
   31fd8:	e0fffd17 	ldw	r3,-12(fp)
   31fdc:	18c00517 	ldw	r3,20(r3)
   31fe0:	1809883a 	mov	r4,r3
   31fe4:	103ee83a 	callr	r2
   31fe8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   31fec:	e0bfff17 	ldw	r2,-4(fp)
   31ff0:	1000031e 	bne	r2,zero,32000 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   31ff4:	e13ffd17 	ldw	r4,-12(fp)
   31ff8:	0031ec00 	call	31ec0 <alt_alarm_stop>
   31ffc:	00000d06 	br	32034 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   32000:	e0bffd17 	ldw	r2,-12(fp)
   32004:	10c00217 	ldw	r3,8(r2)
   32008:	e0bfff17 	ldw	r2,-4(fp)
   3200c:	1887883a 	add	r3,r3,r2
   32010:	e0bffd17 	ldw	r2,-12(fp)
   32014:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   32018:	e0bffd17 	ldw	r2,-12(fp)
   3201c:	10c00217 	ldw	r3,8(r2)
   32020:	d0a6db17 	ldw	r2,-25748(gp)
   32024:	1880032e 	bgeu	r3,r2,32034 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   32028:	e0bffd17 	ldw	r2,-12(fp)
   3202c:	00c00044 	movi	r3,1
   32030:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   32034:	e0bffe17 	ldw	r2,-8(fp)
   32038:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3203c:	e0fffd17 	ldw	r3,-12(fp)
   32040:	d0a00e04 	addi	r2,gp,-32712
   32044:	18bfcf1e 	bne	r3,r2,31f84 <__alt_data_end+0xffff2b84>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   32048:	0001883a 	nop
}
   3204c:	0001883a 	nop
   32050:	e037883a 	mov	sp,fp
   32054:	dfc00117 	ldw	ra,4(sp)
   32058:	df000017 	ldw	fp,0(sp)
   3205c:	dec00204 	addi	sp,sp,8
   32060:	f800283a 	ret

00032064 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   32064:	defffd04 	addi	sp,sp,-12
   32068:	dfc00215 	stw	ra,8(sp)
   3206c:	df000115 	stw	fp,4(sp)
   32070:	df000104 	addi	fp,sp,4
   32074:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   32078:	e13fff17 	ldw	r4,-4(fp)
   3207c:	0032f200 	call	32f20 <alt_busy_sleep>
}
   32080:	e037883a 	mov	sp,fp
   32084:	dfc00117 	ldw	ra,4(sp)
   32088:	df000017 	ldw	fp,0(sp)
   3208c:	dec00204 	addi	sp,sp,8
   32090:	f800283a 	ret

00032094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   32094:	defffe04 	addi	sp,sp,-8
   32098:	dfc00115 	stw	ra,4(sp)
   3209c:	df000015 	stw	fp,0(sp)
   320a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   320a4:	d0a00c17 	ldw	r2,-32720(gp)
   320a8:	10000326 	beq	r2,zero,320b8 <alt_get_errno+0x24>
   320ac:	d0a00c17 	ldw	r2,-32720(gp)
   320b0:	103ee83a 	callr	r2
   320b4:	00000106 	br	320bc <alt_get_errno+0x28>
   320b8:	d0a6d604 	addi	r2,gp,-25768
}
   320bc:	e037883a 	mov	sp,fp
   320c0:	dfc00117 	ldw	ra,4(sp)
   320c4:	df000017 	ldw	fp,0(sp)
   320c8:	dec00204 	addi	sp,sp,8
   320cc:	f800283a 	ret

000320d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   320d0:	defff904 	addi	sp,sp,-28
   320d4:	dfc00615 	stw	ra,24(sp)
   320d8:	df000515 	stw	fp,20(sp)
   320dc:	df000504 	addi	fp,sp,20
   320e0:	e13ffd15 	stw	r4,-12(fp)
   320e4:	e17ffe15 	stw	r5,-8(fp)
   320e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   320ec:	e0bffd17 	ldw	r2,-12(fp)
   320f0:	10000616 	blt	r2,zero,3210c <write+0x3c>
   320f4:	e0bffd17 	ldw	r2,-12(fp)
   320f8:	10c00324 	muli	r3,r2,12
   320fc:	008000f4 	movhi	r2,3
   32100:	1094b004 	addi	r2,r2,21184
   32104:	1885883a 	add	r2,r3,r2
   32108:	00000106 	br	32110 <write+0x40>
   3210c:	0005883a 	mov	r2,zero
   32110:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   32114:	e0bffb17 	ldw	r2,-20(fp)
   32118:	10002126 	beq	r2,zero,321a0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   3211c:	e0bffb17 	ldw	r2,-20(fp)
   32120:	10800217 	ldw	r2,8(r2)
   32124:	108000cc 	andi	r2,r2,3
   32128:	10001826 	beq	r2,zero,3218c <write+0xbc>
   3212c:	e0bffb17 	ldw	r2,-20(fp)
   32130:	10800017 	ldw	r2,0(r2)
   32134:	10800617 	ldw	r2,24(r2)
   32138:	10001426 	beq	r2,zero,3218c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   3213c:	e0bffb17 	ldw	r2,-20(fp)
   32140:	10800017 	ldw	r2,0(r2)
   32144:	10800617 	ldw	r2,24(r2)
   32148:	e0ffff17 	ldw	r3,-4(fp)
   3214c:	180d883a 	mov	r6,r3
   32150:	e17ffe17 	ldw	r5,-8(fp)
   32154:	e13ffb17 	ldw	r4,-20(fp)
   32158:	103ee83a 	callr	r2
   3215c:	e0bffc15 	stw	r2,-16(fp)
   32160:	e0bffc17 	ldw	r2,-16(fp)
   32164:	1000070e 	bge	r2,zero,32184 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   32168:	00320940 	call	32094 <alt_get_errno>
   3216c:	1007883a 	mov	r3,r2
   32170:	e0bffc17 	ldw	r2,-16(fp)
   32174:	0085c83a 	sub	r2,zero,r2
   32178:	18800015 	stw	r2,0(r3)
        return -1;
   3217c:	00bfffc4 	movi	r2,-1
   32180:	00000c06 	br	321b4 <write+0xe4>
      }
      return rval;
   32184:	e0bffc17 	ldw	r2,-16(fp)
   32188:	00000a06 	br	321b4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   3218c:	00320940 	call	32094 <alt_get_errno>
   32190:	1007883a 	mov	r3,r2
   32194:	00800344 	movi	r2,13
   32198:	18800015 	stw	r2,0(r3)
   3219c:	00000406 	br	321b0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   321a0:	00320940 	call	32094 <alt_get_errno>
   321a4:	1007883a 	mov	r3,r2
   321a8:	00801444 	movi	r2,81
   321ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   321b0:	00bfffc4 	movi	r2,-1
}
   321b4:	e037883a 	mov	sp,fp
   321b8:	dfc00117 	ldw	ra,4(sp)
   321bc:	df000017 	ldw	fp,0(sp)
   321c0:	dec00204 	addi	sp,sp,8
   321c4:	f800283a 	ret

000321c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   321c8:	defffd04 	addi	sp,sp,-12
   321cc:	dfc00215 	stw	ra,8(sp)
   321d0:	df000115 	stw	fp,4(sp)
   321d4:	df000104 	addi	fp,sp,4
   321d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   321dc:	d1600904 	addi	r5,gp,-32732
   321e0:	e13fff17 	ldw	r4,-4(fp)
   321e4:	00330fc0 	call	330fc <alt_dev_llist_insert>
}
   321e8:	e037883a 	mov	sp,fp
   321ec:	dfc00117 	ldw	ra,4(sp)
   321f0:	df000017 	ldw	fp,0(sp)
   321f4:	dec00204 	addi	sp,sp,8
   321f8:	f800283a 	ret

000321fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   321fc:	defffd04 	addi	sp,sp,-12
   32200:	dfc00215 	stw	ra,8(sp)
   32204:	df000115 	stw	fp,4(sp)
   32208:	df000104 	addi	fp,sp,4
   3220c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   32210:	00338c80 	call	338c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   32214:	00800044 	movi	r2,1
   32218:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   3221c:	0001883a 	nop
   32220:	e037883a 	mov	sp,fp
   32224:	dfc00117 	ldw	ra,4(sp)
   32228:	df000017 	ldw	fp,0(sp)
   3222c:	dec00204 	addi	sp,sp,8
   32230:	f800283a 	ret

00032234 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   32234:	defffe04 	addi	sp,sp,-8
   32238:	dfc00115 	stw	ra,4(sp)
   3223c:	df000015 	stw	fp,0(sp)
   32240:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   32244:	01c0fa04 	movi	r7,1000
   32248:	01800044 	movi	r6,1
   3224c:	000b883a 	mov	r5,zero
   32250:	01000134 	movhi	r4,4
   32254:	21041804 	addi	r4,r4,4192
   32258:	0032d780 	call	32d78 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   3225c:	000d883a 	mov	r6,zero
   32260:	000b883a 	mov	r5,zero
   32264:	010000f4 	movhi	r4,3
   32268:	21151a04 	addi	r4,r4,21608
   3226c:	00323fc0 	call	323fc <altera_avalon_jtag_uart_init>
   32270:	010000f4 	movhi	r4,3
   32274:	21151004 	addi	r4,r4,21568
   32278:	00321c80 	call	321c8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   3227c:	0001883a 	nop
}
   32280:	0001883a 	nop
   32284:	e037883a 	mov	sp,fp
   32288:	dfc00117 	ldw	ra,4(sp)
   3228c:	df000017 	ldw	fp,0(sp)
   32290:	dec00204 	addi	sp,sp,8
   32294:	f800283a 	ret

00032298 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   32298:	defffa04 	addi	sp,sp,-24
   3229c:	dfc00515 	stw	ra,20(sp)
   322a0:	df000415 	stw	fp,16(sp)
   322a4:	df000404 	addi	fp,sp,16
   322a8:	e13ffd15 	stw	r4,-12(fp)
   322ac:	e17ffe15 	stw	r5,-8(fp)
   322b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   322b4:	e0bffd17 	ldw	r2,-12(fp)
   322b8:	10800017 	ldw	r2,0(r2)
   322bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   322c0:	e0bffc17 	ldw	r2,-16(fp)
   322c4:	10c00a04 	addi	r3,r2,40
   322c8:	e0bffd17 	ldw	r2,-12(fp)
   322cc:	10800217 	ldw	r2,8(r2)
   322d0:	100f883a 	mov	r7,r2
   322d4:	e1bfff17 	ldw	r6,-4(fp)
   322d8:	e17ffe17 	ldw	r5,-8(fp)
   322dc:	1809883a 	mov	r4,r3
   322e0:	00328c00 	call	328c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   322e4:	e037883a 	mov	sp,fp
   322e8:	dfc00117 	ldw	ra,4(sp)
   322ec:	df000017 	ldw	fp,0(sp)
   322f0:	dec00204 	addi	sp,sp,8
   322f4:	f800283a 	ret

000322f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   322f8:	defffa04 	addi	sp,sp,-24
   322fc:	dfc00515 	stw	ra,20(sp)
   32300:	df000415 	stw	fp,16(sp)
   32304:	df000404 	addi	fp,sp,16
   32308:	e13ffd15 	stw	r4,-12(fp)
   3230c:	e17ffe15 	stw	r5,-8(fp)
   32310:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   32314:	e0bffd17 	ldw	r2,-12(fp)
   32318:	10800017 	ldw	r2,0(r2)
   3231c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   32320:	e0bffc17 	ldw	r2,-16(fp)
   32324:	10c00a04 	addi	r3,r2,40
   32328:	e0bffd17 	ldw	r2,-12(fp)
   3232c:	10800217 	ldw	r2,8(r2)
   32330:	100f883a 	mov	r7,r2
   32334:	e1bfff17 	ldw	r6,-4(fp)
   32338:	e17ffe17 	ldw	r5,-8(fp)
   3233c:	1809883a 	mov	r4,r3
   32340:	0032adc0 	call	32adc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   32344:	e037883a 	mov	sp,fp
   32348:	dfc00117 	ldw	ra,4(sp)
   3234c:	df000017 	ldw	fp,0(sp)
   32350:	dec00204 	addi	sp,sp,8
   32354:	f800283a 	ret

00032358 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   32358:	defffc04 	addi	sp,sp,-16
   3235c:	dfc00315 	stw	ra,12(sp)
   32360:	df000215 	stw	fp,8(sp)
   32364:	df000204 	addi	fp,sp,8
   32368:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3236c:	e0bfff17 	ldw	r2,-4(fp)
   32370:	10800017 	ldw	r2,0(r2)
   32374:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   32378:	e0bffe17 	ldw	r2,-8(fp)
   3237c:	10c00a04 	addi	r3,r2,40
   32380:	e0bfff17 	ldw	r2,-4(fp)
   32384:	10800217 	ldw	r2,8(r2)
   32388:	100b883a 	mov	r5,r2
   3238c:	1809883a 	mov	r4,r3
   32390:	00327680 	call	32768 <altera_avalon_jtag_uart_close>
}
   32394:	e037883a 	mov	sp,fp
   32398:	dfc00117 	ldw	ra,4(sp)
   3239c:	df000017 	ldw	fp,0(sp)
   323a0:	dec00204 	addi	sp,sp,8
   323a4:	f800283a 	ret

000323a8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   323a8:	defffa04 	addi	sp,sp,-24
   323ac:	dfc00515 	stw	ra,20(sp)
   323b0:	df000415 	stw	fp,16(sp)
   323b4:	df000404 	addi	fp,sp,16
   323b8:	e13ffd15 	stw	r4,-12(fp)
   323bc:	e17ffe15 	stw	r5,-8(fp)
   323c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   323c4:	e0bffd17 	ldw	r2,-12(fp)
   323c8:	10800017 	ldw	r2,0(r2)
   323cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   323d0:	e0bffc17 	ldw	r2,-16(fp)
   323d4:	10800a04 	addi	r2,r2,40
   323d8:	e1bfff17 	ldw	r6,-4(fp)
   323dc:	e17ffe17 	ldw	r5,-8(fp)
   323e0:	1009883a 	mov	r4,r2
   323e4:	00327d00 	call	327d0 <altera_avalon_jtag_uart_ioctl>
}
   323e8:	e037883a 	mov	sp,fp
   323ec:	dfc00117 	ldw	ra,4(sp)
   323f0:	df000017 	ldw	fp,0(sp)
   323f4:	dec00204 	addi	sp,sp,8
   323f8:	f800283a 	ret

000323fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   323fc:	defffa04 	addi	sp,sp,-24
   32400:	dfc00515 	stw	ra,20(sp)
   32404:	df000415 	stw	fp,16(sp)
   32408:	df000404 	addi	fp,sp,16
   3240c:	e13ffd15 	stw	r4,-12(fp)
   32410:	e17ffe15 	stw	r5,-8(fp)
   32414:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   32418:	e0bffd17 	ldw	r2,-12(fp)
   3241c:	00c00044 	movi	r3,1
   32420:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   32424:	e0bffd17 	ldw	r2,-12(fp)
   32428:	10800017 	ldw	r2,0(r2)
   3242c:	10800104 	addi	r2,r2,4
   32430:	1007883a 	mov	r3,r2
   32434:	e0bffd17 	ldw	r2,-12(fp)
   32438:	10800817 	ldw	r2,32(r2)
   3243c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   32440:	e0bffe17 	ldw	r2,-8(fp)
   32444:	e0ffff17 	ldw	r3,-4(fp)
   32448:	d8000015 	stw	zero,0(sp)
   3244c:	e1fffd17 	ldw	r7,-12(fp)
   32450:	018000f4 	movhi	r6,3
   32454:	31892f04 	addi	r6,r6,9404
   32458:	180b883a 	mov	r5,r3
   3245c:	1009883a 	mov	r4,r2
   32460:	00332940 	call	33294 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   32464:	e0bffd17 	ldw	r2,-12(fp)
   32468:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   3246c:	e0bffd17 	ldw	r2,-12(fp)
   32470:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   32474:	d0e6da17 	ldw	r3,-25752(gp)
   32478:	e1fffd17 	ldw	r7,-12(fp)
   3247c:	018000f4 	movhi	r6,3
   32480:	3189b204 	addi	r6,r6,9928
   32484:	180b883a 	mov	r5,r3
   32488:	1009883a 	mov	r4,r2
   3248c:	0032df40 	call	32df4 <alt_alarm_start>
   32490:	1000040e 	bge	r2,zero,324a4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   32494:	e0fffd17 	ldw	r3,-12(fp)
   32498:	00a00034 	movhi	r2,32768
   3249c:	10bfffc4 	addi	r2,r2,-1
   324a0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   324a4:	0001883a 	nop
   324a8:	e037883a 	mov	sp,fp
   324ac:	dfc00117 	ldw	ra,4(sp)
   324b0:	df000017 	ldw	fp,0(sp)
   324b4:	dec00204 	addi	sp,sp,8
   324b8:	f800283a 	ret

000324bc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   324bc:	defff804 	addi	sp,sp,-32
   324c0:	df000715 	stw	fp,28(sp)
   324c4:	df000704 	addi	fp,sp,28
   324c8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   324cc:	e0bfff17 	ldw	r2,-4(fp)
   324d0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   324d4:	e0bffb17 	ldw	r2,-20(fp)
   324d8:	10800017 	ldw	r2,0(r2)
   324dc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   324e0:	e0bffc17 	ldw	r2,-16(fp)
   324e4:	10800104 	addi	r2,r2,4
   324e8:	10800037 	ldwio	r2,0(r2)
   324ec:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   324f0:	e0bffd17 	ldw	r2,-12(fp)
   324f4:	1080c00c 	andi	r2,r2,768
   324f8:	10006d26 	beq	r2,zero,326b0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   324fc:	e0bffd17 	ldw	r2,-12(fp)
   32500:	1080400c 	andi	r2,r2,256
   32504:	10003526 	beq	r2,zero,325dc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   32508:	00800074 	movhi	r2,1
   3250c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   32510:	e0bffb17 	ldw	r2,-20(fp)
   32514:	10800a17 	ldw	r2,40(r2)
   32518:	10800044 	addi	r2,r2,1
   3251c:	1081ffcc 	andi	r2,r2,2047
   32520:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   32524:	e0bffb17 	ldw	r2,-20(fp)
   32528:	10c00b17 	ldw	r3,44(r2)
   3252c:	e0bffe17 	ldw	r2,-8(fp)
   32530:	18801526 	beq	r3,r2,32588 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   32534:	e0bffc17 	ldw	r2,-16(fp)
   32538:	10800037 	ldwio	r2,0(r2)
   3253c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   32540:	e0bff917 	ldw	r2,-28(fp)
   32544:	10a0000c 	andi	r2,r2,32768
   32548:	10001126 	beq	r2,zero,32590 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   3254c:	e0bffb17 	ldw	r2,-20(fp)
   32550:	10800a17 	ldw	r2,40(r2)
   32554:	e0fff917 	ldw	r3,-28(fp)
   32558:	1809883a 	mov	r4,r3
   3255c:	e0fffb17 	ldw	r3,-20(fp)
   32560:	1885883a 	add	r2,r3,r2
   32564:	10800e04 	addi	r2,r2,56
   32568:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3256c:	e0bffb17 	ldw	r2,-20(fp)
   32570:	10800a17 	ldw	r2,40(r2)
   32574:	10800044 	addi	r2,r2,1
   32578:	10c1ffcc 	andi	r3,r2,2047
   3257c:	e0bffb17 	ldw	r2,-20(fp)
   32580:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   32584:	003fe206 	br	32510 <__alt_data_end+0xffff3110>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   32588:	0001883a 	nop
   3258c:	00000106 	br	32594 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   32590:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   32594:	e0bff917 	ldw	r2,-28(fp)
   32598:	10bfffec 	andhi	r2,r2,65535
   3259c:	10000f26 	beq	r2,zero,325dc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   325a0:	e0bffb17 	ldw	r2,-20(fp)
   325a4:	10c00817 	ldw	r3,32(r2)
   325a8:	00bfff84 	movi	r2,-2
   325ac:	1886703a 	and	r3,r3,r2
   325b0:	e0bffb17 	ldw	r2,-20(fp)
   325b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   325b8:	e0bffc17 	ldw	r2,-16(fp)
   325bc:	10800104 	addi	r2,r2,4
   325c0:	1007883a 	mov	r3,r2
   325c4:	e0bffb17 	ldw	r2,-20(fp)
   325c8:	10800817 	ldw	r2,32(r2)
   325cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   325d0:	e0bffc17 	ldw	r2,-16(fp)
   325d4:	10800104 	addi	r2,r2,4
   325d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   325dc:	e0bffd17 	ldw	r2,-12(fp)
   325e0:	1080800c 	andi	r2,r2,512
   325e4:	103fbe26 	beq	r2,zero,324e0 <__alt_data_end+0xffff30e0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   325e8:	e0bffd17 	ldw	r2,-12(fp)
   325ec:	1004d43a 	srli	r2,r2,16
   325f0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   325f4:	00001406 	br	32648 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   325f8:	e0bffc17 	ldw	r2,-16(fp)
   325fc:	e0fffb17 	ldw	r3,-20(fp)
   32600:	18c00d17 	ldw	r3,52(r3)
   32604:	e13ffb17 	ldw	r4,-20(fp)
   32608:	20c7883a 	add	r3,r4,r3
   3260c:	18c20e04 	addi	r3,r3,2104
   32610:	18c00003 	ldbu	r3,0(r3)
   32614:	18c03fcc 	andi	r3,r3,255
   32618:	18c0201c 	xori	r3,r3,128
   3261c:	18ffe004 	addi	r3,r3,-128
   32620:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   32624:	e0bffb17 	ldw	r2,-20(fp)
   32628:	10800d17 	ldw	r2,52(r2)
   3262c:	10800044 	addi	r2,r2,1
   32630:	10c1ffcc 	andi	r3,r2,2047
   32634:	e0bffb17 	ldw	r2,-20(fp)
   32638:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   3263c:	e0bffa17 	ldw	r2,-24(fp)
   32640:	10bfffc4 	addi	r2,r2,-1
   32644:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   32648:	e0bffa17 	ldw	r2,-24(fp)
   3264c:	10000526 	beq	r2,zero,32664 <altera_avalon_jtag_uart_irq+0x1a8>
   32650:	e0bffb17 	ldw	r2,-20(fp)
   32654:	10c00d17 	ldw	r3,52(r2)
   32658:	e0bffb17 	ldw	r2,-20(fp)
   3265c:	10800c17 	ldw	r2,48(r2)
   32660:	18bfe51e 	bne	r3,r2,325f8 <__alt_data_end+0xffff31f8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   32664:	e0bffa17 	ldw	r2,-24(fp)
   32668:	103f9d26 	beq	r2,zero,324e0 <__alt_data_end+0xffff30e0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   3266c:	e0bffb17 	ldw	r2,-20(fp)
   32670:	10c00817 	ldw	r3,32(r2)
   32674:	00bfff44 	movi	r2,-3
   32678:	1886703a 	and	r3,r3,r2
   3267c:	e0bffb17 	ldw	r2,-20(fp)
   32680:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   32684:	e0bffb17 	ldw	r2,-20(fp)
   32688:	10800017 	ldw	r2,0(r2)
   3268c:	10800104 	addi	r2,r2,4
   32690:	1007883a 	mov	r3,r2
   32694:	e0bffb17 	ldw	r2,-20(fp)
   32698:	10800817 	ldw	r2,32(r2)
   3269c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   326a0:	e0bffc17 	ldw	r2,-16(fp)
   326a4:	10800104 	addi	r2,r2,4
   326a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   326ac:	003f8c06 	br	324e0 <__alt_data_end+0xffff30e0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   326b0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   326b4:	0001883a 	nop
   326b8:	e037883a 	mov	sp,fp
   326bc:	df000017 	ldw	fp,0(sp)
   326c0:	dec00104 	addi	sp,sp,4
   326c4:	f800283a 	ret

000326c8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   326c8:	defff804 	addi	sp,sp,-32
   326cc:	df000715 	stw	fp,28(sp)
   326d0:	df000704 	addi	fp,sp,28
   326d4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   326d8:	e0bffb17 	ldw	r2,-20(fp)
   326dc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   326e0:	e0bff917 	ldw	r2,-28(fp)
   326e4:	10800017 	ldw	r2,0(r2)
   326e8:	10800104 	addi	r2,r2,4
   326ec:	10800037 	ldwio	r2,0(r2)
   326f0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   326f4:	e0bffa17 	ldw	r2,-24(fp)
   326f8:	1081000c 	andi	r2,r2,1024
   326fc:	10000b26 	beq	r2,zero,3272c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   32700:	e0bff917 	ldw	r2,-28(fp)
   32704:	10800017 	ldw	r2,0(r2)
   32708:	10800104 	addi	r2,r2,4
   3270c:	1007883a 	mov	r3,r2
   32710:	e0bff917 	ldw	r2,-28(fp)
   32714:	10800817 	ldw	r2,32(r2)
   32718:	10810014 	ori	r2,r2,1024
   3271c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   32720:	e0bff917 	ldw	r2,-28(fp)
   32724:	10000915 	stw	zero,36(r2)
   32728:	00000a06 	br	32754 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   3272c:	e0bff917 	ldw	r2,-28(fp)
   32730:	10c00917 	ldw	r3,36(r2)
   32734:	00a00034 	movhi	r2,32768
   32738:	10bfff04 	addi	r2,r2,-4
   3273c:	10c00536 	bltu	r2,r3,32754 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   32740:	e0bff917 	ldw	r2,-28(fp)
   32744:	10800917 	ldw	r2,36(r2)
   32748:	10c00044 	addi	r3,r2,1
   3274c:	e0bff917 	ldw	r2,-28(fp)
   32750:	10c00915 	stw	r3,36(r2)
   32754:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   32758:	e037883a 	mov	sp,fp
   3275c:	df000017 	ldw	fp,0(sp)
   32760:	dec00104 	addi	sp,sp,4
   32764:	f800283a 	ret

00032768 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   32768:	defffd04 	addi	sp,sp,-12
   3276c:	df000215 	stw	fp,8(sp)
   32770:	df000204 	addi	fp,sp,8
   32774:	e13ffe15 	stw	r4,-8(fp)
   32778:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3277c:	00000506 	br	32794 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   32780:	e0bfff17 	ldw	r2,-4(fp)
   32784:	1090000c 	andi	r2,r2,16384
   32788:	10000226 	beq	r2,zero,32794 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   3278c:	00bffd44 	movi	r2,-11
   32790:	00000b06 	br	327c0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   32794:	e0bffe17 	ldw	r2,-8(fp)
   32798:	10c00d17 	ldw	r3,52(r2)
   3279c:	e0bffe17 	ldw	r2,-8(fp)
   327a0:	10800c17 	ldw	r2,48(r2)
   327a4:	18800526 	beq	r3,r2,327bc <altera_avalon_jtag_uart_close+0x54>
   327a8:	e0bffe17 	ldw	r2,-8(fp)
   327ac:	10c00917 	ldw	r3,36(r2)
   327b0:	e0bffe17 	ldw	r2,-8(fp)
   327b4:	10800117 	ldw	r2,4(r2)
   327b8:	18bff136 	bltu	r3,r2,32780 <__alt_data_end+0xffff3380>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   327bc:	0005883a 	mov	r2,zero
}
   327c0:	e037883a 	mov	sp,fp
   327c4:	df000017 	ldw	fp,0(sp)
   327c8:	dec00104 	addi	sp,sp,4
   327cc:	f800283a 	ret

000327d0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   327d0:	defffa04 	addi	sp,sp,-24
   327d4:	df000515 	stw	fp,20(sp)
   327d8:	df000504 	addi	fp,sp,20
   327dc:	e13ffd15 	stw	r4,-12(fp)
   327e0:	e17ffe15 	stw	r5,-8(fp)
   327e4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   327e8:	00bff9c4 	movi	r2,-25
   327ec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   327f0:	e0bffe17 	ldw	r2,-8(fp)
   327f4:	10da8060 	cmpeqi	r3,r2,27137
   327f8:	1800031e 	bne	r3,zero,32808 <altera_avalon_jtag_uart_ioctl+0x38>
   327fc:	109a80a0 	cmpeqi	r2,r2,27138
   32800:	1000181e 	bne	r2,zero,32864 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   32804:	00002906 	br	328ac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   32808:	e0bffd17 	ldw	r2,-12(fp)
   3280c:	10c00117 	ldw	r3,4(r2)
   32810:	00a00034 	movhi	r2,32768
   32814:	10bfffc4 	addi	r2,r2,-1
   32818:	18802126 	beq	r3,r2,328a0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   3281c:	e0bfff17 	ldw	r2,-4(fp)
   32820:	10800017 	ldw	r2,0(r2)
   32824:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   32828:	e0bffc17 	ldw	r2,-16(fp)
   3282c:	10800090 	cmplti	r2,r2,2
   32830:	1000061e 	bne	r2,zero,3284c <altera_avalon_jtag_uart_ioctl+0x7c>
   32834:	e0fffc17 	ldw	r3,-16(fp)
   32838:	00a00034 	movhi	r2,32768
   3283c:	10bfffc4 	addi	r2,r2,-1
   32840:	18800226 	beq	r3,r2,3284c <altera_avalon_jtag_uart_ioctl+0x7c>
   32844:	e0bffc17 	ldw	r2,-16(fp)
   32848:	00000206 	br	32854 <altera_avalon_jtag_uart_ioctl+0x84>
   3284c:	00a00034 	movhi	r2,32768
   32850:	10bfff84 	addi	r2,r2,-2
   32854:	e0fffd17 	ldw	r3,-12(fp)
   32858:	18800115 	stw	r2,4(r3)
      rc = 0;
   3285c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   32860:	00000f06 	br	328a0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   32864:	e0bffd17 	ldw	r2,-12(fp)
   32868:	10c00117 	ldw	r3,4(r2)
   3286c:	00a00034 	movhi	r2,32768
   32870:	10bfffc4 	addi	r2,r2,-1
   32874:	18800c26 	beq	r3,r2,328a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   32878:	e0bffd17 	ldw	r2,-12(fp)
   3287c:	10c00917 	ldw	r3,36(r2)
   32880:	e0bffd17 	ldw	r2,-12(fp)
   32884:	10800117 	ldw	r2,4(r2)
   32888:	1885803a 	cmpltu	r2,r3,r2
   3288c:	10c03fcc 	andi	r3,r2,255
   32890:	e0bfff17 	ldw	r2,-4(fp)
   32894:	10c00015 	stw	r3,0(r2)
      rc = 0;
   32898:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3289c:	00000206 	br	328a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   328a0:	0001883a 	nop
   328a4:	00000106 	br	328ac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   328a8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   328ac:	e0bffb17 	ldw	r2,-20(fp)
}
   328b0:	e037883a 	mov	sp,fp
   328b4:	df000017 	ldw	fp,0(sp)
   328b8:	dec00104 	addi	sp,sp,4
   328bc:	f800283a 	ret

000328c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   328c0:	defff304 	addi	sp,sp,-52
   328c4:	dfc00c15 	stw	ra,48(sp)
   328c8:	df000b15 	stw	fp,44(sp)
   328cc:	df000b04 	addi	fp,sp,44
   328d0:	e13ffc15 	stw	r4,-16(fp)
   328d4:	e17ffd15 	stw	r5,-12(fp)
   328d8:	e1bffe15 	stw	r6,-8(fp)
   328dc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   328e0:	e0bffd17 	ldw	r2,-12(fp)
   328e4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   328e8:	00004706 	br	32a08 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   328ec:	e0bffc17 	ldw	r2,-16(fp)
   328f0:	10800a17 	ldw	r2,40(r2)
   328f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   328f8:	e0bffc17 	ldw	r2,-16(fp)
   328fc:	10800b17 	ldw	r2,44(r2)
   32900:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   32904:	e0fff717 	ldw	r3,-36(fp)
   32908:	e0bff817 	ldw	r2,-32(fp)
   3290c:	18800536 	bltu	r3,r2,32924 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   32910:	e0fff717 	ldw	r3,-36(fp)
   32914:	e0bff817 	ldw	r2,-32(fp)
   32918:	1885c83a 	sub	r2,r3,r2
   3291c:	e0bff615 	stw	r2,-40(fp)
   32920:	00000406 	br	32934 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   32924:	00c20004 	movi	r3,2048
   32928:	e0bff817 	ldw	r2,-32(fp)
   3292c:	1885c83a 	sub	r2,r3,r2
   32930:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   32934:	e0bff617 	ldw	r2,-40(fp)
   32938:	10001e26 	beq	r2,zero,329b4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   3293c:	e0fffe17 	ldw	r3,-8(fp)
   32940:	e0bff617 	ldw	r2,-40(fp)
   32944:	1880022e 	bgeu	r3,r2,32950 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   32948:	e0bffe17 	ldw	r2,-8(fp)
   3294c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   32950:	e0bffc17 	ldw	r2,-16(fp)
   32954:	10c00e04 	addi	r3,r2,56
   32958:	e0bff817 	ldw	r2,-32(fp)
   3295c:	1885883a 	add	r2,r3,r2
   32960:	e1bff617 	ldw	r6,-40(fp)
   32964:	100b883a 	mov	r5,r2
   32968:	e13ff517 	ldw	r4,-44(fp)
   3296c:	002cc1c0 	call	2cc1c <memcpy>
      ptr   += n;
   32970:	e0fff517 	ldw	r3,-44(fp)
   32974:	e0bff617 	ldw	r2,-40(fp)
   32978:	1885883a 	add	r2,r3,r2
   3297c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   32980:	e0fffe17 	ldw	r3,-8(fp)
   32984:	e0bff617 	ldw	r2,-40(fp)
   32988:	1885c83a 	sub	r2,r3,r2
   3298c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   32990:	e0fff817 	ldw	r3,-32(fp)
   32994:	e0bff617 	ldw	r2,-40(fp)
   32998:	1885883a 	add	r2,r3,r2
   3299c:	10c1ffcc 	andi	r3,r2,2047
   329a0:	e0bffc17 	ldw	r2,-16(fp)
   329a4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   329a8:	e0bffe17 	ldw	r2,-8(fp)
   329ac:	00bfcf16 	blt	zero,r2,328ec <__alt_data_end+0xffff34ec>
   329b0:	00000106 	br	329b8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   329b4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   329b8:	e0fff517 	ldw	r3,-44(fp)
   329bc:	e0bffd17 	ldw	r2,-12(fp)
   329c0:	1880141e 	bne	r3,r2,32a14 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   329c4:	e0bfff17 	ldw	r2,-4(fp)
   329c8:	1090000c 	andi	r2,r2,16384
   329cc:	1000131e 	bne	r2,zero,32a1c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   329d0:	0001883a 	nop
   329d4:	e0bffc17 	ldw	r2,-16(fp)
   329d8:	10c00a17 	ldw	r3,40(r2)
   329dc:	e0bff717 	ldw	r2,-36(fp)
   329e0:	1880051e 	bne	r3,r2,329f8 <altera_avalon_jtag_uart_read+0x138>
   329e4:	e0bffc17 	ldw	r2,-16(fp)
   329e8:	10c00917 	ldw	r3,36(r2)
   329ec:	e0bffc17 	ldw	r2,-16(fp)
   329f0:	10800117 	ldw	r2,4(r2)
   329f4:	18bff736 	bltu	r3,r2,329d4 <__alt_data_end+0xffff35d4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   329f8:	e0bffc17 	ldw	r2,-16(fp)
   329fc:	10c00a17 	ldw	r3,40(r2)
   32a00:	e0bff717 	ldw	r2,-36(fp)
   32a04:	18800726 	beq	r3,r2,32a24 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   32a08:	e0bffe17 	ldw	r2,-8(fp)
   32a0c:	00bfb716 	blt	zero,r2,328ec <__alt_data_end+0xffff34ec>
   32a10:	00000506 	br	32a28 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   32a14:	0001883a 	nop
   32a18:	00000306 	br	32a28 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   32a1c:	0001883a 	nop
   32a20:	00000106 	br	32a28 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   32a24:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   32a28:	e0fff517 	ldw	r3,-44(fp)
   32a2c:	e0bffd17 	ldw	r2,-12(fp)
   32a30:	18801826 	beq	r3,r2,32a94 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32a34:	0005303a 	rdctl	r2,status
   32a38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32a3c:	e0fffb17 	ldw	r3,-20(fp)
   32a40:	00bfff84 	movi	r2,-2
   32a44:	1884703a 	and	r2,r3,r2
   32a48:	1001703a 	wrctl	status,r2
  
  return context;
   32a4c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   32a50:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   32a54:	e0bffc17 	ldw	r2,-16(fp)
   32a58:	10800817 	ldw	r2,32(r2)
   32a5c:	10c00054 	ori	r3,r2,1
   32a60:	e0bffc17 	ldw	r2,-16(fp)
   32a64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   32a68:	e0bffc17 	ldw	r2,-16(fp)
   32a6c:	10800017 	ldw	r2,0(r2)
   32a70:	10800104 	addi	r2,r2,4
   32a74:	1007883a 	mov	r3,r2
   32a78:	e0bffc17 	ldw	r2,-16(fp)
   32a7c:	10800817 	ldw	r2,32(r2)
   32a80:	18800035 	stwio	r2,0(r3)
   32a84:	e0bffa17 	ldw	r2,-24(fp)
   32a88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32a8c:	e0bff917 	ldw	r2,-28(fp)
   32a90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   32a94:	e0fff517 	ldw	r3,-44(fp)
   32a98:	e0bffd17 	ldw	r2,-12(fp)
   32a9c:	18800426 	beq	r3,r2,32ab0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   32aa0:	e0fff517 	ldw	r3,-44(fp)
   32aa4:	e0bffd17 	ldw	r2,-12(fp)
   32aa8:	1885c83a 	sub	r2,r3,r2
   32aac:	00000606 	br	32ac8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   32ab0:	e0bfff17 	ldw	r2,-4(fp)
   32ab4:	1090000c 	andi	r2,r2,16384
   32ab8:	10000226 	beq	r2,zero,32ac4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   32abc:	00bffd44 	movi	r2,-11
   32ac0:	00000106 	br	32ac8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   32ac4:	00bffec4 	movi	r2,-5
}
   32ac8:	e037883a 	mov	sp,fp
   32acc:	dfc00117 	ldw	ra,4(sp)
   32ad0:	df000017 	ldw	fp,0(sp)
   32ad4:	dec00204 	addi	sp,sp,8
   32ad8:	f800283a 	ret

00032adc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   32adc:	defff304 	addi	sp,sp,-52
   32ae0:	dfc00c15 	stw	ra,48(sp)
   32ae4:	df000b15 	stw	fp,44(sp)
   32ae8:	df000b04 	addi	fp,sp,44
   32aec:	e13ffc15 	stw	r4,-16(fp)
   32af0:	e17ffd15 	stw	r5,-12(fp)
   32af4:	e1bffe15 	stw	r6,-8(fp)
   32af8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   32afc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   32b00:	e0bffd17 	ldw	r2,-12(fp)
   32b04:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   32b08:	00003706 	br	32be8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   32b0c:	e0bffc17 	ldw	r2,-16(fp)
   32b10:	10800c17 	ldw	r2,48(r2)
   32b14:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   32b18:	e0bffc17 	ldw	r2,-16(fp)
   32b1c:	10800d17 	ldw	r2,52(r2)
   32b20:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   32b24:	e0fff917 	ldw	r3,-28(fp)
   32b28:	e0bff517 	ldw	r2,-44(fp)
   32b2c:	1880062e 	bgeu	r3,r2,32b48 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   32b30:	e0fff517 	ldw	r3,-44(fp)
   32b34:	e0bff917 	ldw	r2,-28(fp)
   32b38:	1885c83a 	sub	r2,r3,r2
   32b3c:	10bfffc4 	addi	r2,r2,-1
   32b40:	e0bff615 	stw	r2,-40(fp)
   32b44:	00000b06 	br	32b74 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   32b48:	e0bff517 	ldw	r2,-44(fp)
   32b4c:	10000526 	beq	r2,zero,32b64 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   32b50:	00c20004 	movi	r3,2048
   32b54:	e0bff917 	ldw	r2,-28(fp)
   32b58:	1885c83a 	sub	r2,r3,r2
   32b5c:	e0bff615 	stw	r2,-40(fp)
   32b60:	00000406 	br	32b74 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   32b64:	00c1ffc4 	movi	r3,2047
   32b68:	e0bff917 	ldw	r2,-28(fp)
   32b6c:	1885c83a 	sub	r2,r3,r2
   32b70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   32b74:	e0bff617 	ldw	r2,-40(fp)
   32b78:	10001e26 	beq	r2,zero,32bf4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   32b7c:	e0fffe17 	ldw	r3,-8(fp)
   32b80:	e0bff617 	ldw	r2,-40(fp)
   32b84:	1880022e 	bgeu	r3,r2,32b90 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   32b88:	e0bffe17 	ldw	r2,-8(fp)
   32b8c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   32b90:	e0bffc17 	ldw	r2,-16(fp)
   32b94:	10c20e04 	addi	r3,r2,2104
   32b98:	e0bff917 	ldw	r2,-28(fp)
   32b9c:	1885883a 	add	r2,r3,r2
   32ba0:	e1bff617 	ldw	r6,-40(fp)
   32ba4:	e17ffd17 	ldw	r5,-12(fp)
   32ba8:	1009883a 	mov	r4,r2
   32bac:	002cc1c0 	call	2cc1c <memcpy>
      ptr   += n;
   32bb0:	e0fffd17 	ldw	r3,-12(fp)
   32bb4:	e0bff617 	ldw	r2,-40(fp)
   32bb8:	1885883a 	add	r2,r3,r2
   32bbc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   32bc0:	e0fffe17 	ldw	r3,-8(fp)
   32bc4:	e0bff617 	ldw	r2,-40(fp)
   32bc8:	1885c83a 	sub	r2,r3,r2
   32bcc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   32bd0:	e0fff917 	ldw	r3,-28(fp)
   32bd4:	e0bff617 	ldw	r2,-40(fp)
   32bd8:	1885883a 	add	r2,r3,r2
   32bdc:	10c1ffcc 	andi	r3,r2,2047
   32be0:	e0bffc17 	ldw	r2,-16(fp)
   32be4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   32be8:	e0bffe17 	ldw	r2,-8(fp)
   32bec:	00bfc716 	blt	zero,r2,32b0c <__alt_data_end+0xffff370c>
   32bf0:	00000106 	br	32bf8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   32bf4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32bf8:	0005303a 	rdctl	r2,status
   32bfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32c00:	e0fffb17 	ldw	r3,-20(fp)
   32c04:	00bfff84 	movi	r2,-2
   32c08:	1884703a 	and	r2,r3,r2
   32c0c:	1001703a 	wrctl	status,r2
  
  return context;
   32c10:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   32c14:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   32c18:	e0bffc17 	ldw	r2,-16(fp)
   32c1c:	10800817 	ldw	r2,32(r2)
   32c20:	10c00094 	ori	r3,r2,2
   32c24:	e0bffc17 	ldw	r2,-16(fp)
   32c28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   32c2c:	e0bffc17 	ldw	r2,-16(fp)
   32c30:	10800017 	ldw	r2,0(r2)
   32c34:	10800104 	addi	r2,r2,4
   32c38:	1007883a 	mov	r3,r2
   32c3c:	e0bffc17 	ldw	r2,-16(fp)
   32c40:	10800817 	ldw	r2,32(r2)
   32c44:	18800035 	stwio	r2,0(r3)
   32c48:	e0bffa17 	ldw	r2,-24(fp)
   32c4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32c50:	e0bff817 	ldw	r2,-32(fp)
   32c54:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   32c58:	e0bffe17 	ldw	r2,-8(fp)
   32c5c:	0080100e 	bge	zero,r2,32ca0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   32c60:	e0bfff17 	ldw	r2,-4(fp)
   32c64:	1090000c 	andi	r2,r2,16384
   32c68:	1000101e 	bne	r2,zero,32cac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   32c6c:	0001883a 	nop
   32c70:	e0bffc17 	ldw	r2,-16(fp)
   32c74:	10c00d17 	ldw	r3,52(r2)
   32c78:	e0bff517 	ldw	r2,-44(fp)
   32c7c:	1880051e 	bne	r3,r2,32c94 <altera_avalon_jtag_uart_write+0x1b8>
   32c80:	e0bffc17 	ldw	r2,-16(fp)
   32c84:	10c00917 	ldw	r3,36(r2)
   32c88:	e0bffc17 	ldw	r2,-16(fp)
   32c8c:	10800117 	ldw	r2,4(r2)
   32c90:	18bff736 	bltu	r3,r2,32c70 <__alt_data_end+0xffff3870>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   32c94:	e0bffc17 	ldw	r2,-16(fp)
   32c98:	10800917 	ldw	r2,36(r2)
   32c9c:	1000051e 	bne	r2,zero,32cb4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   32ca0:	e0bffe17 	ldw	r2,-8(fp)
   32ca4:	00bfd016 	blt	zero,r2,32be8 <__alt_data_end+0xffff37e8>
   32ca8:	00000306 	br	32cb8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   32cac:	0001883a 	nop
   32cb0:	00000106 	br	32cb8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   32cb4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   32cb8:	e0fffd17 	ldw	r3,-12(fp)
   32cbc:	e0bff717 	ldw	r2,-36(fp)
   32cc0:	18800426 	beq	r3,r2,32cd4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   32cc4:	e0fffd17 	ldw	r3,-12(fp)
   32cc8:	e0bff717 	ldw	r2,-36(fp)
   32ccc:	1885c83a 	sub	r2,r3,r2
   32cd0:	00000606 	br	32cec <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   32cd4:	e0bfff17 	ldw	r2,-4(fp)
   32cd8:	1090000c 	andi	r2,r2,16384
   32cdc:	10000226 	beq	r2,zero,32ce8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   32ce0:	00bffd44 	movi	r2,-11
   32ce4:	00000106 	br	32cec <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   32ce8:	00bffec4 	movi	r2,-5
}
   32cec:	e037883a 	mov	sp,fp
   32cf0:	dfc00117 	ldw	ra,4(sp)
   32cf4:	df000017 	ldw	fp,0(sp)
   32cf8:	dec00204 	addi	sp,sp,8
   32cfc:	f800283a 	ret

00032d00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   32d00:	defffa04 	addi	sp,sp,-24
   32d04:	dfc00515 	stw	ra,20(sp)
   32d08:	df000415 	stw	fp,16(sp)
   32d0c:	df000404 	addi	fp,sp,16
   32d10:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   32d14:	0007883a 	mov	r3,zero
   32d18:	e0bfff17 	ldw	r2,-4(fp)
   32d1c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   32d20:	e0bfff17 	ldw	r2,-4(fp)
   32d24:	10800104 	addi	r2,r2,4
   32d28:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32d2c:	0005303a 	rdctl	r2,status
   32d30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32d34:	e0fffd17 	ldw	r3,-12(fp)
   32d38:	00bfff84 	movi	r2,-2
   32d3c:	1884703a 	and	r2,r3,r2
   32d40:	1001703a 	wrctl	status,r2
  
  return context;
   32d44:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   32d48:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   32d4c:	0031f5c0 	call	31f5c <alt_tick>
   32d50:	e0bffc17 	ldw	r2,-16(fp)
   32d54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32d58:	e0bffe17 	ldw	r2,-8(fp)
   32d5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   32d60:	0001883a 	nop
   32d64:	e037883a 	mov	sp,fp
   32d68:	dfc00117 	ldw	ra,4(sp)
   32d6c:	df000017 	ldw	fp,0(sp)
   32d70:	dec00204 	addi	sp,sp,8
   32d74:	f800283a 	ret

00032d78 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   32d78:	defff804 	addi	sp,sp,-32
   32d7c:	dfc00715 	stw	ra,28(sp)
   32d80:	df000615 	stw	fp,24(sp)
   32d84:	df000604 	addi	fp,sp,24
   32d88:	e13ffc15 	stw	r4,-16(fp)
   32d8c:	e17ffd15 	stw	r5,-12(fp)
   32d90:	e1bffe15 	stw	r6,-8(fp)
   32d94:	e1ffff15 	stw	r7,-4(fp)
   32d98:	e0bfff17 	ldw	r2,-4(fp)
   32d9c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   32da0:	d0a6da17 	ldw	r2,-25752(gp)
   32da4:	1000021e 	bne	r2,zero,32db0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   32da8:	e0bffb17 	ldw	r2,-20(fp)
   32dac:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   32db0:	e0bffc17 	ldw	r2,-16(fp)
   32db4:	10800104 	addi	r2,r2,4
   32db8:	00c001c4 	movi	r3,7
   32dbc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   32dc0:	d8000015 	stw	zero,0(sp)
   32dc4:	e1fffc17 	ldw	r7,-16(fp)
   32dc8:	018000f4 	movhi	r6,3
   32dcc:	318b4004 	addi	r6,r6,11520
   32dd0:	e17ffe17 	ldw	r5,-8(fp)
   32dd4:	e13ffd17 	ldw	r4,-12(fp)
   32dd8:	00332940 	call	33294 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   32ddc:	0001883a 	nop
   32de0:	e037883a 	mov	sp,fp
   32de4:	dfc00117 	ldw	ra,4(sp)
   32de8:	df000017 	ldw	fp,0(sp)
   32dec:	dec00204 	addi	sp,sp,8
   32df0:	f800283a 	ret

00032df4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   32df4:	defff504 	addi	sp,sp,-44
   32df8:	df000a15 	stw	fp,40(sp)
   32dfc:	df000a04 	addi	fp,sp,40
   32e00:	e13ffc15 	stw	r4,-16(fp)
   32e04:	e17ffd15 	stw	r5,-12(fp)
   32e08:	e1bffe15 	stw	r6,-8(fp)
   32e0c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   32e10:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   32e14:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
   32e18:	10003c26 	beq	r2,zero,32f0c <alt_alarm_start+0x118>
  {
    if (alarm)
   32e1c:	e0bffc17 	ldw	r2,-16(fp)
   32e20:	10003826 	beq	r2,zero,32f04 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   32e24:	e0bffc17 	ldw	r2,-16(fp)
   32e28:	e0fffe17 	ldw	r3,-8(fp)
   32e2c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   32e30:	e0bffc17 	ldw	r2,-16(fp)
   32e34:	e0ffff17 	ldw	r3,-4(fp)
   32e38:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32e3c:	0005303a 	rdctl	r2,status
   32e40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32e44:	e0fff917 	ldw	r3,-28(fp)
   32e48:	00bfff84 	movi	r2,-2
   32e4c:	1884703a 	and	r2,r3,r2
   32e50:	1001703a 	wrctl	status,r2
  
  return context;
   32e54:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   32e58:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   32e5c:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
   32e60:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   32e64:	e0fffd17 	ldw	r3,-12(fp)
   32e68:	e0bff617 	ldw	r2,-40(fp)
   32e6c:	1885883a 	add	r2,r3,r2
   32e70:	10c00044 	addi	r3,r2,1
   32e74:	e0bffc17 	ldw	r2,-16(fp)
   32e78:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   32e7c:	e0bffc17 	ldw	r2,-16(fp)
   32e80:	10c00217 	ldw	r3,8(r2)
   32e84:	e0bff617 	ldw	r2,-40(fp)
   32e88:	1880042e 	bgeu	r3,r2,32e9c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   32e8c:	e0bffc17 	ldw	r2,-16(fp)
   32e90:	00c00044 	movi	r3,1
   32e94:	10c00405 	stb	r3,16(r2)
   32e98:	00000206 	br	32ea4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   32e9c:	e0bffc17 	ldw	r2,-16(fp)
   32ea0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   32ea4:	e0bffc17 	ldw	r2,-16(fp)
   32ea8:	d0e00e04 	addi	r3,gp,-32712
   32eac:	e0fffa15 	stw	r3,-24(fp)
   32eb0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   32eb4:	e0bffb17 	ldw	r2,-20(fp)
   32eb8:	e0fffa17 	ldw	r3,-24(fp)
   32ebc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   32ec0:	e0bffa17 	ldw	r2,-24(fp)
   32ec4:	10c00017 	ldw	r3,0(r2)
   32ec8:	e0bffb17 	ldw	r2,-20(fp)
   32ecc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   32ed0:	e0bffa17 	ldw	r2,-24(fp)
   32ed4:	10800017 	ldw	r2,0(r2)
   32ed8:	e0fffb17 	ldw	r3,-20(fp)
   32edc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   32ee0:	e0bffa17 	ldw	r2,-24(fp)
   32ee4:	e0fffb17 	ldw	r3,-20(fp)
   32ee8:	10c00015 	stw	r3,0(r2)
   32eec:	e0bff817 	ldw	r2,-32(fp)
   32ef0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32ef4:	e0bff717 	ldw	r2,-36(fp)
   32ef8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   32efc:	0005883a 	mov	r2,zero
   32f00:	00000306 	br	32f10 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   32f04:	00bffa84 	movi	r2,-22
   32f08:	00000106 	br	32f10 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   32f0c:	00bfde84 	movi	r2,-134
  }
}
   32f10:	e037883a 	mov	sp,fp
   32f14:	df000017 	ldw	fp,0(sp)
   32f18:	dec00104 	addi	sp,sp,4
   32f1c:	f800283a 	ret

00032f20 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   32f20:	defffa04 	addi	sp,sp,-24
   32f24:	dfc00515 	stw	ra,20(sp)
   32f28:	df000415 	stw	fp,16(sp)
   32f2c:	df000404 	addi	fp,sp,16
   32f30:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   32f34:	008000c4 	movi	r2,3
   32f38:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   32f3c:	e0fffd17 	ldw	r3,-12(fp)
   32f40:	008003f4 	movhi	r2,15
   32f44:	10909004 	addi	r2,r2,16960
   32f48:	1885383a 	mul	r2,r3,r2
   32f4c:	100b883a 	mov	r5,r2
   32f50:	0100bef4 	movhi	r4,763
   32f54:	213c2004 	addi	r4,r4,-3968
   32f58:	00237d40 	call	237d4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   32f5c:	100b883a 	mov	r5,r2
   32f60:	01200034 	movhi	r4,32768
   32f64:	213fffc4 	addi	r4,r4,-1
   32f68:	00237d40 	call	237d4 <__udivsi3>
   32f6c:	100b883a 	mov	r5,r2
   32f70:	e13fff17 	ldw	r4,-4(fp)
   32f74:	00237d40 	call	237d4 <__udivsi3>
   32f78:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   32f7c:	e0bffe17 	ldw	r2,-8(fp)
   32f80:	10002a26 	beq	r2,zero,3302c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   32f84:	e03ffc15 	stw	zero,-16(fp)
   32f88:	00001706 	br	32fe8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   32f8c:	00a00034 	movhi	r2,32768
   32f90:	10bfffc4 	addi	r2,r2,-1
   32f94:	10bfffc4 	addi	r2,r2,-1
   32f98:	103ffe1e 	bne	r2,zero,32f94 <__alt_data_end+0xffff3b94>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   32f9c:	e0fffd17 	ldw	r3,-12(fp)
   32fa0:	008003f4 	movhi	r2,15
   32fa4:	10909004 	addi	r2,r2,16960
   32fa8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   32fac:	100b883a 	mov	r5,r2
   32fb0:	0100bef4 	movhi	r4,763
   32fb4:	213c2004 	addi	r4,r4,-3968
   32fb8:	00237d40 	call	237d4 <__udivsi3>
   32fbc:	100b883a 	mov	r5,r2
   32fc0:	01200034 	movhi	r4,32768
   32fc4:	213fffc4 	addi	r4,r4,-1
   32fc8:	00237d40 	call	237d4 <__udivsi3>
   32fcc:	1007883a 	mov	r3,r2
   32fd0:	e0bfff17 	ldw	r2,-4(fp)
   32fd4:	10c5c83a 	sub	r2,r2,r3
   32fd8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   32fdc:	e0bffc17 	ldw	r2,-16(fp)
   32fe0:	10800044 	addi	r2,r2,1
   32fe4:	e0bffc15 	stw	r2,-16(fp)
   32fe8:	e0fffc17 	ldw	r3,-16(fp)
   32fec:	e0bffe17 	ldw	r2,-8(fp)
   32ff0:	18bfe616 	blt	r3,r2,32f8c <__alt_data_end+0xffff3b8c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   32ff4:	e0fffd17 	ldw	r3,-12(fp)
   32ff8:	008003f4 	movhi	r2,15
   32ffc:	10909004 	addi	r2,r2,16960
   33000:	1885383a 	mul	r2,r3,r2
   33004:	100b883a 	mov	r5,r2
   33008:	0100bef4 	movhi	r4,763
   3300c:	213c2004 	addi	r4,r4,-3968
   33010:	00237d40 	call	237d4 <__udivsi3>
   33014:	1007883a 	mov	r3,r2
   33018:	e0bfff17 	ldw	r2,-4(fp)
   3301c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   33020:	10bfffc4 	addi	r2,r2,-1
   33024:	103ffe1e 	bne	r2,zero,33020 <__alt_data_end+0xffff3c20>
   33028:	00000d06 	br	33060 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   3302c:	e0fffd17 	ldw	r3,-12(fp)
   33030:	008003f4 	movhi	r2,15
   33034:	10909004 	addi	r2,r2,16960
   33038:	1885383a 	mul	r2,r3,r2
   3303c:	100b883a 	mov	r5,r2
   33040:	0100bef4 	movhi	r4,763
   33044:	213c2004 	addi	r4,r4,-3968
   33048:	00237d40 	call	237d4 <__udivsi3>
   3304c:	1007883a 	mov	r3,r2
   33050:	e0bfff17 	ldw	r2,-4(fp)
   33054:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   33058:	10bfffc4 	addi	r2,r2,-1
   3305c:	00bffe16 	blt	zero,r2,33058 <__alt_data_end+0xffff3c58>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   33060:	0005883a 	mov	r2,zero
}
   33064:	e037883a 	mov	sp,fp
   33068:	dfc00117 	ldw	ra,4(sp)
   3306c:	df000017 	ldw	fp,0(sp)
   33070:	dec00204 	addi	sp,sp,8
   33074:	f800283a 	ret

00033078 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   33078:	defffe04 	addi	sp,sp,-8
   3307c:	df000115 	stw	fp,4(sp)
   33080:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   33084:	e03fff15 	stw	zero,-4(fp)
   33088:	00000506 	br	330a0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   3308c:	e0bfff17 	ldw	r2,-4(fp)
   33090:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   33094:	e0bfff17 	ldw	r2,-4(fp)
   33098:	10800804 	addi	r2,r2,32
   3309c:	e0bfff15 	stw	r2,-4(fp)
   330a0:	e0bfff17 	ldw	r2,-4(fp)
   330a4:	10820030 	cmpltui	r2,r2,2048
   330a8:	103ff81e 	bne	r2,zero,3308c <__alt_data_end+0xffff3c8c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   330ac:	0001883a 	nop
   330b0:	e037883a 	mov	sp,fp
   330b4:	df000017 	ldw	fp,0(sp)
   330b8:	dec00104 	addi	sp,sp,4
   330bc:	f800283a 	ret

000330c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   330c0:	defffe04 	addi	sp,sp,-8
   330c4:	dfc00115 	stw	ra,4(sp)
   330c8:	df000015 	stw	fp,0(sp)
   330cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   330d0:	d0a00c17 	ldw	r2,-32720(gp)
   330d4:	10000326 	beq	r2,zero,330e4 <alt_get_errno+0x24>
   330d8:	d0a00c17 	ldw	r2,-32720(gp)
   330dc:	103ee83a 	callr	r2
   330e0:	00000106 	br	330e8 <alt_get_errno+0x28>
   330e4:	d0a6d604 	addi	r2,gp,-25768
}
   330e8:	e037883a 	mov	sp,fp
   330ec:	dfc00117 	ldw	ra,4(sp)
   330f0:	df000017 	ldw	fp,0(sp)
   330f4:	dec00204 	addi	sp,sp,8
   330f8:	f800283a 	ret

000330fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   330fc:	defffa04 	addi	sp,sp,-24
   33100:	dfc00515 	stw	ra,20(sp)
   33104:	df000415 	stw	fp,16(sp)
   33108:	df000404 	addi	fp,sp,16
   3310c:	e13ffe15 	stw	r4,-8(fp)
   33110:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   33114:	e0bffe17 	ldw	r2,-8(fp)
   33118:	10000326 	beq	r2,zero,33128 <alt_dev_llist_insert+0x2c>
   3311c:	e0bffe17 	ldw	r2,-8(fp)
   33120:	10800217 	ldw	r2,8(r2)
   33124:	1000061e 	bne	r2,zero,33140 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   33128:	00330c00 	call	330c0 <alt_get_errno>
   3312c:	1007883a 	mov	r3,r2
   33130:	00800584 	movi	r2,22
   33134:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   33138:	00bffa84 	movi	r2,-22
   3313c:	00001306 	br	3318c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   33140:	e0bffe17 	ldw	r2,-8(fp)
   33144:	e0ffff17 	ldw	r3,-4(fp)
   33148:	e0fffc15 	stw	r3,-16(fp)
   3314c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   33150:	e0bffd17 	ldw	r2,-12(fp)
   33154:	e0fffc17 	ldw	r3,-16(fp)
   33158:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3315c:	e0bffc17 	ldw	r2,-16(fp)
   33160:	10c00017 	ldw	r3,0(r2)
   33164:	e0bffd17 	ldw	r2,-12(fp)
   33168:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3316c:	e0bffc17 	ldw	r2,-16(fp)
   33170:	10800017 	ldw	r2,0(r2)
   33174:	e0fffd17 	ldw	r3,-12(fp)
   33178:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3317c:	e0bffc17 	ldw	r2,-16(fp)
   33180:	e0fffd17 	ldw	r3,-12(fp)
   33184:	10c00015 	stw	r3,0(r2)

  return 0;  
   33188:	0005883a 	mov	r2,zero
}
   3318c:	e037883a 	mov	sp,fp
   33190:	dfc00117 	ldw	ra,4(sp)
   33194:	df000017 	ldw	fp,0(sp)
   33198:	dec00204 	addi	sp,sp,8
   3319c:	f800283a 	ret

000331a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   331a0:	defffd04 	addi	sp,sp,-12
   331a4:	dfc00215 	stw	ra,8(sp)
   331a8:	df000115 	stw	fp,4(sp)
   331ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   331b0:	008000f4 	movhi	r2,3
   331b4:	108ff904 	addi	r2,r2,16356
   331b8:	e0bfff15 	stw	r2,-4(fp)
   331bc:	00000606 	br	331d8 <_do_ctors+0x38>
        (*ctor) (); 
   331c0:	e0bfff17 	ldw	r2,-4(fp)
   331c4:	10800017 	ldw	r2,0(r2)
   331c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   331cc:	e0bfff17 	ldw	r2,-4(fp)
   331d0:	10bfff04 	addi	r2,r2,-4
   331d4:	e0bfff15 	stw	r2,-4(fp)
   331d8:	e0ffff17 	ldw	r3,-4(fp)
   331dc:	008000f4 	movhi	r2,3
   331e0:	108ffa04 	addi	r2,r2,16360
   331e4:	18bff62e 	bgeu	r3,r2,331c0 <__alt_data_end+0xffff3dc0>
        (*ctor) (); 
}
   331e8:	0001883a 	nop
   331ec:	e037883a 	mov	sp,fp
   331f0:	dfc00117 	ldw	ra,4(sp)
   331f4:	df000017 	ldw	fp,0(sp)
   331f8:	dec00204 	addi	sp,sp,8
   331fc:	f800283a 	ret

00033200 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   33200:	defffd04 	addi	sp,sp,-12
   33204:	dfc00215 	stw	ra,8(sp)
   33208:	df000115 	stw	fp,4(sp)
   3320c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   33210:	008000f4 	movhi	r2,3
   33214:	108ff904 	addi	r2,r2,16356
   33218:	e0bfff15 	stw	r2,-4(fp)
   3321c:	00000606 	br	33238 <_do_dtors+0x38>
        (*dtor) (); 
   33220:	e0bfff17 	ldw	r2,-4(fp)
   33224:	10800017 	ldw	r2,0(r2)
   33228:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3322c:	e0bfff17 	ldw	r2,-4(fp)
   33230:	10bfff04 	addi	r2,r2,-4
   33234:	e0bfff15 	stw	r2,-4(fp)
   33238:	e0ffff17 	ldw	r3,-4(fp)
   3323c:	008000f4 	movhi	r2,3
   33240:	108ffa04 	addi	r2,r2,16360
   33244:	18bff62e 	bgeu	r3,r2,33220 <__alt_data_end+0xffff3e20>
        (*dtor) (); 
}
   33248:	0001883a 	nop
   3324c:	e037883a 	mov	sp,fp
   33250:	dfc00117 	ldw	ra,4(sp)
   33254:	df000017 	ldw	fp,0(sp)
   33258:	dec00204 	addi	sp,sp,8
   3325c:	f800283a 	ret

00033260 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   33260:	defffe04 	addi	sp,sp,-8
   33264:	dfc00115 	stw	ra,4(sp)
   33268:	df000015 	stw	fp,0(sp)
   3326c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   33270:	01440004 	movi	r5,4096
   33274:	0009883a 	mov	r4,zero
   33278:	0033b280 	call	33b28 <alt_icache_flush>
#endif
}
   3327c:	0001883a 	nop
   33280:	e037883a 	mov	sp,fp
   33284:	dfc00117 	ldw	ra,4(sp)
   33288:	df000017 	ldw	fp,0(sp)
   3328c:	dec00204 	addi	sp,sp,8
   33290:	f800283a 	ret

00033294 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   33294:	defff904 	addi	sp,sp,-28
   33298:	dfc00615 	stw	ra,24(sp)
   3329c:	df000515 	stw	fp,20(sp)
   332a0:	df000504 	addi	fp,sp,20
   332a4:	e13ffc15 	stw	r4,-16(fp)
   332a8:	e17ffd15 	stw	r5,-12(fp)
   332ac:	e1bffe15 	stw	r6,-8(fp)
   332b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   332b4:	e0800217 	ldw	r2,8(fp)
   332b8:	d8800015 	stw	r2,0(sp)
   332bc:	e1ffff17 	ldw	r7,-4(fp)
   332c0:	e1bffe17 	ldw	r6,-8(fp)
   332c4:	e17ffd17 	ldw	r5,-12(fp)
   332c8:	e13ffc17 	ldw	r4,-16(fp)
   332cc:	00334440 	call	33444 <alt_iic_isr_register>
}  
   332d0:	e037883a 	mov	sp,fp
   332d4:	dfc00117 	ldw	ra,4(sp)
   332d8:	df000017 	ldw	fp,0(sp)
   332dc:	dec00204 	addi	sp,sp,8
   332e0:	f800283a 	ret

000332e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   332e4:	defff904 	addi	sp,sp,-28
   332e8:	df000615 	stw	fp,24(sp)
   332ec:	df000604 	addi	fp,sp,24
   332f0:	e13ffe15 	stw	r4,-8(fp)
   332f4:	e17fff15 	stw	r5,-4(fp)
   332f8:	e0bfff17 	ldw	r2,-4(fp)
   332fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   33300:	0005303a 	rdctl	r2,status
   33304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   33308:	e0fffb17 	ldw	r3,-20(fp)
   3330c:	00bfff84 	movi	r2,-2
   33310:	1884703a 	and	r2,r3,r2
   33314:	1001703a 	wrctl	status,r2
  
  return context;
   33318:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3331c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   33320:	00c00044 	movi	r3,1
   33324:	e0bffa17 	ldw	r2,-24(fp)
   33328:	1884983a 	sll	r2,r3,r2
   3332c:	1007883a 	mov	r3,r2
   33330:	d0a6dc17 	ldw	r2,-25744(gp)
   33334:	1884b03a 	or	r2,r3,r2
   33338:	d0a6dc15 	stw	r2,-25744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   3333c:	d0a6dc17 	ldw	r2,-25744(gp)
   33340:	100170fa 	wrctl	ienable,r2
   33344:	e0bffc17 	ldw	r2,-16(fp)
   33348:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3334c:	e0bffd17 	ldw	r2,-12(fp)
   33350:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   33354:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   33358:	0001883a 	nop
}
   3335c:	e037883a 	mov	sp,fp
   33360:	df000017 	ldw	fp,0(sp)
   33364:	dec00104 	addi	sp,sp,4
   33368:	f800283a 	ret

0003336c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   3336c:	defff904 	addi	sp,sp,-28
   33370:	df000615 	stw	fp,24(sp)
   33374:	df000604 	addi	fp,sp,24
   33378:	e13ffe15 	stw	r4,-8(fp)
   3337c:	e17fff15 	stw	r5,-4(fp)
   33380:	e0bfff17 	ldw	r2,-4(fp)
   33384:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   33388:	0005303a 	rdctl	r2,status
   3338c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   33390:	e0fffb17 	ldw	r3,-20(fp)
   33394:	00bfff84 	movi	r2,-2
   33398:	1884703a 	and	r2,r3,r2
   3339c:	1001703a 	wrctl	status,r2
  
  return context;
   333a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   333a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   333a8:	00c00044 	movi	r3,1
   333ac:	e0bffa17 	ldw	r2,-24(fp)
   333b0:	1884983a 	sll	r2,r3,r2
   333b4:	0084303a 	nor	r2,zero,r2
   333b8:	1007883a 	mov	r3,r2
   333bc:	d0a6dc17 	ldw	r2,-25744(gp)
   333c0:	1884703a 	and	r2,r3,r2
   333c4:	d0a6dc15 	stw	r2,-25744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   333c8:	d0a6dc17 	ldw	r2,-25744(gp)
   333cc:	100170fa 	wrctl	ienable,r2
   333d0:	e0bffc17 	ldw	r2,-16(fp)
   333d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   333d8:	e0bffd17 	ldw	r2,-12(fp)
   333dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   333e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   333e4:	0001883a 	nop
}
   333e8:	e037883a 	mov	sp,fp
   333ec:	df000017 	ldw	fp,0(sp)
   333f0:	dec00104 	addi	sp,sp,4
   333f4:	f800283a 	ret

000333f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   333f8:	defffc04 	addi	sp,sp,-16
   333fc:	df000315 	stw	fp,12(sp)
   33400:	df000304 	addi	fp,sp,12
   33404:	e13ffe15 	stw	r4,-8(fp)
   33408:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   3340c:	000530fa 	rdctl	r2,ienable
   33410:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   33414:	00c00044 	movi	r3,1
   33418:	e0bfff17 	ldw	r2,-4(fp)
   3341c:	1884983a 	sll	r2,r3,r2
   33420:	1007883a 	mov	r3,r2
   33424:	e0bffd17 	ldw	r2,-12(fp)
   33428:	1884703a 	and	r2,r3,r2
   3342c:	1004c03a 	cmpne	r2,r2,zero
   33430:	10803fcc 	andi	r2,r2,255
}
   33434:	e037883a 	mov	sp,fp
   33438:	df000017 	ldw	fp,0(sp)
   3343c:	dec00104 	addi	sp,sp,4
   33440:	f800283a 	ret

00033444 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   33444:	defff504 	addi	sp,sp,-44
   33448:	dfc00a15 	stw	ra,40(sp)
   3344c:	df000915 	stw	fp,36(sp)
   33450:	df000904 	addi	fp,sp,36
   33454:	e13ffc15 	stw	r4,-16(fp)
   33458:	e17ffd15 	stw	r5,-12(fp)
   3345c:	e1bffe15 	stw	r6,-8(fp)
   33460:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   33464:	00bffa84 	movi	r2,-22
   33468:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   3346c:	e0bffd17 	ldw	r2,-12(fp)
   33470:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   33474:	e0bff817 	ldw	r2,-32(fp)
   33478:	10800808 	cmpgei	r2,r2,32
   3347c:	1000271e 	bne	r2,zero,3351c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   33480:	0005303a 	rdctl	r2,status
   33484:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   33488:	e0fffb17 	ldw	r3,-20(fp)
   3348c:	00bfff84 	movi	r2,-2
   33490:	1884703a 	and	r2,r3,r2
   33494:	1001703a 	wrctl	status,r2
  
  return context;
   33498:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   3349c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   334a0:	00800134 	movhi	r2,4
   334a4:	10a01f04 	addi	r2,r2,-32644
   334a8:	e0fff817 	ldw	r3,-32(fp)
   334ac:	180690fa 	slli	r3,r3,3
   334b0:	10c5883a 	add	r2,r2,r3
   334b4:	e0fffe17 	ldw	r3,-8(fp)
   334b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   334bc:	00800134 	movhi	r2,4
   334c0:	10a01f04 	addi	r2,r2,-32644
   334c4:	e0fff817 	ldw	r3,-32(fp)
   334c8:	180690fa 	slli	r3,r3,3
   334cc:	10c5883a 	add	r2,r2,r3
   334d0:	10800104 	addi	r2,r2,4
   334d4:	e0ffff17 	ldw	r3,-4(fp)
   334d8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   334dc:	e0bffe17 	ldw	r2,-8(fp)
   334e0:	10000526 	beq	r2,zero,334f8 <alt_iic_isr_register+0xb4>
   334e4:	e0bff817 	ldw	r2,-32(fp)
   334e8:	100b883a 	mov	r5,r2
   334ec:	e13ffc17 	ldw	r4,-16(fp)
   334f0:	00332e40 	call	332e4 <alt_ic_irq_enable>
   334f4:	00000406 	br	33508 <alt_iic_isr_register+0xc4>
   334f8:	e0bff817 	ldw	r2,-32(fp)
   334fc:	100b883a 	mov	r5,r2
   33500:	e13ffc17 	ldw	r4,-16(fp)
   33504:	003336c0 	call	3336c <alt_ic_irq_disable>
   33508:	e0bff715 	stw	r2,-36(fp)
   3350c:	e0bffa17 	ldw	r2,-24(fp)
   33510:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33514:	e0bff917 	ldw	r2,-28(fp)
   33518:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   3351c:	e0bff717 	ldw	r2,-36(fp)
}
   33520:	e037883a 	mov	sp,fp
   33524:	dfc00117 	ldw	ra,4(sp)
   33528:	df000017 	ldw	fp,0(sp)
   3352c:	dec00204 	addi	sp,sp,8
   33530:	f800283a 	ret

00033534 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   33534:	defff904 	addi	sp,sp,-28
   33538:	dfc00615 	stw	ra,24(sp)
   3353c:	df000515 	stw	fp,20(sp)
   33540:	df000504 	addi	fp,sp,20
   33544:	e13ffc15 	stw	r4,-16(fp)
   33548:	e17ffd15 	stw	r5,-12(fp)
   3354c:	e1bffe15 	stw	r6,-8(fp)
   33550:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   33554:	e1bfff17 	ldw	r6,-4(fp)
   33558:	e17ffe17 	ldw	r5,-8(fp)
   3355c:	e13ffd17 	ldw	r4,-12(fp)
   33560:	00337740 	call	33774 <open>
   33564:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   33568:	e0bffb17 	ldw	r2,-20(fp)
   3356c:	10001c16 	blt	r2,zero,335e0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   33570:	008000f4 	movhi	r2,3
   33574:	1094b004 	addi	r2,r2,21184
   33578:	e0fffb17 	ldw	r3,-20(fp)
   3357c:	18c00324 	muli	r3,r3,12
   33580:	10c5883a 	add	r2,r2,r3
   33584:	10c00017 	ldw	r3,0(r2)
   33588:	e0bffc17 	ldw	r2,-16(fp)
   3358c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   33590:	008000f4 	movhi	r2,3
   33594:	1094b004 	addi	r2,r2,21184
   33598:	e0fffb17 	ldw	r3,-20(fp)
   3359c:	18c00324 	muli	r3,r3,12
   335a0:	10c5883a 	add	r2,r2,r3
   335a4:	10800104 	addi	r2,r2,4
   335a8:	10c00017 	ldw	r3,0(r2)
   335ac:	e0bffc17 	ldw	r2,-16(fp)
   335b0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   335b4:	008000f4 	movhi	r2,3
   335b8:	1094b004 	addi	r2,r2,21184
   335bc:	e0fffb17 	ldw	r3,-20(fp)
   335c0:	18c00324 	muli	r3,r3,12
   335c4:	10c5883a 	add	r2,r2,r3
   335c8:	10800204 	addi	r2,r2,8
   335cc:	10c00017 	ldw	r3,0(r2)
   335d0:	e0bffc17 	ldw	r2,-16(fp)
   335d4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   335d8:	e13ffb17 	ldw	r4,-20(fp)
   335dc:	0031dac0 	call	31dac <alt_release_fd>
  }
} 
   335e0:	0001883a 	nop
   335e4:	e037883a 	mov	sp,fp
   335e8:	dfc00117 	ldw	ra,4(sp)
   335ec:	df000017 	ldw	fp,0(sp)
   335f0:	dec00204 	addi	sp,sp,8
   335f4:	f800283a 	ret

000335f8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   335f8:	defffb04 	addi	sp,sp,-20
   335fc:	dfc00415 	stw	ra,16(sp)
   33600:	df000315 	stw	fp,12(sp)
   33604:	df000304 	addi	fp,sp,12
   33608:	e13ffd15 	stw	r4,-12(fp)
   3360c:	e17ffe15 	stw	r5,-8(fp)
   33610:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   33614:	01c07fc4 	movi	r7,511
   33618:	01800044 	movi	r6,1
   3361c:	e17ffd17 	ldw	r5,-12(fp)
   33620:	010000f4 	movhi	r4,3
   33624:	2114b304 	addi	r4,r4,21196
   33628:	00335340 	call	33534 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   3362c:	01c07fc4 	movi	r7,511
   33630:	000d883a 	mov	r6,zero
   33634:	e17ffe17 	ldw	r5,-8(fp)
   33638:	010000f4 	movhi	r4,3
   3363c:	2114b004 	addi	r4,r4,21184
   33640:	00335340 	call	33534 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   33644:	01c07fc4 	movi	r7,511
   33648:	01800044 	movi	r6,1
   3364c:	e17fff17 	ldw	r5,-4(fp)
   33650:	010000f4 	movhi	r4,3
   33654:	2114b604 	addi	r4,r4,21208
   33658:	00335340 	call	33534 <alt_open_fd>
}  
   3365c:	0001883a 	nop
   33660:	e037883a 	mov	sp,fp
   33664:	dfc00117 	ldw	ra,4(sp)
   33668:	df000017 	ldw	fp,0(sp)
   3366c:	dec00204 	addi	sp,sp,8
   33670:	f800283a 	ret

00033674 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   33674:	defffe04 	addi	sp,sp,-8
   33678:	dfc00115 	stw	ra,4(sp)
   3367c:	df000015 	stw	fp,0(sp)
   33680:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   33684:	d0a00c17 	ldw	r2,-32720(gp)
   33688:	10000326 	beq	r2,zero,33698 <alt_get_errno+0x24>
   3368c:	d0a00c17 	ldw	r2,-32720(gp)
   33690:	103ee83a 	callr	r2
   33694:	00000106 	br	3369c <alt_get_errno+0x28>
   33698:	d0a6d604 	addi	r2,gp,-25768
}
   3369c:	e037883a 	mov	sp,fp
   336a0:	dfc00117 	ldw	ra,4(sp)
   336a4:	df000017 	ldw	fp,0(sp)
   336a8:	dec00204 	addi	sp,sp,8
   336ac:	f800283a 	ret

000336b0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   336b0:	defffd04 	addi	sp,sp,-12
   336b4:	df000215 	stw	fp,8(sp)
   336b8:	df000204 	addi	fp,sp,8
   336bc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   336c0:	e0bfff17 	ldw	r2,-4(fp)
   336c4:	10800217 	ldw	r2,8(r2)
   336c8:	10d00034 	orhi	r3,r2,16384
   336cc:	e0bfff17 	ldw	r2,-4(fp)
   336d0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   336d4:	e03ffe15 	stw	zero,-8(fp)
   336d8:	00001d06 	br	33750 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   336dc:	008000f4 	movhi	r2,3
   336e0:	1094b004 	addi	r2,r2,21184
   336e4:	e0fffe17 	ldw	r3,-8(fp)
   336e8:	18c00324 	muli	r3,r3,12
   336ec:	10c5883a 	add	r2,r2,r3
   336f0:	10c00017 	ldw	r3,0(r2)
   336f4:	e0bfff17 	ldw	r2,-4(fp)
   336f8:	10800017 	ldw	r2,0(r2)
   336fc:	1880111e 	bne	r3,r2,33744 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   33700:	008000f4 	movhi	r2,3
   33704:	1094b004 	addi	r2,r2,21184
   33708:	e0fffe17 	ldw	r3,-8(fp)
   3370c:	18c00324 	muli	r3,r3,12
   33710:	10c5883a 	add	r2,r2,r3
   33714:	10800204 	addi	r2,r2,8
   33718:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3371c:	1000090e 	bge	r2,zero,33744 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   33720:	e0bffe17 	ldw	r2,-8(fp)
   33724:	10c00324 	muli	r3,r2,12
   33728:	008000f4 	movhi	r2,3
   3372c:	1094b004 	addi	r2,r2,21184
   33730:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   33734:	e0bfff17 	ldw	r2,-4(fp)
   33738:	18800226 	beq	r3,r2,33744 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   3373c:	00bffcc4 	movi	r2,-13
   33740:	00000806 	br	33764 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   33744:	e0bffe17 	ldw	r2,-8(fp)
   33748:	10800044 	addi	r2,r2,1
   3374c:	e0bffe15 	stw	r2,-8(fp)
   33750:	d0a00b17 	ldw	r2,-32724(gp)
   33754:	1007883a 	mov	r3,r2
   33758:	e0bffe17 	ldw	r2,-8(fp)
   3375c:	18bfdf2e 	bgeu	r3,r2,336dc <__alt_data_end+0xffff42dc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   33760:	0005883a 	mov	r2,zero
}
   33764:	e037883a 	mov	sp,fp
   33768:	df000017 	ldw	fp,0(sp)
   3376c:	dec00104 	addi	sp,sp,4
   33770:	f800283a 	ret

00033774 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   33774:	defff604 	addi	sp,sp,-40
   33778:	dfc00915 	stw	ra,36(sp)
   3377c:	df000815 	stw	fp,32(sp)
   33780:	df000804 	addi	fp,sp,32
   33784:	e13ffd15 	stw	r4,-12(fp)
   33788:	e17ffe15 	stw	r5,-8(fp)
   3378c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   33790:	00bfffc4 	movi	r2,-1
   33794:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   33798:	00bffb44 	movi	r2,-19
   3379c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   337a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   337a4:	d1600904 	addi	r5,gp,-32732
   337a8:	e13ffd17 	ldw	r4,-12(fp)
   337ac:	00338ec0 	call	338ec <alt_find_dev>
   337b0:	e0bff815 	stw	r2,-32(fp)
   337b4:	e0bff817 	ldw	r2,-32(fp)
   337b8:	1000051e 	bne	r2,zero,337d0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   337bc:	e13ffd17 	ldw	r4,-12(fp)
   337c0:	003397c0 	call	3397c <alt_find_file>
   337c4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   337c8:	00800044 	movi	r2,1
   337cc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   337d0:	e0bff817 	ldw	r2,-32(fp)
   337d4:	10002926 	beq	r2,zero,3387c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   337d8:	e13ff817 	ldw	r4,-32(fp)
   337dc:	0033a840 	call	33a84 <alt_get_fd>
   337e0:	e0bff915 	stw	r2,-28(fp)
   337e4:	e0bff917 	ldw	r2,-28(fp)
   337e8:	1000030e 	bge	r2,zero,337f8 <open+0x84>
    {
      status = index;
   337ec:	e0bff917 	ldw	r2,-28(fp)
   337f0:	e0bffa15 	stw	r2,-24(fp)
   337f4:	00002306 	br	33884 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   337f8:	e0bff917 	ldw	r2,-28(fp)
   337fc:	10c00324 	muli	r3,r2,12
   33800:	008000f4 	movhi	r2,3
   33804:	1094b004 	addi	r2,r2,21184
   33808:	1885883a 	add	r2,r3,r2
   3380c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   33810:	e0fffe17 	ldw	r3,-8(fp)
   33814:	00900034 	movhi	r2,16384
   33818:	10bfffc4 	addi	r2,r2,-1
   3381c:	1886703a 	and	r3,r3,r2
   33820:	e0bffc17 	ldw	r2,-16(fp)
   33824:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   33828:	e0bffb17 	ldw	r2,-20(fp)
   3382c:	1000051e 	bne	r2,zero,33844 <open+0xd0>
   33830:	e13ffc17 	ldw	r4,-16(fp)
   33834:	00336b00 	call	336b0 <alt_file_locked>
   33838:	e0bffa15 	stw	r2,-24(fp)
   3383c:	e0bffa17 	ldw	r2,-24(fp)
   33840:	10001016 	blt	r2,zero,33884 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   33844:	e0bff817 	ldw	r2,-32(fp)
   33848:	10800317 	ldw	r2,12(r2)
   3384c:	10000826 	beq	r2,zero,33870 <open+0xfc>
   33850:	e0bff817 	ldw	r2,-32(fp)
   33854:	10800317 	ldw	r2,12(r2)
   33858:	e1ffff17 	ldw	r7,-4(fp)
   3385c:	e1bffe17 	ldw	r6,-8(fp)
   33860:	e17ffd17 	ldw	r5,-12(fp)
   33864:	e13ffc17 	ldw	r4,-16(fp)
   33868:	103ee83a 	callr	r2
   3386c:	00000106 	br	33874 <open+0x100>
   33870:	0005883a 	mov	r2,zero
   33874:	e0bffa15 	stw	r2,-24(fp)
   33878:	00000206 	br	33884 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   3387c:	00bffb44 	movi	r2,-19
   33880:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   33884:	e0bffa17 	ldw	r2,-24(fp)
   33888:	1000090e 	bge	r2,zero,338b0 <open+0x13c>
  {
    alt_release_fd (index);  
   3388c:	e13ff917 	ldw	r4,-28(fp)
   33890:	0031dac0 	call	31dac <alt_release_fd>
    ALT_ERRNO = -status;
   33894:	00336740 	call	33674 <alt_get_errno>
   33898:	1007883a 	mov	r3,r2
   3389c:	e0bffa17 	ldw	r2,-24(fp)
   338a0:	0085c83a 	sub	r2,zero,r2
   338a4:	18800015 	stw	r2,0(r3)
    return -1;
   338a8:	00bfffc4 	movi	r2,-1
   338ac:	00000106 	br	338b4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   338b0:	e0bff917 	ldw	r2,-28(fp)
}
   338b4:	e037883a 	mov	sp,fp
   338b8:	dfc00117 	ldw	ra,4(sp)
   338bc:	df000017 	ldw	fp,0(sp)
   338c0:	dec00204 	addi	sp,sp,8
   338c4:	f800283a 	ret

000338c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   338c8:	deffff04 	addi	sp,sp,-4
   338cc:	df000015 	stw	fp,0(sp)
   338d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   338d4:	000170fa 	wrctl	ienable,zero
}
   338d8:	0001883a 	nop
   338dc:	e037883a 	mov	sp,fp
   338e0:	df000017 	ldw	fp,0(sp)
   338e4:	dec00104 	addi	sp,sp,4
   338e8:	f800283a 	ret

000338ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   338ec:	defffa04 	addi	sp,sp,-24
   338f0:	dfc00515 	stw	ra,20(sp)
   338f4:	df000415 	stw	fp,16(sp)
   338f8:	df000404 	addi	fp,sp,16
   338fc:	e13ffe15 	stw	r4,-8(fp)
   33900:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   33904:	e0bfff17 	ldw	r2,-4(fp)
   33908:	10800017 	ldw	r2,0(r2)
   3390c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   33910:	e13ffe17 	ldw	r4,-8(fp)
   33914:	00272900 	call	27290 <strlen>
   33918:	10800044 	addi	r2,r2,1
   3391c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   33920:	00000d06 	br	33958 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   33924:	e0bffc17 	ldw	r2,-16(fp)
   33928:	10800217 	ldw	r2,8(r2)
   3392c:	e0fffd17 	ldw	r3,-12(fp)
   33930:	180d883a 	mov	r6,r3
   33934:	e17ffe17 	ldw	r5,-8(fp)
   33938:	1009883a 	mov	r4,r2
   3393c:	0033ca00 	call	33ca0 <memcmp>
   33940:	1000021e 	bne	r2,zero,3394c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   33944:	e0bffc17 	ldw	r2,-16(fp)
   33948:	00000706 	br	33968 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   3394c:	e0bffc17 	ldw	r2,-16(fp)
   33950:	10800017 	ldw	r2,0(r2)
   33954:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   33958:	e0fffc17 	ldw	r3,-16(fp)
   3395c:	e0bfff17 	ldw	r2,-4(fp)
   33960:	18bff01e 	bne	r3,r2,33924 <__alt_data_end+0xffff4524>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   33964:	0005883a 	mov	r2,zero
}
   33968:	e037883a 	mov	sp,fp
   3396c:	dfc00117 	ldw	ra,4(sp)
   33970:	df000017 	ldw	fp,0(sp)
   33974:	dec00204 	addi	sp,sp,8
   33978:	f800283a 	ret

0003397c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   3397c:	defffb04 	addi	sp,sp,-20
   33980:	dfc00415 	stw	ra,16(sp)
   33984:	df000315 	stw	fp,12(sp)
   33988:	df000304 	addi	fp,sp,12
   3398c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   33990:	d0a00717 	ldw	r2,-32740(gp)
   33994:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   33998:	00003106 	br	33a60 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   3399c:	e0bffd17 	ldw	r2,-12(fp)
   339a0:	10800217 	ldw	r2,8(r2)
   339a4:	1009883a 	mov	r4,r2
   339a8:	00272900 	call	27290 <strlen>
   339ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   339b0:	e0bffd17 	ldw	r2,-12(fp)
   339b4:	10c00217 	ldw	r3,8(r2)
   339b8:	e0bffe17 	ldw	r2,-8(fp)
   339bc:	10bfffc4 	addi	r2,r2,-1
   339c0:	1885883a 	add	r2,r3,r2
   339c4:	10800003 	ldbu	r2,0(r2)
   339c8:	10803fcc 	andi	r2,r2,255
   339cc:	1080201c 	xori	r2,r2,128
   339d0:	10bfe004 	addi	r2,r2,-128
   339d4:	10800bd8 	cmpnei	r2,r2,47
   339d8:	1000031e 	bne	r2,zero,339e8 <alt_find_file+0x6c>
    {
      len -= 1;
   339dc:	e0bffe17 	ldw	r2,-8(fp)
   339e0:	10bfffc4 	addi	r2,r2,-1
   339e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   339e8:	e0bffe17 	ldw	r2,-8(fp)
   339ec:	e0ffff17 	ldw	r3,-4(fp)
   339f0:	1885883a 	add	r2,r3,r2
   339f4:	10800003 	ldbu	r2,0(r2)
   339f8:	10803fcc 	andi	r2,r2,255
   339fc:	1080201c 	xori	r2,r2,128
   33a00:	10bfe004 	addi	r2,r2,-128
   33a04:	10800be0 	cmpeqi	r2,r2,47
   33a08:	1000081e 	bne	r2,zero,33a2c <alt_find_file+0xb0>
   33a0c:	e0bffe17 	ldw	r2,-8(fp)
   33a10:	e0ffff17 	ldw	r3,-4(fp)
   33a14:	1885883a 	add	r2,r3,r2
   33a18:	10800003 	ldbu	r2,0(r2)
   33a1c:	10803fcc 	andi	r2,r2,255
   33a20:	1080201c 	xori	r2,r2,128
   33a24:	10bfe004 	addi	r2,r2,-128
   33a28:	10000a1e 	bne	r2,zero,33a54 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   33a2c:	e0bffd17 	ldw	r2,-12(fp)
   33a30:	10800217 	ldw	r2,8(r2)
   33a34:	e0fffe17 	ldw	r3,-8(fp)
   33a38:	180d883a 	mov	r6,r3
   33a3c:	e17fff17 	ldw	r5,-4(fp)
   33a40:	1009883a 	mov	r4,r2
   33a44:	0033ca00 	call	33ca0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   33a48:	1000021e 	bne	r2,zero,33a54 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   33a4c:	e0bffd17 	ldw	r2,-12(fp)
   33a50:	00000706 	br	33a70 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   33a54:	e0bffd17 	ldw	r2,-12(fp)
   33a58:	10800017 	ldw	r2,0(r2)
   33a5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   33a60:	e0fffd17 	ldw	r3,-12(fp)
   33a64:	d0a00704 	addi	r2,gp,-32740
   33a68:	18bfcc1e 	bne	r3,r2,3399c <__alt_data_end+0xffff459c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   33a6c:	0005883a 	mov	r2,zero
}
   33a70:	e037883a 	mov	sp,fp
   33a74:	dfc00117 	ldw	ra,4(sp)
   33a78:	df000017 	ldw	fp,0(sp)
   33a7c:	dec00204 	addi	sp,sp,8
   33a80:	f800283a 	ret

00033a84 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   33a84:	defffc04 	addi	sp,sp,-16
   33a88:	df000315 	stw	fp,12(sp)
   33a8c:	df000304 	addi	fp,sp,12
   33a90:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   33a94:	00bffa04 	movi	r2,-24
   33a98:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   33a9c:	e03ffd15 	stw	zero,-12(fp)
   33aa0:	00001906 	br	33b08 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   33aa4:	008000f4 	movhi	r2,3
   33aa8:	1094b004 	addi	r2,r2,21184
   33aac:	e0fffd17 	ldw	r3,-12(fp)
   33ab0:	18c00324 	muli	r3,r3,12
   33ab4:	10c5883a 	add	r2,r2,r3
   33ab8:	10800017 	ldw	r2,0(r2)
   33abc:	10000f1e 	bne	r2,zero,33afc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   33ac0:	008000f4 	movhi	r2,3
   33ac4:	1094b004 	addi	r2,r2,21184
   33ac8:	e0fffd17 	ldw	r3,-12(fp)
   33acc:	18c00324 	muli	r3,r3,12
   33ad0:	10c5883a 	add	r2,r2,r3
   33ad4:	e0ffff17 	ldw	r3,-4(fp)
   33ad8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   33adc:	d0e00b17 	ldw	r3,-32724(gp)
   33ae0:	e0bffd17 	ldw	r2,-12(fp)
   33ae4:	1880020e 	bge	r3,r2,33af0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   33ae8:	e0bffd17 	ldw	r2,-12(fp)
   33aec:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   33af0:	e0bffd17 	ldw	r2,-12(fp)
   33af4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   33af8:	00000606 	br	33b14 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   33afc:	e0bffd17 	ldw	r2,-12(fp)
   33b00:	10800044 	addi	r2,r2,1
   33b04:	e0bffd15 	stw	r2,-12(fp)
   33b08:	e0bffd17 	ldw	r2,-12(fp)
   33b0c:	10800810 	cmplti	r2,r2,32
   33b10:	103fe41e 	bne	r2,zero,33aa4 <__alt_data_end+0xffff46a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   33b14:	e0bffe17 	ldw	r2,-8(fp)
}
   33b18:	e037883a 	mov	sp,fp
   33b1c:	df000017 	ldw	fp,0(sp)
   33b20:	dec00104 	addi	sp,sp,4
   33b24:	f800283a 	ret

00033b28 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   33b28:	defffb04 	addi	sp,sp,-20
   33b2c:	df000415 	stw	fp,16(sp)
   33b30:	df000404 	addi	fp,sp,16
   33b34:	e13ffe15 	stw	r4,-8(fp)
   33b38:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   33b3c:	e0bfff17 	ldw	r2,-4(fp)
   33b40:	10840070 	cmpltui	r2,r2,4097
   33b44:	1000021e 	bne	r2,zero,33b50 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   33b48:	00840004 	movi	r2,4096
   33b4c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   33b50:	e0fffe17 	ldw	r3,-8(fp)
   33b54:	e0bfff17 	ldw	r2,-4(fp)
   33b58:	1885883a 	add	r2,r3,r2
   33b5c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   33b60:	e0bffe17 	ldw	r2,-8(fp)
   33b64:	e0bffc15 	stw	r2,-16(fp)
   33b68:	00000506 	br	33b80 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   33b6c:	e0bffc17 	ldw	r2,-16(fp)
   33b70:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   33b74:	e0bffc17 	ldw	r2,-16(fp)
   33b78:	10800804 	addi	r2,r2,32
   33b7c:	e0bffc15 	stw	r2,-16(fp)
   33b80:	e0fffc17 	ldw	r3,-16(fp)
   33b84:	e0bffd17 	ldw	r2,-12(fp)
   33b88:	18bff836 	bltu	r3,r2,33b6c <__alt_data_end+0xffff476c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   33b8c:	e0bffe17 	ldw	r2,-8(fp)
   33b90:	108007cc 	andi	r2,r2,31
   33b94:	10000226 	beq	r2,zero,33ba0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   33b98:	e0bffc17 	ldw	r2,-16(fp)
   33b9c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   33ba0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   33ba4:	0001883a 	nop
   33ba8:	e037883a 	mov	sp,fp
   33bac:	df000017 	ldw	fp,0(sp)
   33bb0:	dec00104 	addi	sp,sp,4
   33bb4:	f800283a 	ret

00033bb8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   33bb8:	defffe04 	addi	sp,sp,-8
   33bbc:	df000115 	stw	fp,4(sp)
   33bc0:	df000104 	addi	fp,sp,4
   33bc4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   33bc8:	e0bfff17 	ldw	r2,-4(fp)
   33bcc:	10bffe84 	addi	r2,r2,-6
   33bd0:	10c00428 	cmpgeui	r3,r2,16
   33bd4:	18001a1e 	bne	r3,zero,33c40 <alt_exception_cause_generated_bad_addr+0x88>
   33bd8:	100690ba 	slli	r3,r2,2
   33bdc:	008000f4 	movhi	r2,3
   33be0:	108efc04 	addi	r2,r2,15344
   33be4:	1885883a 	add	r2,r3,r2
   33be8:	10800017 	ldw	r2,0(r2)
   33bec:	1000683a 	jmp	r2
   33bf0:	00033c30 	cmpltui	zero,zero,3312
   33bf4:	00033c30 	cmpltui	zero,zero,3312
   33bf8:	00033c40 	call	33c4 <__alt_mem_onchip_memory2-0x1cc3c>
   33bfc:	00033c40 	call	33c4 <__alt_mem_onchip_memory2-0x1cc3c>
   33c00:	00033c40 	call	33c4 <__alt_mem_onchip_memory2-0x1cc3c>
   33c04:	00033c30 	cmpltui	zero,zero,3312
   33c08:	00033c38 	rdprs	zero,zero,3312
   33c0c:	00033c40 	call	33c4 <__alt_mem_onchip_memory2-0x1cc3c>
   33c10:	00033c30 	cmpltui	zero,zero,3312
   33c14:	00033c30 	cmpltui	zero,zero,3312
   33c18:	00033c40 	call	33c4 <__alt_mem_onchip_memory2-0x1cc3c>
   33c1c:	00033c30 	cmpltui	zero,zero,3312
   33c20:	00033c38 	rdprs	zero,zero,3312
   33c24:	00033c40 	call	33c4 <__alt_mem_onchip_memory2-0x1cc3c>
   33c28:	00033c40 	call	33c4 <__alt_mem_onchip_memory2-0x1cc3c>
   33c2c:	00033c30 	cmpltui	zero,zero,3312
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   33c30:	00800044 	movi	r2,1
   33c34:	00000306 	br	33c44 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   33c38:	0005883a 	mov	r2,zero
   33c3c:	00000106 	br	33c44 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   33c40:	0005883a 	mov	r2,zero
  }
}
   33c44:	e037883a 	mov	sp,fp
   33c48:	df000017 	ldw	fp,0(sp)
   33c4c:	dec00104 	addi	sp,sp,4
   33c50:	f800283a 	ret

00033c54 <atexit>:
   33c54:	200b883a 	mov	r5,r4
   33c58:	000f883a 	mov	r7,zero
   33c5c:	000d883a 	mov	r6,zero
   33c60:	0009883a 	mov	r4,zero
   33c64:	0033d1c1 	jmpi	33d1c <__register_exitproc>

00033c68 <exit>:
   33c68:	defffe04 	addi	sp,sp,-8
   33c6c:	000b883a 	mov	r5,zero
   33c70:	dc000015 	stw	r16,0(sp)
   33c74:	dfc00115 	stw	ra,4(sp)
   33c78:	2021883a 	mov	r16,r4
   33c7c:	0033e340 	call	33e34 <__call_exitprocs>
   33c80:	008000f4 	movhi	r2,3
   33c84:	10992904 	addi	r2,r2,25764
   33c88:	11000017 	ldw	r4,0(r2)
   33c8c:	20800f17 	ldw	r2,60(r4)
   33c90:	10000126 	beq	r2,zero,33c98 <exit+0x30>
   33c94:	103ee83a 	callr	r2
   33c98:	8009883a 	mov	r4,r16
   33c9c:	0033fb40 	call	33fb4 <_exit>

00033ca0 <memcmp>:
   33ca0:	01c000c4 	movi	r7,3
   33ca4:	3980192e 	bgeu	r7,r6,33d0c <memcmp+0x6c>
   33ca8:	2144b03a 	or	r2,r4,r5
   33cac:	11c4703a 	and	r2,r2,r7
   33cb0:	10000f26 	beq	r2,zero,33cf0 <memcmp+0x50>
   33cb4:	20800003 	ldbu	r2,0(r4)
   33cb8:	28c00003 	ldbu	r3,0(r5)
   33cbc:	10c0151e 	bne	r2,r3,33d14 <memcmp+0x74>
   33cc0:	31bfff84 	addi	r6,r6,-2
   33cc4:	01ffffc4 	movi	r7,-1
   33cc8:	00000406 	br	33cdc <memcmp+0x3c>
   33ccc:	20800003 	ldbu	r2,0(r4)
   33cd0:	28c00003 	ldbu	r3,0(r5)
   33cd4:	31bfffc4 	addi	r6,r6,-1
   33cd8:	10c00e1e 	bne	r2,r3,33d14 <memcmp+0x74>
   33cdc:	21000044 	addi	r4,r4,1
   33ce0:	29400044 	addi	r5,r5,1
   33ce4:	31fff91e 	bne	r6,r7,33ccc <__alt_data_end+0xffff48cc>
   33ce8:	0005883a 	mov	r2,zero
   33cec:	f800283a 	ret
   33cf0:	20c00017 	ldw	r3,0(r4)
   33cf4:	28800017 	ldw	r2,0(r5)
   33cf8:	18bfee1e 	bne	r3,r2,33cb4 <__alt_data_end+0xffff48b4>
   33cfc:	31bfff04 	addi	r6,r6,-4
   33d00:	21000104 	addi	r4,r4,4
   33d04:	29400104 	addi	r5,r5,4
   33d08:	39bff936 	bltu	r7,r6,33cf0 <__alt_data_end+0xffff48f0>
   33d0c:	303fe91e 	bne	r6,zero,33cb4 <__alt_data_end+0xffff48b4>
   33d10:	003ff506 	br	33ce8 <__alt_data_end+0xffff48e8>
   33d14:	10c5c83a 	sub	r2,r2,r3
   33d18:	f800283a 	ret

00033d1c <__register_exitproc>:
   33d1c:	defffa04 	addi	sp,sp,-24
   33d20:	dc000315 	stw	r16,12(sp)
   33d24:	040000f4 	movhi	r16,3
   33d28:	84192904 	addi	r16,r16,25764
   33d2c:	80c00017 	ldw	r3,0(r16)
   33d30:	dc400415 	stw	r17,16(sp)
   33d34:	dfc00515 	stw	ra,20(sp)
   33d38:	18805217 	ldw	r2,328(r3)
   33d3c:	2023883a 	mov	r17,r4
   33d40:	10003726 	beq	r2,zero,33e20 <__register_exitproc+0x104>
   33d44:	10c00117 	ldw	r3,4(r2)
   33d48:	010007c4 	movi	r4,31
   33d4c:	20c00e16 	blt	r4,r3,33d88 <__register_exitproc+0x6c>
   33d50:	1a000044 	addi	r8,r3,1
   33d54:	8800221e 	bne	r17,zero,33de0 <__register_exitproc+0xc4>
   33d58:	18c00084 	addi	r3,r3,2
   33d5c:	18c7883a 	add	r3,r3,r3
   33d60:	18c7883a 	add	r3,r3,r3
   33d64:	12000115 	stw	r8,4(r2)
   33d68:	10c7883a 	add	r3,r2,r3
   33d6c:	19400015 	stw	r5,0(r3)
   33d70:	0005883a 	mov	r2,zero
   33d74:	dfc00517 	ldw	ra,20(sp)
   33d78:	dc400417 	ldw	r17,16(sp)
   33d7c:	dc000317 	ldw	r16,12(sp)
   33d80:	dec00604 	addi	sp,sp,24
   33d84:	f800283a 	ret
   33d88:	00800034 	movhi	r2,0
   33d8c:	10800004 	addi	r2,r2,0
   33d90:	10002626 	beq	r2,zero,33e2c <__register_exitproc+0x110>
   33d94:	01006404 	movi	r4,400
   33d98:	d9400015 	stw	r5,0(sp)
   33d9c:	d9800115 	stw	r6,4(sp)
   33da0:	d9c00215 	stw	r7,8(sp)
   33da4:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   33da8:	d9400017 	ldw	r5,0(sp)
   33dac:	d9800117 	ldw	r6,4(sp)
   33db0:	d9c00217 	ldw	r7,8(sp)
   33db4:	10001d26 	beq	r2,zero,33e2c <__register_exitproc+0x110>
   33db8:	81000017 	ldw	r4,0(r16)
   33dbc:	10000115 	stw	zero,4(r2)
   33dc0:	02000044 	movi	r8,1
   33dc4:	22405217 	ldw	r9,328(r4)
   33dc8:	0007883a 	mov	r3,zero
   33dcc:	12400015 	stw	r9,0(r2)
   33dd0:	20805215 	stw	r2,328(r4)
   33dd4:	10006215 	stw	zero,392(r2)
   33dd8:	10006315 	stw	zero,396(r2)
   33ddc:	883fde26 	beq	r17,zero,33d58 <__alt_data_end+0xffff4958>
   33de0:	18c9883a 	add	r4,r3,r3
   33de4:	2109883a 	add	r4,r4,r4
   33de8:	1109883a 	add	r4,r2,r4
   33dec:	21802215 	stw	r6,136(r4)
   33df0:	01800044 	movi	r6,1
   33df4:	12406217 	ldw	r9,392(r2)
   33df8:	30cc983a 	sll	r6,r6,r3
   33dfc:	4992b03a 	or	r9,r9,r6
   33e00:	12406215 	stw	r9,392(r2)
   33e04:	21c04215 	stw	r7,264(r4)
   33e08:	01000084 	movi	r4,2
   33e0c:	893fd21e 	bne	r17,r4,33d58 <__alt_data_end+0xffff4958>
   33e10:	11006317 	ldw	r4,396(r2)
   33e14:	218cb03a 	or	r6,r4,r6
   33e18:	11806315 	stw	r6,396(r2)
   33e1c:	003fce06 	br	33d58 <__alt_data_end+0xffff4958>
   33e20:	18805304 	addi	r2,r3,332
   33e24:	18805215 	stw	r2,328(r3)
   33e28:	003fc606 	br	33d44 <__alt_data_end+0xffff4944>
   33e2c:	00bfffc4 	movi	r2,-1
   33e30:	003fd006 	br	33d74 <__alt_data_end+0xffff4974>

00033e34 <__call_exitprocs>:
   33e34:	defff504 	addi	sp,sp,-44
   33e38:	df000915 	stw	fp,36(sp)
   33e3c:	dd400615 	stw	r21,24(sp)
   33e40:	dc800315 	stw	r18,12(sp)
   33e44:	dfc00a15 	stw	ra,40(sp)
   33e48:	ddc00815 	stw	r23,32(sp)
   33e4c:	dd800715 	stw	r22,28(sp)
   33e50:	dd000515 	stw	r20,20(sp)
   33e54:	dcc00415 	stw	r19,16(sp)
   33e58:	dc400215 	stw	r17,8(sp)
   33e5c:	dc000115 	stw	r16,4(sp)
   33e60:	d9000015 	stw	r4,0(sp)
   33e64:	2839883a 	mov	fp,r5
   33e68:	04800044 	movi	r18,1
   33e6c:	057fffc4 	movi	r21,-1
   33e70:	008000f4 	movhi	r2,3
   33e74:	10992904 	addi	r2,r2,25764
   33e78:	12000017 	ldw	r8,0(r2)
   33e7c:	45005217 	ldw	r20,328(r8)
   33e80:	44c05204 	addi	r19,r8,328
   33e84:	a0001c26 	beq	r20,zero,33ef8 <__call_exitprocs+0xc4>
   33e88:	a0800117 	ldw	r2,4(r20)
   33e8c:	15ffffc4 	addi	r23,r2,-1
   33e90:	b8000d16 	blt	r23,zero,33ec8 <__call_exitprocs+0x94>
   33e94:	14000044 	addi	r16,r2,1
   33e98:	8421883a 	add	r16,r16,r16
   33e9c:	8421883a 	add	r16,r16,r16
   33ea0:	84402004 	addi	r17,r16,128
   33ea4:	a463883a 	add	r17,r20,r17
   33ea8:	a421883a 	add	r16,r20,r16
   33eac:	e0001e26 	beq	fp,zero,33f28 <__call_exitprocs+0xf4>
   33eb0:	80804017 	ldw	r2,256(r16)
   33eb4:	e0801c26 	beq	fp,r2,33f28 <__call_exitprocs+0xf4>
   33eb8:	bdffffc4 	addi	r23,r23,-1
   33ebc:	843fff04 	addi	r16,r16,-4
   33ec0:	8c7fff04 	addi	r17,r17,-4
   33ec4:	bd7ff91e 	bne	r23,r21,33eac <__alt_data_end+0xffff4aac>
   33ec8:	00800034 	movhi	r2,0
   33ecc:	10800004 	addi	r2,r2,0
   33ed0:	10000926 	beq	r2,zero,33ef8 <__call_exitprocs+0xc4>
   33ed4:	a0800117 	ldw	r2,4(r20)
   33ed8:	1000301e 	bne	r2,zero,33f9c <__call_exitprocs+0x168>
   33edc:	a0800017 	ldw	r2,0(r20)
   33ee0:	10003226 	beq	r2,zero,33fac <__call_exitprocs+0x178>
   33ee4:	a009883a 	mov	r4,r20
   33ee8:	98800015 	stw	r2,0(r19)
   33eec:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   33ef0:	9d000017 	ldw	r20,0(r19)
   33ef4:	a03fe41e 	bne	r20,zero,33e88 <__alt_data_end+0xffff4a88>
   33ef8:	dfc00a17 	ldw	ra,40(sp)
   33efc:	df000917 	ldw	fp,36(sp)
   33f00:	ddc00817 	ldw	r23,32(sp)
   33f04:	dd800717 	ldw	r22,28(sp)
   33f08:	dd400617 	ldw	r21,24(sp)
   33f0c:	dd000517 	ldw	r20,20(sp)
   33f10:	dcc00417 	ldw	r19,16(sp)
   33f14:	dc800317 	ldw	r18,12(sp)
   33f18:	dc400217 	ldw	r17,8(sp)
   33f1c:	dc000117 	ldw	r16,4(sp)
   33f20:	dec00b04 	addi	sp,sp,44
   33f24:	f800283a 	ret
   33f28:	a0800117 	ldw	r2,4(r20)
   33f2c:	80c00017 	ldw	r3,0(r16)
   33f30:	10bfffc4 	addi	r2,r2,-1
   33f34:	15c01426 	beq	r2,r23,33f88 <__call_exitprocs+0x154>
   33f38:	80000015 	stw	zero,0(r16)
   33f3c:	183fde26 	beq	r3,zero,33eb8 <__alt_data_end+0xffff4ab8>
   33f40:	95c8983a 	sll	r4,r18,r23
   33f44:	a0806217 	ldw	r2,392(r20)
   33f48:	a5800117 	ldw	r22,4(r20)
   33f4c:	2084703a 	and	r2,r4,r2
   33f50:	10000b26 	beq	r2,zero,33f80 <__call_exitprocs+0x14c>
   33f54:	a0806317 	ldw	r2,396(r20)
   33f58:	2088703a 	and	r4,r4,r2
   33f5c:	20000c1e 	bne	r4,zero,33f90 <__call_exitprocs+0x15c>
   33f60:	89400017 	ldw	r5,0(r17)
   33f64:	d9000017 	ldw	r4,0(sp)
   33f68:	183ee83a 	callr	r3
   33f6c:	a0800117 	ldw	r2,4(r20)
   33f70:	15bfbf1e 	bne	r2,r22,33e70 <__alt_data_end+0xffff4a70>
   33f74:	98800017 	ldw	r2,0(r19)
   33f78:	153fcf26 	beq	r2,r20,33eb8 <__alt_data_end+0xffff4ab8>
   33f7c:	003fbc06 	br	33e70 <__alt_data_end+0xffff4a70>
   33f80:	183ee83a 	callr	r3
   33f84:	003ff906 	br	33f6c <__alt_data_end+0xffff4b6c>
   33f88:	a5c00115 	stw	r23,4(r20)
   33f8c:	003feb06 	br	33f3c <__alt_data_end+0xffff4b3c>
   33f90:	89000017 	ldw	r4,0(r17)
   33f94:	183ee83a 	callr	r3
   33f98:	003ff406 	br	33f6c <__alt_data_end+0xffff4b6c>
   33f9c:	a0800017 	ldw	r2,0(r20)
   33fa0:	a027883a 	mov	r19,r20
   33fa4:	1029883a 	mov	r20,r2
   33fa8:	003fb606 	br	33e84 <__alt_data_end+0xffff4a84>
   33fac:	0005883a 	mov	r2,zero
   33fb0:	003ffb06 	br	33fa0 <__alt_data_end+0xffff4ba0>

00033fb4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   33fb4:	defffd04 	addi	sp,sp,-12
   33fb8:	df000215 	stw	fp,8(sp)
   33fbc:	df000204 	addi	fp,sp,8
   33fc0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   33fc4:	0001883a 	nop
   33fc8:	e0bfff17 	ldw	r2,-4(fp)
   33fcc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   33fd0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   33fd4:	10000226 	beq	r2,zero,33fe0 <_exit+0x2c>
    ALT_SIM_FAIL();
   33fd8:	002af070 	cmpltui	zero,zero,43969
   33fdc:	00000106 	br	33fe4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   33fe0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   33fe4:	003fff06 	br	33fe4 <__alt_data_end+0xffff4be4>
