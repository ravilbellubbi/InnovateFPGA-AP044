
DE10_NANO_ADC.elf:     file format elf32-littlenios2
DE10_NANO_ADC.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000a120 memsz 0x0000a120 flags r-x
    LOAD off    0x0000b140 vaddr 0x0004a140 paddr 0x0004bbb0 align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags rw-
    LOAD off    0x0000d620 vaddr 0x0004d620 paddr 0x0004d620 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009e10  000401c0  000401c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000170  00049fd0  00049fd0  0000afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a70  0004a140  0004bbb0  0000b140  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0004d620  0004d620  0000d620  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0004d770  0004d770  0000cbb0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000cbb0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d18  00000000  00000000  0000cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a3a0  00000000  00000000  0000d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000077c9  00000000  00000000  00027c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008be6  00000000  00000000  0002f459  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a08  00000000  00000000  00038040  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002e87  00000000  00000000  00039a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000de50  00000000  00000000  0003c8cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0004a720  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000014b8  00000000  00000000  0004a780  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004e60d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0004e610  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004e61a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004e61b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0004e61c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0004e620  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004e624  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0004e628  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0004e631  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0004e63a  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000e  00000000  00000000  0004e643  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000000b  00000000  00000000  0004e651  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000547eb  00000000  00000000  0004e65c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401c0 l    d  .text	00000000 .text
00049fd0 l    d  .rodata	00000000 .rodata
0004a140 l    d  .rwdata	00000000 .rwdata
0004d620 l    d  .bss	00000000 .bss
0004d770 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE10_NANO_ADC_bsp//obj/HAL/src/crt0.o
00040208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0004a140 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00044c78 l     F .text	00000008 __fp_unlock
00044c8c l     F .text	0000019c __sinit.part.1
00044e28 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
00047720 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00047840 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004786c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004796c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00047a60 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00047b4c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00047d34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004bba0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00047fc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004810c l     F .text	00000038 alt_dev_reg
0004ab14 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000483f4 l     F .text	0000020c altera_avalon_jtag_uart_irq
00048600 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00048f20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000493d8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00049518 l     F .text	00000050 alt_get_errno
00049568 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000476cc g     F .text	00000054 _isatty_r
00047c70 g     F .text	0000007c alt_main
00044b0c g     F .text	000000c0 _puts_r
0004d670 g     O .bss	00000100 alt_irq
000473f4 g     F .text	00000060 _lseek_r
00040530 g     F .text	0000019c log
0004bbb0 g       *ABS*	00000000 __flash_rwdata_start
000433d8 g     F .text	00000088 .hidden __eqdf2
0004d770 g       *ABS*	00000000 __alt_heap_start
000469a8 g     F .text	0000005c __sseek
00044fc8 g     F .text	00000010 __sinit
00044e30 g     F .text	00000068 __sfmoreglue
00047d10 g     F .text	00000024 __malloc_unlock
00041338 g     F .text	00000440 .hidden __divsf3
00046094 g     F .text	0000015c memmove
00044fb0 g     F .text	00000018 _cleanup
00043460 g     F .text	000000dc .hidden __gtdf2
00044afc g     F .text	00000010 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00047670 g     F .text	0000005c _fstat_r
0004d62c g     O .bss	00000004 errno
00046924 g     F .text	00000008 __seofread
0004d634 g     O .bss	00000004 alt_argv
00053b74 g       *ABS*	00000000 _gp
00047f94 g     F .text	00000030 usleep
00041c3c g     F .text	000004e4 .hidden __subsf3
0004a994 g     O .rwdata	00000180 alt_fd_list
00049954 g     F .text	00000090 alt_find_dev
00045f4c g     F .text	00000148 memcpy
00044c80 g     F .text	0000000c _cleanup_r
00044550 g     F .text	000000dc .hidden __floatsidf
0004949c g     F .text	0000007c alt_io_redirect
00049fd0 g       *ABS*	00000000 __DTOR_END__
00044bcc g     F .text	00000014 puts
00040de8 g     F .text	00000074 __fpclassifyd
00048800 g     F .text	0000021c altera_avalon_jtag_uart_read
00044a40 g     F .text	00000064 .hidden __udivsi3
000479bc g     F .text	000000a4 isatty
00041778 g     F .text	000000c8 .hidden __lesf2
00049bac g     F .text	00000090 alt_icache_flush
0004d628 g     O .bss	00000004 __malloc_top_pad
00045018 g     F .text	000004bc __sfvwrite_r
0004687c g     F .text	00000054 _sbrk_r
00047610 g     F .text	00000060 _read_r
0004bb98 g     O .rwdata	00000004 alt_max_fd
00046c14 g     F .text	000000f0 _fclose_r
00046f90 g     F .text	00000030 fflush
0004d624 g     O .bss	00000004 __malloc_max_sbrked_mem
0004462c g     F .text	00000110 .hidden __extendsfdf2
00042244 g     F .text	000008ac .hidden __adddf3
00047b9c g     F .text	000000d4 lseek
0004bb74 g     O .rwdata	00000004 __fdlib_version
0004bb78 g     O .rwdata	00000004 _global_impure_ptr
00046318 g     F .text	00000564 _realloc_r
0004d770 g       *ABS*	00000000 __bss_end
000492e8 g     F .text	000000f0 alt_iic_isr_register
00049828 g     F .text	00000108 alt_tick
00044fe8 g     F .text	00000018 __fp_lock_all
0004929c g     F .text	0000004c alt_ic_irq_enabled
0004978c g     F .text	0000009c alt_alarm_stop
0004d63c g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000d4 alt_irq_handler
0004a96c g     O .rwdata	00000028 alt_dev_null
00048ed8 g     F .text	00000048 alt_dcache_flush_all
0004bbb0 g       *ABS*	00000000 __ram_rwdata_end
0004bb90 g     O .rwdata	00000008 alt_dev_list
00048014 g     F .text	000000f8 write
0004a140 g       *ABS*	00000000 __ram_rodata_end
000478bc g     F .text	000000b0 fstat
00044aa4 g     F .text	00000058 .hidden __umodsi3
0004d770 g       *ABS*	00000000 end
0004832c g     F .text	000000c8 altera_avalon_jtag_uart_init
00049fd0 g       *ABS*	00000000 __CTOR_LIST__
00067100 g       *ABS*	00000000 __alt_stack_pointer
000448e4 g     F .text	00000064 .hidden __clzsi2
00048a1c g     F .text	00000224 altera_avalon_jtag_uart_write
00044fd8 g     F .text	00000004 __sfp_lock_acquire
00045e68 g     F .text	000000e4 memchr
000470e4 g     F .text	00000310 _free_r
00049e1c g     F .text	00000180 __call_exitprocs
0004bb80 g     O .rwdata	00000004 __malloc_sbrk_base
000401c0 g     F .text	0000004c _start
0004d640 g     O .bss	00000004 _alt_tick_rate
0004d644 g     O .bss	00000004 _alt_nticks
00047d84 g     F .text	000000fc read
0004817c g     F .text	0000004c alt_sys_init
00042120 g     F .text	00000124 .hidden __floatsisf
00049d04 g     F .text	00000118 __register_exitproc
000486a8 g     F .text	00000068 altera_avalon_jtag_uart_close
0004a140 g       *ABS*	00000000 __ram_rwdata_start
00049fd0 g       *ABS*	00000000 __ram_rodata_start
0004d648 g     O .bss	00000028 __malloc_current_mallinfo
000481c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00049af8 g     F .text	000000b4 alt_get_fd
00048d80 g     F .text	00000158 alt_busy_sleep
00046bc0 g     F .text	00000054 _close_r
00049c88 g     F .text	0000007c memcmp
00048288 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004d770 g       *ABS*	00000000 __alt_stack_base
000482d8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00046a6c g     F .text	00000154 __swsetup_r
00042af0 g     F .text	000008e8 .hidden __divdf3
00044e98 g     F .text	00000118 __sfp
0004a564 g     O .rwdata	00000408 __malloc_av_
00044fe4 g     F .text	00000004 __sinit_lock_release
0004353c g     F .text	00000718 .hidden __muldf3
000468d0 g     F .text	00000054 __sread
000499e4 g     F .text	00000114 alt_find_file
00048f70 g     F .text	000000a4 alt_dev_llist_insert
00047cec g     F .text	00000024 __malloc_lock
00047ee4 g     F .text	000000b0 sbrk
00046f34 g     F .text	0000005c _fflush_r
0004d620 g       *ABS*	00000000 __bss_start
000461f0 g     F .text	00000128 memset
0004020c g     F .text	00000324 main
0004d638 g     O .bss	00000004 alt_envp
0004d620 g     O .bss	00000004 __malloc_max_total_mem
00048228 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00041778 g     F .text	000000c8 .hidden __ltsf2
00046a04 g     F .text	00000008 __sclose
00040e5c g     F .text	00000008 matherr
00067100 g       *ABS*	00000000 __alt_heap_limit
00046d04 g     F .text	00000014 fclose
0004473c g     F .text	000001a8 .hidden __truncdfsf2
0004565c g     F .text	0000080c _malloc_r
0004bb9c g     O .rwdata	00000004 alt_errno
000454d4 g     F .text	000000c4 _fwalk
00044948 g     F .text	00000084 .hidden __divsi3
00046fc0 g     F .text	00000124 _malloc_trim_r
00049fd0 g       *ABS*	00000000 __CTOR_END__
00041840 g     F .text	000003fc .hidden __mulsf3
00049fd0 g       *ABS*	00000000 __flash_rodata_start
00049fd0 g       *ABS*	00000000 __DTOR_LIST__
000433d8 g     F .text	00000088 .hidden __nedf2
00048144 g     F .text	00000038 alt_irq_init
00047e80 g     F .text	00000064 alt_release_fd
0004a009 g     O .rodata	00000100 .hidden __clz_tab
00049c3c g     F .text	00000014 atexit
00046a0c g     F .text	00000060 _write_r
0004bb7c g     O .rwdata	00000004 _impure_ptr
0004d630 g     O .bss	00000004 alt_argc
00046d18 g     F .text	0000021c __sflush_r
00049074 g     F .text	00000060 _do_dtors
000406cc g     F .text	0000071c __ieee754_log
00040020 g       .exceptions	00000000 alt_irq_entry
00045000 g     F .text	00000018 __fp_unlock_all
0004bb88 g     O .rwdata	00000008 alt_fs_list
00040e64 g     F .text	0000000c nan
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00049108 g     F .text	00000050 alt_ic_isr_register
0004bbb0 g       *ABS*	00000000 _edata
0004d770 g       *ABS*	00000000 _end
000401c0 g       *ABS*	00000000 __ram_exceptions_end
00048710 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000491f8 g     F .text	000000a4 alt_ic_irq_disable
0004692c g     F .text	0000007c __swrite
0004bb84 g     O .rwdata	00000004 __malloc_trim_threshold
00049930 g     F .text	00000024 altera_nios2_qsys_irq_init
00049c50 g     F .text	00000038 exit
00045598 g     F .text	000000c4 _fwalk_reent
000449cc g     F .text	00000074 .hidden __modsi3
00067100 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00044fdc g     F .text	00000004 __sfp_lock_release
00049f9c g     F .text	00000034 _exit
00048c40 g     F .text	00000140 alt_alarm_start
00047454 g     F .text	000001bc __smakebuf_r
00044be0 g     F .text	00000098 strlen
00049634 g     F .text	00000158 open
00043460 g     F .text	000000dc .hidden __gedf2
000490d4 g     F .text	00000034 alt_icache_flush_all
0004bba4 g     O .rwdata	00000004 alt_priority_mask
00049158 g     F .text	000000a0 alt_ic_irq_enable
00043c54 g     F .text	000008fc .hidden __subdf3
0004bba8 g     O .rwdata	00000008 alt_alarm_list
00049014 g     F .text	00000060 _do_ctors
00047770 g     F .text	000000d0 close
00040e70 g     F .text	000004c8 .hidden __addsf3
00047ac8 g     F .text	00000084 alt_load
00044fe0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8f04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08407014 	ori	at,at,448
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001426 	beq	r2,zero,4017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00800174 	movhi	r2,5
   40130:	10b59c04 	addi	r2,r2,-10640
   40134:	e0fffd17 	ldw	r3,-12(fp)
   40138:	180690fa 	slli	r3,r3,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	00800174 	movhi	r2,5
   40148:	10b59c04 	addi	r2,r2,-10640
   4014c:	e13ffd17 	ldw	r4,-12(fp)
   40150:	200890fa 	slli	r4,r4,3
   40154:	1105883a 	add	r2,r2,r4
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	00000706 	br	40198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4017c:	e0bffc17 	ldw	r2,-16(fp)
   40180:	1085883a 	add	r2,r2,r2
   40184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40188:	e0bffd17 	ldw	r2,-12(fp)
   4018c:	10800044 	addi	r2,r2,1
   40190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   40194:	003fe106 	br	4011c <__alt_data_end+0xfffd901c>

    active = alt_irq_pending ();
   40198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4019c:	e0bffb17 	ldw	r2,-20(fp)
   401a0:	103fdb1e 	bne	r2,zero,40110 <__alt_data_end+0xfffd9010>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a4:	0001883a 	nop
}
   401a8:	0001883a 	nop
   401ac:	e037883a 	mov	sp,fp
   401b0:	dfc00117 	ldw	ra,4(sp)
   401b4:	df000017 	ldw	fp,0(sp)
   401b8:	dec00204 	addi	sp,sp,8
   401bc:	f800283a 	ret

Disassembly of section .text:

000401c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   401cc:	00bffd16 	blt	zero,r2,401c4 <__alt_data_end+0xfffd90c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401d0:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   401d4:	dedc4014 	ori	sp,sp,28928
    movhi gp, %hi(_gp)
   401d8:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401dc:	d68edd14 	ori	gp,gp,15220
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401e0:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401e4:	10b58814 	ori	r2,r2,54816

    movhi r3, %hi(__bss_end)
   401e8:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401ec:	18f5dc14 	ori	r3,r3,55152

    beq r2, r3, 1f
   401f0:	10c00326 	beq	r2,r3,40200 <_start+0x40>

0:
    stw zero, (r2)
   401f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401fc:	10fffd36 	bltu	r2,r3,401f4 <__alt_data_end+0xfffd90f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40200:	0047ac80 	call	47ac8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40204:	0047c700 	call	47c70 <alt_main>

00040208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40208:	003fff06 	br	40208 <__alt_data_end+0xfffd9108>

0004020c <main>:
#include <unistd.h>
#include <math.h>

#include "system.h"

void main(void){
   4020c:	defff104 	addi	sp,sp,-60
   40210:	dfc00e15 	stw	ra,56(sp)
   40214:	df000d15 	stw	fp,52(sp)
   40218:	dc400c15 	stw	r17,48(sp)
   4021c:	dc000b15 	stw	r16,44(sp)
   40220:	df000d04 	addi	fp,sp,52
	int ch = 0;
   40224:	e03ff515 	stw	zero,-44(fp)
	const int nReadNum = 10; // max 1024
   40228:	00800284 	movi	r2,10
   4022c:	e0bff615 	stw	r2,-40(fp)
	int i, Value=0;
   40230:	e03ff715 	stw	zero,-36(fp)
	//int a = 0;
	float R1 = 10000;
   40234:	00918734 	movhi	r2,17948
   40238:	10900004 	addi	r2,r2,16384
   4023c:	e0bff815 	stw	r2,-32(fp)
	float c1 = 0.001129148, c2 = 0.000234125, c3 = 0.0000000876741;
   40240:	008ea534 	movhi	r2,14996
   40244:	10bffac4 	addi	r2,r2,-21
   40248:	e0bff915 	stw	r2,-28(fp)
   4024c:	008e5d74 	movhi	r2,14709
   40250:	109fdcc4 	addi	r2,r2,32627
   40254:	e0bffa15 	stw	r2,-24(fp)
   40258:	008cef34 	movhi	r2,13244
   4025c:	1091d644 	addi	r2,r2,18265
   40260:	e0bffb15 	stw	r2,-20(fp)
	float logR2, R2, T;
	//printf("Enter the sensor value, 1 for temp sensor, 2 for eda, 3 for Gas, 4 for Light");

	while(1){
		ch = IORD(SW_BASE, 0x00) & 0x07;
   40264:	0005883a 	mov	r2,zero
   40268:	10800037 	ldwio	r2,0(r2)
   4026c:	108001cc 	andi	r2,r2,7
   40270:	e0bff515 	stw	r2,-44(fp)

		IOWR(ADC_LTC2308_BASE, 0x01, nReadNum);
   40274:	00800234 	movhi	r2,8
   40278:	10840504 	addi	r2,r2,4116
   4027c:	e0fff617 	ldw	r3,-40(fp)
   40280:	10c00035 	stwio	r3,0(r2)


		// start measure
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x00);
   40284:	e0bff517 	ldw	r2,-44(fp)
   40288:	1085883a 	add	r2,r2,r2
   4028c:	1007883a 	mov	r3,r2
   40290:	00800234 	movhi	r2,8
   40294:	10840404 	addi	r2,r2,4112
   40298:	10c00035 	stwio	r3,0(r2)
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x01);
   4029c:	e0bff517 	ldw	r2,-44(fp)
   402a0:	1085883a 	add	r2,r2,r2
   402a4:	10c00054 	ori	r3,r2,1
   402a8:	00800234 	movhi	r2,8
   402ac:	10840404 	addi	r2,r2,4112
   402b0:	10c00035 	stwio	r3,0(r2)
		IOWR(ADC_LTC2308_BASE, 0x00, (ch << 1) | 0x00);
   402b4:	e0bff517 	ldw	r2,-44(fp)
   402b8:	1085883a 	add	r2,r2,r2
   402bc:	1007883a 	mov	r3,r2
   402c0:	00800234 	movhi	r2,8
   402c4:	10840404 	addi	r2,r2,4112
   402c8:	10c00035 	stwio	r3,0(r2)
		usleep(1);
   402cc:	01000044 	movi	r4,1
   402d0:	0047f940 	call	47f94 <usleep>

		// wait measure done
		while ((IORD(ADC_LTC2308_BASE,0x00) & 0x01) == 0x00);
   402d4:	0001883a 	nop
   402d8:	00800234 	movhi	r2,8
   402dc:	10840404 	addi	r2,r2,4112
   402e0:	10800037 	ldwio	r2,0(r2)
   402e4:	1080004c 	andi	r2,r2,1
   402e8:	103ffb26 	beq	r2,zero,402d8 <__alt_data_end+0xfffd91d8>

		// read adc value
		for(i=0;i<nReadNum;i++){
   402ec:	e03ff315 	stw	zero,-52(fp)
   402f0:	00007c06 	br	404e4 <main+0x2d8>
			Value = IORD(ADC_LTC2308_BASE, 0x01);
   402f4:	00800234 	movhi	r2,8
   402f8:	10840504 	addi	r2,r2,4116
   402fc:	10800037 	ldwio	r2,0(r2)
   40300:	e0bff715 	stw	r2,-36(fp)
			R2 = R1 * (1023.0 / (((float)Value/1000.0)*30)-1.0);
   40304:	e13ff817 	ldw	r4,-32(fp)
   40308:	004462c0 	call	4462c <__extendsfdf2>
   4030c:	1021883a 	mov	r16,r2
   40310:	1823883a 	mov	r17,r3
   40314:	e13ff717 	ldw	r4,-36(fp)
   40318:	00421200 	call	42120 <__floatsisf>
   4031c:	1007883a 	mov	r3,r2
   40320:	1809883a 	mov	r4,r3
   40324:	004462c0 	call	4462c <__extendsfdf2>
   40328:	1011883a 	mov	r8,r2
   4032c:	1813883a 	mov	r9,r3
   40330:	000d883a 	mov	r6,zero
   40334:	01d023f4 	movhi	r7,16527
   40338:	39d00004 	addi	r7,r7,16384
   4033c:	4009883a 	mov	r4,r8
   40340:	480b883a 	mov	r5,r9
   40344:	0042af00 	call	42af0 <__divdf3>
   40348:	1009883a 	mov	r4,r2
   4034c:	180b883a 	mov	r5,r3
   40350:	2005883a 	mov	r2,r4
   40354:	2807883a 	mov	r3,r5
   40358:	000d883a 	mov	r6,zero
   4035c:	01d00fb4 	movhi	r7,16446
   40360:	1009883a 	mov	r4,r2
   40364:	180b883a 	mov	r5,r3
   40368:	004353c0 	call	4353c <__muldf3>
   4036c:	1009883a 	mov	r4,r2
   40370:	180b883a 	mov	r5,r3
   40374:	2005883a 	mov	r2,r4
   40378:	2807883a 	mov	r3,r5
   4037c:	100d883a 	mov	r6,r2
   40380:	180f883a 	mov	r7,r3
   40384:	0009883a 	mov	r4,zero
   40388:	01502434 	movhi	r5,16528
   4038c:	297e0004 	addi	r5,r5,-2048
   40390:	0042af00 	call	42af0 <__divdf3>
   40394:	1009883a 	mov	r4,r2
   40398:	180b883a 	mov	r5,r3
   4039c:	2005883a 	mov	r2,r4
   403a0:	2807883a 	mov	r3,r5
   403a4:	000d883a 	mov	r6,zero
   403a8:	01cffc34 	movhi	r7,16368
   403ac:	1009883a 	mov	r4,r2
   403b0:	180b883a 	mov	r5,r3
   403b4:	0043c540 	call	43c54 <__subdf3>
   403b8:	1009883a 	mov	r4,r2
   403bc:	180b883a 	mov	r5,r3
   403c0:	2005883a 	mov	r2,r4
   403c4:	2807883a 	mov	r3,r5
   403c8:	100d883a 	mov	r6,r2
   403cc:	180f883a 	mov	r7,r3
   403d0:	8009883a 	mov	r4,r16
   403d4:	880b883a 	mov	r5,r17
   403d8:	004353c0 	call	4353c <__muldf3>
   403dc:	1009883a 	mov	r4,r2
   403e0:	180b883a 	mov	r5,r3
   403e4:	2005883a 	mov	r2,r4
   403e8:	2807883a 	mov	r3,r5
   403ec:	1009883a 	mov	r4,r2
   403f0:	180b883a 	mov	r5,r3
   403f4:	004473c0 	call	4473c <__truncdfsf2>
   403f8:	1007883a 	mov	r3,r2
   403fc:	e0fffc15 	stw	r3,-16(fp)
			logR2 = log(R2);
   40400:	e13ffc17 	ldw	r4,-16(fp)
   40404:	004462c0 	call	4462c <__extendsfdf2>
   40408:	100b883a 	mov	r5,r2
   4040c:	180d883a 	mov	r6,r3
   40410:	2809883a 	mov	r4,r5
   40414:	300b883a 	mov	r5,r6
   40418:	00405300 	call	40530 <log>
   4041c:	100b883a 	mov	r5,r2
   40420:	180d883a 	mov	r6,r3
   40424:	2809883a 	mov	r4,r5
   40428:	300b883a 	mov	r5,r6
   4042c:	004473c0 	call	4473c <__truncdfsf2>
   40430:	1007883a 	mov	r3,r2
   40434:	e0fffd15 	stw	r3,-12(fp)
			T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
   40438:	e17ffd17 	ldw	r5,-12(fp)
   4043c:	e13ffa17 	ldw	r4,-24(fp)
   40440:	00418400 	call	41840 <__mulsf3>
   40444:	1007883a 	mov	r3,r2
   40448:	1805883a 	mov	r2,r3
   4044c:	e17ff917 	ldw	r5,-28(fp)
   40450:	1009883a 	mov	r4,r2
   40454:	0040e700 	call	40e70 <__addsf3>
   40458:	1007883a 	mov	r3,r2
   4045c:	1821883a 	mov	r16,r3
   40460:	e17ffd17 	ldw	r5,-12(fp)
   40464:	e13ffb17 	ldw	r4,-20(fp)
   40468:	00418400 	call	41840 <__mulsf3>
   4046c:	1007883a 	mov	r3,r2
   40470:	1805883a 	mov	r2,r3
   40474:	e17ffd17 	ldw	r5,-12(fp)
   40478:	1009883a 	mov	r4,r2
   4047c:	00418400 	call	41840 <__mulsf3>
   40480:	1007883a 	mov	r3,r2
   40484:	1805883a 	mov	r2,r3
   40488:	e17ffd17 	ldw	r5,-12(fp)
   4048c:	1009883a 	mov	r4,r2
   40490:	00418400 	call	41840 <__mulsf3>
   40494:	1007883a 	mov	r3,r2
   40498:	1805883a 	mov	r2,r3
   4049c:	100b883a 	mov	r5,r2
   404a0:	8009883a 	mov	r4,r16
   404a4:	0040e700 	call	40e70 <__addsf3>
   404a8:	1007883a 	mov	r3,r2
   404ac:	1805883a 	mov	r2,r3
   404b0:	100b883a 	mov	r5,r2
   404b4:	010fe034 	movhi	r4,16256
   404b8:	00413380 	call	41338 <__divsf3>
   404bc:	1007883a 	mov	r3,r2
   404c0:	e0fff415 	stw	r3,-48(fp)
			T = T - 60;
   404c4:	01509c34 	movhi	r5,17008
   404c8:	e13ff417 	ldw	r4,-48(fp)
   404cc:	0041c3c0 	call	41c3c <__subsf3>
   404d0:	1007883a 	mov	r3,r2
   404d4:	e0fff415 	stw	r3,-48(fp)

		// wait measure done
		while ((IORD(ADC_LTC2308_BASE,0x00) & 0x01) == 0x00);

		// read adc value
		for(i=0;i<nReadNum;i++){
   404d8:	e0bff317 	ldw	r2,-52(fp)
   404dc:	10800044 	addi	r2,r2,1
   404e0:	e0bff315 	stw	r2,-52(fp)
   404e4:	e0fff317 	ldw	r3,-52(fp)
   404e8:	e0bff617 	ldw	r2,-40(fp)
   404ec:	18bf8116 	blt	r3,r2,402f4 <__alt_data_end+0xfffd91f4>
			logR2 = log(R2);
			T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
			T = T - 60;
			//intf("Value=%.3f /n",T);
		}
		if(T<=182.5){
   404f0:	0150cdf4 	movhi	r5,17207
   404f4:	29600004 	addi	r5,r5,-32768
   404f8:	e13ff417 	ldw	r4,-48(fp)
   404fc:	00417780 	call	41778 <__lesf2>
   40500:	00800416 	blt	zero,r2,40514 <main+0x308>
			printf("No fire forest is safe\r\n");
   40504:	01000174 	movhi	r4,5
   40508:	2127f404 	addi	r4,r4,-24624
   4050c:	0044bcc0 	call	44bcc <puts>
   40510:	00000306 	br	40520 <main+0x314>
		}
		else{
			printf("Fire save the forest!!!\r\n");
   40514:	01000174 	movhi	r4,5
   40518:	2127fa04 	addi	r4,r4,-24600
   4051c:	0044bcc0 	call	44bcc <puts>
		}
		usleep(200*1000);
   40520:	010000f4 	movhi	r4,3
   40524:	21035004 	addi	r4,r4,3392
   40528:	0047f940 	call	47f94 <usleep>
	} // while
   4052c:	003f4d06 	br	40264 <__alt_data_end+0xfffd9164>

00040530 <log>:
   40530:	defff104 	addi	sp,sp,-60
   40534:	dd000d15 	stw	r20,52(sp)
   40538:	05000174 	movhi	r20,5
   4053c:	dcc00c15 	stw	r19,48(sp)
   40540:	dc800b15 	stw	r18,44(sp)
   40544:	dc400a15 	stw	r17,40(sp)
   40548:	dc000915 	stw	r16,36(sp)
   4054c:	dfc00e15 	stw	ra,56(sp)
   40550:	a52edd04 	addi	r20,r20,-17548
   40554:	2027883a 	mov	r19,r4
   40558:	2825883a 	mov	r18,r5
   4055c:	00406cc0 	call	406cc <__ieee754_log>
   40560:	1821883a 	mov	r16,r3
   40564:	a0c00017 	ldw	r3,0(r20)
   40568:	1023883a 	mov	r17,r2
   4056c:	00bfffc4 	movi	r2,-1
   40570:	18800a26 	beq	r3,r2,4059c <log+0x6c>
   40574:	9809883a 	mov	r4,r19
   40578:	900b883a 	mov	r5,r18
   4057c:	0040de80 	call	40de8 <__fpclassifyd>
   40580:	10000626 	beq	r2,zero,4059c <log+0x6c>
   40584:	000d883a 	mov	r6,zero
   40588:	000f883a 	mov	r7,zero
   4058c:	9809883a 	mov	r4,r19
   40590:	900b883a 	mov	r5,r18
   40594:	00434600 	call	43460 <__gedf2>
   40598:	00800a0e 	bge	zero,r2,405c4 <log+0x94>
   4059c:	8805883a 	mov	r2,r17
   405a0:	8007883a 	mov	r3,r16
   405a4:	dfc00e17 	ldw	ra,56(sp)
   405a8:	dd000d17 	ldw	r20,52(sp)
   405ac:	dcc00c17 	ldw	r19,48(sp)
   405b0:	dc800b17 	ldw	r18,44(sp)
   405b4:	dc400a17 	ldw	r17,40(sp)
   405b8:	dc000917 	ldw	r16,36(sp)
   405bc:	dec00f04 	addi	sp,sp,60
   405c0:	f800283a 	ret
   405c4:	00800174 	movhi	r2,5
   405c8:	a4000017 	ldw	r16,0(r20)
   405cc:	10a80104 	addi	r2,r2,-24572
   405d0:	d8000815 	stw	zero,32(sp)
   405d4:	d8800115 	stw	r2,4(sp)
   405d8:	dcc00215 	stw	r19,8(sp)
   405dc:	dc800315 	stw	r18,12(sp)
   405e0:	dcc00415 	stw	r19,16(sp)
   405e4:	dc800515 	stw	r18,20(sp)
   405e8:	000d883a 	mov	r6,zero
   405ec:	000f883a 	mov	r7,zero
   405f0:	9809883a 	mov	r4,r19
   405f4:	900b883a 	mov	r5,r18
   405f8:	8000101e 	bne	r16,zero,4063c <log+0x10c>
   405fc:	00b80034 	movhi	r2,57344
   40600:	d8800615 	stw	r2,24(sp)
   40604:	00b1fc34 	movhi	r2,51184
   40608:	10bfffc4 	addi	r2,r2,-1
   4060c:	d8800715 	stw	r2,28(sp)
   40610:	00433d80 	call	433d8 <__eqdf2>
   40614:	10001f1e 	bne	r2,zero,40694 <log+0x164>
   40618:	00800084 	movi	r2,2
   4061c:	d8800015 	stw	r2,0(sp)
   40620:	d809883a 	mov	r4,sp
   40624:	0040e5c0 	call	40e5c <matherr>
   40628:	1000151e 	bne	r2,zero,40680 <log+0x150>
   4062c:	0044afc0 	call	44afc <__errno>
   40630:	00c00884 	movi	r3,34
   40634:	10c00015 	stw	r3,0(r2)
   40638:	00001106 	br	40680 <log+0x150>
   4063c:	00bffc34 	movhi	r2,65520
   40640:	d8000615 	stw	zero,24(sp)
   40644:	d8800715 	stw	r2,28(sp)
   40648:	00433d80 	call	433d8 <__eqdf2>
   4064c:	10001726 	beq	r2,zero,406ac <log+0x17c>
   40650:	00800044 	movi	r2,1
   40654:	d8800015 	stw	r2,0(sp)
   40658:	00800084 	movi	r2,2
   4065c:	80800f1e 	bne	r16,r2,4069c <log+0x16c>
   40660:	0044afc0 	call	44afc <__errno>
   40664:	00c00844 	movi	r3,33
   40668:	10c00015 	stw	r3,0(r2)
   4066c:	01000174 	movhi	r4,5
   40670:	21280204 	addi	r4,r4,-24568
   40674:	0040e640 	call	40e64 <nan>
   40678:	d8800615 	stw	r2,24(sp)
   4067c:	d8c00715 	stw	r3,28(sp)
   40680:	d8800817 	ldw	r2,32(sp)
   40684:	10000d1e 	bne	r2,zero,406bc <log+0x18c>
   40688:	d8800617 	ldw	r2,24(sp)
   4068c:	d8c00717 	ldw	r3,28(sp)
   40690:	003fc406 	br	405a4 <__alt_data_end+0xfffd94a4>
   40694:	00800044 	movi	r2,1
   40698:	d8800015 	stw	r2,0(sp)
   4069c:	d809883a 	mov	r4,sp
   406a0:	0040e5c0 	call	40e5c <matherr>
   406a4:	103ff11e 	bne	r2,zero,4066c <__alt_data_end+0xfffd956c>
   406a8:	003fed06 	br	40660 <__alt_data_end+0xfffd9560>
   406ac:	00800084 	movi	r2,2
   406b0:	d8800015 	stw	r2,0(sp)
   406b4:	80bfdd26 	beq	r16,r2,4062c <__alt_data_end+0xfffd952c>
   406b8:	003fd906 	br	40620 <__alt_data_end+0xfffd9520>
   406bc:	0044afc0 	call	44afc <__errno>
   406c0:	d8c00817 	ldw	r3,32(sp)
   406c4:	10c00015 	stw	r3,0(r2)
   406c8:	003fef06 	br	40688 <__alt_data_end+0xfffd9588>

000406cc <__ieee754_log>:
   406cc:	defff204 	addi	sp,sp,-56
   406d0:	01800434 	movhi	r6,16
   406d4:	dfc00d15 	stw	ra,52(sp)
   406d8:	df000c15 	stw	fp,48(sp)
   406dc:	ddc00b15 	stw	r23,44(sp)
   406e0:	dd800a15 	stw	r22,40(sp)
   406e4:	dd400915 	stw	r21,36(sp)
   406e8:	dd000815 	stw	r20,32(sp)
   406ec:	dcc00715 	stw	r19,28(sp)
   406f0:	dc800615 	stw	r18,24(sp)
   406f4:	dc400515 	stw	r17,20(sp)
   406f8:	dc000415 	stw	r16,16(sp)
   406fc:	31bfffc4 	addi	r6,r6,-1
   40700:	280f883a 	mov	r7,r5
   40704:	2005883a 	mov	r2,r4
   40708:	31404616 	blt	r6,r5,40824 <__ieee754_log+0x158>
   4070c:	00e00034 	movhi	r3,32768
   40710:	18ffffc4 	addi	r3,r3,-1
   40714:	28c6703a 	and	r3,r5,r3
   40718:	1906b03a 	or	r3,r3,r4
   4071c:	1800f426 	beq	r3,zero,40af0 <__ieee754_log+0x424>
   40720:	28017816 	blt	r5,zero,40d04 <__ieee754_log+0x638>
   40724:	01d0d434 	movhi	r7,17232
   40728:	000d883a 	mov	r6,zero
   4072c:	004353c0 	call	4353c <__muldf3>
   40730:	015ffc34 	movhi	r5,32752
   40734:	297fffc4 	addi	r5,r5,-1
   40738:	180f883a 	mov	r7,r3
   4073c:	013ff284 	movi	r4,-54
   40740:	28c03d16 	blt	r5,r3,40838 <__ieee754_log+0x16c>
   40744:	04c00434 	movhi	r19,16
   40748:	9cffffc4 	addi	r19,r19,-1
   4074c:	01400274 	movhi	r5,9
   40750:	1cf8703a 	and	fp,r3,r19
   40754:	2957d904 	addi	r5,r5,24420
   40758:	1821d53a 	srai	r16,r3,20
   4075c:	e14b883a 	add	r5,fp,r5
   40760:	2940042c 	andhi	r5,r5,16
   40764:	2807d53a 	srai	r3,r5,20
   40768:	843f0044 	addi	r16,r16,-1023
   4076c:	294ffc3c 	xorhi	r5,r5,16368
   40770:	8121883a 	add	r16,r16,r4
   40774:	000d883a 	mov	r6,zero
   40778:	01cffc34 	movhi	r7,16368
   4077c:	1009883a 	mov	r4,r2
   40780:	2f0ab03a 	or	r5,r5,fp
   40784:	1c21883a 	add	r16,r3,r16
   40788:	0043c540 	call	43c54 <__subdf3>
   4078c:	1025883a 	mov	r18,r2
   40790:	e0800084 	addi	r2,fp,2
   40794:	14e6703a 	and	r19,r2,r19
   40798:	00800084 	movi	r2,2
   4079c:	1823883a 	mov	r17,r3
   407a0:	000d883a 	mov	r6,zero
   407a4:	14c03416 	blt	r2,r19,40878 <__ieee754_log+0x1ac>
   407a8:	000f883a 	mov	r7,zero
   407ac:	9009883a 	mov	r4,r18
   407b0:	180b883a 	mov	r5,r3
   407b4:	00433d80 	call	433d8 <__eqdf2>
   407b8:	1000d31e 	bne	r2,zero,40b08 <__ieee754_log+0x43c>
   407bc:	80015926 	beq	r16,zero,40d24 <__ieee754_log+0x658>
   407c0:	8009883a 	mov	r4,r16
   407c4:	00445500 	call	44550 <__floatsidf>
   407c8:	01cff9b4 	movhi	r7,16358
   407cc:	39cb9084 	addi	r7,r7,11842
   407d0:	01bfb834 	movhi	r6,65248
   407d4:	1009883a 	mov	r4,r2
   407d8:	180b883a 	mov	r5,r3
   407dc:	1023883a 	mov	r17,r2
   407e0:	1821883a 	mov	r16,r3
   407e4:	004353c0 	call	4353c <__muldf3>
   407e8:	018d5e74 	movhi	r6,13689
   407ec:	01cf7ab4 	movhi	r7,15850
   407f0:	8809883a 	mov	r4,r17
   407f4:	800b883a 	mov	r5,r16
   407f8:	318f1d84 	addi	r6,r6,15478
   407fc:	39ce7bc4 	addi	r7,r7,14831
   40800:	1027883a 	mov	r19,r2
   40804:	1825883a 	mov	r18,r3
   40808:	004353c0 	call	4353c <__muldf3>
   4080c:	100d883a 	mov	r6,r2
   40810:	180f883a 	mov	r7,r3
   40814:	9809883a 	mov	r4,r19
   40818:	900b883a 	mov	r5,r18
   4081c:	00422440 	call	42244 <__adddf3>
   40820:	00000906 	br	40848 <__ieee754_log+0x17c>
   40824:	2807883a 	mov	r3,r5
   40828:	015ffc34 	movhi	r5,32752
   4082c:	297fffc4 	addi	r5,r5,-1
   40830:	0009883a 	mov	r4,zero
   40834:	28ffc30e 	bge	r5,r3,40744 <__alt_data_end+0xfffd9644>
   40838:	100d883a 	mov	r6,r2
   4083c:	1009883a 	mov	r4,r2
   40840:	380b883a 	mov	r5,r7
   40844:	00422440 	call	42244 <__adddf3>
   40848:	dfc00d17 	ldw	ra,52(sp)
   4084c:	df000c17 	ldw	fp,48(sp)
   40850:	ddc00b17 	ldw	r23,44(sp)
   40854:	dd800a17 	ldw	r22,40(sp)
   40858:	dd400917 	ldw	r21,36(sp)
   4085c:	dd000817 	ldw	r20,32(sp)
   40860:	dcc00717 	ldw	r19,28(sp)
   40864:	dc800617 	ldw	r18,24(sp)
   40868:	dc400517 	ldw	r17,20(sp)
   4086c:	dc000417 	ldw	r16,16(sp)
   40870:	dec00e04 	addi	sp,sp,56
   40874:	f800283a 	ret
   40878:	01d00034 	movhi	r7,16384
   4087c:	9009883a 	mov	r4,r18
   40880:	180b883a 	mov	r5,r3
   40884:	00422440 	call	42244 <__adddf3>
   40888:	100d883a 	mov	r6,r2
   4088c:	180f883a 	mov	r7,r3
   40890:	880b883a 	mov	r5,r17
   40894:	9009883a 	mov	r4,r18
   40898:	0042af00 	call	42af0 <__divdf3>
   4089c:	8009883a 	mov	r4,r16
   408a0:	102d883a 	mov	r22,r2
   408a4:	182b883a 	mov	r21,r3
   408a8:	00445500 	call	44550 <__floatsidf>
   408ac:	b00d883a 	mov	r6,r22
   408b0:	a80f883a 	mov	r7,r21
   408b4:	b009883a 	mov	r4,r22
   408b8:	a80b883a 	mov	r5,r21
   408bc:	d8800015 	stw	r2,0(sp)
   408c0:	d8c00115 	stw	r3,4(sp)
   408c4:	004353c0 	call	4353c <__muldf3>
   408c8:	027ffeb4 	movhi	r9,65530
   408cc:	4a7ae184 	addi	r9,r9,-5242
   408d0:	100d883a 	mov	r6,r2
   408d4:	180f883a 	mov	r7,r3
   408d8:	1009883a 	mov	r4,r2
   408dc:	180b883a 	mov	r5,r3
   408e0:	e26f883a 	add	r23,fp,r9
   408e4:	d8c00315 	stw	r3,12(sp)
   408e8:	d8800215 	stw	r2,8(sp)
   408ec:	004353c0 	call	4353c <__muldf3>
   408f0:	01b7cfb4 	movhi	r6,57150
   408f4:	01cff0f4 	movhi	r7,16323
   408f8:	31949104 	addi	r6,r6,21060
   408fc:	39fc4484 	addi	r7,r7,-3822
   40900:	1009883a 	mov	r4,r2
   40904:	180b883a 	mov	r5,r3
   40908:	1029883a 	mov	r20,r2
   4090c:	1827883a 	mov	r19,r3
   40910:	004353c0 	call	4353c <__muldf3>
   40914:	01a5b2f4 	movhi	r6,38603
   40918:	01cff1f4 	movhi	r7,16327
   4091c:	3180f784 	addi	r6,r6,990
   40920:	39d19904 	addi	r7,r7,18020
   40924:	1009883a 	mov	r4,r2
   40928:	180b883a 	mov	r5,r3
   4092c:	00422440 	call	42244 <__adddf3>
   40930:	a00d883a 	mov	r6,r20
   40934:	980f883a 	mov	r7,r19
   40938:	1009883a 	mov	r4,r2
   4093c:	180b883a 	mov	r5,r3
   40940:	004353c0 	call	4353c <__muldf3>
   40944:	01a508f4 	movhi	r6,37923
   40948:	01cff4b4 	movhi	r7,16338
   4094c:	31a4d644 	addi	r6,r6,-27815
   40950:	39d24904 	addi	r7,r7,18724
   40954:	1009883a 	mov	r4,r2
   40958:	180b883a 	mov	r5,r3
   4095c:	00422440 	call	42244 <__adddf3>
   40960:	a00d883a 	mov	r6,r20
   40964:	980f883a 	mov	r7,r19
   40968:	1009883a 	mov	r4,r2
   4096c:	180b883a 	mov	r5,r3
   40970:	004353c0 	call	4353c <__muldf3>
   40974:	01955574 	movhi	r6,21845
   40978:	01cff974 	movhi	r7,16357
   4097c:	319564c4 	addi	r6,r6,21907
   40980:	39d55544 	addi	r7,r7,21845
   40984:	1009883a 	mov	r4,r2
   40988:	180b883a 	mov	r5,r3
   4098c:	00422440 	call	42244 <__adddf3>
   40990:	dac00217 	ldw	r11,8(sp)
   40994:	da800317 	ldw	r10,12(sp)
   40998:	1009883a 	mov	r4,r2
   4099c:	580d883a 	mov	r6,r11
   409a0:	500f883a 	mov	r7,r10
   409a4:	180b883a 	mov	r5,r3
   409a8:	004353c0 	call	4353c <__muldf3>
   409ac:	01b41e74 	movhi	r6,53369
   409b0:	01cff134 	movhi	r7,16324
   409b4:	a009883a 	mov	r4,r20
   409b8:	980b883a 	mov	r5,r19
   409bc:	31b1a7c4 	addi	r6,r6,-14689
   409c0:	39e68244 	addi	r7,r7,-26103
   409c4:	d8c00315 	stw	r3,12(sp)
   409c8:	d8800215 	stw	r2,8(sp)
   409cc:	004353c0 	call	4353c <__muldf3>
   409d0:	018763b4 	movhi	r6,7566
   409d4:	01cff334 	movhi	r7,16332
   409d8:	319e2bc4 	addi	r6,r6,30895
   409dc:	39dc7144 	addi	r7,r7,29125
   409e0:	1009883a 	mov	r4,r2
   409e4:	180b883a 	mov	r5,r3
   409e8:	00422440 	call	42244 <__adddf3>
   409ec:	a00d883a 	mov	r6,r20
   409f0:	980f883a 	mov	r7,r19
   409f4:	1009883a 	mov	r4,r2
   409f8:	180b883a 	mov	r5,r3
   409fc:	004353c0 	call	4353c <__muldf3>
   40a00:	01a66634 	movhi	r6,39320
   40a04:	01cff6b4 	movhi	r7,16346
   40a08:	31be8104 	addi	r6,r6,-1532
   40a0c:	39e66644 	addi	r7,r7,-26215
   40a10:	1009883a 	mov	r4,r2
   40a14:	180b883a 	mov	r5,r3
   40a18:	00422440 	call	42244 <__adddf3>
   40a1c:	a00d883a 	mov	r6,r20
   40a20:	980f883a 	mov	r7,r19
   40a24:	1009883a 	mov	r4,r2
   40a28:	180b883a 	mov	r5,r3
   40a2c:	004353c0 	call	4353c <__muldf3>
   40a30:	dac00217 	ldw	r11,8(sp)
   40a34:	da800317 	ldw	r10,12(sp)
   40a38:	100d883a 	mov	r6,r2
   40a3c:	180f883a 	mov	r7,r3
   40a40:	5809883a 	mov	r4,r11
   40a44:	500b883a 	mov	r5,r10
   40a48:	00422440 	call	42244 <__adddf3>
   40a4c:	1827883a 	mov	r19,r3
   40a50:	00c001f4 	movhi	r3,7
   40a54:	18ee1444 	addi	r3,r3,-18351
   40a58:	1f07c83a 	sub	r3,r3,fp
   40a5c:	1dd2b03a 	or	r9,r3,r23
   40a60:	1029883a 	mov	r20,r2
   40a64:	0240490e 	bge	zero,r9,40b8c <__ieee754_log+0x4c0>
   40a68:	000d883a 	mov	r6,zero
   40a6c:	01cff834 	movhi	r7,16352
   40a70:	9009883a 	mov	r4,r18
   40a74:	880b883a 	mov	r5,r17
   40a78:	004353c0 	call	4353c <__muldf3>
   40a7c:	900d883a 	mov	r6,r18
   40a80:	880f883a 	mov	r7,r17
   40a84:	1009883a 	mov	r4,r2
   40a88:	180b883a 	mov	r5,r3
   40a8c:	004353c0 	call	4353c <__muldf3>
   40a90:	1039883a 	mov	fp,r2
   40a94:	182f883a 	mov	r23,r3
   40a98:	8000691e 	bne	r16,zero,40c40 <__ieee754_log+0x574>
   40a9c:	100d883a 	mov	r6,r2
   40aa0:	180f883a 	mov	r7,r3
   40aa4:	a009883a 	mov	r4,r20
   40aa8:	980b883a 	mov	r5,r19
   40aac:	00422440 	call	42244 <__adddf3>
   40ab0:	b00d883a 	mov	r6,r22
   40ab4:	a80f883a 	mov	r7,r21
   40ab8:	1009883a 	mov	r4,r2
   40abc:	180b883a 	mov	r5,r3
   40ac0:	004353c0 	call	4353c <__muldf3>
   40ac4:	100d883a 	mov	r6,r2
   40ac8:	180f883a 	mov	r7,r3
   40acc:	e009883a 	mov	r4,fp
   40ad0:	b80b883a 	mov	r5,r23
   40ad4:	0043c540 	call	43c54 <__subdf3>
   40ad8:	100d883a 	mov	r6,r2
   40adc:	180f883a 	mov	r7,r3
   40ae0:	9009883a 	mov	r4,r18
   40ae4:	880b883a 	mov	r5,r17
   40ae8:	0043c540 	call	43c54 <__subdf3>
   40aec:	003f5606 	br	40848 <__alt_data_end+0xfffd9748>
   40af0:	000d883a 	mov	r6,zero
   40af4:	000f883a 	mov	r7,zero
   40af8:	0009883a 	mov	r4,zero
   40afc:	0170d434 	movhi	r5,50000
   40b00:	0042af00 	call	42af0 <__divdf3>
   40b04:	003f5006 	br	40848 <__alt_data_end+0xfffd9748>
   40b08:	01955574 	movhi	r6,21845
   40b0c:	01cff574 	movhi	r7,16341
   40b10:	31955544 	addi	r6,r6,21845
   40b14:	39d55544 	addi	r7,r7,21845
   40b18:	9009883a 	mov	r4,r18
   40b1c:	880b883a 	mov	r5,r17
   40b20:	004353c0 	call	4353c <__muldf3>
   40b24:	100d883a 	mov	r6,r2
   40b28:	180f883a 	mov	r7,r3
   40b2c:	0009883a 	mov	r4,zero
   40b30:	014ff834 	movhi	r5,16352
   40b34:	0043c540 	call	43c54 <__subdf3>
   40b38:	900d883a 	mov	r6,r18
   40b3c:	880f883a 	mov	r7,r17
   40b40:	9009883a 	mov	r4,r18
   40b44:	880b883a 	mov	r5,r17
   40b48:	1029883a 	mov	r20,r2
   40b4c:	1827883a 	mov	r19,r3
   40b50:	004353c0 	call	4353c <__muldf3>
   40b54:	a009883a 	mov	r4,r20
   40b58:	980b883a 	mov	r5,r19
   40b5c:	100d883a 	mov	r6,r2
   40b60:	180f883a 	mov	r7,r3
   40b64:	004353c0 	call	4353c <__muldf3>
   40b68:	1029883a 	mov	r20,r2
   40b6c:	1827883a 	mov	r19,r3
   40b70:	80006f1e 	bne	r16,zero,40d30 <__ieee754_log+0x664>
   40b74:	100d883a 	mov	r6,r2
   40b78:	180f883a 	mov	r7,r3
   40b7c:	9009883a 	mov	r4,r18
   40b80:	880b883a 	mov	r5,r17
   40b84:	0043c540 	call	43c54 <__subdf3>
   40b88:	003f2f06 	br	40848 <__alt_data_end+0xfffd9748>
   40b8c:	80008b26 	beq	r16,zero,40dbc <__ieee754_log+0x6f0>
   40b90:	d9000017 	ldw	r4,0(sp)
   40b94:	d9400117 	ldw	r5,4(sp)
   40b98:	01cff9b4 	movhi	r7,16358
   40b9c:	39cb9084 	addi	r7,r7,11842
   40ba0:	01bfb834 	movhi	r6,65248
   40ba4:	004353c0 	call	4353c <__muldf3>
   40ba8:	a00d883a 	mov	r6,r20
   40bac:	980f883a 	mov	r7,r19
   40bb0:	9009883a 	mov	r4,r18
   40bb4:	880b883a 	mov	r5,r17
   40bb8:	1821883a 	mov	r16,r3
   40bbc:	d8800215 	stw	r2,8(sp)
   40bc0:	0043c540 	call	43c54 <__subdf3>
   40bc4:	b00d883a 	mov	r6,r22
   40bc8:	a80f883a 	mov	r7,r21
   40bcc:	1009883a 	mov	r4,r2
   40bd0:	180b883a 	mov	r5,r3
   40bd4:	004353c0 	call	4353c <__muldf3>
   40bd8:	d9000017 	ldw	r4,0(sp)
   40bdc:	d9400117 	ldw	r5,4(sp)
   40be0:	018d5e74 	movhi	r6,13689
   40be4:	01cf7ab4 	movhi	r7,15850
   40be8:	318f1d84 	addi	r6,r6,15478
   40bec:	39ce7bc4 	addi	r7,r7,14831
   40bf0:	1029883a 	mov	r20,r2
   40bf4:	1827883a 	mov	r19,r3
   40bf8:	004353c0 	call	4353c <__muldf3>
   40bfc:	a009883a 	mov	r4,r20
   40c00:	980b883a 	mov	r5,r19
   40c04:	100d883a 	mov	r6,r2
   40c08:	180f883a 	mov	r7,r3
   40c0c:	0043c540 	call	43c54 <__subdf3>
   40c10:	900d883a 	mov	r6,r18
   40c14:	880f883a 	mov	r7,r17
   40c18:	1009883a 	mov	r4,r2
   40c1c:	180b883a 	mov	r5,r3
   40c20:	0043c540 	call	43c54 <__subdf3>
   40c24:	da000217 	ldw	r8,8(sp)
   40c28:	100d883a 	mov	r6,r2
   40c2c:	180f883a 	mov	r7,r3
   40c30:	4009883a 	mov	r4,r8
   40c34:	800b883a 	mov	r5,r16
   40c38:	0043c540 	call	43c54 <__subdf3>
   40c3c:	003f0206 	br	40848 <__alt_data_end+0xfffd9748>
   40c40:	d9000017 	ldw	r4,0(sp)
   40c44:	d9400117 	ldw	r5,4(sp)
   40c48:	01cff9b4 	movhi	r7,16358
   40c4c:	39cb9084 	addi	r7,r7,11842
   40c50:	01bfb834 	movhi	r6,65248
   40c54:	004353c0 	call	4353c <__muldf3>
   40c58:	e00d883a 	mov	r6,fp
   40c5c:	b80f883a 	mov	r7,r23
   40c60:	a009883a 	mov	r4,r20
   40c64:	980b883a 	mov	r5,r19
   40c68:	1821883a 	mov	r16,r3
   40c6c:	d8800315 	stw	r2,12(sp)
   40c70:	00422440 	call	42244 <__adddf3>
   40c74:	b00d883a 	mov	r6,r22
   40c78:	a80f883a 	mov	r7,r21
   40c7c:	1009883a 	mov	r4,r2
   40c80:	180b883a 	mov	r5,r3
   40c84:	004353c0 	call	4353c <__muldf3>
   40c88:	d9000017 	ldw	r4,0(sp)
   40c8c:	d9400117 	ldw	r5,4(sp)
   40c90:	018d5e74 	movhi	r6,13689
   40c94:	01cf7ab4 	movhi	r7,15850
   40c98:	318f1d84 	addi	r6,r6,15478
   40c9c:	39ce7bc4 	addi	r7,r7,14831
   40ca0:	1029883a 	mov	r20,r2
   40ca4:	1827883a 	mov	r19,r3
   40ca8:	004353c0 	call	4353c <__muldf3>
   40cac:	a009883a 	mov	r4,r20
   40cb0:	980b883a 	mov	r5,r19
   40cb4:	100d883a 	mov	r6,r2
   40cb8:	180f883a 	mov	r7,r3
   40cbc:	00422440 	call	42244 <__adddf3>
   40cc0:	e009883a 	mov	r4,fp
   40cc4:	b80b883a 	mov	r5,r23
   40cc8:	100d883a 	mov	r6,r2
   40ccc:	180f883a 	mov	r7,r3
   40cd0:	0043c540 	call	43c54 <__subdf3>
   40cd4:	900d883a 	mov	r6,r18
   40cd8:	880f883a 	mov	r7,r17
   40cdc:	1009883a 	mov	r4,r2
   40ce0:	180b883a 	mov	r5,r3
   40ce4:	0043c540 	call	43c54 <__subdf3>
   40ce8:	da800317 	ldw	r10,12(sp)
   40cec:	100d883a 	mov	r6,r2
   40cf0:	180f883a 	mov	r7,r3
   40cf4:	5009883a 	mov	r4,r10
   40cf8:	800b883a 	mov	r5,r16
   40cfc:	0043c540 	call	43c54 <__subdf3>
   40d00:	003ed106 	br	40848 <__alt_data_end+0xfffd9748>
   40d04:	200d883a 	mov	r6,r4
   40d08:	0043c540 	call	43c54 <__subdf3>
   40d0c:	000d883a 	mov	r6,zero
   40d10:	000f883a 	mov	r7,zero
   40d14:	1009883a 	mov	r4,r2
   40d18:	180b883a 	mov	r5,r3
   40d1c:	0042af00 	call	42af0 <__divdf3>
   40d20:	003ec906 	br	40848 <__alt_data_end+0xfffd9748>
   40d24:	0005883a 	mov	r2,zero
   40d28:	0007883a 	mov	r3,zero
   40d2c:	003ec606 	br	40848 <__alt_data_end+0xfffd9748>
   40d30:	8009883a 	mov	r4,r16
   40d34:	00445500 	call	44550 <__floatsidf>
   40d38:	01cff9b4 	movhi	r7,16358
   40d3c:	39cb9084 	addi	r7,r7,11842
   40d40:	01bfb834 	movhi	r6,65248
   40d44:	1009883a 	mov	r4,r2
   40d48:	180b883a 	mov	r5,r3
   40d4c:	102b883a 	mov	r21,r2
   40d50:	1821883a 	mov	r16,r3
   40d54:	004353c0 	call	4353c <__muldf3>
   40d58:	018d5e74 	movhi	r6,13689
   40d5c:	01cf7ab4 	movhi	r7,15850
   40d60:	a809883a 	mov	r4,r21
   40d64:	800b883a 	mov	r5,r16
   40d68:	318f1d84 	addi	r6,r6,15478
   40d6c:	39ce7bc4 	addi	r7,r7,14831
   40d70:	102f883a 	mov	r23,r2
   40d74:	182d883a 	mov	r22,r3
   40d78:	004353c0 	call	4353c <__muldf3>
   40d7c:	a009883a 	mov	r4,r20
   40d80:	980b883a 	mov	r5,r19
   40d84:	100d883a 	mov	r6,r2
   40d88:	180f883a 	mov	r7,r3
   40d8c:	0043c540 	call	43c54 <__subdf3>
   40d90:	900d883a 	mov	r6,r18
   40d94:	880f883a 	mov	r7,r17
   40d98:	1009883a 	mov	r4,r2
   40d9c:	180b883a 	mov	r5,r3
   40da0:	0043c540 	call	43c54 <__subdf3>
   40da4:	100d883a 	mov	r6,r2
   40da8:	180f883a 	mov	r7,r3
   40dac:	b809883a 	mov	r4,r23
   40db0:	b00b883a 	mov	r5,r22
   40db4:	0043c540 	call	43c54 <__subdf3>
   40db8:	003ea306 	br	40848 <__alt_data_end+0xfffd9748>
   40dbc:	a00d883a 	mov	r6,r20
   40dc0:	980f883a 	mov	r7,r19
   40dc4:	9009883a 	mov	r4,r18
   40dc8:	880b883a 	mov	r5,r17
   40dcc:	0043c540 	call	43c54 <__subdf3>
   40dd0:	b00d883a 	mov	r6,r22
   40dd4:	a80f883a 	mov	r7,r21
   40dd8:	1009883a 	mov	r4,r2
   40ddc:	180b883a 	mov	r5,r3
   40de0:	004353c0 	call	4353c <__muldf3>
   40de4:	003f3c06 	br	40ad8 <__alt_data_end+0xfffd99d8>

00040de8 <__fpclassifyd>:
   40de8:	00a00034 	movhi	r2,32768
   40dec:	10bfffc4 	addi	r2,r2,-1
   40df0:	2884703a 	and	r2,r5,r2
   40df4:	10000726 	beq	r2,zero,40e14 <__fpclassifyd+0x2c>
   40df8:	00fffc34 	movhi	r3,65520
   40dfc:	019ff834 	movhi	r6,32736
   40e00:	28c7883a 	add	r3,r5,r3
   40e04:	31bfffc4 	addi	r6,r6,-1
   40e08:	30c00536 	bltu	r6,r3,40e20 <__fpclassifyd+0x38>
   40e0c:	00800104 	movi	r2,4
   40e10:	f800283a 	ret
   40e14:	2000021e 	bne	r4,zero,40e20 <__fpclassifyd+0x38>
   40e18:	00800084 	movi	r2,2
   40e1c:	f800283a 	ret
   40e20:	00dffc34 	movhi	r3,32752
   40e24:	019ff834 	movhi	r6,32736
   40e28:	28cb883a 	add	r5,r5,r3
   40e2c:	31bfffc4 	addi	r6,r6,-1
   40e30:	317ff62e 	bgeu	r6,r5,40e0c <__alt_data_end+0xfffd9d0c>
   40e34:	01400434 	movhi	r5,16
   40e38:	297fffc4 	addi	r5,r5,-1
   40e3c:	28800236 	bltu	r5,r2,40e48 <__fpclassifyd+0x60>
   40e40:	008000c4 	movi	r2,3
   40e44:	f800283a 	ret
   40e48:	10c00226 	beq	r2,r3,40e54 <__fpclassifyd+0x6c>
   40e4c:	0005883a 	mov	r2,zero
   40e50:	f800283a 	ret
   40e54:	2005003a 	cmpeq	r2,r4,zero
   40e58:	f800283a 	ret

00040e5c <matherr>:
   40e5c:	0005883a 	mov	r2,zero
   40e60:	f800283a 	ret

00040e64 <nan>:
   40e64:	0005883a 	mov	r2,zero
   40e68:	00dffe34 	movhi	r3,32760
   40e6c:	f800283a 	ret

00040e70 <__addsf3>:
   40e70:	defffc04 	addi	sp,sp,-16
   40e74:	2004d7fa 	srli	r2,r4,31
   40e78:	280cd5fa 	srli	r6,r5,23
   40e7c:	dc000015 	stw	r16,0(sp)
   40e80:	00c02034 	movhi	r3,128
   40e84:	2020d5fa 	srli	r16,r4,23
   40e88:	280ed7fa 	srli	r7,r5,31
   40e8c:	18ffffc4 	addi	r3,r3,-1
   40e90:	dc400115 	stw	r17,4(sp)
   40e94:	1908703a 	and	r4,r3,r4
   40e98:	194a703a 	and	r5,r3,r5
   40e9c:	dfc00315 	stw	ra,12(sp)
   40ea0:	dc800215 	stw	r18,8(sp)
   40ea4:	14403fcc 	andi	r17,r2,255
   40ea8:	84003fcc 	andi	r16,r16,255
   40eac:	200890fa 	slli	r4,r4,3
   40eb0:	31803fcc 	andi	r6,r6,255
   40eb4:	280a90fa 	slli	r5,r5,3
   40eb8:	89c05026 	beq	r17,r7,40ffc <__addsf3+0x18c>
   40ebc:	8185c83a 	sub	r2,r16,r6
   40ec0:	00807a0e 	bge	zero,r2,410ac <__addsf3+0x23c>
   40ec4:	30001e1e 	bne	r6,zero,40f40 <__addsf3+0xd0>
   40ec8:	28006d1e 	bne	r5,zero,41080 <__addsf3+0x210>
   40ecc:	208001cc 	andi	r2,r4,7
   40ed0:	10000426 	beq	r2,zero,40ee4 <__addsf3+0x74>
   40ed4:	208003cc 	andi	r2,r4,15
   40ed8:	00c00104 	movi	r3,4
   40edc:	10c00126 	beq	r2,r3,40ee4 <__addsf3+0x74>
   40ee0:	20c9883a 	add	r4,r4,r3
   40ee4:	2081002c 	andhi	r2,r4,1024
   40ee8:	10003926 	beq	r2,zero,40fd0 <__addsf3+0x160>
   40eec:	84000044 	addi	r16,r16,1
   40ef0:	00803fc4 	movi	r2,255
   40ef4:	80807826 	beq	r16,r2,410d8 <__addsf3+0x268>
   40ef8:	200891ba 	slli	r4,r4,6
   40efc:	8805883a 	mov	r2,r17
   40f00:	2008d27a 	srli	r4,r4,9
   40f04:	84003fcc 	andi	r16,r16,255
   40f08:	800695fa 	slli	r3,r16,23
   40f0c:	10803fcc 	andi	r2,r2,255
   40f10:	04002034 	movhi	r16,128
   40f14:	843fffc4 	addi	r16,r16,-1
   40f18:	100497fa 	slli	r2,r2,31
   40f1c:	2408703a 	and	r4,r4,r16
   40f20:	20e0b03a 	or	r16,r4,r3
   40f24:	8084b03a 	or	r2,r16,r2
   40f28:	dfc00317 	ldw	ra,12(sp)
   40f2c:	dc800217 	ldw	r18,8(sp)
   40f30:	dc400117 	ldw	r17,4(sp)
   40f34:	dc000017 	ldw	r16,0(sp)
   40f38:	dec00404 	addi	sp,sp,16
   40f3c:	f800283a 	ret
   40f40:	00c03fc4 	movi	r3,255
   40f44:	80ffe126 	beq	r16,r3,40ecc <__alt_data_end+0xfffd9dcc>
   40f48:	29410034 	orhi	r5,r5,1024
   40f4c:	00c006c4 	movi	r3,27
   40f50:	18807516 	blt	r3,r2,41128 <__addsf3+0x2b8>
   40f54:	00c00804 	movi	r3,32
   40f58:	1887c83a 	sub	r3,r3,r2
   40f5c:	28c6983a 	sll	r3,r5,r3
   40f60:	288ad83a 	srl	r5,r5,r2
   40f64:	1804c03a 	cmpne	r2,r3,zero
   40f68:	288ab03a 	or	r5,r5,r2
   40f6c:	2149c83a 	sub	r4,r4,r5
   40f70:	2081002c 	andhi	r2,r4,1024
   40f74:	10001426 	beq	r2,zero,40fc8 <__addsf3+0x158>
   40f78:	04810034 	movhi	r18,1024
   40f7c:	94bfffc4 	addi	r18,r18,-1
   40f80:	24a4703a 	and	r18,r4,r18
   40f84:	9009883a 	mov	r4,r18
   40f88:	00448e40 	call	448e4 <__clzsi2>
   40f8c:	10bffec4 	addi	r2,r2,-5
   40f90:	90a4983a 	sll	r18,r18,r2
   40f94:	14005416 	blt	r2,r16,410e8 <__addsf3+0x278>
   40f98:	1405c83a 	sub	r2,r2,r16
   40f9c:	11000044 	addi	r4,r2,1
   40fa0:	00800804 	movi	r2,32
   40fa4:	1105c83a 	sub	r2,r2,r4
   40fa8:	9084983a 	sll	r2,r18,r2
   40fac:	9124d83a 	srl	r18,r18,r4
   40fb0:	0021883a 	mov	r16,zero
   40fb4:	1008c03a 	cmpne	r4,r2,zero
   40fb8:	9108b03a 	or	r4,r18,r4
   40fbc:	003fc306 	br	40ecc <__alt_data_end+0xfffd9dcc>
   40fc0:	1000db26 	beq	r2,zero,41330 <__addsf3+0x4c0>
   40fc4:	1009883a 	mov	r4,r2
   40fc8:	208001cc 	andi	r2,r4,7
   40fcc:	103fc11e 	bne	r2,zero,40ed4 <__alt_data_end+0xfffd9dd4>
   40fd0:	2006d0fa 	srli	r3,r4,3
   40fd4:	01003fc4 	movi	r4,255
   40fd8:	8805883a 	mov	r2,r17
   40fdc:	8100241e 	bne	r16,r4,41070 <__addsf3+0x200>
   40fe0:	18006e26 	beq	r3,zero,4119c <__addsf3+0x32c>
   40fe4:	19001034 	orhi	r4,r3,64
   40fe8:	00c02034 	movhi	r3,128
   40fec:	18ffffc4 	addi	r3,r3,-1
   40ff0:	043fffc4 	movi	r16,-1
   40ff4:	20c8703a 	and	r4,r4,r3
   40ff8:	003fc206 	br	40f04 <__alt_data_end+0xfffd9e04>
   40ffc:	8187c83a 	sub	r3,r16,r6
   41000:	00c03e0e 	bge	zero,r3,410fc <__addsf3+0x28c>
   41004:	30002326 	beq	r6,zero,41094 <__addsf3+0x224>
   41008:	01803fc4 	movi	r6,255
   4100c:	81bfaf26 	beq	r16,r6,40ecc <__alt_data_end+0xfffd9dcc>
   41010:	29410034 	orhi	r5,r5,1024
   41014:	018006c4 	movi	r6,27
   41018:	30c07416 	blt	r6,r3,411ec <__addsf3+0x37c>
   4101c:	01800804 	movi	r6,32
   41020:	30cdc83a 	sub	r6,r6,r3
   41024:	298c983a 	sll	r6,r5,r6
   41028:	28cad83a 	srl	r5,r5,r3
   4102c:	3006c03a 	cmpne	r3,r6,zero
   41030:	28cab03a 	or	r5,r5,r3
   41034:	2149883a 	add	r4,r4,r5
   41038:	20c1002c 	andhi	r3,r4,1024
   4103c:	183fe226 	beq	r3,zero,40fc8 <__alt_data_end+0xfffd9ec8>
   41040:	84000044 	addi	r16,r16,1
   41044:	00c03fc4 	movi	r3,255
   41048:	80c05426 	beq	r16,r3,4119c <__addsf3+0x32c>
   4104c:	00bf0034 	movhi	r2,64512
   41050:	10bfffc4 	addi	r2,r2,-1
   41054:	20c0004c 	andi	r3,r4,1
   41058:	2088703a 	and	r4,r4,r2
   4105c:	2008d07a 	srli	r4,r4,1
   41060:	20c8b03a 	or	r4,r4,r3
   41064:	003f9906 	br	40ecc <__alt_data_end+0xfffd9dcc>
   41068:	0007883a 	mov	r3,zero
   4106c:	0005883a 	mov	r2,zero
   41070:	01002034 	movhi	r4,128
   41074:	213fffc4 	addi	r4,r4,-1
   41078:	1908703a 	and	r4,r3,r4
   4107c:	003fa106 	br	40f04 <__alt_data_end+0xfffd9e04>
   41080:	10bfffc4 	addi	r2,r2,-1
   41084:	103fb926 	beq	r2,zero,40f6c <__alt_data_end+0xfffd9e6c>
   41088:	00c03fc4 	movi	r3,255
   4108c:	80ffaf1e 	bne	r16,r3,40f4c <__alt_data_end+0xfffd9e4c>
   41090:	003f8e06 	br	40ecc <__alt_data_end+0xfffd9dcc>
   41094:	283f8d26 	beq	r5,zero,40ecc <__alt_data_end+0xfffd9dcc>
   41098:	18ffffc4 	addi	r3,r3,-1
   4109c:	183fe526 	beq	r3,zero,41034 <__alt_data_end+0xfffd9f34>
   410a0:	01803fc4 	movi	r6,255
   410a4:	81bfdb1e 	bne	r16,r6,41014 <__alt_data_end+0xfffd9f14>
   410a8:	003f8806 	br	40ecc <__alt_data_end+0xfffd9dcc>
   410ac:	1000201e 	bne	r2,zero,41130 <__addsf3+0x2c0>
   410b0:	80800044 	addi	r2,r16,1
   410b4:	10803fcc 	andi	r2,r2,255
   410b8:	01800044 	movi	r6,1
   410bc:	3080450e 	bge	r6,r2,411d4 <__addsf3+0x364>
   410c0:	2165c83a 	sub	r18,r4,r5
   410c4:	90c1002c 	andhi	r3,r18,1024
   410c8:	18002b26 	beq	r3,zero,41178 <__addsf3+0x308>
   410cc:	2925c83a 	sub	r18,r5,r4
   410d0:	3823883a 	mov	r17,r7
   410d4:	003fab06 	br	40f84 <__alt_data_end+0xfffd9e84>
   410d8:	8805883a 	mov	r2,r17
   410dc:	043fffc4 	movi	r16,-1
   410e0:	0009883a 	mov	r4,zero
   410e4:	003f8706 	br	40f04 <__alt_data_end+0xfffd9e04>
   410e8:	013f0034 	movhi	r4,64512
   410ec:	213fffc4 	addi	r4,r4,-1
   410f0:	80a1c83a 	sub	r16,r16,r2
   410f4:	9108703a 	and	r4,r18,r4
   410f8:	003f7406 	br	40ecc <__alt_data_end+0xfffd9dcc>
   410fc:	1800411e 	bne	r3,zero,41204 <__addsf3+0x394>
   41100:	80c00044 	addi	r3,r16,1
   41104:	19c03fcc 	andi	r7,r3,255
   41108:	01800044 	movi	r6,1
   4110c:	31c0260e 	bge	r6,r7,411a8 <__addsf3+0x338>
   41110:	01803fc4 	movi	r6,255
   41114:	19802126 	beq	r3,r6,4119c <__addsf3+0x32c>
   41118:	2149883a 	add	r4,r4,r5
   4111c:	2008d07a 	srli	r4,r4,1
   41120:	1821883a 	mov	r16,r3
   41124:	003f6906 	br	40ecc <__alt_data_end+0xfffd9dcc>
   41128:	01400044 	movi	r5,1
   4112c:	003f8f06 	br	40f6c <__alt_data_end+0xfffd9e6c>
   41130:	8000151e 	bne	r16,zero,41188 <__addsf3+0x318>
   41134:	20002f26 	beq	r4,zero,411f4 <__addsf3+0x384>
   41138:	0084303a 	nor	r2,zero,r2
   4113c:	10000a26 	beq	r2,zero,41168 <__addsf3+0x2f8>
   41140:	00c03fc4 	movi	r3,255
   41144:	30c02b26 	beq	r6,r3,411f4 <__addsf3+0x384>
   41148:	00c006c4 	movi	r3,27
   4114c:	18806d16 	blt	r3,r2,41304 <__addsf3+0x494>
   41150:	00c00804 	movi	r3,32
   41154:	1887c83a 	sub	r3,r3,r2
   41158:	20c6983a 	sll	r3,r4,r3
   4115c:	2084d83a 	srl	r2,r4,r2
   41160:	1808c03a 	cmpne	r4,r3,zero
   41164:	1108b03a 	or	r4,r2,r4
   41168:	2909c83a 	sub	r4,r5,r4
   4116c:	3021883a 	mov	r16,r6
   41170:	3823883a 	mov	r17,r7
   41174:	003f7e06 	br	40f70 <__alt_data_end+0xfffd9e70>
   41178:	903f821e 	bne	r18,zero,40f84 <__alt_data_end+0xfffd9e84>
   4117c:	0005883a 	mov	r2,zero
   41180:	0021883a 	mov	r16,zero
   41184:	003fba06 	br	41070 <__alt_data_end+0xfffd9f70>
   41188:	00c03fc4 	movi	r3,255
   4118c:	30c01926 	beq	r6,r3,411f4 <__addsf3+0x384>
   41190:	0085c83a 	sub	r2,zero,r2
   41194:	21010034 	orhi	r4,r4,1024
   41198:	003feb06 	br	41148 <__alt_data_end+0xfffda048>
   4119c:	043fffc4 	movi	r16,-1
   411a0:	0009883a 	mov	r4,zero
   411a4:	003f5706 	br	40f04 <__alt_data_end+0xfffd9e04>
   411a8:	80004a1e 	bne	r16,zero,412d4 <__addsf3+0x464>
   411ac:	20005926 	beq	r4,zero,41314 <__addsf3+0x4a4>
   411b0:	283f4626 	beq	r5,zero,40ecc <__alt_data_end+0xfffd9dcc>
   411b4:	2149883a 	add	r4,r4,r5
   411b8:	2081002c 	andhi	r2,r4,1024
   411bc:	103f8226 	beq	r2,zero,40fc8 <__alt_data_end+0xfffd9ec8>
   411c0:	00bf0034 	movhi	r2,64512
   411c4:	10bfffc4 	addi	r2,r2,-1
   411c8:	3021883a 	mov	r16,r6
   411cc:	2088703a 	and	r4,r4,r2
   411d0:	003f3e06 	br	40ecc <__alt_data_end+0xfffd9dcc>
   411d4:	8000121e 	bne	r16,zero,41220 <__addsf3+0x3b0>
   411d8:	2000261e 	bne	r4,zero,41274 <__addsf3+0x404>
   411dc:	283fa226 	beq	r5,zero,41068 <__alt_data_end+0xfffd9f68>
   411e0:	2809883a 	mov	r4,r5
   411e4:	3823883a 	mov	r17,r7
   411e8:	003f3806 	br	40ecc <__alt_data_end+0xfffd9dcc>
   411ec:	01400044 	movi	r5,1
   411f0:	003f9006 	br	41034 <__alt_data_end+0xfffd9f34>
   411f4:	2809883a 	mov	r4,r5
   411f8:	3021883a 	mov	r16,r6
   411fc:	3823883a 	mov	r17,r7
   41200:	003f3206 	br	40ecc <__alt_data_end+0xfffd9dcc>
   41204:	80000c1e 	bne	r16,zero,41238 <__addsf3+0x3c8>
   41208:	20002f26 	beq	r4,zero,412c8 <__addsf3+0x458>
   4120c:	00c6303a 	nor	r3,zero,r3
   41210:	18002b1e 	bne	r3,zero,412c0 <__addsf3+0x450>
   41214:	2149883a 	add	r4,r4,r5
   41218:	3021883a 	mov	r16,r6
   4121c:	003f8606 	br	41038 <__alt_data_end+0xfffd9f38>
   41220:	20001b1e 	bne	r4,zero,41290 <__addsf3+0x420>
   41224:	28003926 	beq	r5,zero,4130c <__addsf3+0x49c>
   41228:	2809883a 	mov	r4,r5
   4122c:	3823883a 	mov	r17,r7
   41230:	04003fc4 	movi	r16,255
   41234:	003f2506 	br	40ecc <__alt_data_end+0xfffd9dcc>
   41238:	01c03fc4 	movi	r7,255
   4123c:	31c02226 	beq	r6,r7,412c8 <__addsf3+0x458>
   41240:	00c7c83a 	sub	r3,zero,r3
   41244:	21010034 	orhi	r4,r4,1024
   41248:	01c006c4 	movi	r7,27
   4124c:	38c03616 	blt	r7,r3,41328 <__addsf3+0x4b8>
   41250:	01c00804 	movi	r7,32
   41254:	38cfc83a 	sub	r7,r7,r3
   41258:	21ce983a 	sll	r7,r4,r7
   4125c:	20c6d83a 	srl	r3,r4,r3
   41260:	3808c03a 	cmpne	r4,r7,zero
   41264:	1906b03a 	or	r3,r3,r4
   41268:	1949883a 	add	r4,r3,r5
   4126c:	3021883a 	mov	r16,r6
   41270:	003f7106 	br	41038 <__alt_data_end+0xfffd9f38>
   41274:	283f1526 	beq	r5,zero,40ecc <__alt_data_end+0xfffd9dcc>
   41278:	2145c83a 	sub	r2,r4,r5
   4127c:	10c1002c 	andhi	r3,r2,1024
   41280:	183f4f26 	beq	r3,zero,40fc0 <__alt_data_end+0xfffd9ec0>
   41284:	2909c83a 	sub	r4,r5,r4
   41288:	3823883a 	mov	r17,r7
   4128c:	003f0f06 	br	40ecc <__alt_data_end+0xfffd9dcc>
   41290:	28001a26 	beq	r5,zero,412fc <__addsf3+0x48c>
   41294:	2008d0fa 	srli	r4,r4,3
   41298:	2080102c 	andhi	r2,r4,64
   4129c:	10000526 	beq	r2,zero,412b4 <__addsf3+0x444>
   412a0:	280ad0fa 	srli	r5,r5,3
   412a4:	2880102c 	andhi	r2,r5,64
   412a8:	1000021e 	bne	r2,zero,412b4 <__addsf3+0x444>
   412ac:	2809883a 	mov	r4,r5
   412b0:	3823883a 	mov	r17,r7
   412b4:	200890fa 	slli	r4,r4,3
   412b8:	04003fc4 	movi	r16,255
   412bc:	003f0306 	br	40ecc <__alt_data_end+0xfffd9dcc>
   412c0:	01c03fc4 	movi	r7,255
   412c4:	31ffe01e 	bne	r6,r7,41248 <__alt_data_end+0xfffda148>
   412c8:	2809883a 	mov	r4,r5
   412cc:	3021883a 	mov	r16,r6
   412d0:	003efe06 	br	40ecc <__alt_data_end+0xfffd9dcc>
   412d4:	20001126 	beq	r4,zero,4131c <__addsf3+0x4ac>
   412d8:	28000826 	beq	r5,zero,412fc <__addsf3+0x48c>
   412dc:	2008d0fa 	srli	r4,r4,3
   412e0:	2080102c 	andhi	r2,r4,64
   412e4:	103ff326 	beq	r2,zero,412b4 <__alt_data_end+0xfffda1b4>
   412e8:	280ad0fa 	srli	r5,r5,3
   412ec:	2880102c 	andhi	r2,r5,64
   412f0:	103ff01e 	bne	r2,zero,412b4 <__alt_data_end+0xfffda1b4>
   412f4:	2809883a 	mov	r4,r5
   412f8:	003fee06 	br	412b4 <__alt_data_end+0xfffda1b4>
   412fc:	04003fc4 	movi	r16,255
   41300:	003ef206 	br	40ecc <__alt_data_end+0xfffd9dcc>
   41304:	01000044 	movi	r4,1
   41308:	003f9706 	br	41168 <__alt_data_end+0xfffda068>
   4130c:	0005883a 	mov	r2,zero
   41310:	003f3406 	br	40fe4 <__alt_data_end+0xfffd9ee4>
   41314:	2809883a 	mov	r4,r5
   41318:	003eec06 	br	40ecc <__alt_data_end+0xfffd9dcc>
   4131c:	2809883a 	mov	r4,r5
   41320:	04003fc4 	movi	r16,255
   41324:	003ee906 	br	40ecc <__alt_data_end+0xfffd9dcc>
   41328:	00c00044 	movi	r3,1
   4132c:	003fce06 	br	41268 <__alt_data_end+0xfffda168>
   41330:	0005883a 	mov	r2,zero
   41334:	003f4e06 	br	41070 <__alt_data_end+0xfffd9f70>

00041338 <__divsf3>:
   41338:	defff504 	addi	sp,sp,-44
   4133c:	200cd5fa 	srli	r6,r4,23
   41340:	dcc00415 	stw	r19,16(sp)
   41344:	2026d7fa 	srli	r19,r4,31
   41348:	00c02034 	movhi	r3,128
   4134c:	dd800715 	stw	r22,28(sp)
   41350:	dd000515 	stw	r20,20(sp)
   41354:	dc800315 	stw	r18,12(sp)
   41358:	18ffffc4 	addi	r3,r3,-1
   4135c:	dfc00a15 	stw	ra,40(sp)
   41360:	df000915 	stw	fp,36(sp)
   41364:	ddc00815 	stw	r23,32(sp)
   41368:	dd400615 	stw	r21,24(sp)
   4136c:	dc400215 	stw	r17,8(sp)
   41370:	dc000115 	stw	r16,4(sp)
   41374:	35003fcc 	andi	r20,r6,255
   41378:	1924703a 	and	r18,r3,r4
   4137c:	9d803fcc 	andi	r22,r19,255
   41380:	a0005226 	beq	r20,zero,414cc <__divsf3+0x194>
   41384:	00803fc4 	movi	r2,255
   41388:	a0802e26 	beq	r20,r2,41444 <__divsf3+0x10c>
   4138c:	91002034 	orhi	r4,r18,128
   41390:	202490fa 	slli	r18,r4,3
   41394:	a53fe044 	addi	r20,r20,-127
   41398:	0021883a 	mov	r16,zero
   4139c:	002f883a 	mov	r23,zero
   413a0:	280cd5fa 	srli	r6,r5,23
   413a4:	282ad7fa 	srli	r21,r5,31
   413a8:	00c02034 	movhi	r3,128
   413ac:	18ffffc4 	addi	r3,r3,-1
   413b0:	31803fcc 	andi	r6,r6,255
   413b4:	1962703a 	and	r17,r3,r5
   413b8:	af003fcc 	andi	fp,r21,255
   413bc:	30004a26 	beq	r6,zero,414e8 <__divsf3+0x1b0>
   413c0:	00803fc4 	movi	r2,255
   413c4:	30804526 	beq	r6,r2,414dc <__divsf3+0x1a4>
   413c8:	89402034 	orhi	r5,r17,128
   413cc:	282290fa 	slli	r17,r5,3
   413d0:	31bfe044 	addi	r6,r6,-127
   413d4:	000b883a 	mov	r5,zero
   413d8:	2c20b03a 	or	r16,r5,r16
   413dc:	802090ba 	slli	r16,r16,2
   413e0:	00800134 	movhi	r2,4
   413e4:	10850104 	addi	r2,r2,5124
   413e8:	80a1883a 	add	r16,r16,r2
   413ec:	81000017 	ldw	r4,0(r16)
   413f0:	9d46f03a 	xor	r3,r19,r21
   413f4:	180f883a 	mov	r7,r3
   413f8:	18803fcc 	andi	r2,r3,255
   413fc:	a18dc83a 	sub	r6,r20,r6
   41400:	2000683a 	jmp	r4
   41404:	000415e8 	cmpgeui	zero,zero,4183
   41408:	0004146c 	andhi	zero,zero,4177
   4140c:	000415dc 	xori	zero,zero,4183
   41410:	00041458 	cmpnei	zero,zero,4177
   41414:	000415dc 	xori	zero,zero,4183
   41418:	000415b4 	movhi	zero,4182
   4141c:	000415dc 	xori	zero,zero,4183
   41420:	00041458 	cmpnei	zero,zero,4177
   41424:	0004146c 	andhi	zero,zero,4177
   41428:	0004146c 	andhi	zero,zero,4177
   4142c:	000415b4 	movhi	zero,4182
   41430:	00041458 	cmpnei	zero,zero,4177
   41434:	000416c8 	cmpgei	zero,zero,4187
   41438:	000416c8 	cmpgei	zero,zero,4187
   4143c:	000416c8 	cmpgei	zero,zero,4187
   41440:	0004167c 	xorhi	zero,zero,4185
   41444:	9000581e 	bne	r18,zero,415a8 <__divsf3+0x270>
   41448:	04000204 	movi	r16,8
   4144c:	05c00084 	movi	r23,2
   41450:	003fd306 	br	413a0 <__alt_data_end+0xfffda2a0>
   41454:	0023883a 	mov	r17,zero
   41458:	e02d883a 	mov	r22,fp
   4145c:	282f883a 	mov	r23,r5
   41460:	00800084 	movi	r2,2
   41464:	b8808f1e 	bne	r23,r2,416a4 <__divsf3+0x36c>
   41468:	b005883a 	mov	r2,r22
   4146c:	11c0004c 	andi	r7,r2,1
   41470:	013fffc4 	movi	r4,-1
   41474:	000d883a 	mov	r6,zero
   41478:	21003fcc 	andi	r4,r4,255
   4147c:	200895fa 	slli	r4,r4,23
   41480:	38803fcc 	andi	r2,r7,255
   41484:	00c02034 	movhi	r3,128
   41488:	100497fa 	slli	r2,r2,31
   4148c:	18ffffc4 	addi	r3,r3,-1
   41490:	30c6703a 	and	r3,r6,r3
   41494:	1906b03a 	or	r3,r3,r4
   41498:	1884b03a 	or	r2,r3,r2
   4149c:	dfc00a17 	ldw	ra,40(sp)
   414a0:	df000917 	ldw	fp,36(sp)
   414a4:	ddc00817 	ldw	r23,32(sp)
   414a8:	dd800717 	ldw	r22,28(sp)
   414ac:	dd400617 	ldw	r21,24(sp)
   414b0:	dd000517 	ldw	r20,20(sp)
   414b4:	dcc00417 	ldw	r19,16(sp)
   414b8:	dc800317 	ldw	r18,12(sp)
   414bc:	dc400217 	ldw	r17,8(sp)
   414c0:	dc000117 	ldw	r16,4(sp)
   414c4:	dec00b04 	addi	sp,sp,44
   414c8:	f800283a 	ret
   414cc:	90002b1e 	bne	r18,zero,4157c <__divsf3+0x244>
   414d0:	04000104 	movi	r16,4
   414d4:	05c00044 	movi	r23,1
   414d8:	003fb106 	br	413a0 <__alt_data_end+0xfffda2a0>
   414dc:	8800251e 	bne	r17,zero,41574 <__divsf3+0x23c>
   414e0:	01400084 	movi	r5,2
   414e4:	00000206 	br	414f0 <__divsf3+0x1b8>
   414e8:	88001a1e 	bne	r17,zero,41554 <__divsf3+0x21c>
   414ec:	01400044 	movi	r5,1
   414f0:	8160b03a 	or	r16,r16,r5
   414f4:	802090ba 	slli	r16,r16,2
   414f8:	00c00134 	movhi	r3,4
   414fc:	18c54504 	addi	r3,r3,5396
   41500:	80e1883a 	add	r16,r16,r3
   41504:	80c00017 	ldw	r3,0(r16)
   41508:	9d44f03a 	xor	r2,r19,r21
   4150c:	a18dc83a 	sub	r6,r20,r6
   41510:	1800683a 	jmp	r3
   41514:	0004146c 	andhi	zero,zero,4177
   41518:	0004146c 	andhi	zero,zero,4177
   4151c:	000416b8 	rdprs	zero,zero,4186
   41520:	00041454 	movui	zero,4177
   41524:	000416b8 	rdprs	zero,zero,4186
   41528:	000415b4 	movhi	zero,4182
   4152c:	000416b8 	rdprs	zero,zero,4186
   41530:	00041454 	movui	zero,4177
   41534:	0004146c 	andhi	zero,zero,4177
   41538:	0004146c 	andhi	zero,zero,4177
   4153c:	000415b4 	movhi	zero,4182
   41540:	00041454 	movui	zero,4177
   41544:	000416c8 	cmpgei	zero,zero,4187
   41548:	000416c8 	cmpgei	zero,zero,4187
   4154c:	000416c8 	cmpgei	zero,zero,4187
   41550:	000416e0 	cmpeqi	zero,zero,4187
   41554:	8809883a 	mov	r4,r17
   41558:	00448e40 	call	448e4 <__clzsi2>
   4155c:	10fffec4 	addi	r3,r2,-5
   41560:	10801d84 	addi	r2,r2,118
   41564:	88e2983a 	sll	r17,r17,r3
   41568:	008dc83a 	sub	r6,zero,r2
   4156c:	000b883a 	mov	r5,zero
   41570:	003f9906 	br	413d8 <__alt_data_end+0xfffda2d8>
   41574:	014000c4 	movi	r5,3
   41578:	003f9706 	br	413d8 <__alt_data_end+0xfffda2d8>
   4157c:	9009883a 	mov	r4,r18
   41580:	d9400015 	stw	r5,0(sp)
   41584:	00448e40 	call	448e4 <__clzsi2>
   41588:	10fffec4 	addi	r3,r2,-5
   4158c:	11801d84 	addi	r6,r2,118
   41590:	90e4983a 	sll	r18,r18,r3
   41594:	01a9c83a 	sub	r20,zero,r6
   41598:	0021883a 	mov	r16,zero
   4159c:	002f883a 	mov	r23,zero
   415a0:	d9400017 	ldw	r5,0(sp)
   415a4:	003f7e06 	br	413a0 <__alt_data_end+0xfffda2a0>
   415a8:	04000304 	movi	r16,12
   415ac:	05c000c4 	movi	r23,3
   415b0:	003f7b06 	br	413a0 <__alt_data_end+0xfffda2a0>
   415b4:	01802034 	movhi	r6,128
   415b8:	000f883a 	mov	r7,zero
   415bc:	31bfffc4 	addi	r6,r6,-1
   415c0:	013fffc4 	movi	r4,-1
   415c4:	003fac06 	br	41478 <__alt_data_end+0xfffda378>
   415c8:	01400044 	movi	r5,1
   415cc:	2909c83a 	sub	r4,r5,r4
   415d0:	00c006c4 	movi	r3,27
   415d4:	19004b0e 	bge	r3,r4,41704 <__divsf3+0x3cc>
   415d8:	114e703a 	and	r7,r2,r5
   415dc:	0009883a 	mov	r4,zero
   415e0:	000d883a 	mov	r6,zero
   415e4:	003fa406 	br	41478 <__alt_data_end+0xfffda378>
   415e8:	9006917a 	slli	r3,r18,5
   415ec:	8822917a 	slli	r17,r17,5
   415f0:	1c40372e 	bgeu	r3,r17,416d0 <__divsf3+0x398>
   415f4:	31bfffc4 	addi	r6,r6,-1
   415f8:	010006c4 	movi	r4,27
   415fc:	000b883a 	mov	r5,zero
   41600:	180f883a 	mov	r7,r3
   41604:	294b883a 	add	r5,r5,r5
   41608:	18c7883a 	add	r3,r3,r3
   4160c:	38000116 	blt	r7,zero,41614 <__divsf3+0x2dc>
   41610:	1c400236 	bltu	r3,r17,4161c <__divsf3+0x2e4>
   41614:	1c47c83a 	sub	r3,r3,r17
   41618:	29400054 	ori	r5,r5,1
   4161c:	213fffc4 	addi	r4,r4,-1
   41620:	203ff71e 	bne	r4,zero,41600 <__alt_data_end+0xfffda500>
   41624:	1806c03a 	cmpne	r3,r3,zero
   41628:	1962b03a 	or	r17,r3,r5
   4162c:	31001fc4 	addi	r4,r6,127
   41630:	013fe50e 	bge	zero,r4,415c8 <__alt_data_end+0xfffda4c8>
   41634:	88c001cc 	andi	r3,r17,7
   41638:	18000426 	beq	r3,zero,4164c <__divsf3+0x314>
   4163c:	88c003cc 	andi	r3,r17,15
   41640:	01400104 	movi	r5,4
   41644:	19400126 	beq	r3,r5,4164c <__divsf3+0x314>
   41648:	8963883a 	add	r17,r17,r5
   4164c:	88c2002c 	andhi	r3,r17,2048
   41650:	18000426 	beq	r3,zero,41664 <__divsf3+0x32c>
   41654:	00fe0034 	movhi	r3,63488
   41658:	18ffffc4 	addi	r3,r3,-1
   4165c:	31002004 	addi	r4,r6,128
   41660:	88e2703a 	and	r17,r17,r3
   41664:	00c03f84 	movi	r3,254
   41668:	193f8016 	blt	r3,r4,4146c <__alt_data_end+0xfffda36c>
   4166c:	880c91ba 	slli	r6,r17,6
   41670:	11c0004c 	andi	r7,r2,1
   41674:	300cd27a 	srli	r6,r6,9
   41678:	003f7f06 	br	41478 <__alt_data_end+0xfffda378>
   4167c:	9080102c 	andhi	r2,r18,64
   41680:	10000226 	beq	r2,zero,4168c <__divsf3+0x354>
   41684:	8880102c 	andhi	r2,r17,64
   41688:	10001826 	beq	r2,zero,416ec <__divsf3+0x3b4>
   4168c:	00802034 	movhi	r2,128
   41690:	91801034 	orhi	r6,r18,64
   41694:	10bfffc4 	addi	r2,r2,-1
   41698:	980f883a 	mov	r7,r19
   4169c:	308c703a 	and	r6,r6,r2
   416a0:	003fc706 	br	415c0 <__alt_data_end+0xfffda4c0>
   416a4:	008000c4 	movi	r2,3
   416a8:	b8802d26 	beq	r23,r2,41760 <__divsf3+0x428>
   416ac:	00c00044 	movi	r3,1
   416b0:	b005883a 	mov	r2,r22
   416b4:	b8ffdd1e 	bne	r23,r3,4162c <__alt_data_end+0xfffda52c>
   416b8:	11c0004c 	andi	r7,r2,1
   416bc:	0009883a 	mov	r4,zero
   416c0:	000d883a 	mov	r6,zero
   416c4:	003f6c06 	br	41478 <__alt_data_end+0xfffda378>
   416c8:	9023883a 	mov	r17,r18
   416cc:	003f6406 	br	41460 <__alt_data_end+0xfffda360>
   416d0:	1c47c83a 	sub	r3,r3,r17
   416d4:	01000684 	movi	r4,26
   416d8:	01400044 	movi	r5,1
   416dc:	003fc806 	br	41600 <__alt_data_end+0xfffda500>
   416e0:	9080102c 	andhi	r2,r18,64
   416e4:	103fe926 	beq	r2,zero,4168c <__alt_data_end+0xfffda58c>
   416e8:	0023883a 	mov	r17,zero
   416ec:	00802034 	movhi	r2,128
   416f0:	89801034 	orhi	r6,r17,64
   416f4:	10bfffc4 	addi	r2,r2,-1
   416f8:	a80f883a 	mov	r7,r21
   416fc:	308c703a 	and	r6,r6,r2
   41700:	003faf06 	br	415c0 <__alt_data_end+0xfffda4c0>
   41704:	01c00804 	movi	r7,32
   41708:	390fc83a 	sub	r7,r7,r4
   4170c:	89ce983a 	sll	r7,r17,r7
   41710:	890ad83a 	srl	r5,r17,r4
   41714:	380ec03a 	cmpne	r7,r7,zero
   41718:	29cab03a 	or	r5,r5,r7
   4171c:	28c001cc 	andi	r3,r5,7
   41720:	18000426 	beq	r3,zero,41734 <__divsf3+0x3fc>
   41724:	28c003cc 	andi	r3,r5,15
   41728:	01000104 	movi	r4,4
   4172c:	19000126 	beq	r3,r4,41734 <__divsf3+0x3fc>
   41730:	290b883a 	add	r5,r5,r4
   41734:	28c1002c 	andhi	r3,r5,1024
   41738:	18000426 	beq	r3,zero,4174c <__divsf3+0x414>
   4173c:	11c0004c 	andi	r7,r2,1
   41740:	01000044 	movi	r4,1
   41744:	000d883a 	mov	r6,zero
   41748:	003f4b06 	br	41478 <__alt_data_end+0xfffda378>
   4174c:	280a91ba 	slli	r5,r5,6
   41750:	11c0004c 	andi	r7,r2,1
   41754:	0009883a 	mov	r4,zero
   41758:	280cd27a 	srli	r6,r5,9
   4175c:	003f4606 	br	41478 <__alt_data_end+0xfffda378>
   41760:	00802034 	movhi	r2,128
   41764:	89801034 	orhi	r6,r17,64
   41768:	10bfffc4 	addi	r2,r2,-1
   4176c:	b00f883a 	mov	r7,r22
   41770:	308c703a 	and	r6,r6,r2
   41774:	003f9206 	br	415c0 <__alt_data_end+0xfffda4c0>

00041778 <__lesf2>:
   41778:	2004d5fa 	srli	r2,r4,23
   4177c:	280cd5fa 	srli	r6,r5,23
   41780:	00c02034 	movhi	r3,128
   41784:	18ffffc4 	addi	r3,r3,-1
   41788:	10803fcc 	andi	r2,r2,255
   4178c:	01c03fc4 	movi	r7,255
   41790:	1910703a 	and	r8,r3,r4
   41794:	31803fcc 	andi	r6,r6,255
   41798:	1946703a 	and	r3,r3,r5
   4179c:	2008d7fa 	srli	r4,r4,31
   417a0:	280ad7fa 	srli	r5,r5,31
   417a4:	11c01b26 	beq	r2,r7,41814 <__lesf2+0x9c>
   417a8:	01c03fc4 	movi	r7,255
   417ac:	31c01126 	beq	r6,r7,417f4 <__lesf2+0x7c>
   417b0:	1000071e 	bne	r2,zero,417d0 <__lesf2+0x58>
   417b4:	400f003a 	cmpeq	r7,r8,zero
   417b8:	21003fcc 	andi	r4,r4,255
   417bc:	3000081e 	bne	r6,zero,417e0 <__lesf2+0x68>
   417c0:	1800071e 	bne	r3,zero,417e0 <__lesf2+0x68>
   417c4:	0005883a 	mov	r2,zero
   417c8:	40000f1e 	bne	r8,zero,41808 <__lesf2+0x90>
   417cc:	f800283a 	ret
   417d0:	21003fcc 	andi	r4,r4,255
   417d4:	30000a1e 	bne	r6,zero,41800 <__lesf2+0x88>
   417d8:	18000b26 	beq	r3,zero,41808 <__lesf2+0x90>
   417dc:	000f883a 	mov	r7,zero
   417e0:	29403fcc 	andi	r5,r5,255
   417e4:	38000726 	beq	r7,zero,41804 <__lesf2+0x8c>
   417e8:	28000826 	beq	r5,zero,4180c <__lesf2+0x94>
   417ec:	00800044 	movi	r2,1
   417f0:	f800283a 	ret
   417f4:	183fee26 	beq	r3,zero,417b0 <__alt_data_end+0xfffda6b0>
   417f8:	00800084 	movi	r2,2
   417fc:	f800283a 	ret
   41800:	29403fcc 	andi	r5,r5,255
   41804:	21400626 	beq	r4,r5,41820 <__lesf2+0xa8>
   41808:	203ff826 	beq	r4,zero,417ec <__alt_data_end+0xfffda6ec>
   4180c:	00bfffc4 	movi	r2,-1
   41810:	f800283a 	ret
   41814:	403fe426 	beq	r8,zero,417a8 <__alt_data_end+0xfffda6a8>
   41818:	00800084 	movi	r2,2
   4181c:	f800283a 	ret
   41820:	30bff916 	blt	r6,r2,41808 <__alt_data_end+0xfffda708>
   41824:	11800216 	blt	r2,r6,41830 <__lesf2+0xb8>
   41828:	1a3ff736 	bltu	r3,r8,41808 <__alt_data_end+0xfffda708>
   4182c:	40c0022e 	bgeu	r8,r3,41838 <__lesf2+0xc0>
   41830:	203fee1e 	bne	r4,zero,417ec <__alt_data_end+0xfffda6ec>
   41834:	003ff506 	br	4180c <__alt_data_end+0xfffda70c>
   41838:	0005883a 	mov	r2,zero
   4183c:	f800283a 	ret

00041840 <__mulsf3>:
   41840:	defff504 	addi	sp,sp,-44
   41844:	dc000115 	stw	r16,4(sp)
   41848:	2020d5fa 	srli	r16,r4,23
   4184c:	dd400615 	stw	r21,24(sp)
   41850:	202ad7fa 	srli	r21,r4,31
   41854:	dc800315 	stw	r18,12(sp)
   41858:	04802034 	movhi	r18,128
   4185c:	df000915 	stw	fp,36(sp)
   41860:	dd000515 	stw	r20,20(sp)
   41864:	94bfffc4 	addi	r18,r18,-1
   41868:	dfc00a15 	stw	ra,40(sp)
   4186c:	ddc00815 	stw	r23,32(sp)
   41870:	dd800715 	stw	r22,28(sp)
   41874:	dcc00415 	stw	r19,16(sp)
   41878:	dc400215 	stw	r17,8(sp)
   4187c:	84003fcc 	andi	r16,r16,255
   41880:	9124703a 	and	r18,r18,r4
   41884:	a829883a 	mov	r20,r21
   41888:	af003fcc 	andi	fp,r21,255
   4188c:	80005426 	beq	r16,zero,419e0 <__mulsf3+0x1a0>
   41890:	00803fc4 	movi	r2,255
   41894:	80802f26 	beq	r16,r2,41954 <__mulsf3+0x114>
   41898:	91002034 	orhi	r4,r18,128
   4189c:	202490fa 	slli	r18,r4,3
   418a0:	843fe044 	addi	r16,r16,-127
   418a4:	0023883a 	mov	r17,zero
   418a8:	002f883a 	mov	r23,zero
   418ac:	2804d5fa 	srli	r2,r5,23
   418b0:	282cd7fa 	srli	r22,r5,31
   418b4:	01002034 	movhi	r4,128
   418b8:	213fffc4 	addi	r4,r4,-1
   418bc:	10803fcc 	andi	r2,r2,255
   418c0:	2166703a 	and	r19,r4,r5
   418c4:	b1803fcc 	andi	r6,r22,255
   418c8:	10004c26 	beq	r2,zero,419fc <__mulsf3+0x1bc>
   418cc:	00c03fc4 	movi	r3,255
   418d0:	10c04726 	beq	r2,r3,419f0 <__mulsf3+0x1b0>
   418d4:	99002034 	orhi	r4,r19,128
   418d8:	202690fa 	slli	r19,r4,3
   418dc:	10bfe044 	addi	r2,r2,-127
   418e0:	0007883a 	mov	r3,zero
   418e4:	80a1883a 	add	r16,r16,r2
   418e8:	010003c4 	movi	r4,15
   418ec:	1c44b03a 	or	r2,r3,r17
   418f0:	b56af03a 	xor	r21,r22,r21
   418f4:	81c00044 	addi	r7,r16,1
   418f8:	20806b36 	bltu	r4,r2,41aa8 <__mulsf3+0x268>
   418fc:	100490ba 	slli	r2,r2,2
   41900:	01000134 	movhi	r4,4
   41904:	21064504 	addi	r4,r4,6420
   41908:	1105883a 	add	r2,r2,r4
   4190c:	10800017 	ldw	r2,0(r2)
   41910:	1000683a 	jmp	r2
   41914:	00041aa8 	cmpgeui	zero,zero,4202
   41918:	00041968 	cmpgeui	zero,zero,4197
   4191c:	00041968 	cmpgeui	zero,zero,4197
   41920:	00041964 	muli	zero,zero,4197
   41924:	00041a8c 	andi	zero,zero,4202
   41928:	00041a8c 	andi	zero,zero,4202
   4192c:	00041a78 	rdprs	zero,zero,4201
   41930:	00041964 	muli	zero,zero,4197
   41934:	00041a8c 	andi	zero,zero,4202
   41938:	00041a78 	rdprs	zero,zero,4201
   4193c:	00041a8c 	andi	zero,zero,4202
   41940:	00041964 	muli	zero,zero,4197
   41944:	00041a98 	cmpnei	zero,zero,4202
   41948:	00041a98 	cmpnei	zero,zero,4202
   4194c:	00041a98 	cmpnei	zero,zero,4202
   41950:	00041b74 	movhi	zero,4205
   41954:	90003b1e 	bne	r18,zero,41a44 <__mulsf3+0x204>
   41958:	04400204 	movi	r17,8
   4195c:	05c00084 	movi	r23,2
   41960:	003fd206 	br	418ac <__alt_data_end+0xfffda7ac>
   41964:	302b883a 	mov	r21,r6
   41968:	00800084 	movi	r2,2
   4196c:	18802626 	beq	r3,r2,41a08 <__mulsf3+0x1c8>
   41970:	008000c4 	movi	r2,3
   41974:	1880ab26 	beq	r3,r2,41c24 <__mulsf3+0x3e4>
   41978:	00800044 	movi	r2,1
   4197c:	1880a21e 	bne	r3,r2,41c08 <__mulsf3+0x3c8>
   41980:	a829883a 	mov	r20,r21
   41984:	0007883a 	mov	r3,zero
   41988:	0009883a 	mov	r4,zero
   4198c:	18803fcc 	andi	r2,r3,255
   41990:	100695fa 	slli	r3,r2,23
   41994:	a0803fcc 	andi	r2,r20,255
   41998:	100a97fa 	slli	r5,r2,31
   4199c:	00802034 	movhi	r2,128
   419a0:	10bfffc4 	addi	r2,r2,-1
   419a4:	2084703a 	and	r2,r4,r2
   419a8:	10c4b03a 	or	r2,r2,r3
   419ac:	1144b03a 	or	r2,r2,r5
   419b0:	dfc00a17 	ldw	ra,40(sp)
   419b4:	df000917 	ldw	fp,36(sp)
   419b8:	ddc00817 	ldw	r23,32(sp)
   419bc:	dd800717 	ldw	r22,28(sp)
   419c0:	dd400617 	ldw	r21,24(sp)
   419c4:	dd000517 	ldw	r20,20(sp)
   419c8:	dcc00417 	ldw	r19,16(sp)
   419cc:	dc800317 	ldw	r18,12(sp)
   419d0:	dc400217 	ldw	r17,8(sp)
   419d4:	dc000117 	ldw	r16,4(sp)
   419d8:	dec00b04 	addi	sp,sp,44
   419dc:	f800283a 	ret
   419e0:	90000d1e 	bne	r18,zero,41a18 <__mulsf3+0x1d8>
   419e4:	04400104 	movi	r17,4
   419e8:	05c00044 	movi	r23,1
   419ec:	003faf06 	br	418ac <__alt_data_end+0xfffda7ac>
   419f0:	9806c03a 	cmpne	r3,r19,zero
   419f4:	18c00084 	addi	r3,r3,2
   419f8:	003fba06 	br	418e4 <__alt_data_end+0xfffda7e4>
   419fc:	9800141e 	bne	r19,zero,41a50 <__mulsf3+0x210>
   41a00:	00c00044 	movi	r3,1
   41a04:	003fb706 	br	418e4 <__alt_data_end+0xfffda7e4>
   41a08:	a829883a 	mov	r20,r21
   41a0c:	00ffffc4 	movi	r3,-1
   41a10:	0009883a 	mov	r4,zero
   41a14:	003fdd06 	br	4198c <__alt_data_end+0xfffda88c>
   41a18:	9009883a 	mov	r4,r18
   41a1c:	d9400015 	stw	r5,0(sp)
   41a20:	00448e40 	call	448e4 <__clzsi2>
   41a24:	10fffec4 	addi	r3,r2,-5
   41a28:	10801d84 	addi	r2,r2,118
   41a2c:	90e4983a 	sll	r18,r18,r3
   41a30:	00a1c83a 	sub	r16,zero,r2
   41a34:	0023883a 	mov	r17,zero
   41a38:	002f883a 	mov	r23,zero
   41a3c:	d9400017 	ldw	r5,0(sp)
   41a40:	003f9a06 	br	418ac <__alt_data_end+0xfffda7ac>
   41a44:	04400304 	movi	r17,12
   41a48:	05c000c4 	movi	r23,3
   41a4c:	003f9706 	br	418ac <__alt_data_end+0xfffda7ac>
   41a50:	9809883a 	mov	r4,r19
   41a54:	d9800015 	stw	r6,0(sp)
   41a58:	00448e40 	call	448e4 <__clzsi2>
   41a5c:	10fffec4 	addi	r3,r2,-5
   41a60:	10801d84 	addi	r2,r2,118
   41a64:	98e6983a 	sll	r19,r19,r3
   41a68:	0085c83a 	sub	r2,zero,r2
   41a6c:	0007883a 	mov	r3,zero
   41a70:	d9800017 	ldw	r6,0(sp)
   41a74:	003f9b06 	br	418e4 <__alt_data_end+0xfffda7e4>
   41a78:	01002034 	movhi	r4,128
   41a7c:	0029883a 	mov	r20,zero
   41a80:	213fffc4 	addi	r4,r4,-1
   41a84:	00ffffc4 	movi	r3,-1
   41a88:	003fc006 	br	4198c <__alt_data_end+0xfffda88c>
   41a8c:	9027883a 	mov	r19,r18
   41a90:	b807883a 	mov	r3,r23
   41a94:	003fb406 	br	41968 <__alt_data_end+0xfffda868>
   41a98:	9027883a 	mov	r19,r18
   41a9c:	e02b883a 	mov	r21,fp
   41aa0:	b807883a 	mov	r3,r23
   41aa4:	003fb006 	br	41968 <__alt_data_end+0xfffda868>
   41aa8:	9004d43a 	srli	r2,r18,16
   41aac:	9810d43a 	srli	r8,r19,16
   41ab0:	94bfffcc 	andi	r18,r18,65535
   41ab4:	993fffcc 	andi	r4,r19,65535
   41ab8:	910d383a 	mul	r6,r18,r4
   41abc:	20a7383a 	mul	r19,r4,r2
   41ac0:	9225383a 	mul	r18,r18,r8
   41ac4:	3006d43a 	srli	r3,r6,16
   41ac8:	1211383a 	mul	r8,r2,r8
   41acc:	94e5883a 	add	r18,r18,r19
   41ad0:	1c87883a 	add	r3,r3,r18
   41ad4:	1cc0022e 	bgeu	r3,r19,41ae0 <__mulsf3+0x2a0>
   41ad8:	00800074 	movhi	r2,1
   41adc:	4091883a 	add	r8,r8,r2
   41ae0:	1804943a 	slli	r2,r3,16
   41ae4:	31bfffcc 	andi	r6,r6,65535
   41ae8:	1806d43a 	srli	r3,r3,16
   41aec:	1185883a 	add	r2,r2,r6
   41af0:	102691ba 	slli	r19,r2,6
   41af4:	1a07883a 	add	r3,r3,r8
   41af8:	1004d6ba 	srli	r2,r2,26
   41afc:	180891ba 	slli	r4,r3,6
   41b00:	9826c03a 	cmpne	r19,r19,zero
   41b04:	9884b03a 	or	r2,r19,r2
   41b08:	1126b03a 	or	r19,r2,r4
   41b0c:	9882002c 	andhi	r2,r19,2048
   41b10:	10000426 	beq	r2,zero,41b24 <__mulsf3+0x2e4>
   41b14:	9804d07a 	srli	r2,r19,1
   41b18:	9900004c 	andi	r4,r19,1
   41b1c:	3821883a 	mov	r16,r7
   41b20:	1126b03a 	or	r19,r2,r4
   41b24:	80c01fc4 	addi	r3,r16,127
   41b28:	00c0210e 	bge	zero,r3,41bb0 <__mulsf3+0x370>
   41b2c:	988001cc 	andi	r2,r19,7
   41b30:	10000426 	beq	r2,zero,41b44 <__mulsf3+0x304>
   41b34:	988003cc 	andi	r2,r19,15
   41b38:	01000104 	movi	r4,4
   41b3c:	11000126 	beq	r2,r4,41b44 <__mulsf3+0x304>
   41b40:	9927883a 	add	r19,r19,r4
   41b44:	9882002c 	andhi	r2,r19,2048
   41b48:	10000426 	beq	r2,zero,41b5c <__mulsf3+0x31c>
   41b4c:	00be0034 	movhi	r2,63488
   41b50:	10bfffc4 	addi	r2,r2,-1
   41b54:	80c02004 	addi	r3,r16,128
   41b58:	98a6703a 	and	r19,r19,r2
   41b5c:	00803f84 	movi	r2,254
   41b60:	10ffa916 	blt	r2,r3,41a08 <__alt_data_end+0xfffda908>
   41b64:	980891ba 	slli	r4,r19,6
   41b68:	a829883a 	mov	r20,r21
   41b6c:	2008d27a 	srli	r4,r4,9
   41b70:	003f8606 	br	4198c <__alt_data_end+0xfffda88c>
   41b74:	9080102c 	andhi	r2,r18,64
   41b78:	10000826 	beq	r2,zero,41b9c <__mulsf3+0x35c>
   41b7c:	9880102c 	andhi	r2,r19,64
   41b80:	1000061e 	bne	r2,zero,41b9c <__mulsf3+0x35c>
   41b84:	00802034 	movhi	r2,128
   41b88:	99001034 	orhi	r4,r19,64
   41b8c:	10bfffc4 	addi	r2,r2,-1
   41b90:	b029883a 	mov	r20,r22
   41b94:	2088703a 	and	r4,r4,r2
   41b98:	003fba06 	br	41a84 <__alt_data_end+0xfffda984>
   41b9c:	00802034 	movhi	r2,128
   41ba0:	91001034 	orhi	r4,r18,64
   41ba4:	10bfffc4 	addi	r2,r2,-1
   41ba8:	2088703a 	and	r4,r4,r2
   41bac:	003fb506 	br	41a84 <__alt_data_end+0xfffda984>
   41bb0:	00800044 	movi	r2,1
   41bb4:	10c7c83a 	sub	r3,r2,r3
   41bb8:	008006c4 	movi	r2,27
   41bbc:	10ff7016 	blt	r2,r3,41980 <__alt_data_end+0xfffda880>
   41bc0:	00800804 	movi	r2,32
   41bc4:	10c5c83a 	sub	r2,r2,r3
   41bc8:	9884983a 	sll	r2,r19,r2
   41bcc:	98c6d83a 	srl	r3,r19,r3
   41bd0:	1004c03a 	cmpne	r2,r2,zero
   41bd4:	1884b03a 	or	r2,r3,r2
   41bd8:	10c001cc 	andi	r3,r2,7
   41bdc:	18000426 	beq	r3,zero,41bf0 <__mulsf3+0x3b0>
   41be0:	10c003cc 	andi	r3,r2,15
   41be4:	01000104 	movi	r4,4
   41be8:	19000126 	beq	r3,r4,41bf0 <__mulsf3+0x3b0>
   41bec:	1105883a 	add	r2,r2,r4
   41bf0:	10c1002c 	andhi	r3,r2,1024
   41bf4:	18000626 	beq	r3,zero,41c10 <__mulsf3+0x3d0>
   41bf8:	a829883a 	mov	r20,r21
   41bfc:	00c00044 	movi	r3,1
   41c00:	0009883a 	mov	r4,zero
   41c04:	003f6106 	br	4198c <__alt_data_end+0xfffda88c>
   41c08:	3821883a 	mov	r16,r7
   41c0c:	003fc506 	br	41b24 <__alt_data_end+0xfffdaa24>
   41c10:	100491ba 	slli	r2,r2,6
   41c14:	a829883a 	mov	r20,r21
   41c18:	0007883a 	mov	r3,zero
   41c1c:	1008d27a 	srli	r4,r2,9
   41c20:	003f5a06 	br	4198c <__alt_data_end+0xfffda88c>
   41c24:	00802034 	movhi	r2,128
   41c28:	99001034 	orhi	r4,r19,64
   41c2c:	10bfffc4 	addi	r2,r2,-1
   41c30:	a829883a 	mov	r20,r21
   41c34:	2088703a 	and	r4,r4,r2
   41c38:	003f9206 	br	41a84 <__alt_data_end+0xfffda984>

00041c3c <__subsf3>:
   41c3c:	defffc04 	addi	sp,sp,-16
   41c40:	280cd5fa 	srli	r6,r5,23
   41c44:	dc000015 	stw	r16,0(sp)
   41c48:	01c02034 	movhi	r7,128
   41c4c:	2020d5fa 	srli	r16,r4,23
   41c50:	39ffffc4 	addi	r7,r7,-1
   41c54:	3906703a 	and	r3,r7,r4
   41c58:	dc400115 	stw	r17,4(sp)
   41c5c:	394e703a 	and	r7,r7,r5
   41c60:	2022d7fa 	srli	r17,r4,31
   41c64:	dfc00315 	stw	ra,12(sp)
   41c68:	dc800215 	stw	r18,8(sp)
   41c6c:	31803fcc 	andi	r6,r6,255
   41c70:	01003fc4 	movi	r4,255
   41c74:	84003fcc 	andi	r16,r16,255
   41c78:	180690fa 	slli	r3,r3,3
   41c7c:	2804d7fa 	srli	r2,r5,31
   41c80:	380e90fa 	slli	r7,r7,3
   41c84:	31006d26 	beq	r6,r4,41e3c <__subsf3+0x200>
   41c88:	1080005c 	xori	r2,r2,1
   41c8c:	8189c83a 	sub	r4,r16,r6
   41c90:	14404f26 	beq	r2,r17,41dd0 <__subsf3+0x194>
   41c94:	0100770e 	bge	zero,r4,41e74 <__subsf3+0x238>
   41c98:	30001e1e 	bne	r6,zero,41d14 <__subsf3+0xd8>
   41c9c:	38006a1e 	bne	r7,zero,41e48 <__subsf3+0x20c>
   41ca0:	188001cc 	andi	r2,r3,7
   41ca4:	10000426 	beq	r2,zero,41cb8 <__subsf3+0x7c>
   41ca8:	188003cc 	andi	r2,r3,15
   41cac:	01000104 	movi	r4,4
   41cb0:	11000126 	beq	r2,r4,41cb8 <__subsf3+0x7c>
   41cb4:	1907883a 	add	r3,r3,r4
   41cb8:	1881002c 	andhi	r2,r3,1024
   41cbc:	10003926 	beq	r2,zero,41da4 <__subsf3+0x168>
   41cc0:	84000044 	addi	r16,r16,1
   41cc4:	00803fc4 	movi	r2,255
   41cc8:	80807526 	beq	r16,r2,41ea0 <__subsf3+0x264>
   41ccc:	180691ba 	slli	r3,r3,6
   41cd0:	8880004c 	andi	r2,r17,1
   41cd4:	180ad27a 	srli	r5,r3,9
   41cd8:	84003fcc 	andi	r16,r16,255
   41cdc:	800695fa 	slli	r3,r16,23
   41ce0:	10803fcc 	andi	r2,r2,255
   41ce4:	01002034 	movhi	r4,128
   41ce8:	213fffc4 	addi	r4,r4,-1
   41cec:	100497fa 	slli	r2,r2,31
   41cf0:	2920703a 	and	r16,r5,r4
   41cf4:	80e0b03a 	or	r16,r16,r3
   41cf8:	8084b03a 	or	r2,r16,r2
   41cfc:	dfc00317 	ldw	ra,12(sp)
   41d00:	dc800217 	ldw	r18,8(sp)
   41d04:	dc400117 	ldw	r17,4(sp)
   41d08:	dc000017 	ldw	r16,0(sp)
   41d0c:	dec00404 	addi	sp,sp,16
   41d10:	f800283a 	ret
   41d14:	00803fc4 	movi	r2,255
   41d18:	80bfe126 	beq	r16,r2,41ca0 <__alt_data_end+0xfffdaba0>
   41d1c:	39c10034 	orhi	r7,r7,1024
   41d20:	008006c4 	movi	r2,27
   41d24:	11007416 	blt	r2,r4,41ef8 <__subsf3+0x2bc>
   41d28:	00800804 	movi	r2,32
   41d2c:	1105c83a 	sub	r2,r2,r4
   41d30:	3884983a 	sll	r2,r7,r2
   41d34:	390ed83a 	srl	r7,r7,r4
   41d38:	1008c03a 	cmpne	r4,r2,zero
   41d3c:	390eb03a 	or	r7,r7,r4
   41d40:	19c7c83a 	sub	r3,r3,r7
   41d44:	1881002c 	andhi	r2,r3,1024
   41d48:	10001426 	beq	r2,zero,41d9c <__subsf3+0x160>
   41d4c:	04810034 	movhi	r18,1024
   41d50:	94bfffc4 	addi	r18,r18,-1
   41d54:	1ca4703a 	and	r18,r3,r18
   41d58:	9009883a 	mov	r4,r18
   41d5c:	00448e40 	call	448e4 <__clzsi2>
   41d60:	10bffec4 	addi	r2,r2,-5
   41d64:	90a4983a 	sll	r18,r18,r2
   41d68:	14005116 	blt	r2,r16,41eb0 <__subsf3+0x274>
   41d6c:	1405c83a 	sub	r2,r2,r16
   41d70:	10c00044 	addi	r3,r2,1
   41d74:	00800804 	movi	r2,32
   41d78:	10c5c83a 	sub	r2,r2,r3
   41d7c:	9084983a 	sll	r2,r18,r2
   41d80:	90e4d83a 	srl	r18,r18,r3
   41d84:	0021883a 	mov	r16,zero
   41d88:	1006c03a 	cmpne	r3,r2,zero
   41d8c:	90c6b03a 	or	r3,r18,r3
   41d90:	003fc306 	br	41ca0 <__alt_data_end+0xfffdaba0>
   41d94:	2000e026 	beq	r4,zero,42118 <__subsf3+0x4dc>
   41d98:	2007883a 	mov	r3,r4
   41d9c:	188001cc 	andi	r2,r3,7
   41da0:	103fc11e 	bne	r2,zero,41ca8 <__alt_data_end+0xfffdaba8>
   41da4:	180ad0fa 	srli	r5,r3,3
   41da8:	00c03fc4 	movi	r3,255
   41dac:	8880004c 	andi	r2,r17,1
   41db0:	80c0031e 	bne	r16,r3,41dc0 <__subsf3+0x184>
   41db4:	28006d26 	beq	r5,zero,41f6c <__subsf3+0x330>
   41db8:	29401034 	orhi	r5,r5,64
   41dbc:	043fffc4 	movi	r16,-1
   41dc0:	00c02034 	movhi	r3,128
   41dc4:	18ffffc4 	addi	r3,r3,-1
   41dc8:	28ca703a 	and	r5,r5,r3
   41dcc:	003fc206 	br	41cd8 <__alt_data_end+0xfffdabd8>
   41dd0:	01003c0e 	bge	zero,r4,41ec4 <__subsf3+0x288>
   41dd4:	30002126 	beq	r6,zero,41e5c <__subsf3+0x220>
   41dd8:	01403fc4 	movi	r5,255
   41ddc:	817fb026 	beq	r16,r5,41ca0 <__alt_data_end+0xfffdaba0>
   41de0:	39c10034 	orhi	r7,r7,1024
   41de4:	014006c4 	movi	r5,27
   41de8:	29007416 	blt	r5,r4,41fbc <__subsf3+0x380>
   41dec:	01400804 	movi	r5,32
   41df0:	290bc83a 	sub	r5,r5,r4
   41df4:	394a983a 	sll	r5,r7,r5
   41df8:	390ed83a 	srl	r7,r7,r4
   41dfc:	2808c03a 	cmpne	r4,r5,zero
   41e00:	390eb03a 	or	r7,r7,r4
   41e04:	19c7883a 	add	r3,r3,r7
   41e08:	1901002c 	andhi	r4,r3,1024
   41e0c:	20003826 	beq	r4,zero,41ef0 <__subsf3+0x2b4>
   41e10:	84000044 	addi	r16,r16,1
   41e14:	01003fc4 	movi	r4,255
   41e18:	81005426 	beq	r16,r4,41f6c <__subsf3+0x330>
   41e1c:	1023883a 	mov	r17,r2
   41e20:	00bf0034 	movhi	r2,64512
   41e24:	10bfffc4 	addi	r2,r2,-1
   41e28:	1900004c 	andi	r4,r3,1
   41e2c:	1886703a 	and	r3,r3,r2
   41e30:	1806d07a 	srli	r3,r3,1
   41e34:	1906b03a 	or	r3,r3,r4
   41e38:	003f9906 	br	41ca0 <__alt_data_end+0xfffdaba0>
   41e3c:	383f9226 	beq	r7,zero,41c88 <__alt_data_end+0xfffdab88>
   41e40:	10803fcc 	andi	r2,r2,255
   41e44:	003f9106 	br	41c8c <__alt_data_end+0xfffdab8c>
   41e48:	213fffc4 	addi	r4,r4,-1
   41e4c:	203fbc26 	beq	r4,zero,41d40 <__alt_data_end+0xfffdac40>
   41e50:	00803fc4 	movi	r2,255
   41e54:	80bfb21e 	bne	r16,r2,41d20 <__alt_data_end+0xfffdac20>
   41e58:	003f9106 	br	41ca0 <__alt_data_end+0xfffdaba0>
   41e5c:	383f9026 	beq	r7,zero,41ca0 <__alt_data_end+0xfffdaba0>
   41e60:	213fffc4 	addi	r4,r4,-1
   41e64:	203fe726 	beq	r4,zero,41e04 <__alt_data_end+0xfffdad04>
   41e68:	01403fc4 	movi	r5,255
   41e6c:	817fdd1e 	bne	r16,r5,41de4 <__alt_data_end+0xfffdace4>
   41e70:	003f8b06 	br	41ca0 <__alt_data_end+0xfffdaba0>
   41e74:	2000221e 	bne	r4,zero,41f00 <__subsf3+0x2c4>
   41e78:	81000044 	addi	r4,r16,1
   41e7c:	21003fcc 	andi	r4,r4,255
   41e80:	01400044 	movi	r5,1
   41e84:	2900470e 	bge	r5,r4,41fa4 <__subsf3+0x368>
   41e88:	19e5c83a 	sub	r18,r3,r7
   41e8c:	9141002c 	andhi	r5,r18,1024
   41e90:	28002d26 	beq	r5,zero,41f48 <__subsf3+0x30c>
   41e94:	38e5c83a 	sub	r18,r7,r3
   41e98:	1023883a 	mov	r17,r2
   41e9c:	003fae06 	br	41d58 <__alt_data_end+0xfffdac58>
   41ea0:	8880004c 	andi	r2,r17,1
   41ea4:	043fffc4 	movi	r16,-1
   41ea8:	000b883a 	mov	r5,zero
   41eac:	003f8a06 	br	41cd8 <__alt_data_end+0xfffdabd8>
   41eb0:	00ff0034 	movhi	r3,64512
   41eb4:	18ffffc4 	addi	r3,r3,-1
   41eb8:	80a1c83a 	sub	r16,r16,r2
   41ebc:	90c6703a 	and	r3,r18,r3
   41ec0:	003f7706 	br	41ca0 <__alt_data_end+0xfffdaba0>
   41ec4:	2000431e 	bne	r4,zero,41fd4 <__subsf3+0x398>
   41ec8:	81000044 	addi	r4,r16,1
   41ecc:	21803fcc 	andi	r6,r4,255
   41ed0:	01400044 	movi	r5,1
   41ed4:	2980280e 	bge	r5,r6,41f78 <__subsf3+0x33c>
   41ed8:	01403fc4 	movi	r5,255
   41edc:	21402326 	beq	r4,r5,41f6c <__subsf3+0x330>
   41ee0:	19c7883a 	add	r3,r3,r7
   41ee4:	1806d07a 	srli	r3,r3,1
   41ee8:	2021883a 	mov	r16,r4
   41eec:	003f6c06 	br	41ca0 <__alt_data_end+0xfffdaba0>
   41ef0:	1023883a 	mov	r17,r2
   41ef4:	003fa906 	br	41d9c <__alt_data_end+0xfffdac9c>
   41ef8:	01c00044 	movi	r7,1
   41efc:	003f9006 	br	41d40 <__alt_data_end+0xfffdac40>
   41f00:	8000151e 	bne	r16,zero,41f58 <__subsf3+0x31c>
   41f04:	18002f26 	beq	r3,zero,41fc4 <__subsf3+0x388>
   41f08:	0108303a 	nor	r4,zero,r4
   41f0c:	20000a26 	beq	r4,zero,41f38 <__subsf3+0x2fc>
   41f10:	01403fc4 	movi	r5,255
   41f14:	31402b26 	beq	r6,r5,41fc4 <__subsf3+0x388>
   41f18:	014006c4 	movi	r5,27
   41f1c:	29006e16 	blt	r5,r4,420d8 <__subsf3+0x49c>
   41f20:	01400804 	movi	r5,32
   41f24:	290bc83a 	sub	r5,r5,r4
   41f28:	194a983a 	sll	r5,r3,r5
   41f2c:	1908d83a 	srl	r4,r3,r4
   41f30:	2806c03a 	cmpne	r3,r5,zero
   41f34:	20c6b03a 	or	r3,r4,r3
   41f38:	38c7c83a 	sub	r3,r7,r3
   41f3c:	3021883a 	mov	r16,r6
   41f40:	1023883a 	mov	r17,r2
   41f44:	003f7f06 	br	41d44 <__alt_data_end+0xfffdac44>
   41f48:	903f831e 	bne	r18,zero,41d58 <__alt_data_end+0xfffdac58>
   41f4c:	0005883a 	mov	r2,zero
   41f50:	0021883a 	mov	r16,zero
   41f54:	003f9a06 	br	41dc0 <__alt_data_end+0xfffdacc0>
   41f58:	01403fc4 	movi	r5,255
   41f5c:	31401926 	beq	r6,r5,41fc4 <__subsf3+0x388>
   41f60:	0109c83a 	sub	r4,zero,r4
   41f64:	18c10034 	orhi	r3,r3,1024
   41f68:	003feb06 	br	41f18 <__alt_data_end+0xfffdae18>
   41f6c:	043fffc4 	movi	r16,-1
   41f70:	000b883a 	mov	r5,zero
   41f74:	003f5806 	br	41cd8 <__alt_data_end+0xfffdabd8>
   41f78:	8000481e 	bne	r16,zero,4209c <__subsf3+0x460>
   41f7c:	18006226 	beq	r3,zero,42108 <__subsf3+0x4cc>
   41f80:	383f4726 	beq	r7,zero,41ca0 <__alt_data_end+0xfffdaba0>
   41f84:	19c7883a 	add	r3,r3,r7
   41f88:	1881002c 	andhi	r2,r3,1024
   41f8c:	103f8326 	beq	r2,zero,41d9c <__alt_data_end+0xfffdac9c>
   41f90:	00bf0034 	movhi	r2,64512
   41f94:	10bfffc4 	addi	r2,r2,-1
   41f98:	2821883a 	mov	r16,r5
   41f9c:	1886703a 	and	r3,r3,r2
   41fa0:	003f3f06 	br	41ca0 <__alt_data_end+0xfffdaba0>
   41fa4:	80001c1e 	bne	r16,zero,42018 <__subsf3+0x3dc>
   41fa8:	1800261e 	bne	r3,zero,42044 <__subsf3+0x408>
   41fac:	38004c26 	beq	r7,zero,420e0 <__subsf3+0x4a4>
   41fb0:	3807883a 	mov	r3,r7
   41fb4:	1023883a 	mov	r17,r2
   41fb8:	003f3906 	br	41ca0 <__alt_data_end+0xfffdaba0>
   41fbc:	01c00044 	movi	r7,1
   41fc0:	003f9006 	br	41e04 <__alt_data_end+0xfffdad04>
   41fc4:	3807883a 	mov	r3,r7
   41fc8:	3021883a 	mov	r16,r6
   41fcc:	1023883a 	mov	r17,r2
   41fd0:	003f3306 	br	41ca0 <__alt_data_end+0xfffdaba0>
   41fd4:	8000161e 	bne	r16,zero,42030 <__subsf3+0x3f4>
   41fd8:	18002d26 	beq	r3,zero,42090 <__subsf3+0x454>
   41fdc:	0108303a 	nor	r4,zero,r4
   41fe0:	20000a26 	beq	r4,zero,4200c <__subsf3+0x3d0>
   41fe4:	01403fc4 	movi	r5,255
   41fe8:	31402926 	beq	r6,r5,42090 <__subsf3+0x454>
   41fec:	014006c4 	movi	r5,27
   41ff0:	29004716 	blt	r5,r4,42110 <__subsf3+0x4d4>
   41ff4:	01400804 	movi	r5,32
   41ff8:	290bc83a 	sub	r5,r5,r4
   41ffc:	194a983a 	sll	r5,r3,r5
   42000:	1908d83a 	srl	r4,r3,r4
   42004:	2806c03a 	cmpne	r3,r5,zero
   42008:	20c6b03a 	or	r3,r4,r3
   4200c:	19c7883a 	add	r3,r3,r7
   42010:	3021883a 	mov	r16,r6
   42014:	003f7c06 	br	41e08 <__alt_data_end+0xfffdad08>
   42018:	1800111e 	bne	r3,zero,42060 <__subsf3+0x424>
   4201c:	38003326 	beq	r7,zero,420ec <__subsf3+0x4b0>
   42020:	3807883a 	mov	r3,r7
   42024:	1023883a 	mov	r17,r2
   42028:	04003fc4 	movi	r16,255
   4202c:	003f1c06 	br	41ca0 <__alt_data_end+0xfffdaba0>
   42030:	01403fc4 	movi	r5,255
   42034:	31401626 	beq	r6,r5,42090 <__subsf3+0x454>
   42038:	0109c83a 	sub	r4,zero,r4
   4203c:	18c10034 	orhi	r3,r3,1024
   42040:	003fea06 	br	41fec <__alt_data_end+0xfffdaeec>
   42044:	383f1626 	beq	r7,zero,41ca0 <__alt_data_end+0xfffdaba0>
   42048:	19c9c83a 	sub	r4,r3,r7
   4204c:	2141002c 	andhi	r5,r4,1024
   42050:	283f5026 	beq	r5,zero,41d94 <__alt_data_end+0xfffdac94>
   42054:	38c7c83a 	sub	r3,r7,r3
   42058:	1023883a 	mov	r17,r2
   4205c:	003f1006 	br	41ca0 <__alt_data_end+0xfffdaba0>
   42060:	38001b26 	beq	r7,zero,420d0 <__subsf3+0x494>
   42064:	1806d0fa 	srli	r3,r3,3
   42068:	1900102c 	andhi	r4,r3,64
   4206c:	20000526 	beq	r4,zero,42084 <__subsf3+0x448>
   42070:	380ed0fa 	srli	r7,r7,3
   42074:	3900102c 	andhi	r4,r7,64
   42078:	2000021e 	bne	r4,zero,42084 <__subsf3+0x448>
   4207c:	3807883a 	mov	r3,r7
   42080:	1023883a 	mov	r17,r2
   42084:	180690fa 	slli	r3,r3,3
   42088:	04003fc4 	movi	r16,255
   4208c:	003f0406 	br	41ca0 <__alt_data_end+0xfffdaba0>
   42090:	3807883a 	mov	r3,r7
   42094:	3021883a 	mov	r16,r6
   42098:	003f0106 	br	41ca0 <__alt_data_end+0xfffdaba0>
   4209c:	18001726 	beq	r3,zero,420fc <__subsf3+0x4c0>
   420a0:	38000b26 	beq	r7,zero,420d0 <__subsf3+0x494>
   420a4:	1806d0fa 	srli	r3,r3,3
   420a8:	1900102c 	andhi	r4,r3,64
   420ac:	20000426 	beq	r4,zero,420c0 <__subsf3+0x484>
   420b0:	380ed0fa 	srli	r7,r7,3
   420b4:	3900102c 	andhi	r4,r7,64
   420b8:	2000011e 	bne	r4,zero,420c0 <__subsf3+0x484>
   420bc:	3807883a 	mov	r3,r7
   420c0:	180690fa 	slli	r3,r3,3
   420c4:	1023883a 	mov	r17,r2
   420c8:	04003fc4 	movi	r16,255
   420cc:	003ef406 	br	41ca0 <__alt_data_end+0xfffdaba0>
   420d0:	04003fc4 	movi	r16,255
   420d4:	003ef206 	br	41ca0 <__alt_data_end+0xfffdaba0>
   420d8:	00c00044 	movi	r3,1
   420dc:	003f9606 	br	41f38 <__alt_data_end+0xfffdae38>
   420e0:	000b883a 	mov	r5,zero
   420e4:	0005883a 	mov	r2,zero
   420e8:	003f3506 	br	41dc0 <__alt_data_end+0xfffdacc0>
   420ec:	01402034 	movhi	r5,128
   420f0:	297fffc4 	addi	r5,r5,-1
   420f4:	0005883a 	mov	r2,zero
   420f8:	003f2f06 	br	41db8 <__alt_data_end+0xfffdacb8>
   420fc:	3807883a 	mov	r3,r7
   42100:	04003fc4 	movi	r16,255
   42104:	003ee606 	br	41ca0 <__alt_data_end+0xfffdaba0>
   42108:	3807883a 	mov	r3,r7
   4210c:	003ee406 	br	41ca0 <__alt_data_end+0xfffdaba0>
   42110:	00c00044 	movi	r3,1
   42114:	003fbd06 	br	4200c <__alt_data_end+0xfffdaf0c>
   42118:	0005883a 	mov	r2,zero
   4211c:	003f2806 	br	41dc0 <__alt_data_end+0xfffdacc0>

00042120 <__floatsisf>:
   42120:	defffd04 	addi	sp,sp,-12
   42124:	dfc00215 	stw	ra,8(sp)
   42128:	dc400115 	stw	r17,4(sp)
   4212c:	dc000015 	stw	r16,0(sp)
   42130:	20003526 	beq	r4,zero,42208 <__floatsisf+0xe8>
   42134:	2021883a 	mov	r16,r4
   42138:	2022d7fa 	srli	r17,r4,31
   4213c:	20003616 	blt	r4,zero,42218 <__floatsisf+0xf8>
   42140:	8009883a 	mov	r4,r16
   42144:	00448e40 	call	448e4 <__clzsi2>
   42148:	00c02784 	movi	r3,158
   4214c:	1887c83a 	sub	r3,r3,r2
   42150:	01002584 	movi	r4,150
   42154:	20c01416 	blt	r4,r3,421a8 <__floatsisf+0x88>
   42158:	20c9c83a 	sub	r4,r4,r3
   4215c:	8120983a 	sll	r16,r16,r4
   42160:	00802034 	movhi	r2,128
   42164:	10bfffc4 	addi	r2,r2,-1
   42168:	8809883a 	mov	r4,r17
   4216c:	80a0703a 	and	r16,r16,r2
   42170:	18803fcc 	andi	r2,r3,255
   42174:	100695fa 	slli	r3,r2,23
   42178:	20803fcc 	andi	r2,r4,255
   4217c:	100897fa 	slli	r4,r2,31
   42180:	00802034 	movhi	r2,128
   42184:	10bfffc4 	addi	r2,r2,-1
   42188:	8084703a 	and	r2,r16,r2
   4218c:	10c4b03a 	or	r2,r2,r3
   42190:	1104b03a 	or	r2,r2,r4
   42194:	dfc00217 	ldw	ra,8(sp)
   42198:	dc400117 	ldw	r17,4(sp)
   4219c:	dc000017 	ldw	r16,0(sp)
   421a0:	dec00304 	addi	sp,sp,12
   421a4:	f800283a 	ret
   421a8:	01002644 	movi	r4,153
   421ac:	20c01c16 	blt	r4,r3,42220 <__floatsisf+0x100>
   421b0:	20c9c83a 	sub	r4,r4,r3
   421b4:	8120983a 	sll	r16,r16,r4
   421b8:	013f0034 	movhi	r4,64512
   421bc:	213fffc4 	addi	r4,r4,-1
   421c0:	814001cc 	andi	r5,r16,7
   421c4:	8108703a 	and	r4,r16,r4
   421c8:	28000426 	beq	r5,zero,421dc <__floatsisf+0xbc>
   421cc:	840003cc 	andi	r16,r16,15
   421d0:	01400104 	movi	r5,4
   421d4:	81400126 	beq	r16,r5,421dc <__floatsisf+0xbc>
   421d8:	2149883a 	add	r4,r4,r5
   421dc:	2141002c 	andhi	r5,r4,1024
   421e0:	28000526 	beq	r5,zero,421f8 <__floatsisf+0xd8>
   421e4:	00c027c4 	movi	r3,159
   421e8:	1887c83a 	sub	r3,r3,r2
   421ec:	00bf0034 	movhi	r2,64512
   421f0:	10bfffc4 	addi	r2,r2,-1
   421f4:	2088703a 	and	r4,r4,r2
   421f8:	202091ba 	slli	r16,r4,6
   421fc:	8809883a 	mov	r4,r17
   42200:	8020d27a 	srli	r16,r16,9
   42204:	003fda06 	br	42170 <__alt_data_end+0xfffdb070>
   42208:	0009883a 	mov	r4,zero
   4220c:	0007883a 	mov	r3,zero
   42210:	0021883a 	mov	r16,zero
   42214:	003fd606 	br	42170 <__alt_data_end+0xfffdb070>
   42218:	0121c83a 	sub	r16,zero,r4
   4221c:	003fc806 	br	42140 <__alt_data_end+0xfffdb040>
   42220:	01002e44 	movi	r4,185
   42224:	20c9c83a 	sub	r4,r4,r3
   42228:	01400144 	movi	r5,5
   4222c:	8108983a 	sll	r4,r16,r4
   42230:	288bc83a 	sub	r5,r5,r2
   42234:	8160d83a 	srl	r16,r16,r5
   42238:	2008c03a 	cmpne	r4,r4,zero
   4223c:	8120b03a 	or	r16,r16,r4
   42240:	003fdd06 	br	421b8 <__alt_data_end+0xfffdb0b8>

00042244 <__adddf3>:
   42244:	02c00434 	movhi	r11,16
   42248:	5affffc4 	addi	r11,r11,-1
   4224c:	2806d7fa 	srli	r3,r5,31
   42250:	2ad4703a 	and	r10,r5,r11
   42254:	3ad2703a 	and	r9,r7,r11
   42258:	3804d53a 	srli	r2,r7,20
   4225c:	3018d77a 	srli	r12,r6,29
   42260:	280ad53a 	srli	r5,r5,20
   42264:	501490fa 	slli	r10,r10,3
   42268:	2010d77a 	srli	r8,r4,29
   4226c:	481290fa 	slli	r9,r9,3
   42270:	380ed7fa 	srli	r7,r7,31
   42274:	defffb04 	addi	sp,sp,-20
   42278:	dc800215 	stw	r18,8(sp)
   4227c:	dc400115 	stw	r17,4(sp)
   42280:	dc000015 	stw	r16,0(sp)
   42284:	dfc00415 	stw	ra,16(sp)
   42288:	dcc00315 	stw	r19,12(sp)
   4228c:	1c803fcc 	andi	r18,r3,255
   42290:	2c01ffcc 	andi	r16,r5,2047
   42294:	5210b03a 	or	r8,r10,r8
   42298:	202290fa 	slli	r17,r4,3
   4229c:	1081ffcc 	andi	r2,r2,2047
   422a0:	4b12b03a 	or	r9,r9,r12
   422a4:	300c90fa 	slli	r6,r6,3
   422a8:	91c07526 	beq	r18,r7,42480 <__adddf3+0x23c>
   422ac:	8087c83a 	sub	r3,r16,r2
   422b0:	00c0ab0e 	bge	zero,r3,42560 <__adddf3+0x31c>
   422b4:	10002a1e 	bne	r2,zero,42360 <__adddf3+0x11c>
   422b8:	4984b03a 	or	r2,r9,r6
   422bc:	1000961e 	bne	r2,zero,42518 <__adddf3+0x2d4>
   422c0:	888001cc 	andi	r2,r17,7
   422c4:	10000726 	beq	r2,zero,422e4 <__adddf3+0xa0>
   422c8:	888003cc 	andi	r2,r17,15
   422cc:	00c00104 	movi	r3,4
   422d0:	10c00426 	beq	r2,r3,422e4 <__adddf3+0xa0>
   422d4:	88c7883a 	add	r3,r17,r3
   422d8:	1c63803a 	cmpltu	r17,r3,r17
   422dc:	4451883a 	add	r8,r8,r17
   422e0:	1823883a 	mov	r17,r3
   422e4:	4080202c 	andhi	r2,r8,128
   422e8:	10005926 	beq	r2,zero,42450 <__adddf3+0x20c>
   422ec:	84000044 	addi	r16,r16,1
   422f0:	0081ffc4 	movi	r2,2047
   422f4:	8080ba26 	beq	r16,r2,425e0 <__adddf3+0x39c>
   422f8:	00bfe034 	movhi	r2,65408
   422fc:	10bfffc4 	addi	r2,r2,-1
   42300:	4090703a 	and	r8,r8,r2
   42304:	4004977a 	slli	r2,r8,29
   42308:	4010927a 	slli	r8,r8,9
   4230c:	8822d0fa 	srli	r17,r17,3
   42310:	8401ffcc 	andi	r16,r16,2047
   42314:	4010d33a 	srli	r8,r8,12
   42318:	9007883a 	mov	r3,r18
   4231c:	1444b03a 	or	r2,r2,r17
   42320:	8401ffcc 	andi	r16,r16,2047
   42324:	8020953a 	slli	r16,r16,20
   42328:	18c03fcc 	andi	r3,r3,255
   4232c:	01000434 	movhi	r4,16
   42330:	213fffc4 	addi	r4,r4,-1
   42334:	180697fa 	slli	r3,r3,31
   42338:	4110703a 	and	r8,r8,r4
   4233c:	4410b03a 	or	r8,r8,r16
   42340:	40c6b03a 	or	r3,r8,r3
   42344:	dfc00417 	ldw	ra,16(sp)
   42348:	dcc00317 	ldw	r19,12(sp)
   4234c:	dc800217 	ldw	r18,8(sp)
   42350:	dc400117 	ldw	r17,4(sp)
   42354:	dc000017 	ldw	r16,0(sp)
   42358:	dec00504 	addi	sp,sp,20
   4235c:	f800283a 	ret
   42360:	0081ffc4 	movi	r2,2047
   42364:	80bfd626 	beq	r16,r2,422c0 <__alt_data_end+0xfffdb1c0>
   42368:	4a402034 	orhi	r9,r9,128
   4236c:	00800e04 	movi	r2,56
   42370:	10c09f16 	blt	r2,r3,425f0 <__adddf3+0x3ac>
   42374:	008007c4 	movi	r2,31
   42378:	10c0c216 	blt	r2,r3,42684 <__adddf3+0x440>
   4237c:	00800804 	movi	r2,32
   42380:	10c5c83a 	sub	r2,r2,r3
   42384:	488a983a 	sll	r5,r9,r2
   42388:	30c8d83a 	srl	r4,r6,r3
   4238c:	3084983a 	sll	r2,r6,r2
   42390:	48c6d83a 	srl	r3,r9,r3
   42394:	290cb03a 	or	r6,r5,r4
   42398:	1004c03a 	cmpne	r2,r2,zero
   4239c:	308cb03a 	or	r6,r6,r2
   423a0:	898dc83a 	sub	r6,r17,r6
   423a4:	89a3803a 	cmpltu	r17,r17,r6
   423a8:	40d1c83a 	sub	r8,r8,r3
   423ac:	4451c83a 	sub	r8,r8,r17
   423b0:	3023883a 	mov	r17,r6
   423b4:	4080202c 	andhi	r2,r8,128
   423b8:	10002326 	beq	r2,zero,42448 <__adddf3+0x204>
   423bc:	04c02034 	movhi	r19,128
   423c0:	9cffffc4 	addi	r19,r19,-1
   423c4:	44e6703a 	and	r19,r8,r19
   423c8:	98007626 	beq	r19,zero,425a4 <__adddf3+0x360>
   423cc:	9809883a 	mov	r4,r19
   423d0:	00448e40 	call	448e4 <__clzsi2>
   423d4:	10fffe04 	addi	r3,r2,-8
   423d8:	010007c4 	movi	r4,31
   423dc:	20c07716 	blt	r4,r3,425bc <__adddf3+0x378>
   423e0:	00800804 	movi	r2,32
   423e4:	10c5c83a 	sub	r2,r2,r3
   423e8:	8884d83a 	srl	r2,r17,r2
   423ec:	98d0983a 	sll	r8,r19,r3
   423f0:	88e2983a 	sll	r17,r17,r3
   423f4:	1204b03a 	or	r2,r2,r8
   423f8:	1c007416 	blt	r3,r16,425cc <__adddf3+0x388>
   423fc:	1c21c83a 	sub	r16,r3,r16
   42400:	82000044 	addi	r8,r16,1
   42404:	00c007c4 	movi	r3,31
   42408:	1a009116 	blt	r3,r8,42650 <__adddf3+0x40c>
   4240c:	00c00804 	movi	r3,32
   42410:	1a07c83a 	sub	r3,r3,r8
   42414:	8a08d83a 	srl	r4,r17,r8
   42418:	88e2983a 	sll	r17,r17,r3
   4241c:	10c6983a 	sll	r3,r2,r3
   42420:	1210d83a 	srl	r8,r2,r8
   42424:	8804c03a 	cmpne	r2,r17,zero
   42428:	1906b03a 	or	r3,r3,r4
   4242c:	18a2b03a 	or	r17,r3,r2
   42430:	0021883a 	mov	r16,zero
   42434:	003fa206 	br	422c0 <__alt_data_end+0xfffdb1c0>
   42438:	1890b03a 	or	r8,r3,r2
   4243c:	40017d26 	beq	r8,zero,42a34 <__adddf3+0x7f0>
   42440:	1011883a 	mov	r8,r2
   42444:	1823883a 	mov	r17,r3
   42448:	888001cc 	andi	r2,r17,7
   4244c:	103f9e1e 	bne	r2,zero,422c8 <__alt_data_end+0xfffdb1c8>
   42450:	4004977a 	slli	r2,r8,29
   42454:	8822d0fa 	srli	r17,r17,3
   42458:	4010d0fa 	srli	r8,r8,3
   4245c:	9007883a 	mov	r3,r18
   42460:	1444b03a 	or	r2,r2,r17
   42464:	0101ffc4 	movi	r4,2047
   42468:	81002426 	beq	r16,r4,424fc <__adddf3+0x2b8>
   4246c:	8120703a 	and	r16,r16,r4
   42470:	01000434 	movhi	r4,16
   42474:	213fffc4 	addi	r4,r4,-1
   42478:	4110703a 	and	r8,r8,r4
   4247c:	003fa806 	br	42320 <__alt_data_end+0xfffdb220>
   42480:	8089c83a 	sub	r4,r16,r2
   42484:	01005e0e 	bge	zero,r4,42600 <__adddf3+0x3bc>
   42488:	10002b26 	beq	r2,zero,42538 <__adddf3+0x2f4>
   4248c:	0081ffc4 	movi	r2,2047
   42490:	80bf8b26 	beq	r16,r2,422c0 <__alt_data_end+0xfffdb1c0>
   42494:	4a402034 	orhi	r9,r9,128
   42498:	00800e04 	movi	r2,56
   4249c:	1100a40e 	bge	r2,r4,42730 <__adddf3+0x4ec>
   424a0:	498cb03a 	or	r6,r9,r6
   424a4:	300ac03a 	cmpne	r5,r6,zero
   424a8:	0013883a 	mov	r9,zero
   424ac:	2c4b883a 	add	r5,r5,r17
   424b0:	2c63803a 	cmpltu	r17,r5,r17
   424b4:	4a11883a 	add	r8,r9,r8
   424b8:	8a11883a 	add	r8,r17,r8
   424bc:	2823883a 	mov	r17,r5
   424c0:	4080202c 	andhi	r2,r8,128
   424c4:	103fe026 	beq	r2,zero,42448 <__alt_data_end+0xfffdb348>
   424c8:	84000044 	addi	r16,r16,1
   424cc:	0081ffc4 	movi	r2,2047
   424d0:	8080d226 	beq	r16,r2,4281c <__adddf3+0x5d8>
   424d4:	00bfe034 	movhi	r2,65408
   424d8:	10bfffc4 	addi	r2,r2,-1
   424dc:	4090703a 	and	r8,r8,r2
   424e0:	880ad07a 	srli	r5,r17,1
   424e4:	400897fa 	slli	r4,r8,31
   424e8:	88c0004c 	andi	r3,r17,1
   424ec:	28e2b03a 	or	r17,r5,r3
   424f0:	4010d07a 	srli	r8,r8,1
   424f4:	2462b03a 	or	r17,r4,r17
   424f8:	003f7106 	br	422c0 <__alt_data_end+0xfffdb1c0>
   424fc:	4088b03a 	or	r4,r8,r2
   42500:	20014526 	beq	r4,zero,42a18 <__adddf3+0x7d4>
   42504:	01000434 	movhi	r4,16
   42508:	42000234 	orhi	r8,r8,8
   4250c:	213fffc4 	addi	r4,r4,-1
   42510:	4110703a 	and	r8,r8,r4
   42514:	003f8206 	br	42320 <__alt_data_end+0xfffdb220>
   42518:	18ffffc4 	addi	r3,r3,-1
   4251c:	1800491e 	bne	r3,zero,42644 <__adddf3+0x400>
   42520:	898bc83a 	sub	r5,r17,r6
   42524:	8963803a 	cmpltu	r17,r17,r5
   42528:	4251c83a 	sub	r8,r8,r9
   4252c:	4451c83a 	sub	r8,r8,r17
   42530:	2823883a 	mov	r17,r5
   42534:	003f9f06 	br	423b4 <__alt_data_end+0xfffdb2b4>
   42538:	4984b03a 	or	r2,r9,r6
   4253c:	103f6026 	beq	r2,zero,422c0 <__alt_data_end+0xfffdb1c0>
   42540:	213fffc4 	addi	r4,r4,-1
   42544:	2000931e 	bne	r4,zero,42794 <__adddf3+0x550>
   42548:	898d883a 	add	r6,r17,r6
   4254c:	3463803a 	cmpltu	r17,r6,r17
   42550:	4251883a 	add	r8,r8,r9
   42554:	8a11883a 	add	r8,r17,r8
   42558:	3023883a 	mov	r17,r6
   4255c:	003fd806 	br	424c0 <__alt_data_end+0xfffdb3c0>
   42560:	1800541e 	bne	r3,zero,426b4 <__adddf3+0x470>
   42564:	80800044 	addi	r2,r16,1
   42568:	1081ffcc 	andi	r2,r2,2047
   4256c:	00c00044 	movi	r3,1
   42570:	1880a00e 	bge	r3,r2,427f4 <__adddf3+0x5b0>
   42574:	8989c83a 	sub	r4,r17,r6
   42578:	8905803a 	cmpltu	r2,r17,r4
   4257c:	4267c83a 	sub	r19,r8,r9
   42580:	98a7c83a 	sub	r19,r19,r2
   42584:	9880202c 	andhi	r2,r19,128
   42588:	10006326 	beq	r2,zero,42718 <__adddf3+0x4d4>
   4258c:	3463c83a 	sub	r17,r6,r17
   42590:	4a07c83a 	sub	r3,r9,r8
   42594:	344d803a 	cmpltu	r6,r6,r17
   42598:	19a7c83a 	sub	r19,r3,r6
   4259c:	3825883a 	mov	r18,r7
   425a0:	983f8a1e 	bne	r19,zero,423cc <__alt_data_end+0xfffdb2cc>
   425a4:	8809883a 	mov	r4,r17
   425a8:	00448e40 	call	448e4 <__clzsi2>
   425ac:	10800804 	addi	r2,r2,32
   425b0:	10fffe04 	addi	r3,r2,-8
   425b4:	010007c4 	movi	r4,31
   425b8:	20ff890e 	bge	r4,r3,423e0 <__alt_data_end+0xfffdb2e0>
   425bc:	10bff604 	addi	r2,r2,-40
   425c0:	8884983a 	sll	r2,r17,r2
   425c4:	0023883a 	mov	r17,zero
   425c8:	1c3f8c0e 	bge	r3,r16,423fc <__alt_data_end+0xfffdb2fc>
   425cc:	023fe034 	movhi	r8,65408
   425d0:	423fffc4 	addi	r8,r8,-1
   425d4:	80e1c83a 	sub	r16,r16,r3
   425d8:	1210703a 	and	r8,r2,r8
   425dc:	003f3806 	br	422c0 <__alt_data_end+0xfffdb1c0>
   425e0:	9007883a 	mov	r3,r18
   425e4:	0011883a 	mov	r8,zero
   425e8:	0005883a 	mov	r2,zero
   425ec:	003f4c06 	br	42320 <__alt_data_end+0xfffdb220>
   425f0:	498cb03a 	or	r6,r9,r6
   425f4:	300cc03a 	cmpne	r6,r6,zero
   425f8:	0007883a 	mov	r3,zero
   425fc:	003f6806 	br	423a0 <__alt_data_end+0xfffdb2a0>
   42600:	20009c1e 	bne	r4,zero,42874 <__adddf3+0x630>
   42604:	80800044 	addi	r2,r16,1
   42608:	1141ffcc 	andi	r5,r2,2047
   4260c:	01000044 	movi	r4,1
   42610:	2140670e 	bge	r4,r5,427b0 <__adddf3+0x56c>
   42614:	0101ffc4 	movi	r4,2047
   42618:	11007f26 	beq	r2,r4,42818 <__adddf3+0x5d4>
   4261c:	898d883a 	add	r6,r17,r6
   42620:	4247883a 	add	r3,r8,r9
   42624:	3451803a 	cmpltu	r8,r6,r17
   42628:	40d1883a 	add	r8,r8,r3
   4262c:	402297fa 	slli	r17,r8,31
   42630:	300cd07a 	srli	r6,r6,1
   42634:	4010d07a 	srli	r8,r8,1
   42638:	1021883a 	mov	r16,r2
   4263c:	89a2b03a 	or	r17,r17,r6
   42640:	003f1f06 	br	422c0 <__alt_data_end+0xfffdb1c0>
   42644:	0081ffc4 	movi	r2,2047
   42648:	80bf481e 	bne	r16,r2,4236c <__alt_data_end+0xfffdb26c>
   4264c:	003f1c06 	br	422c0 <__alt_data_end+0xfffdb1c0>
   42650:	843ff844 	addi	r16,r16,-31
   42654:	01000804 	movi	r4,32
   42658:	1406d83a 	srl	r3,r2,r16
   4265c:	41005026 	beq	r8,r4,427a0 <__adddf3+0x55c>
   42660:	01001004 	movi	r4,64
   42664:	2211c83a 	sub	r8,r4,r8
   42668:	1204983a 	sll	r2,r2,r8
   4266c:	88a2b03a 	or	r17,r17,r2
   42670:	8822c03a 	cmpne	r17,r17,zero
   42674:	1c62b03a 	or	r17,r3,r17
   42678:	0011883a 	mov	r8,zero
   4267c:	0021883a 	mov	r16,zero
   42680:	003f7106 	br	42448 <__alt_data_end+0xfffdb348>
   42684:	193ff804 	addi	r4,r3,-32
   42688:	00800804 	movi	r2,32
   4268c:	4908d83a 	srl	r4,r9,r4
   42690:	18804526 	beq	r3,r2,427a8 <__adddf3+0x564>
   42694:	00801004 	movi	r2,64
   42698:	10c5c83a 	sub	r2,r2,r3
   4269c:	4886983a 	sll	r3,r9,r2
   426a0:	198cb03a 	or	r6,r3,r6
   426a4:	300cc03a 	cmpne	r6,r6,zero
   426a8:	218cb03a 	or	r6,r4,r6
   426ac:	0007883a 	mov	r3,zero
   426b0:	003f3b06 	br	423a0 <__alt_data_end+0xfffdb2a0>
   426b4:	80002a26 	beq	r16,zero,42760 <__adddf3+0x51c>
   426b8:	0101ffc4 	movi	r4,2047
   426bc:	11006826 	beq	r2,r4,42860 <__adddf3+0x61c>
   426c0:	00c7c83a 	sub	r3,zero,r3
   426c4:	42002034 	orhi	r8,r8,128
   426c8:	01000e04 	movi	r4,56
   426cc:	20c07c16 	blt	r4,r3,428c0 <__adddf3+0x67c>
   426d0:	010007c4 	movi	r4,31
   426d4:	20c0da16 	blt	r4,r3,42a40 <__adddf3+0x7fc>
   426d8:	01000804 	movi	r4,32
   426dc:	20c9c83a 	sub	r4,r4,r3
   426e0:	4114983a 	sll	r10,r8,r4
   426e4:	88cad83a 	srl	r5,r17,r3
   426e8:	8908983a 	sll	r4,r17,r4
   426ec:	40c6d83a 	srl	r3,r8,r3
   426f0:	5162b03a 	or	r17,r10,r5
   426f4:	2008c03a 	cmpne	r4,r4,zero
   426f8:	8922b03a 	or	r17,r17,r4
   426fc:	3463c83a 	sub	r17,r6,r17
   42700:	48c7c83a 	sub	r3,r9,r3
   42704:	344d803a 	cmpltu	r6,r6,r17
   42708:	1991c83a 	sub	r8,r3,r6
   4270c:	1021883a 	mov	r16,r2
   42710:	3825883a 	mov	r18,r7
   42714:	003f2706 	br	423b4 <__alt_data_end+0xfffdb2b4>
   42718:	24d0b03a 	or	r8,r4,r19
   4271c:	40001b1e 	bne	r8,zero,4278c <__adddf3+0x548>
   42720:	0005883a 	mov	r2,zero
   42724:	0007883a 	mov	r3,zero
   42728:	0021883a 	mov	r16,zero
   4272c:	003f4d06 	br	42464 <__alt_data_end+0xfffdb364>
   42730:	008007c4 	movi	r2,31
   42734:	11003c16 	blt	r2,r4,42828 <__adddf3+0x5e4>
   42738:	00800804 	movi	r2,32
   4273c:	1105c83a 	sub	r2,r2,r4
   42740:	488e983a 	sll	r7,r9,r2
   42744:	310ad83a 	srl	r5,r6,r4
   42748:	3084983a 	sll	r2,r6,r2
   4274c:	4912d83a 	srl	r9,r9,r4
   42750:	394ab03a 	or	r5,r7,r5
   42754:	1004c03a 	cmpne	r2,r2,zero
   42758:	288ab03a 	or	r5,r5,r2
   4275c:	003f5306 	br	424ac <__alt_data_end+0xfffdb3ac>
   42760:	4448b03a 	or	r4,r8,r17
   42764:	20003e26 	beq	r4,zero,42860 <__adddf3+0x61c>
   42768:	00c6303a 	nor	r3,zero,r3
   4276c:	18003a1e 	bne	r3,zero,42858 <__adddf3+0x614>
   42770:	3463c83a 	sub	r17,r6,r17
   42774:	4a07c83a 	sub	r3,r9,r8
   42778:	344d803a 	cmpltu	r6,r6,r17
   4277c:	1991c83a 	sub	r8,r3,r6
   42780:	1021883a 	mov	r16,r2
   42784:	3825883a 	mov	r18,r7
   42788:	003f0a06 	br	423b4 <__alt_data_end+0xfffdb2b4>
   4278c:	2023883a 	mov	r17,r4
   42790:	003f0d06 	br	423c8 <__alt_data_end+0xfffdb2c8>
   42794:	0081ffc4 	movi	r2,2047
   42798:	80bf3f1e 	bne	r16,r2,42498 <__alt_data_end+0xfffdb398>
   4279c:	003ec806 	br	422c0 <__alt_data_end+0xfffdb1c0>
   427a0:	0005883a 	mov	r2,zero
   427a4:	003fb106 	br	4266c <__alt_data_end+0xfffdb56c>
   427a8:	0007883a 	mov	r3,zero
   427ac:	003fbc06 	br	426a0 <__alt_data_end+0xfffdb5a0>
   427b0:	4444b03a 	or	r2,r8,r17
   427b4:	8000871e 	bne	r16,zero,429d4 <__adddf3+0x790>
   427b8:	1000ba26 	beq	r2,zero,42aa4 <__adddf3+0x860>
   427bc:	4984b03a 	or	r2,r9,r6
   427c0:	103ebf26 	beq	r2,zero,422c0 <__alt_data_end+0xfffdb1c0>
   427c4:	8985883a 	add	r2,r17,r6
   427c8:	4247883a 	add	r3,r8,r9
   427cc:	1451803a 	cmpltu	r8,r2,r17
   427d0:	40d1883a 	add	r8,r8,r3
   427d4:	40c0202c 	andhi	r3,r8,128
   427d8:	1023883a 	mov	r17,r2
   427dc:	183f1a26 	beq	r3,zero,42448 <__alt_data_end+0xfffdb348>
   427e0:	00bfe034 	movhi	r2,65408
   427e4:	10bfffc4 	addi	r2,r2,-1
   427e8:	2021883a 	mov	r16,r4
   427ec:	4090703a 	and	r8,r8,r2
   427f0:	003eb306 	br	422c0 <__alt_data_end+0xfffdb1c0>
   427f4:	4444b03a 	or	r2,r8,r17
   427f8:	8000291e 	bne	r16,zero,428a0 <__adddf3+0x65c>
   427fc:	10004b1e 	bne	r2,zero,4292c <__adddf3+0x6e8>
   42800:	4990b03a 	or	r8,r9,r6
   42804:	40008b26 	beq	r8,zero,42a34 <__adddf3+0x7f0>
   42808:	4811883a 	mov	r8,r9
   4280c:	3023883a 	mov	r17,r6
   42810:	3825883a 	mov	r18,r7
   42814:	003eaa06 	br	422c0 <__alt_data_end+0xfffdb1c0>
   42818:	1021883a 	mov	r16,r2
   4281c:	0011883a 	mov	r8,zero
   42820:	0005883a 	mov	r2,zero
   42824:	003f0f06 	br	42464 <__alt_data_end+0xfffdb364>
   42828:	217ff804 	addi	r5,r4,-32
   4282c:	00800804 	movi	r2,32
   42830:	494ad83a 	srl	r5,r9,r5
   42834:	20807d26 	beq	r4,r2,42a2c <__adddf3+0x7e8>
   42838:	00801004 	movi	r2,64
   4283c:	1109c83a 	sub	r4,r2,r4
   42840:	4912983a 	sll	r9,r9,r4
   42844:	498cb03a 	or	r6,r9,r6
   42848:	300cc03a 	cmpne	r6,r6,zero
   4284c:	298ab03a 	or	r5,r5,r6
   42850:	0013883a 	mov	r9,zero
   42854:	003f1506 	br	424ac <__alt_data_end+0xfffdb3ac>
   42858:	0101ffc4 	movi	r4,2047
   4285c:	113f9a1e 	bne	r2,r4,426c8 <__alt_data_end+0xfffdb5c8>
   42860:	4811883a 	mov	r8,r9
   42864:	3023883a 	mov	r17,r6
   42868:	1021883a 	mov	r16,r2
   4286c:	3825883a 	mov	r18,r7
   42870:	003e9306 	br	422c0 <__alt_data_end+0xfffdb1c0>
   42874:	8000161e 	bne	r16,zero,428d0 <__adddf3+0x68c>
   42878:	444ab03a 	or	r5,r8,r17
   4287c:	28005126 	beq	r5,zero,429c4 <__adddf3+0x780>
   42880:	0108303a 	nor	r4,zero,r4
   42884:	20004d1e 	bne	r4,zero,429bc <__adddf3+0x778>
   42888:	89a3883a 	add	r17,r17,r6
   4288c:	4253883a 	add	r9,r8,r9
   42890:	898d803a 	cmpltu	r6,r17,r6
   42894:	3251883a 	add	r8,r6,r9
   42898:	1021883a 	mov	r16,r2
   4289c:	003f0806 	br	424c0 <__alt_data_end+0xfffdb3c0>
   428a0:	1000301e 	bne	r2,zero,42964 <__adddf3+0x720>
   428a4:	4984b03a 	or	r2,r9,r6
   428a8:	10007126 	beq	r2,zero,42a70 <__adddf3+0x82c>
   428ac:	4811883a 	mov	r8,r9
   428b0:	3023883a 	mov	r17,r6
   428b4:	3825883a 	mov	r18,r7
   428b8:	0401ffc4 	movi	r16,2047
   428bc:	003e8006 	br	422c0 <__alt_data_end+0xfffdb1c0>
   428c0:	4462b03a 	or	r17,r8,r17
   428c4:	8822c03a 	cmpne	r17,r17,zero
   428c8:	0007883a 	mov	r3,zero
   428cc:	003f8b06 	br	426fc <__alt_data_end+0xfffdb5fc>
   428d0:	0141ffc4 	movi	r5,2047
   428d4:	11403b26 	beq	r2,r5,429c4 <__adddf3+0x780>
   428d8:	0109c83a 	sub	r4,zero,r4
   428dc:	42002034 	orhi	r8,r8,128
   428e0:	01400e04 	movi	r5,56
   428e4:	29006716 	blt	r5,r4,42a84 <__adddf3+0x840>
   428e8:	014007c4 	movi	r5,31
   428ec:	29007016 	blt	r5,r4,42ab0 <__adddf3+0x86c>
   428f0:	01400804 	movi	r5,32
   428f4:	290bc83a 	sub	r5,r5,r4
   428f8:	4154983a 	sll	r10,r8,r5
   428fc:	890ed83a 	srl	r7,r17,r4
   42900:	894a983a 	sll	r5,r17,r5
   42904:	4108d83a 	srl	r4,r8,r4
   42908:	51e2b03a 	or	r17,r10,r7
   4290c:	280ac03a 	cmpne	r5,r5,zero
   42910:	8962b03a 	or	r17,r17,r5
   42914:	89a3883a 	add	r17,r17,r6
   42918:	2253883a 	add	r9,r4,r9
   4291c:	898d803a 	cmpltu	r6,r17,r6
   42920:	3251883a 	add	r8,r6,r9
   42924:	1021883a 	mov	r16,r2
   42928:	003ee506 	br	424c0 <__alt_data_end+0xfffdb3c0>
   4292c:	4984b03a 	or	r2,r9,r6
   42930:	103e6326 	beq	r2,zero,422c0 <__alt_data_end+0xfffdb1c0>
   42934:	8987c83a 	sub	r3,r17,r6
   42938:	88c9803a 	cmpltu	r4,r17,r3
   4293c:	4245c83a 	sub	r2,r8,r9
   42940:	1105c83a 	sub	r2,r2,r4
   42944:	1100202c 	andhi	r4,r2,128
   42948:	203ebb26 	beq	r4,zero,42438 <__alt_data_end+0xfffdb338>
   4294c:	3463c83a 	sub	r17,r6,r17
   42950:	4a07c83a 	sub	r3,r9,r8
   42954:	344d803a 	cmpltu	r6,r6,r17
   42958:	1991c83a 	sub	r8,r3,r6
   4295c:	3825883a 	mov	r18,r7
   42960:	003e5706 	br	422c0 <__alt_data_end+0xfffdb1c0>
   42964:	4984b03a 	or	r2,r9,r6
   42968:	10002e26 	beq	r2,zero,42a24 <__adddf3+0x7e0>
   4296c:	4004d0fa 	srli	r2,r8,3
   42970:	8822d0fa 	srli	r17,r17,3
   42974:	4010977a 	slli	r8,r8,29
   42978:	10c0022c 	andhi	r3,r2,8
   4297c:	4462b03a 	or	r17,r8,r17
   42980:	18000826 	beq	r3,zero,429a4 <__adddf3+0x760>
   42984:	4808d0fa 	srli	r4,r9,3
   42988:	20c0022c 	andhi	r3,r4,8
   4298c:	1800051e 	bne	r3,zero,429a4 <__adddf3+0x760>
   42990:	300cd0fa 	srli	r6,r6,3
   42994:	4806977a 	slli	r3,r9,29
   42998:	2005883a 	mov	r2,r4
   4299c:	3825883a 	mov	r18,r7
   429a0:	19a2b03a 	or	r17,r3,r6
   429a4:	8810d77a 	srli	r8,r17,29
   429a8:	100490fa 	slli	r2,r2,3
   429ac:	882290fa 	slli	r17,r17,3
   429b0:	0401ffc4 	movi	r16,2047
   429b4:	4090b03a 	or	r8,r8,r2
   429b8:	003e4106 	br	422c0 <__alt_data_end+0xfffdb1c0>
   429bc:	0141ffc4 	movi	r5,2047
   429c0:	117fc71e 	bne	r2,r5,428e0 <__alt_data_end+0xfffdb7e0>
   429c4:	4811883a 	mov	r8,r9
   429c8:	3023883a 	mov	r17,r6
   429cc:	1021883a 	mov	r16,r2
   429d0:	003e3b06 	br	422c0 <__alt_data_end+0xfffdb1c0>
   429d4:	10002f26 	beq	r2,zero,42a94 <__adddf3+0x850>
   429d8:	4984b03a 	or	r2,r9,r6
   429dc:	10001126 	beq	r2,zero,42a24 <__adddf3+0x7e0>
   429e0:	4004d0fa 	srli	r2,r8,3
   429e4:	8822d0fa 	srli	r17,r17,3
   429e8:	4010977a 	slli	r8,r8,29
   429ec:	10c0022c 	andhi	r3,r2,8
   429f0:	4462b03a 	or	r17,r8,r17
   429f4:	183feb26 	beq	r3,zero,429a4 <__alt_data_end+0xfffdb8a4>
   429f8:	4808d0fa 	srli	r4,r9,3
   429fc:	20c0022c 	andhi	r3,r4,8
   42a00:	183fe81e 	bne	r3,zero,429a4 <__alt_data_end+0xfffdb8a4>
   42a04:	300cd0fa 	srli	r6,r6,3
   42a08:	4806977a 	slli	r3,r9,29
   42a0c:	2005883a 	mov	r2,r4
   42a10:	19a2b03a 	or	r17,r3,r6
   42a14:	003fe306 	br	429a4 <__alt_data_end+0xfffdb8a4>
   42a18:	0011883a 	mov	r8,zero
   42a1c:	0005883a 	mov	r2,zero
   42a20:	003e3f06 	br	42320 <__alt_data_end+0xfffdb220>
   42a24:	0401ffc4 	movi	r16,2047
   42a28:	003e2506 	br	422c0 <__alt_data_end+0xfffdb1c0>
   42a2c:	0013883a 	mov	r9,zero
   42a30:	003f8406 	br	42844 <__alt_data_end+0xfffdb744>
   42a34:	0005883a 	mov	r2,zero
   42a38:	0007883a 	mov	r3,zero
   42a3c:	003e8906 	br	42464 <__alt_data_end+0xfffdb364>
   42a40:	197ff804 	addi	r5,r3,-32
   42a44:	01000804 	movi	r4,32
   42a48:	414ad83a 	srl	r5,r8,r5
   42a4c:	19002426 	beq	r3,r4,42ae0 <__adddf3+0x89c>
   42a50:	01001004 	movi	r4,64
   42a54:	20c7c83a 	sub	r3,r4,r3
   42a58:	40c6983a 	sll	r3,r8,r3
   42a5c:	1c46b03a 	or	r3,r3,r17
   42a60:	1806c03a 	cmpne	r3,r3,zero
   42a64:	28e2b03a 	or	r17,r5,r3
   42a68:	0007883a 	mov	r3,zero
   42a6c:	003f2306 	br	426fc <__alt_data_end+0xfffdb5fc>
   42a70:	0007883a 	mov	r3,zero
   42a74:	5811883a 	mov	r8,r11
   42a78:	00bfffc4 	movi	r2,-1
   42a7c:	0401ffc4 	movi	r16,2047
   42a80:	003e7806 	br	42464 <__alt_data_end+0xfffdb364>
   42a84:	4462b03a 	or	r17,r8,r17
   42a88:	8822c03a 	cmpne	r17,r17,zero
   42a8c:	0009883a 	mov	r4,zero
   42a90:	003fa006 	br	42914 <__alt_data_end+0xfffdb814>
   42a94:	4811883a 	mov	r8,r9
   42a98:	3023883a 	mov	r17,r6
   42a9c:	0401ffc4 	movi	r16,2047
   42aa0:	003e0706 	br	422c0 <__alt_data_end+0xfffdb1c0>
   42aa4:	4811883a 	mov	r8,r9
   42aa8:	3023883a 	mov	r17,r6
   42aac:	003e0406 	br	422c0 <__alt_data_end+0xfffdb1c0>
   42ab0:	21fff804 	addi	r7,r4,-32
   42ab4:	01400804 	movi	r5,32
   42ab8:	41ced83a 	srl	r7,r8,r7
   42abc:	21400a26 	beq	r4,r5,42ae8 <__adddf3+0x8a4>
   42ac0:	01401004 	movi	r5,64
   42ac4:	2909c83a 	sub	r4,r5,r4
   42ac8:	4108983a 	sll	r4,r8,r4
   42acc:	2448b03a 	or	r4,r4,r17
   42ad0:	2008c03a 	cmpne	r4,r4,zero
   42ad4:	3922b03a 	or	r17,r7,r4
   42ad8:	0009883a 	mov	r4,zero
   42adc:	003f8d06 	br	42914 <__alt_data_end+0xfffdb814>
   42ae0:	0007883a 	mov	r3,zero
   42ae4:	003fdd06 	br	42a5c <__alt_data_end+0xfffdb95c>
   42ae8:	0009883a 	mov	r4,zero
   42aec:	003ff706 	br	42acc <__alt_data_end+0xfffdb9cc>

00042af0 <__divdf3>:
   42af0:	defff204 	addi	sp,sp,-56
   42af4:	dd400915 	stw	r21,36(sp)
   42af8:	282ad53a 	srli	r21,r5,20
   42afc:	dd000815 	stw	r20,32(sp)
   42b00:	2828d7fa 	srli	r20,r5,31
   42b04:	dc000415 	stw	r16,16(sp)
   42b08:	04000434 	movhi	r16,16
   42b0c:	df000c15 	stw	fp,48(sp)
   42b10:	843fffc4 	addi	r16,r16,-1
   42b14:	dfc00d15 	stw	ra,52(sp)
   42b18:	ddc00b15 	stw	r23,44(sp)
   42b1c:	dd800a15 	stw	r22,40(sp)
   42b20:	dcc00715 	stw	r19,28(sp)
   42b24:	dc800615 	stw	r18,24(sp)
   42b28:	dc400515 	stw	r17,20(sp)
   42b2c:	ad41ffcc 	andi	r21,r21,2047
   42b30:	2c20703a 	and	r16,r5,r16
   42b34:	a7003fcc 	andi	fp,r20,255
   42b38:	a8006126 	beq	r21,zero,42cc0 <__divdf3+0x1d0>
   42b3c:	0081ffc4 	movi	r2,2047
   42b40:	2025883a 	mov	r18,r4
   42b44:	a8803726 	beq	r21,r2,42c24 <__divdf3+0x134>
   42b48:	80800434 	orhi	r2,r16,16
   42b4c:	100490fa 	slli	r2,r2,3
   42b50:	2020d77a 	srli	r16,r4,29
   42b54:	202490fa 	slli	r18,r4,3
   42b58:	ad7f0044 	addi	r21,r21,-1023
   42b5c:	80a0b03a 	or	r16,r16,r2
   42b60:	0027883a 	mov	r19,zero
   42b64:	0013883a 	mov	r9,zero
   42b68:	3804d53a 	srli	r2,r7,20
   42b6c:	382cd7fa 	srli	r22,r7,31
   42b70:	04400434 	movhi	r17,16
   42b74:	8c7fffc4 	addi	r17,r17,-1
   42b78:	1081ffcc 	andi	r2,r2,2047
   42b7c:	3011883a 	mov	r8,r6
   42b80:	3c62703a 	and	r17,r7,r17
   42b84:	b5c03fcc 	andi	r23,r22,255
   42b88:	10006c26 	beq	r2,zero,42d3c <__divdf3+0x24c>
   42b8c:	00c1ffc4 	movi	r3,2047
   42b90:	10c06426 	beq	r2,r3,42d24 <__divdf3+0x234>
   42b94:	88c00434 	orhi	r3,r17,16
   42b98:	180690fa 	slli	r3,r3,3
   42b9c:	3022d77a 	srli	r17,r6,29
   42ba0:	301090fa 	slli	r8,r6,3
   42ba4:	10bf0044 	addi	r2,r2,-1023
   42ba8:	88e2b03a 	or	r17,r17,r3
   42bac:	000f883a 	mov	r7,zero
   42bb0:	a58cf03a 	xor	r6,r20,r22
   42bb4:	3cc8b03a 	or	r4,r7,r19
   42bb8:	a8abc83a 	sub	r21,r21,r2
   42bbc:	008003c4 	movi	r2,15
   42bc0:	3007883a 	mov	r3,r6
   42bc4:	34c03fcc 	andi	r19,r6,255
   42bc8:	11009036 	bltu	r2,r4,42e0c <__divdf3+0x31c>
   42bcc:	200890ba 	slli	r4,r4,2
   42bd0:	00800134 	movhi	r2,4
   42bd4:	108af904 	addi	r2,r2,11236
   42bd8:	2089883a 	add	r4,r4,r2
   42bdc:	20800017 	ldw	r2,0(r4)
   42be0:	1000683a 	jmp	r2
   42be4:	00042e0c 	andi	zero,zero,4280
   42be8:	00042c5c 	xori	zero,zero,4273
   42bec:	00042dfc 	xorhi	zero,zero,4279
   42bf0:	00042c50 	cmplti	zero,zero,4273
   42bf4:	00042dfc 	xorhi	zero,zero,4279
   42bf8:	00042dd0 	cmplti	zero,zero,4279
   42bfc:	00042dfc 	xorhi	zero,zero,4279
   42c00:	00042c50 	cmplti	zero,zero,4273
   42c04:	00042c5c 	xori	zero,zero,4273
   42c08:	00042c5c 	xori	zero,zero,4273
   42c0c:	00042dd0 	cmplti	zero,zero,4279
   42c10:	00042c50 	cmplti	zero,zero,4273
   42c14:	00042c40 	call	42c4 <__alt_mem_onchip_memory2-0x3bd3c>
   42c18:	00042c40 	call	42c4 <__alt_mem_onchip_memory2-0x3bd3c>
   42c1c:	00042c40 	call	42c4 <__alt_mem_onchip_memory2-0x3bd3c>
   42c20:	000430f0 	cmpltui	zero,zero,4291
   42c24:	2404b03a 	or	r2,r4,r16
   42c28:	1000661e 	bne	r2,zero,42dc4 <__divdf3+0x2d4>
   42c2c:	04c00204 	movi	r19,8
   42c30:	0021883a 	mov	r16,zero
   42c34:	0025883a 	mov	r18,zero
   42c38:	02400084 	movi	r9,2
   42c3c:	003fca06 	br	42b68 <__alt_data_end+0xfffdba68>
   42c40:	8023883a 	mov	r17,r16
   42c44:	9011883a 	mov	r8,r18
   42c48:	e02f883a 	mov	r23,fp
   42c4c:	480f883a 	mov	r7,r9
   42c50:	00800084 	movi	r2,2
   42c54:	3881311e 	bne	r7,r2,4311c <__divdf3+0x62c>
   42c58:	b827883a 	mov	r19,r23
   42c5c:	98c0004c 	andi	r3,r19,1
   42c60:	0081ffc4 	movi	r2,2047
   42c64:	000b883a 	mov	r5,zero
   42c68:	0025883a 	mov	r18,zero
   42c6c:	1004953a 	slli	r2,r2,20
   42c70:	18c03fcc 	andi	r3,r3,255
   42c74:	04400434 	movhi	r17,16
   42c78:	8c7fffc4 	addi	r17,r17,-1
   42c7c:	180697fa 	slli	r3,r3,31
   42c80:	2c4a703a 	and	r5,r5,r17
   42c84:	288ab03a 	or	r5,r5,r2
   42c88:	28c6b03a 	or	r3,r5,r3
   42c8c:	9005883a 	mov	r2,r18
   42c90:	dfc00d17 	ldw	ra,52(sp)
   42c94:	df000c17 	ldw	fp,48(sp)
   42c98:	ddc00b17 	ldw	r23,44(sp)
   42c9c:	dd800a17 	ldw	r22,40(sp)
   42ca0:	dd400917 	ldw	r21,36(sp)
   42ca4:	dd000817 	ldw	r20,32(sp)
   42ca8:	dcc00717 	ldw	r19,28(sp)
   42cac:	dc800617 	ldw	r18,24(sp)
   42cb0:	dc400517 	ldw	r17,20(sp)
   42cb4:	dc000417 	ldw	r16,16(sp)
   42cb8:	dec00e04 	addi	sp,sp,56
   42cbc:	f800283a 	ret
   42cc0:	2404b03a 	or	r2,r4,r16
   42cc4:	2027883a 	mov	r19,r4
   42cc8:	10003926 	beq	r2,zero,42db0 <__divdf3+0x2c0>
   42ccc:	80012e26 	beq	r16,zero,43188 <__divdf3+0x698>
   42cd0:	8009883a 	mov	r4,r16
   42cd4:	d9800315 	stw	r6,12(sp)
   42cd8:	d9c00215 	stw	r7,8(sp)
   42cdc:	00448e40 	call	448e4 <__clzsi2>
   42ce0:	d9800317 	ldw	r6,12(sp)
   42ce4:	d9c00217 	ldw	r7,8(sp)
   42ce8:	113ffd44 	addi	r4,r2,-11
   42cec:	00c00704 	movi	r3,28
   42cf0:	19012116 	blt	r3,r4,43178 <__divdf3+0x688>
   42cf4:	00c00744 	movi	r3,29
   42cf8:	147ffe04 	addi	r17,r2,-8
   42cfc:	1907c83a 	sub	r3,r3,r4
   42d00:	8460983a 	sll	r16,r16,r17
   42d04:	98c6d83a 	srl	r3,r19,r3
   42d08:	9c64983a 	sll	r18,r19,r17
   42d0c:	1c20b03a 	or	r16,r3,r16
   42d10:	1080fcc4 	addi	r2,r2,1011
   42d14:	00abc83a 	sub	r21,zero,r2
   42d18:	0027883a 	mov	r19,zero
   42d1c:	0013883a 	mov	r9,zero
   42d20:	003f9106 	br	42b68 <__alt_data_end+0xfffdba68>
   42d24:	3446b03a 	or	r3,r6,r17
   42d28:	18001f1e 	bne	r3,zero,42da8 <__divdf3+0x2b8>
   42d2c:	0023883a 	mov	r17,zero
   42d30:	0011883a 	mov	r8,zero
   42d34:	01c00084 	movi	r7,2
   42d38:	003f9d06 	br	42bb0 <__alt_data_end+0xfffdbab0>
   42d3c:	3446b03a 	or	r3,r6,r17
   42d40:	18001526 	beq	r3,zero,42d98 <__divdf3+0x2a8>
   42d44:	88011b26 	beq	r17,zero,431b4 <__divdf3+0x6c4>
   42d48:	8809883a 	mov	r4,r17
   42d4c:	d9800315 	stw	r6,12(sp)
   42d50:	da400115 	stw	r9,4(sp)
   42d54:	00448e40 	call	448e4 <__clzsi2>
   42d58:	d9800317 	ldw	r6,12(sp)
   42d5c:	da400117 	ldw	r9,4(sp)
   42d60:	113ffd44 	addi	r4,r2,-11
   42d64:	00c00704 	movi	r3,28
   42d68:	19010e16 	blt	r3,r4,431a4 <__divdf3+0x6b4>
   42d6c:	00c00744 	movi	r3,29
   42d70:	123ffe04 	addi	r8,r2,-8
   42d74:	1907c83a 	sub	r3,r3,r4
   42d78:	8a22983a 	sll	r17,r17,r8
   42d7c:	30c6d83a 	srl	r3,r6,r3
   42d80:	3210983a 	sll	r8,r6,r8
   42d84:	1c62b03a 	or	r17,r3,r17
   42d88:	1080fcc4 	addi	r2,r2,1011
   42d8c:	0085c83a 	sub	r2,zero,r2
   42d90:	000f883a 	mov	r7,zero
   42d94:	003f8606 	br	42bb0 <__alt_data_end+0xfffdbab0>
   42d98:	0023883a 	mov	r17,zero
   42d9c:	0011883a 	mov	r8,zero
   42da0:	01c00044 	movi	r7,1
   42da4:	003f8206 	br	42bb0 <__alt_data_end+0xfffdbab0>
   42da8:	01c000c4 	movi	r7,3
   42dac:	003f8006 	br	42bb0 <__alt_data_end+0xfffdbab0>
   42db0:	04c00104 	movi	r19,4
   42db4:	0021883a 	mov	r16,zero
   42db8:	0025883a 	mov	r18,zero
   42dbc:	02400044 	movi	r9,1
   42dc0:	003f6906 	br	42b68 <__alt_data_end+0xfffdba68>
   42dc4:	04c00304 	movi	r19,12
   42dc8:	024000c4 	movi	r9,3
   42dcc:	003f6606 	br	42b68 <__alt_data_end+0xfffdba68>
   42dd0:	01400434 	movhi	r5,16
   42dd4:	0007883a 	mov	r3,zero
   42dd8:	297fffc4 	addi	r5,r5,-1
   42ddc:	04bfffc4 	movi	r18,-1
   42de0:	0081ffc4 	movi	r2,2047
   42de4:	003fa106 	br	42c6c <__alt_data_end+0xfffdbb6c>
   42de8:	00c00044 	movi	r3,1
   42dec:	1887c83a 	sub	r3,r3,r2
   42df0:	01000e04 	movi	r4,56
   42df4:	20c1210e 	bge	r4,r3,4327c <__divdf3+0x78c>
   42df8:	98c0004c 	andi	r3,r19,1
   42dfc:	0005883a 	mov	r2,zero
   42e00:	000b883a 	mov	r5,zero
   42e04:	0025883a 	mov	r18,zero
   42e08:	003f9806 	br	42c6c <__alt_data_end+0xfffdbb6c>
   42e0c:	8c00fd36 	bltu	r17,r16,43204 <__divdf3+0x714>
   42e10:	8440fb26 	beq	r16,r17,43200 <__divdf3+0x710>
   42e14:	8007883a 	mov	r3,r16
   42e18:	ad7fffc4 	addi	r21,r21,-1
   42e1c:	0021883a 	mov	r16,zero
   42e20:	4004d63a 	srli	r2,r8,24
   42e24:	8822923a 	slli	r17,r17,8
   42e28:	1809883a 	mov	r4,r3
   42e2c:	402c923a 	slli	r22,r8,8
   42e30:	88b8b03a 	or	fp,r17,r2
   42e34:	e028d43a 	srli	r20,fp,16
   42e38:	d8c00015 	stw	r3,0(sp)
   42e3c:	e5ffffcc 	andi	r23,fp,65535
   42e40:	a00b883a 	mov	r5,r20
   42e44:	0044a400 	call	44a40 <__udivsi3>
   42e48:	d8c00017 	ldw	r3,0(sp)
   42e4c:	a00b883a 	mov	r5,r20
   42e50:	d8800315 	stw	r2,12(sp)
   42e54:	1809883a 	mov	r4,r3
   42e58:	0044aa40 	call	44aa4 <__umodsi3>
   42e5c:	d9800317 	ldw	r6,12(sp)
   42e60:	1006943a 	slli	r3,r2,16
   42e64:	9004d43a 	srli	r2,r18,16
   42e68:	b9a3383a 	mul	r17,r23,r6
   42e6c:	10c4b03a 	or	r2,r2,r3
   42e70:	1440062e 	bgeu	r2,r17,42e8c <__divdf3+0x39c>
   42e74:	1705883a 	add	r2,r2,fp
   42e78:	30ffffc4 	addi	r3,r6,-1
   42e7c:	1700ee36 	bltu	r2,fp,43238 <__divdf3+0x748>
   42e80:	1440ed2e 	bgeu	r2,r17,43238 <__divdf3+0x748>
   42e84:	31bfff84 	addi	r6,r6,-2
   42e88:	1705883a 	add	r2,r2,fp
   42e8c:	1463c83a 	sub	r17,r2,r17
   42e90:	a00b883a 	mov	r5,r20
   42e94:	8809883a 	mov	r4,r17
   42e98:	d9800315 	stw	r6,12(sp)
   42e9c:	0044a400 	call	44a40 <__udivsi3>
   42ea0:	a00b883a 	mov	r5,r20
   42ea4:	8809883a 	mov	r4,r17
   42ea8:	d8800215 	stw	r2,8(sp)
   42eac:	0044aa40 	call	44aa4 <__umodsi3>
   42eb0:	d9c00217 	ldw	r7,8(sp)
   42eb4:	1004943a 	slli	r2,r2,16
   42eb8:	94bfffcc 	andi	r18,r18,65535
   42ebc:	b9d1383a 	mul	r8,r23,r7
   42ec0:	90a4b03a 	or	r18,r18,r2
   42ec4:	d9800317 	ldw	r6,12(sp)
   42ec8:	9200062e 	bgeu	r18,r8,42ee4 <__divdf3+0x3f4>
   42ecc:	9725883a 	add	r18,r18,fp
   42ed0:	38bfffc4 	addi	r2,r7,-1
   42ed4:	9700d636 	bltu	r18,fp,43230 <__divdf3+0x740>
   42ed8:	9200d52e 	bgeu	r18,r8,43230 <__divdf3+0x740>
   42edc:	39ffff84 	addi	r7,r7,-2
   42ee0:	9725883a 	add	r18,r18,fp
   42ee4:	3004943a 	slli	r2,r6,16
   42ee8:	b012d43a 	srli	r9,r22,16
   42eec:	b1bfffcc 	andi	r6,r22,65535
   42ef0:	11e2b03a 	or	r17,r2,r7
   42ef4:	8806d43a 	srli	r3,r17,16
   42ef8:	893fffcc 	andi	r4,r17,65535
   42efc:	218b383a 	mul	r5,r4,r6
   42f00:	30c5383a 	mul	r2,r6,r3
   42f04:	2249383a 	mul	r4,r4,r9
   42f08:	280ed43a 	srli	r7,r5,16
   42f0c:	9225c83a 	sub	r18,r18,r8
   42f10:	2089883a 	add	r4,r4,r2
   42f14:	3909883a 	add	r4,r7,r4
   42f18:	1a47383a 	mul	r3,r3,r9
   42f1c:	2080022e 	bgeu	r4,r2,42f28 <__divdf3+0x438>
   42f20:	00800074 	movhi	r2,1
   42f24:	1887883a 	add	r3,r3,r2
   42f28:	2004d43a 	srli	r2,r4,16
   42f2c:	2008943a 	slli	r4,r4,16
   42f30:	297fffcc 	andi	r5,r5,65535
   42f34:	10c7883a 	add	r3,r2,r3
   42f38:	2149883a 	add	r4,r4,r5
   42f3c:	90c0a536 	bltu	r18,r3,431d4 <__divdf3+0x6e4>
   42f40:	90c0bf26 	beq	r18,r3,43240 <__divdf3+0x750>
   42f44:	90c7c83a 	sub	r3,r18,r3
   42f48:	810fc83a 	sub	r7,r16,r4
   42f4c:	81e5803a 	cmpltu	r18,r16,r7
   42f50:	1ca5c83a 	sub	r18,r3,r18
   42f54:	e480c126 	beq	fp,r18,4325c <__divdf3+0x76c>
   42f58:	a00b883a 	mov	r5,r20
   42f5c:	9009883a 	mov	r4,r18
   42f60:	d9800315 	stw	r6,12(sp)
   42f64:	d9c00215 	stw	r7,8(sp)
   42f68:	da400115 	stw	r9,4(sp)
   42f6c:	0044a400 	call	44a40 <__udivsi3>
   42f70:	a00b883a 	mov	r5,r20
   42f74:	9009883a 	mov	r4,r18
   42f78:	d8800015 	stw	r2,0(sp)
   42f7c:	0044aa40 	call	44aa4 <__umodsi3>
   42f80:	d9c00217 	ldw	r7,8(sp)
   42f84:	da000017 	ldw	r8,0(sp)
   42f88:	1006943a 	slli	r3,r2,16
   42f8c:	3804d43a 	srli	r2,r7,16
   42f90:	ba21383a 	mul	r16,r23,r8
   42f94:	d9800317 	ldw	r6,12(sp)
   42f98:	10c4b03a 	or	r2,r2,r3
   42f9c:	da400117 	ldw	r9,4(sp)
   42fa0:	1400062e 	bgeu	r2,r16,42fbc <__divdf3+0x4cc>
   42fa4:	1705883a 	add	r2,r2,fp
   42fa8:	40ffffc4 	addi	r3,r8,-1
   42fac:	1700ad36 	bltu	r2,fp,43264 <__divdf3+0x774>
   42fb0:	1400ac2e 	bgeu	r2,r16,43264 <__divdf3+0x774>
   42fb4:	423fff84 	addi	r8,r8,-2
   42fb8:	1705883a 	add	r2,r2,fp
   42fbc:	1421c83a 	sub	r16,r2,r16
   42fc0:	a00b883a 	mov	r5,r20
   42fc4:	8009883a 	mov	r4,r16
   42fc8:	d9800315 	stw	r6,12(sp)
   42fcc:	d9c00215 	stw	r7,8(sp)
   42fd0:	da000015 	stw	r8,0(sp)
   42fd4:	da400115 	stw	r9,4(sp)
   42fd8:	0044a400 	call	44a40 <__udivsi3>
   42fdc:	8009883a 	mov	r4,r16
   42fe0:	a00b883a 	mov	r5,r20
   42fe4:	1025883a 	mov	r18,r2
   42fe8:	0044aa40 	call	44aa4 <__umodsi3>
   42fec:	d9c00217 	ldw	r7,8(sp)
   42ff0:	1004943a 	slli	r2,r2,16
   42ff4:	bcaf383a 	mul	r23,r23,r18
   42ff8:	393fffcc 	andi	r4,r7,65535
   42ffc:	2088b03a 	or	r4,r4,r2
   43000:	d9800317 	ldw	r6,12(sp)
   43004:	da000017 	ldw	r8,0(sp)
   43008:	da400117 	ldw	r9,4(sp)
   4300c:	25c0062e 	bgeu	r4,r23,43028 <__divdf3+0x538>
   43010:	2709883a 	add	r4,r4,fp
   43014:	90bfffc4 	addi	r2,r18,-1
   43018:	27009436 	bltu	r4,fp,4326c <__divdf3+0x77c>
   4301c:	25c0932e 	bgeu	r4,r23,4326c <__divdf3+0x77c>
   43020:	94bfff84 	addi	r18,r18,-2
   43024:	2709883a 	add	r4,r4,fp
   43028:	4004943a 	slli	r2,r8,16
   4302c:	25efc83a 	sub	r23,r4,r23
   43030:	1490b03a 	or	r8,r2,r18
   43034:	4008d43a 	srli	r4,r8,16
   43038:	40ffffcc 	andi	r3,r8,65535
   4303c:	30c5383a 	mul	r2,r6,r3
   43040:	1a47383a 	mul	r3,r3,r9
   43044:	310d383a 	mul	r6,r6,r4
   43048:	100ad43a 	srli	r5,r2,16
   4304c:	4913383a 	mul	r9,r9,r4
   43050:	1987883a 	add	r3,r3,r6
   43054:	28c7883a 	add	r3,r5,r3
   43058:	1980022e 	bgeu	r3,r6,43064 <__divdf3+0x574>
   4305c:	01000074 	movhi	r4,1
   43060:	4913883a 	add	r9,r9,r4
   43064:	1808d43a 	srli	r4,r3,16
   43068:	1806943a 	slli	r3,r3,16
   4306c:	10bfffcc 	andi	r2,r2,65535
   43070:	2253883a 	add	r9,r4,r9
   43074:	1887883a 	add	r3,r3,r2
   43078:	ba403836 	bltu	r23,r9,4315c <__divdf3+0x66c>
   4307c:	ba403626 	beq	r23,r9,43158 <__divdf3+0x668>
   43080:	42000054 	ori	r8,r8,1
   43084:	a880ffc4 	addi	r2,r21,1023
   43088:	00bf570e 	bge	zero,r2,42de8 <__alt_data_end+0xfffdbce8>
   4308c:	40c001cc 	andi	r3,r8,7
   43090:	18000726 	beq	r3,zero,430b0 <__divdf3+0x5c0>
   43094:	40c003cc 	andi	r3,r8,15
   43098:	01000104 	movi	r4,4
   4309c:	19000426 	beq	r3,r4,430b0 <__divdf3+0x5c0>
   430a0:	4107883a 	add	r3,r8,r4
   430a4:	1a11803a 	cmpltu	r8,r3,r8
   430a8:	8a23883a 	add	r17,r17,r8
   430ac:	1811883a 	mov	r8,r3
   430b0:	88c0402c 	andhi	r3,r17,256
   430b4:	18000426 	beq	r3,zero,430c8 <__divdf3+0x5d8>
   430b8:	00ffc034 	movhi	r3,65280
   430bc:	18ffffc4 	addi	r3,r3,-1
   430c0:	a8810004 	addi	r2,r21,1024
   430c4:	88e2703a 	and	r17,r17,r3
   430c8:	00c1ff84 	movi	r3,2046
   430cc:	18bee316 	blt	r3,r2,42c5c <__alt_data_end+0xfffdbb5c>
   430d0:	8824977a 	slli	r18,r17,29
   430d4:	4010d0fa 	srli	r8,r8,3
   430d8:	8822927a 	slli	r17,r17,9
   430dc:	1081ffcc 	andi	r2,r2,2047
   430e0:	9224b03a 	or	r18,r18,r8
   430e4:	880ad33a 	srli	r5,r17,12
   430e8:	98c0004c 	andi	r3,r19,1
   430ec:	003edf06 	br	42c6c <__alt_data_end+0xfffdbb6c>
   430f0:	8080022c 	andhi	r2,r16,8
   430f4:	10001226 	beq	r2,zero,43140 <__divdf3+0x650>
   430f8:	8880022c 	andhi	r2,r17,8
   430fc:	1000101e 	bne	r2,zero,43140 <__divdf3+0x650>
   43100:	00800434 	movhi	r2,16
   43104:	89400234 	orhi	r5,r17,8
   43108:	10bfffc4 	addi	r2,r2,-1
   4310c:	b007883a 	mov	r3,r22
   43110:	288a703a 	and	r5,r5,r2
   43114:	4025883a 	mov	r18,r8
   43118:	003f3106 	br	42de0 <__alt_data_end+0xfffdbce0>
   4311c:	008000c4 	movi	r2,3
   43120:	3880a626 	beq	r7,r2,433bc <__divdf3+0x8cc>
   43124:	00800044 	movi	r2,1
   43128:	3880521e 	bne	r7,r2,43274 <__divdf3+0x784>
   4312c:	b807883a 	mov	r3,r23
   43130:	0005883a 	mov	r2,zero
   43134:	000b883a 	mov	r5,zero
   43138:	0025883a 	mov	r18,zero
   4313c:	003ecb06 	br	42c6c <__alt_data_end+0xfffdbb6c>
   43140:	00800434 	movhi	r2,16
   43144:	81400234 	orhi	r5,r16,8
   43148:	10bfffc4 	addi	r2,r2,-1
   4314c:	a007883a 	mov	r3,r20
   43150:	288a703a 	and	r5,r5,r2
   43154:	003f2206 	br	42de0 <__alt_data_end+0xfffdbce0>
   43158:	183fca26 	beq	r3,zero,43084 <__alt_data_end+0xfffdbf84>
   4315c:	e5ef883a 	add	r23,fp,r23
   43160:	40bfffc4 	addi	r2,r8,-1
   43164:	bf00392e 	bgeu	r23,fp,4324c <__divdf3+0x75c>
   43168:	1011883a 	mov	r8,r2
   4316c:	ba7fc41e 	bne	r23,r9,43080 <__alt_data_end+0xfffdbf80>
   43170:	b0ffc31e 	bne	r22,r3,43080 <__alt_data_end+0xfffdbf80>
   43174:	003fc306 	br	43084 <__alt_data_end+0xfffdbf84>
   43178:	143ff604 	addi	r16,r2,-40
   4317c:	9c20983a 	sll	r16,r19,r16
   43180:	0025883a 	mov	r18,zero
   43184:	003ee206 	br	42d10 <__alt_data_end+0xfffdbc10>
   43188:	d9800315 	stw	r6,12(sp)
   4318c:	d9c00215 	stw	r7,8(sp)
   43190:	00448e40 	call	448e4 <__clzsi2>
   43194:	10800804 	addi	r2,r2,32
   43198:	d9c00217 	ldw	r7,8(sp)
   4319c:	d9800317 	ldw	r6,12(sp)
   431a0:	003ed106 	br	42ce8 <__alt_data_end+0xfffdbbe8>
   431a4:	147ff604 	addi	r17,r2,-40
   431a8:	3462983a 	sll	r17,r6,r17
   431ac:	0011883a 	mov	r8,zero
   431b0:	003ef506 	br	42d88 <__alt_data_end+0xfffdbc88>
   431b4:	3009883a 	mov	r4,r6
   431b8:	d9800315 	stw	r6,12(sp)
   431bc:	da400115 	stw	r9,4(sp)
   431c0:	00448e40 	call	448e4 <__clzsi2>
   431c4:	10800804 	addi	r2,r2,32
   431c8:	da400117 	ldw	r9,4(sp)
   431cc:	d9800317 	ldw	r6,12(sp)
   431d0:	003ee306 	br	42d60 <__alt_data_end+0xfffdbc60>
   431d4:	85a1883a 	add	r16,r16,r22
   431d8:	8585803a 	cmpltu	r2,r16,r22
   431dc:	1705883a 	add	r2,r2,fp
   431e0:	14a5883a 	add	r18,r2,r18
   431e4:	88bfffc4 	addi	r2,r17,-1
   431e8:	e4800c2e 	bgeu	fp,r18,4321c <__divdf3+0x72c>
   431ec:	90c03e36 	bltu	r18,r3,432e8 <__divdf3+0x7f8>
   431f0:	1c806926 	beq	r3,r18,43398 <__divdf3+0x8a8>
   431f4:	90c7c83a 	sub	r3,r18,r3
   431f8:	1023883a 	mov	r17,r2
   431fc:	003f5206 	br	42f48 <__alt_data_end+0xfffdbe48>
   43200:	923f0436 	bltu	r18,r8,42e14 <__alt_data_end+0xfffdbd14>
   43204:	800897fa 	slli	r4,r16,31
   43208:	9004d07a 	srli	r2,r18,1
   4320c:	8006d07a 	srli	r3,r16,1
   43210:	902097fa 	slli	r16,r18,31
   43214:	20a4b03a 	or	r18,r4,r2
   43218:	003f0106 	br	42e20 <__alt_data_end+0xfffdbd20>
   4321c:	e4bff51e 	bne	fp,r18,431f4 <__alt_data_end+0xfffdc0f4>
   43220:	85bff22e 	bgeu	r16,r22,431ec <__alt_data_end+0xfffdc0ec>
   43224:	e0c7c83a 	sub	r3,fp,r3
   43228:	1023883a 	mov	r17,r2
   4322c:	003f4606 	br	42f48 <__alt_data_end+0xfffdbe48>
   43230:	100f883a 	mov	r7,r2
   43234:	003f2b06 	br	42ee4 <__alt_data_end+0xfffdbde4>
   43238:	180d883a 	mov	r6,r3
   4323c:	003f1306 	br	42e8c <__alt_data_end+0xfffdbd8c>
   43240:	813fe436 	bltu	r16,r4,431d4 <__alt_data_end+0xfffdc0d4>
   43244:	0007883a 	mov	r3,zero
   43248:	003f3f06 	br	42f48 <__alt_data_end+0xfffdbe48>
   4324c:	ba402c36 	bltu	r23,r9,43300 <__divdf3+0x810>
   43250:	4dc05426 	beq	r9,r23,433a4 <__divdf3+0x8b4>
   43254:	1011883a 	mov	r8,r2
   43258:	003f8906 	br	43080 <__alt_data_end+0xfffdbf80>
   4325c:	023fffc4 	movi	r8,-1
   43260:	003f8806 	br	43084 <__alt_data_end+0xfffdbf84>
   43264:	1811883a 	mov	r8,r3
   43268:	003f5406 	br	42fbc <__alt_data_end+0xfffdbebc>
   4326c:	1025883a 	mov	r18,r2
   43270:	003f6d06 	br	43028 <__alt_data_end+0xfffdbf28>
   43274:	b827883a 	mov	r19,r23
   43278:	003f8206 	br	43084 <__alt_data_end+0xfffdbf84>
   4327c:	010007c4 	movi	r4,31
   43280:	20c02616 	blt	r4,r3,4331c <__divdf3+0x82c>
   43284:	00800804 	movi	r2,32
   43288:	10c5c83a 	sub	r2,r2,r3
   4328c:	888a983a 	sll	r5,r17,r2
   43290:	40c8d83a 	srl	r4,r8,r3
   43294:	4084983a 	sll	r2,r8,r2
   43298:	88e2d83a 	srl	r17,r17,r3
   4329c:	2906b03a 	or	r3,r5,r4
   432a0:	1004c03a 	cmpne	r2,r2,zero
   432a4:	1886b03a 	or	r3,r3,r2
   432a8:	188001cc 	andi	r2,r3,7
   432ac:	10000726 	beq	r2,zero,432cc <__divdf3+0x7dc>
   432b0:	188003cc 	andi	r2,r3,15
   432b4:	01000104 	movi	r4,4
   432b8:	11000426 	beq	r2,r4,432cc <__divdf3+0x7dc>
   432bc:	1805883a 	mov	r2,r3
   432c0:	10c00104 	addi	r3,r2,4
   432c4:	1885803a 	cmpltu	r2,r3,r2
   432c8:	88a3883a 	add	r17,r17,r2
   432cc:	8880202c 	andhi	r2,r17,128
   432d0:	10002726 	beq	r2,zero,43370 <__divdf3+0x880>
   432d4:	98c0004c 	andi	r3,r19,1
   432d8:	00800044 	movi	r2,1
   432dc:	000b883a 	mov	r5,zero
   432e0:	0025883a 	mov	r18,zero
   432e4:	003e6106 	br	42c6c <__alt_data_end+0xfffdbb6c>
   432e8:	85a1883a 	add	r16,r16,r22
   432ec:	8585803a 	cmpltu	r2,r16,r22
   432f0:	1705883a 	add	r2,r2,fp
   432f4:	14a5883a 	add	r18,r2,r18
   432f8:	8c7fff84 	addi	r17,r17,-2
   432fc:	003f1106 	br	42f44 <__alt_data_end+0xfffdbe44>
   43300:	b589883a 	add	r4,r22,r22
   43304:	25ad803a 	cmpltu	r22,r4,r22
   43308:	b739883a 	add	fp,r22,fp
   4330c:	40bfff84 	addi	r2,r8,-2
   43310:	bf2f883a 	add	r23,r23,fp
   43314:	202d883a 	mov	r22,r4
   43318:	003f9306 	br	43168 <__alt_data_end+0xfffdc068>
   4331c:	013ff844 	movi	r4,-31
   43320:	2085c83a 	sub	r2,r4,r2
   43324:	8888d83a 	srl	r4,r17,r2
   43328:	00800804 	movi	r2,32
   4332c:	18802126 	beq	r3,r2,433b4 <__divdf3+0x8c4>
   43330:	00801004 	movi	r2,64
   43334:	10c5c83a 	sub	r2,r2,r3
   43338:	8884983a 	sll	r2,r17,r2
   4333c:	1204b03a 	or	r2,r2,r8
   43340:	1004c03a 	cmpne	r2,r2,zero
   43344:	2084b03a 	or	r2,r4,r2
   43348:	144001cc 	andi	r17,r2,7
   4334c:	88000d1e 	bne	r17,zero,43384 <__divdf3+0x894>
   43350:	000b883a 	mov	r5,zero
   43354:	1024d0fa 	srli	r18,r2,3
   43358:	98c0004c 	andi	r3,r19,1
   4335c:	0005883a 	mov	r2,zero
   43360:	9464b03a 	or	r18,r18,r17
   43364:	003e4106 	br	42c6c <__alt_data_end+0xfffdbb6c>
   43368:	1007883a 	mov	r3,r2
   4336c:	0023883a 	mov	r17,zero
   43370:	880a927a 	slli	r5,r17,9
   43374:	1805883a 	mov	r2,r3
   43378:	8822977a 	slli	r17,r17,29
   4337c:	280ad33a 	srli	r5,r5,12
   43380:	003ff406 	br	43354 <__alt_data_end+0xfffdc254>
   43384:	10c003cc 	andi	r3,r2,15
   43388:	01000104 	movi	r4,4
   4338c:	193ff626 	beq	r3,r4,43368 <__alt_data_end+0xfffdc268>
   43390:	0023883a 	mov	r17,zero
   43394:	003fca06 	br	432c0 <__alt_data_end+0xfffdc1c0>
   43398:	813fd336 	bltu	r16,r4,432e8 <__alt_data_end+0xfffdc1e8>
   4339c:	1023883a 	mov	r17,r2
   433a0:	003fa806 	br	43244 <__alt_data_end+0xfffdc144>
   433a4:	b0ffd636 	bltu	r22,r3,43300 <__alt_data_end+0xfffdc200>
   433a8:	1011883a 	mov	r8,r2
   433ac:	b0ff341e 	bne	r22,r3,43080 <__alt_data_end+0xfffdbf80>
   433b0:	003f3406 	br	43084 <__alt_data_end+0xfffdbf84>
   433b4:	0005883a 	mov	r2,zero
   433b8:	003fe006 	br	4333c <__alt_data_end+0xfffdc23c>
   433bc:	00800434 	movhi	r2,16
   433c0:	89400234 	orhi	r5,r17,8
   433c4:	10bfffc4 	addi	r2,r2,-1
   433c8:	b807883a 	mov	r3,r23
   433cc:	288a703a 	and	r5,r5,r2
   433d0:	4025883a 	mov	r18,r8
   433d4:	003e8206 	br	42de0 <__alt_data_end+0xfffdbce0>

000433d8 <__eqdf2>:
   433d8:	2804d53a 	srli	r2,r5,20
   433dc:	3806d53a 	srli	r3,r7,20
   433e0:	02000434 	movhi	r8,16
   433e4:	423fffc4 	addi	r8,r8,-1
   433e8:	1081ffcc 	andi	r2,r2,2047
   433ec:	0281ffc4 	movi	r10,2047
   433f0:	2a12703a 	and	r9,r5,r8
   433f4:	18c1ffcc 	andi	r3,r3,2047
   433f8:	3a10703a 	and	r8,r7,r8
   433fc:	280ad7fa 	srli	r5,r5,31
   43400:	380ed7fa 	srli	r7,r7,31
   43404:	12801026 	beq	r2,r10,43448 <__eqdf2+0x70>
   43408:	0281ffc4 	movi	r10,2047
   4340c:	1a800a26 	beq	r3,r10,43438 <__eqdf2+0x60>
   43410:	10c00226 	beq	r2,r3,4341c <__eqdf2+0x44>
   43414:	00800044 	movi	r2,1
   43418:	f800283a 	ret
   4341c:	4a3ffd1e 	bne	r9,r8,43414 <__alt_data_end+0xfffdc314>
   43420:	21bffc1e 	bne	r4,r6,43414 <__alt_data_end+0xfffdc314>
   43424:	29c00c26 	beq	r5,r7,43458 <__eqdf2+0x80>
   43428:	103ffa1e 	bne	r2,zero,43414 <__alt_data_end+0xfffdc314>
   4342c:	2244b03a 	or	r2,r4,r9
   43430:	1004c03a 	cmpne	r2,r2,zero
   43434:	f800283a 	ret
   43438:	3214b03a 	or	r10,r6,r8
   4343c:	503ff426 	beq	r10,zero,43410 <__alt_data_end+0xfffdc310>
   43440:	00800044 	movi	r2,1
   43444:	f800283a 	ret
   43448:	2254b03a 	or	r10,r4,r9
   4344c:	503fee26 	beq	r10,zero,43408 <__alt_data_end+0xfffdc308>
   43450:	00800044 	movi	r2,1
   43454:	f800283a 	ret
   43458:	0005883a 	mov	r2,zero
   4345c:	f800283a 	ret

00043460 <__gedf2>:
   43460:	2804d53a 	srli	r2,r5,20
   43464:	3806d53a 	srli	r3,r7,20
   43468:	02000434 	movhi	r8,16
   4346c:	423fffc4 	addi	r8,r8,-1
   43470:	1081ffcc 	andi	r2,r2,2047
   43474:	0241ffc4 	movi	r9,2047
   43478:	2a14703a 	and	r10,r5,r8
   4347c:	18c1ffcc 	andi	r3,r3,2047
   43480:	3a10703a 	and	r8,r7,r8
   43484:	280ad7fa 	srli	r5,r5,31
   43488:	380ed7fa 	srli	r7,r7,31
   4348c:	12401d26 	beq	r2,r9,43504 <__gedf2+0xa4>
   43490:	0241ffc4 	movi	r9,2047
   43494:	1a401226 	beq	r3,r9,434e0 <__gedf2+0x80>
   43498:	1000081e 	bne	r2,zero,434bc <__gedf2+0x5c>
   4349c:	2296b03a 	or	r11,r4,r10
   434a0:	5813003a 	cmpeq	r9,r11,zero
   434a4:	1800091e 	bne	r3,zero,434cc <__gedf2+0x6c>
   434a8:	3218b03a 	or	r12,r6,r8
   434ac:	6000071e 	bne	r12,zero,434cc <__gedf2+0x6c>
   434b0:	0005883a 	mov	r2,zero
   434b4:	5800101e 	bne	r11,zero,434f8 <__gedf2+0x98>
   434b8:	f800283a 	ret
   434bc:	18000c1e 	bne	r3,zero,434f0 <__gedf2+0x90>
   434c0:	3212b03a 	or	r9,r6,r8
   434c4:	48000c26 	beq	r9,zero,434f8 <__gedf2+0x98>
   434c8:	0013883a 	mov	r9,zero
   434cc:	39c03fcc 	andi	r7,r7,255
   434d0:	48000826 	beq	r9,zero,434f4 <__gedf2+0x94>
   434d4:	38000926 	beq	r7,zero,434fc <__gedf2+0x9c>
   434d8:	00800044 	movi	r2,1
   434dc:	f800283a 	ret
   434e0:	3212b03a 	or	r9,r6,r8
   434e4:	483fec26 	beq	r9,zero,43498 <__alt_data_end+0xfffdc398>
   434e8:	00bfff84 	movi	r2,-2
   434ec:	f800283a 	ret
   434f0:	39c03fcc 	andi	r7,r7,255
   434f4:	29c00626 	beq	r5,r7,43510 <__gedf2+0xb0>
   434f8:	283ff726 	beq	r5,zero,434d8 <__alt_data_end+0xfffdc3d8>
   434fc:	00bfffc4 	movi	r2,-1
   43500:	f800283a 	ret
   43504:	2292b03a 	or	r9,r4,r10
   43508:	483fe126 	beq	r9,zero,43490 <__alt_data_end+0xfffdc390>
   4350c:	003ff606 	br	434e8 <__alt_data_end+0xfffdc3e8>
   43510:	18bff916 	blt	r3,r2,434f8 <__alt_data_end+0xfffdc3f8>
   43514:	10c00316 	blt	r2,r3,43524 <__gedf2+0xc4>
   43518:	42bff736 	bltu	r8,r10,434f8 <__alt_data_end+0xfffdc3f8>
   4351c:	52000326 	beq	r10,r8,4352c <__gedf2+0xcc>
   43520:	5200042e 	bgeu	r10,r8,43534 <__gedf2+0xd4>
   43524:	283fec1e 	bne	r5,zero,434d8 <__alt_data_end+0xfffdc3d8>
   43528:	003ff406 	br	434fc <__alt_data_end+0xfffdc3fc>
   4352c:	313ff236 	bltu	r6,r4,434f8 <__alt_data_end+0xfffdc3f8>
   43530:	21bffc36 	bltu	r4,r6,43524 <__alt_data_end+0xfffdc424>
   43534:	0005883a 	mov	r2,zero
   43538:	f800283a 	ret

0004353c <__muldf3>:
   4353c:	defff304 	addi	sp,sp,-52
   43540:	2804d53a 	srli	r2,r5,20
   43544:	dd800915 	stw	r22,36(sp)
   43548:	282cd7fa 	srli	r22,r5,31
   4354c:	dc000315 	stw	r16,12(sp)
   43550:	04000434 	movhi	r16,16
   43554:	dd400815 	stw	r21,32(sp)
   43558:	dc800515 	stw	r18,20(sp)
   4355c:	843fffc4 	addi	r16,r16,-1
   43560:	dfc00c15 	stw	ra,48(sp)
   43564:	df000b15 	stw	fp,44(sp)
   43568:	ddc00a15 	stw	r23,40(sp)
   4356c:	dd000715 	stw	r20,28(sp)
   43570:	dcc00615 	stw	r19,24(sp)
   43574:	dc400415 	stw	r17,16(sp)
   43578:	1481ffcc 	andi	r18,r2,2047
   4357c:	2c20703a 	and	r16,r5,r16
   43580:	b02b883a 	mov	r21,r22
   43584:	b2403fcc 	andi	r9,r22,255
   43588:	90006026 	beq	r18,zero,4370c <__muldf3+0x1d0>
   4358c:	0081ffc4 	movi	r2,2047
   43590:	2029883a 	mov	r20,r4
   43594:	90803626 	beq	r18,r2,43670 <__muldf3+0x134>
   43598:	80800434 	orhi	r2,r16,16
   4359c:	100490fa 	slli	r2,r2,3
   435a0:	2020d77a 	srli	r16,r4,29
   435a4:	202890fa 	slli	r20,r4,3
   435a8:	94bf0044 	addi	r18,r18,-1023
   435ac:	80a0b03a 	or	r16,r16,r2
   435b0:	0027883a 	mov	r19,zero
   435b4:	0039883a 	mov	fp,zero
   435b8:	3804d53a 	srli	r2,r7,20
   435bc:	382ed7fa 	srli	r23,r7,31
   435c0:	04400434 	movhi	r17,16
   435c4:	8c7fffc4 	addi	r17,r17,-1
   435c8:	1081ffcc 	andi	r2,r2,2047
   435cc:	3011883a 	mov	r8,r6
   435d0:	3c62703a 	and	r17,r7,r17
   435d4:	ba803fcc 	andi	r10,r23,255
   435d8:	10006d26 	beq	r2,zero,43790 <__muldf3+0x254>
   435dc:	00c1ffc4 	movi	r3,2047
   435e0:	10c06526 	beq	r2,r3,43778 <__muldf3+0x23c>
   435e4:	88c00434 	orhi	r3,r17,16
   435e8:	180690fa 	slli	r3,r3,3
   435ec:	3022d77a 	srli	r17,r6,29
   435f0:	301090fa 	slli	r8,r6,3
   435f4:	10bf0044 	addi	r2,r2,-1023
   435f8:	88e2b03a 	or	r17,r17,r3
   435fc:	000b883a 	mov	r5,zero
   43600:	9085883a 	add	r2,r18,r2
   43604:	2cc8b03a 	or	r4,r5,r19
   43608:	00c003c4 	movi	r3,15
   4360c:	bdacf03a 	xor	r22,r23,r22
   43610:	12c00044 	addi	r11,r2,1
   43614:	19009936 	bltu	r3,r4,4387c <__muldf3+0x340>
   43618:	200890ba 	slli	r4,r4,2
   4361c:	00c00134 	movhi	r3,4
   43620:	18cd8c04 	addi	r3,r3,13872
   43624:	20c9883a 	add	r4,r4,r3
   43628:	20c00017 	ldw	r3,0(r4)
   4362c:	1800683a 	jmp	r3
   43630:	0004387c 	xorhi	zero,zero,4321
   43634:	00043690 	cmplti	zero,zero,4314
   43638:	00043690 	cmplti	zero,zero,4314
   4363c:	0004368c 	andi	zero,zero,4314
   43640:	00043858 	cmpnei	zero,zero,4321
   43644:	00043858 	cmpnei	zero,zero,4321
   43648:	00043840 	call	4384 <__alt_mem_onchip_memory2-0x3bc7c>
   4364c:	0004368c 	andi	zero,zero,4314
   43650:	00043858 	cmpnei	zero,zero,4321
   43654:	00043840 	call	4384 <__alt_mem_onchip_memory2-0x3bc7c>
   43658:	00043858 	cmpnei	zero,zero,4321
   4365c:	0004368c 	andi	zero,zero,4314
   43660:	00043868 	cmpgeui	zero,zero,4321
   43664:	00043868 	cmpgeui	zero,zero,4321
   43668:	00043868 	cmpgeui	zero,zero,4321
   4366c:	00043a84 	movi	zero,4330
   43670:	2404b03a 	or	r2,r4,r16
   43674:	10006f1e 	bne	r2,zero,43834 <__muldf3+0x2f8>
   43678:	04c00204 	movi	r19,8
   4367c:	0021883a 	mov	r16,zero
   43680:	0029883a 	mov	r20,zero
   43684:	07000084 	movi	fp,2
   43688:	003fcb06 	br	435b8 <__alt_data_end+0xfffdc4b8>
   4368c:	502d883a 	mov	r22,r10
   43690:	00800084 	movi	r2,2
   43694:	28805726 	beq	r5,r2,437f4 <__muldf3+0x2b8>
   43698:	008000c4 	movi	r2,3
   4369c:	28816626 	beq	r5,r2,43c38 <__muldf3+0x6fc>
   436a0:	00800044 	movi	r2,1
   436a4:	2881411e 	bne	r5,r2,43bac <__muldf3+0x670>
   436a8:	b02b883a 	mov	r21,r22
   436ac:	0005883a 	mov	r2,zero
   436b0:	000b883a 	mov	r5,zero
   436b4:	0029883a 	mov	r20,zero
   436b8:	1004953a 	slli	r2,r2,20
   436bc:	a8c03fcc 	andi	r3,r21,255
   436c0:	04400434 	movhi	r17,16
   436c4:	8c7fffc4 	addi	r17,r17,-1
   436c8:	180697fa 	slli	r3,r3,31
   436cc:	2c4a703a 	and	r5,r5,r17
   436d0:	288ab03a 	or	r5,r5,r2
   436d4:	28c6b03a 	or	r3,r5,r3
   436d8:	a005883a 	mov	r2,r20
   436dc:	dfc00c17 	ldw	ra,48(sp)
   436e0:	df000b17 	ldw	fp,44(sp)
   436e4:	ddc00a17 	ldw	r23,40(sp)
   436e8:	dd800917 	ldw	r22,36(sp)
   436ec:	dd400817 	ldw	r21,32(sp)
   436f0:	dd000717 	ldw	r20,28(sp)
   436f4:	dcc00617 	ldw	r19,24(sp)
   436f8:	dc800517 	ldw	r18,20(sp)
   436fc:	dc400417 	ldw	r17,16(sp)
   43700:	dc000317 	ldw	r16,12(sp)
   43704:	dec00d04 	addi	sp,sp,52
   43708:	f800283a 	ret
   4370c:	2404b03a 	or	r2,r4,r16
   43710:	2027883a 	mov	r19,r4
   43714:	10004226 	beq	r2,zero,43820 <__muldf3+0x2e4>
   43718:	8000fc26 	beq	r16,zero,43b0c <__muldf3+0x5d0>
   4371c:	8009883a 	mov	r4,r16
   43720:	d9800215 	stw	r6,8(sp)
   43724:	d9c00015 	stw	r7,0(sp)
   43728:	da400115 	stw	r9,4(sp)
   4372c:	00448e40 	call	448e4 <__clzsi2>
   43730:	d9800217 	ldw	r6,8(sp)
   43734:	d9c00017 	ldw	r7,0(sp)
   43738:	da400117 	ldw	r9,4(sp)
   4373c:	113ffd44 	addi	r4,r2,-11
   43740:	00c00704 	movi	r3,28
   43744:	1900ed16 	blt	r3,r4,43afc <__muldf3+0x5c0>
   43748:	00c00744 	movi	r3,29
   4374c:	147ffe04 	addi	r17,r2,-8
   43750:	1907c83a 	sub	r3,r3,r4
   43754:	8460983a 	sll	r16,r16,r17
   43758:	98c6d83a 	srl	r3,r19,r3
   4375c:	9c68983a 	sll	r20,r19,r17
   43760:	1c20b03a 	or	r16,r3,r16
   43764:	1080fcc4 	addi	r2,r2,1011
   43768:	00a5c83a 	sub	r18,zero,r2
   4376c:	0027883a 	mov	r19,zero
   43770:	0039883a 	mov	fp,zero
   43774:	003f9006 	br	435b8 <__alt_data_end+0xfffdc4b8>
   43778:	3446b03a 	or	r3,r6,r17
   4377c:	1800261e 	bne	r3,zero,43818 <__muldf3+0x2dc>
   43780:	0023883a 	mov	r17,zero
   43784:	0011883a 	mov	r8,zero
   43788:	01400084 	movi	r5,2
   4378c:	003f9c06 	br	43600 <__alt_data_end+0xfffdc500>
   43790:	3446b03a 	or	r3,r6,r17
   43794:	18001c26 	beq	r3,zero,43808 <__muldf3+0x2cc>
   43798:	8800ce26 	beq	r17,zero,43ad4 <__muldf3+0x598>
   4379c:	8809883a 	mov	r4,r17
   437a0:	d9800215 	stw	r6,8(sp)
   437a4:	da400115 	stw	r9,4(sp)
   437a8:	da800015 	stw	r10,0(sp)
   437ac:	00448e40 	call	448e4 <__clzsi2>
   437b0:	d9800217 	ldw	r6,8(sp)
   437b4:	da400117 	ldw	r9,4(sp)
   437b8:	da800017 	ldw	r10,0(sp)
   437bc:	113ffd44 	addi	r4,r2,-11
   437c0:	00c00704 	movi	r3,28
   437c4:	1900bf16 	blt	r3,r4,43ac4 <__muldf3+0x588>
   437c8:	00c00744 	movi	r3,29
   437cc:	123ffe04 	addi	r8,r2,-8
   437d0:	1907c83a 	sub	r3,r3,r4
   437d4:	8a22983a 	sll	r17,r17,r8
   437d8:	30c6d83a 	srl	r3,r6,r3
   437dc:	3210983a 	sll	r8,r6,r8
   437e0:	1c62b03a 	or	r17,r3,r17
   437e4:	1080fcc4 	addi	r2,r2,1011
   437e8:	0085c83a 	sub	r2,zero,r2
   437ec:	000b883a 	mov	r5,zero
   437f0:	003f8306 	br	43600 <__alt_data_end+0xfffdc500>
   437f4:	b02b883a 	mov	r21,r22
   437f8:	0081ffc4 	movi	r2,2047
   437fc:	000b883a 	mov	r5,zero
   43800:	0029883a 	mov	r20,zero
   43804:	003fac06 	br	436b8 <__alt_data_end+0xfffdc5b8>
   43808:	0023883a 	mov	r17,zero
   4380c:	0011883a 	mov	r8,zero
   43810:	01400044 	movi	r5,1
   43814:	003f7a06 	br	43600 <__alt_data_end+0xfffdc500>
   43818:	014000c4 	movi	r5,3
   4381c:	003f7806 	br	43600 <__alt_data_end+0xfffdc500>
   43820:	04c00104 	movi	r19,4
   43824:	0021883a 	mov	r16,zero
   43828:	0029883a 	mov	r20,zero
   4382c:	07000044 	movi	fp,1
   43830:	003f6106 	br	435b8 <__alt_data_end+0xfffdc4b8>
   43834:	04c00304 	movi	r19,12
   43838:	070000c4 	movi	fp,3
   4383c:	003f5e06 	br	435b8 <__alt_data_end+0xfffdc4b8>
   43840:	01400434 	movhi	r5,16
   43844:	002b883a 	mov	r21,zero
   43848:	297fffc4 	addi	r5,r5,-1
   4384c:	053fffc4 	movi	r20,-1
   43850:	0081ffc4 	movi	r2,2047
   43854:	003f9806 	br	436b8 <__alt_data_end+0xfffdc5b8>
   43858:	8023883a 	mov	r17,r16
   4385c:	a011883a 	mov	r8,r20
   43860:	e00b883a 	mov	r5,fp
   43864:	003f8a06 	br	43690 <__alt_data_end+0xfffdc590>
   43868:	8023883a 	mov	r17,r16
   4386c:	a011883a 	mov	r8,r20
   43870:	482d883a 	mov	r22,r9
   43874:	e00b883a 	mov	r5,fp
   43878:	003f8506 	br	43690 <__alt_data_end+0xfffdc590>
   4387c:	a00ad43a 	srli	r5,r20,16
   43880:	401ad43a 	srli	r13,r8,16
   43884:	a53fffcc 	andi	r20,r20,65535
   43888:	423fffcc 	andi	r8,r8,65535
   4388c:	4519383a 	mul	r12,r8,r20
   43890:	4147383a 	mul	r3,r8,r5
   43894:	6d09383a 	mul	r4,r13,r20
   43898:	600cd43a 	srli	r6,r12,16
   4389c:	2b5d383a 	mul	r14,r5,r13
   438a0:	20c9883a 	add	r4,r4,r3
   438a4:	310d883a 	add	r6,r6,r4
   438a8:	30c0022e 	bgeu	r6,r3,438b4 <__muldf3+0x378>
   438ac:	00c00074 	movhi	r3,1
   438b0:	70dd883a 	add	r14,r14,r3
   438b4:	8826d43a 	srli	r19,r17,16
   438b8:	8bffffcc 	andi	r15,r17,65535
   438bc:	7d23383a 	mul	r17,r15,r20
   438c0:	7949383a 	mul	r4,r15,r5
   438c4:	9d29383a 	mul	r20,r19,r20
   438c8:	8814d43a 	srli	r10,r17,16
   438cc:	3012943a 	slli	r9,r6,16
   438d0:	a129883a 	add	r20,r20,r4
   438d4:	633fffcc 	andi	r12,r12,65535
   438d8:	5515883a 	add	r10,r10,r20
   438dc:	3006d43a 	srli	r3,r6,16
   438e0:	4b13883a 	add	r9,r9,r12
   438e4:	2ccb383a 	mul	r5,r5,r19
   438e8:	5100022e 	bgeu	r10,r4,438f4 <__muldf3+0x3b8>
   438ec:	01000074 	movhi	r4,1
   438f0:	290b883a 	add	r5,r5,r4
   438f4:	802ad43a 	srli	r21,r16,16
   438f8:	843fffcc 	andi	r16,r16,65535
   438fc:	440d383a 	mul	r6,r8,r16
   43900:	4565383a 	mul	r18,r8,r21
   43904:	8349383a 	mul	r4,r16,r13
   43908:	500e943a 	slli	r7,r10,16
   4390c:	3010d43a 	srli	r8,r6,16
   43910:	5028d43a 	srli	r20,r10,16
   43914:	2489883a 	add	r4,r4,r18
   43918:	8abfffcc 	andi	r10,r17,65535
   4391c:	3a95883a 	add	r10,r7,r10
   43920:	4119883a 	add	r12,r8,r4
   43924:	a169883a 	add	r20,r20,r5
   43928:	1a87883a 	add	r3,r3,r10
   4392c:	6d5b383a 	mul	r13,r13,r21
   43930:	6480022e 	bgeu	r12,r18,4393c <__muldf3+0x400>
   43934:	01000074 	movhi	r4,1
   43938:	691b883a 	add	r13,r13,r4
   4393c:	7c25383a 	mul	r18,r15,r16
   43940:	7d4b383a 	mul	r5,r15,r21
   43944:	84cf383a 	mul	r7,r16,r19
   43948:	901ed43a 	srli	r15,r18,16
   4394c:	6008d43a 	srli	r4,r12,16
   43950:	6010943a 	slli	r8,r12,16
   43954:	394f883a 	add	r7,r7,r5
   43958:	333fffcc 	andi	r12,r6,65535
   4395c:	79df883a 	add	r15,r15,r7
   43960:	235b883a 	add	r13,r4,r13
   43964:	9d63383a 	mul	r17,r19,r21
   43968:	4309883a 	add	r4,r8,r12
   4396c:	7940022e 	bgeu	r15,r5,43978 <__muldf3+0x43c>
   43970:	01400074 	movhi	r5,1
   43974:	8963883a 	add	r17,r17,r5
   43978:	780a943a 	slli	r5,r15,16
   4397c:	91bfffcc 	andi	r6,r18,65535
   43980:	70c7883a 	add	r3,r14,r3
   43984:	298d883a 	add	r6,r5,r6
   43988:	1a8f803a 	cmpltu	r7,r3,r10
   4398c:	350b883a 	add	r5,r6,r20
   43990:	20c7883a 	add	r3,r4,r3
   43994:	3955883a 	add	r10,r7,r5
   43998:	1909803a 	cmpltu	r4,r3,r4
   4399c:	6a91883a 	add	r8,r13,r10
   439a0:	780cd43a 	srli	r6,r15,16
   439a4:	2219883a 	add	r12,r4,r8
   439a8:	2d0b803a 	cmpltu	r5,r5,r20
   439ac:	51cf803a 	cmpltu	r7,r10,r7
   439b0:	29ceb03a 	or	r7,r5,r7
   439b4:	4351803a 	cmpltu	r8,r8,r13
   439b8:	610b803a 	cmpltu	r5,r12,r4
   439bc:	4148b03a 	or	r4,r8,r5
   439c0:	398f883a 	add	r7,r7,r6
   439c4:	3909883a 	add	r4,r7,r4
   439c8:	1810927a 	slli	r8,r3,9
   439cc:	2449883a 	add	r4,r4,r17
   439d0:	2008927a 	slli	r4,r4,9
   439d4:	6022d5fa 	srli	r17,r12,23
   439d8:	1806d5fa 	srli	r3,r3,23
   439dc:	4252b03a 	or	r9,r8,r9
   439e0:	600a927a 	slli	r5,r12,9
   439e4:	4810c03a 	cmpne	r8,r9,zero
   439e8:	2462b03a 	or	r17,r4,r17
   439ec:	40c6b03a 	or	r3,r8,r3
   439f0:	8900402c 	andhi	r4,r17,256
   439f4:	1950b03a 	or	r8,r3,r5
   439f8:	20000726 	beq	r4,zero,43a18 <__muldf3+0x4dc>
   439fc:	4006d07a 	srli	r3,r8,1
   43a00:	880497fa 	slli	r2,r17,31
   43a04:	4200004c 	andi	r8,r8,1
   43a08:	8822d07a 	srli	r17,r17,1
   43a0c:	1a10b03a 	or	r8,r3,r8
   43a10:	1210b03a 	or	r8,r2,r8
   43a14:	5805883a 	mov	r2,r11
   43a18:	1140ffc4 	addi	r5,r2,1023
   43a1c:	0140440e 	bge	zero,r5,43b30 <__muldf3+0x5f4>
   43a20:	40c001cc 	andi	r3,r8,7
   43a24:	18000726 	beq	r3,zero,43a44 <__muldf3+0x508>
   43a28:	40c003cc 	andi	r3,r8,15
   43a2c:	01000104 	movi	r4,4
   43a30:	19000426 	beq	r3,r4,43a44 <__muldf3+0x508>
   43a34:	4107883a 	add	r3,r8,r4
   43a38:	1a11803a 	cmpltu	r8,r3,r8
   43a3c:	8a23883a 	add	r17,r17,r8
   43a40:	1811883a 	mov	r8,r3
   43a44:	88c0402c 	andhi	r3,r17,256
   43a48:	18000426 	beq	r3,zero,43a5c <__muldf3+0x520>
   43a4c:	11410004 	addi	r5,r2,1024
   43a50:	00bfc034 	movhi	r2,65280
   43a54:	10bfffc4 	addi	r2,r2,-1
   43a58:	88a2703a 	and	r17,r17,r2
   43a5c:	0081ff84 	movi	r2,2046
   43a60:	117f6416 	blt	r2,r5,437f4 <__alt_data_end+0xfffdc6f4>
   43a64:	8828977a 	slli	r20,r17,29
   43a68:	4010d0fa 	srli	r8,r8,3
   43a6c:	8822927a 	slli	r17,r17,9
   43a70:	2881ffcc 	andi	r2,r5,2047
   43a74:	a228b03a 	or	r20,r20,r8
   43a78:	880ad33a 	srli	r5,r17,12
   43a7c:	b02b883a 	mov	r21,r22
   43a80:	003f0d06 	br	436b8 <__alt_data_end+0xfffdc5b8>
   43a84:	8080022c 	andhi	r2,r16,8
   43a88:	10000926 	beq	r2,zero,43ab0 <__muldf3+0x574>
   43a8c:	8880022c 	andhi	r2,r17,8
   43a90:	1000071e 	bne	r2,zero,43ab0 <__muldf3+0x574>
   43a94:	00800434 	movhi	r2,16
   43a98:	89400234 	orhi	r5,r17,8
   43a9c:	10bfffc4 	addi	r2,r2,-1
   43aa0:	b82b883a 	mov	r21,r23
   43aa4:	288a703a 	and	r5,r5,r2
   43aa8:	4029883a 	mov	r20,r8
   43aac:	003f6806 	br	43850 <__alt_data_end+0xfffdc750>
   43ab0:	00800434 	movhi	r2,16
   43ab4:	81400234 	orhi	r5,r16,8
   43ab8:	10bfffc4 	addi	r2,r2,-1
   43abc:	288a703a 	and	r5,r5,r2
   43ac0:	003f6306 	br	43850 <__alt_data_end+0xfffdc750>
   43ac4:	147ff604 	addi	r17,r2,-40
   43ac8:	3462983a 	sll	r17,r6,r17
   43acc:	0011883a 	mov	r8,zero
   43ad0:	003f4406 	br	437e4 <__alt_data_end+0xfffdc6e4>
   43ad4:	3009883a 	mov	r4,r6
   43ad8:	d9800215 	stw	r6,8(sp)
   43adc:	da400115 	stw	r9,4(sp)
   43ae0:	da800015 	stw	r10,0(sp)
   43ae4:	00448e40 	call	448e4 <__clzsi2>
   43ae8:	10800804 	addi	r2,r2,32
   43aec:	da800017 	ldw	r10,0(sp)
   43af0:	da400117 	ldw	r9,4(sp)
   43af4:	d9800217 	ldw	r6,8(sp)
   43af8:	003f3006 	br	437bc <__alt_data_end+0xfffdc6bc>
   43afc:	143ff604 	addi	r16,r2,-40
   43b00:	9c20983a 	sll	r16,r19,r16
   43b04:	0029883a 	mov	r20,zero
   43b08:	003f1606 	br	43764 <__alt_data_end+0xfffdc664>
   43b0c:	d9800215 	stw	r6,8(sp)
   43b10:	d9c00015 	stw	r7,0(sp)
   43b14:	da400115 	stw	r9,4(sp)
   43b18:	00448e40 	call	448e4 <__clzsi2>
   43b1c:	10800804 	addi	r2,r2,32
   43b20:	da400117 	ldw	r9,4(sp)
   43b24:	d9c00017 	ldw	r7,0(sp)
   43b28:	d9800217 	ldw	r6,8(sp)
   43b2c:	003f0306 	br	4373c <__alt_data_end+0xfffdc63c>
   43b30:	00c00044 	movi	r3,1
   43b34:	1947c83a 	sub	r3,r3,r5
   43b38:	00800e04 	movi	r2,56
   43b3c:	10feda16 	blt	r2,r3,436a8 <__alt_data_end+0xfffdc5a8>
   43b40:	008007c4 	movi	r2,31
   43b44:	10c01b16 	blt	r2,r3,43bb4 <__muldf3+0x678>
   43b48:	00800804 	movi	r2,32
   43b4c:	10c5c83a 	sub	r2,r2,r3
   43b50:	888a983a 	sll	r5,r17,r2
   43b54:	40c8d83a 	srl	r4,r8,r3
   43b58:	4084983a 	sll	r2,r8,r2
   43b5c:	88e2d83a 	srl	r17,r17,r3
   43b60:	2906b03a 	or	r3,r5,r4
   43b64:	1004c03a 	cmpne	r2,r2,zero
   43b68:	1886b03a 	or	r3,r3,r2
   43b6c:	188001cc 	andi	r2,r3,7
   43b70:	10000726 	beq	r2,zero,43b90 <__muldf3+0x654>
   43b74:	188003cc 	andi	r2,r3,15
   43b78:	01000104 	movi	r4,4
   43b7c:	11000426 	beq	r2,r4,43b90 <__muldf3+0x654>
   43b80:	1805883a 	mov	r2,r3
   43b84:	10c00104 	addi	r3,r2,4
   43b88:	1885803a 	cmpltu	r2,r3,r2
   43b8c:	88a3883a 	add	r17,r17,r2
   43b90:	8880202c 	andhi	r2,r17,128
   43b94:	10001c26 	beq	r2,zero,43c08 <__muldf3+0x6cc>
   43b98:	b02b883a 	mov	r21,r22
   43b9c:	00800044 	movi	r2,1
   43ba0:	000b883a 	mov	r5,zero
   43ba4:	0029883a 	mov	r20,zero
   43ba8:	003ec306 	br	436b8 <__alt_data_end+0xfffdc5b8>
   43bac:	5805883a 	mov	r2,r11
   43bb0:	003f9906 	br	43a18 <__alt_data_end+0xfffdc918>
   43bb4:	00bff844 	movi	r2,-31
   43bb8:	1145c83a 	sub	r2,r2,r5
   43bbc:	8888d83a 	srl	r4,r17,r2
   43bc0:	00800804 	movi	r2,32
   43bc4:	18801a26 	beq	r3,r2,43c30 <__muldf3+0x6f4>
   43bc8:	00801004 	movi	r2,64
   43bcc:	10c5c83a 	sub	r2,r2,r3
   43bd0:	8884983a 	sll	r2,r17,r2
   43bd4:	1204b03a 	or	r2,r2,r8
   43bd8:	1004c03a 	cmpne	r2,r2,zero
   43bdc:	2084b03a 	or	r2,r4,r2
   43be0:	144001cc 	andi	r17,r2,7
   43be4:	88000d1e 	bne	r17,zero,43c1c <__muldf3+0x6e0>
   43be8:	000b883a 	mov	r5,zero
   43bec:	1028d0fa 	srli	r20,r2,3
   43bf0:	b02b883a 	mov	r21,r22
   43bf4:	0005883a 	mov	r2,zero
   43bf8:	a468b03a 	or	r20,r20,r17
   43bfc:	003eae06 	br	436b8 <__alt_data_end+0xfffdc5b8>
   43c00:	1007883a 	mov	r3,r2
   43c04:	0023883a 	mov	r17,zero
   43c08:	880a927a 	slli	r5,r17,9
   43c0c:	1805883a 	mov	r2,r3
   43c10:	8822977a 	slli	r17,r17,29
   43c14:	280ad33a 	srli	r5,r5,12
   43c18:	003ff406 	br	43bec <__alt_data_end+0xfffdcaec>
   43c1c:	10c003cc 	andi	r3,r2,15
   43c20:	01000104 	movi	r4,4
   43c24:	193ff626 	beq	r3,r4,43c00 <__alt_data_end+0xfffdcb00>
   43c28:	0023883a 	mov	r17,zero
   43c2c:	003fd506 	br	43b84 <__alt_data_end+0xfffdca84>
   43c30:	0005883a 	mov	r2,zero
   43c34:	003fe706 	br	43bd4 <__alt_data_end+0xfffdcad4>
   43c38:	00800434 	movhi	r2,16
   43c3c:	89400234 	orhi	r5,r17,8
   43c40:	10bfffc4 	addi	r2,r2,-1
   43c44:	b02b883a 	mov	r21,r22
   43c48:	288a703a 	and	r5,r5,r2
   43c4c:	4029883a 	mov	r20,r8
   43c50:	003eff06 	br	43850 <__alt_data_end+0xfffdc750>

00043c54 <__subdf3>:
   43c54:	02000434 	movhi	r8,16
   43c58:	423fffc4 	addi	r8,r8,-1
   43c5c:	defffb04 	addi	sp,sp,-20
   43c60:	2a14703a 	and	r10,r5,r8
   43c64:	3812d53a 	srli	r9,r7,20
   43c68:	3a10703a 	and	r8,r7,r8
   43c6c:	2006d77a 	srli	r3,r4,29
   43c70:	3004d77a 	srli	r2,r6,29
   43c74:	dc000015 	stw	r16,0(sp)
   43c78:	501490fa 	slli	r10,r10,3
   43c7c:	2820d53a 	srli	r16,r5,20
   43c80:	401090fa 	slli	r8,r8,3
   43c84:	dc800215 	stw	r18,8(sp)
   43c88:	dc400115 	stw	r17,4(sp)
   43c8c:	dfc00415 	stw	ra,16(sp)
   43c90:	202290fa 	slli	r17,r4,3
   43c94:	dcc00315 	stw	r19,12(sp)
   43c98:	4a41ffcc 	andi	r9,r9,2047
   43c9c:	0101ffc4 	movi	r4,2047
   43ca0:	2824d7fa 	srli	r18,r5,31
   43ca4:	8401ffcc 	andi	r16,r16,2047
   43ca8:	50c6b03a 	or	r3,r10,r3
   43cac:	380ed7fa 	srli	r7,r7,31
   43cb0:	408ab03a 	or	r5,r8,r2
   43cb4:	300c90fa 	slli	r6,r6,3
   43cb8:	49009626 	beq	r9,r4,43f14 <__subdf3+0x2c0>
   43cbc:	39c0005c 	xori	r7,r7,1
   43cc0:	8245c83a 	sub	r2,r16,r9
   43cc4:	3c807426 	beq	r7,r18,43e98 <__subdf3+0x244>
   43cc8:	0080af0e 	bge	zero,r2,43f88 <__subdf3+0x334>
   43ccc:	48002a1e 	bne	r9,zero,43d78 <__subdf3+0x124>
   43cd0:	2988b03a 	or	r4,r5,r6
   43cd4:	20009a1e 	bne	r4,zero,43f40 <__subdf3+0x2ec>
   43cd8:	888001cc 	andi	r2,r17,7
   43cdc:	10000726 	beq	r2,zero,43cfc <__subdf3+0xa8>
   43ce0:	888003cc 	andi	r2,r17,15
   43ce4:	01000104 	movi	r4,4
   43ce8:	11000426 	beq	r2,r4,43cfc <__subdf3+0xa8>
   43cec:	890b883a 	add	r5,r17,r4
   43cf0:	2c63803a 	cmpltu	r17,r5,r17
   43cf4:	1c47883a 	add	r3,r3,r17
   43cf8:	2823883a 	mov	r17,r5
   43cfc:	1880202c 	andhi	r2,r3,128
   43d00:	10005926 	beq	r2,zero,43e68 <__subdf3+0x214>
   43d04:	84000044 	addi	r16,r16,1
   43d08:	0081ffc4 	movi	r2,2047
   43d0c:	8080be26 	beq	r16,r2,44008 <__subdf3+0x3b4>
   43d10:	017fe034 	movhi	r5,65408
   43d14:	297fffc4 	addi	r5,r5,-1
   43d18:	1946703a 	and	r3,r3,r5
   43d1c:	1804977a 	slli	r2,r3,29
   43d20:	1806927a 	slli	r3,r3,9
   43d24:	8822d0fa 	srli	r17,r17,3
   43d28:	8401ffcc 	andi	r16,r16,2047
   43d2c:	180ad33a 	srli	r5,r3,12
   43d30:	9100004c 	andi	r4,r18,1
   43d34:	1444b03a 	or	r2,r2,r17
   43d38:	80c1ffcc 	andi	r3,r16,2047
   43d3c:	1820953a 	slli	r16,r3,20
   43d40:	20c03fcc 	andi	r3,r4,255
   43d44:	180897fa 	slli	r4,r3,31
   43d48:	00c00434 	movhi	r3,16
   43d4c:	18ffffc4 	addi	r3,r3,-1
   43d50:	28c6703a 	and	r3,r5,r3
   43d54:	1c06b03a 	or	r3,r3,r16
   43d58:	1906b03a 	or	r3,r3,r4
   43d5c:	dfc00417 	ldw	ra,16(sp)
   43d60:	dcc00317 	ldw	r19,12(sp)
   43d64:	dc800217 	ldw	r18,8(sp)
   43d68:	dc400117 	ldw	r17,4(sp)
   43d6c:	dc000017 	ldw	r16,0(sp)
   43d70:	dec00504 	addi	sp,sp,20
   43d74:	f800283a 	ret
   43d78:	0101ffc4 	movi	r4,2047
   43d7c:	813fd626 	beq	r16,r4,43cd8 <__alt_data_end+0xfffdcbd8>
   43d80:	29402034 	orhi	r5,r5,128
   43d84:	01000e04 	movi	r4,56
   43d88:	2080a316 	blt	r4,r2,44018 <__subdf3+0x3c4>
   43d8c:	010007c4 	movi	r4,31
   43d90:	2080c616 	blt	r4,r2,440ac <__subdf3+0x458>
   43d94:	01000804 	movi	r4,32
   43d98:	2089c83a 	sub	r4,r4,r2
   43d9c:	2910983a 	sll	r8,r5,r4
   43da0:	308ed83a 	srl	r7,r6,r2
   43da4:	3108983a 	sll	r4,r6,r4
   43da8:	2884d83a 	srl	r2,r5,r2
   43dac:	41ccb03a 	or	r6,r8,r7
   43db0:	2008c03a 	cmpne	r4,r4,zero
   43db4:	310cb03a 	or	r6,r6,r4
   43db8:	898dc83a 	sub	r6,r17,r6
   43dbc:	89a3803a 	cmpltu	r17,r17,r6
   43dc0:	1887c83a 	sub	r3,r3,r2
   43dc4:	1c47c83a 	sub	r3,r3,r17
   43dc8:	3023883a 	mov	r17,r6
   43dcc:	1880202c 	andhi	r2,r3,128
   43dd0:	10002326 	beq	r2,zero,43e60 <__subdf3+0x20c>
   43dd4:	04c02034 	movhi	r19,128
   43dd8:	9cffffc4 	addi	r19,r19,-1
   43ddc:	1ce6703a 	and	r19,r3,r19
   43de0:	98007a26 	beq	r19,zero,43fcc <__subdf3+0x378>
   43de4:	9809883a 	mov	r4,r19
   43de8:	00448e40 	call	448e4 <__clzsi2>
   43dec:	113ffe04 	addi	r4,r2,-8
   43df0:	00c007c4 	movi	r3,31
   43df4:	19007b16 	blt	r3,r4,43fe4 <__subdf3+0x390>
   43df8:	00800804 	movi	r2,32
   43dfc:	1105c83a 	sub	r2,r2,r4
   43e00:	8884d83a 	srl	r2,r17,r2
   43e04:	9906983a 	sll	r3,r19,r4
   43e08:	8922983a 	sll	r17,r17,r4
   43e0c:	10c4b03a 	or	r2,r2,r3
   43e10:	24007816 	blt	r4,r16,43ff4 <__subdf3+0x3a0>
   43e14:	2421c83a 	sub	r16,r4,r16
   43e18:	80c00044 	addi	r3,r16,1
   43e1c:	010007c4 	movi	r4,31
   43e20:	20c09516 	blt	r4,r3,44078 <__subdf3+0x424>
   43e24:	01400804 	movi	r5,32
   43e28:	28cbc83a 	sub	r5,r5,r3
   43e2c:	88c8d83a 	srl	r4,r17,r3
   43e30:	8962983a 	sll	r17,r17,r5
   43e34:	114a983a 	sll	r5,r2,r5
   43e38:	10c6d83a 	srl	r3,r2,r3
   43e3c:	8804c03a 	cmpne	r2,r17,zero
   43e40:	290ab03a 	or	r5,r5,r4
   43e44:	28a2b03a 	or	r17,r5,r2
   43e48:	0021883a 	mov	r16,zero
   43e4c:	003fa206 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   43e50:	2090b03a 	or	r8,r4,r2
   43e54:	40018e26 	beq	r8,zero,44490 <__subdf3+0x83c>
   43e58:	1007883a 	mov	r3,r2
   43e5c:	2023883a 	mov	r17,r4
   43e60:	888001cc 	andi	r2,r17,7
   43e64:	103f9e1e 	bne	r2,zero,43ce0 <__alt_data_end+0xfffdcbe0>
   43e68:	1804977a 	slli	r2,r3,29
   43e6c:	8822d0fa 	srli	r17,r17,3
   43e70:	1810d0fa 	srli	r8,r3,3
   43e74:	9100004c 	andi	r4,r18,1
   43e78:	1444b03a 	or	r2,r2,r17
   43e7c:	00c1ffc4 	movi	r3,2047
   43e80:	80c02826 	beq	r16,r3,43f24 <__subdf3+0x2d0>
   43e84:	01400434 	movhi	r5,16
   43e88:	297fffc4 	addi	r5,r5,-1
   43e8c:	80e0703a 	and	r16,r16,r3
   43e90:	414a703a 	and	r5,r8,r5
   43e94:	003fa806 	br	43d38 <__alt_data_end+0xfffdcc38>
   43e98:	0080630e 	bge	zero,r2,44028 <__subdf3+0x3d4>
   43e9c:	48003026 	beq	r9,zero,43f60 <__subdf3+0x30c>
   43ea0:	0101ffc4 	movi	r4,2047
   43ea4:	813f8c26 	beq	r16,r4,43cd8 <__alt_data_end+0xfffdcbd8>
   43ea8:	29402034 	orhi	r5,r5,128
   43eac:	01000e04 	movi	r4,56
   43eb0:	2080a90e 	bge	r4,r2,44158 <__subdf3+0x504>
   43eb4:	298cb03a 	or	r6,r5,r6
   43eb8:	3012c03a 	cmpne	r9,r6,zero
   43ebc:	0005883a 	mov	r2,zero
   43ec0:	4c53883a 	add	r9,r9,r17
   43ec4:	4c63803a 	cmpltu	r17,r9,r17
   43ec8:	10c7883a 	add	r3,r2,r3
   43ecc:	88c7883a 	add	r3,r17,r3
   43ed0:	4823883a 	mov	r17,r9
   43ed4:	1880202c 	andhi	r2,r3,128
   43ed8:	1000d026 	beq	r2,zero,4421c <__subdf3+0x5c8>
   43edc:	84000044 	addi	r16,r16,1
   43ee0:	0081ffc4 	movi	r2,2047
   43ee4:	8080fe26 	beq	r16,r2,442e0 <__subdf3+0x68c>
   43ee8:	00bfe034 	movhi	r2,65408
   43eec:	10bfffc4 	addi	r2,r2,-1
   43ef0:	1886703a 	and	r3,r3,r2
   43ef4:	880ad07a 	srli	r5,r17,1
   43ef8:	180497fa 	slli	r2,r3,31
   43efc:	8900004c 	andi	r4,r17,1
   43f00:	2922b03a 	or	r17,r5,r4
   43f04:	1806d07a 	srli	r3,r3,1
   43f08:	1462b03a 	or	r17,r2,r17
   43f0c:	3825883a 	mov	r18,r7
   43f10:	003f7106 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   43f14:	2984b03a 	or	r2,r5,r6
   43f18:	103f6826 	beq	r2,zero,43cbc <__alt_data_end+0xfffdcbbc>
   43f1c:	39c03fcc 	andi	r7,r7,255
   43f20:	003f6706 	br	43cc0 <__alt_data_end+0xfffdcbc0>
   43f24:	4086b03a 	or	r3,r8,r2
   43f28:	18015226 	beq	r3,zero,44474 <__subdf3+0x820>
   43f2c:	00c00434 	movhi	r3,16
   43f30:	41400234 	orhi	r5,r8,8
   43f34:	18ffffc4 	addi	r3,r3,-1
   43f38:	28ca703a 	and	r5,r5,r3
   43f3c:	003f7e06 	br	43d38 <__alt_data_end+0xfffdcc38>
   43f40:	10bfffc4 	addi	r2,r2,-1
   43f44:	1000491e 	bne	r2,zero,4406c <__subdf3+0x418>
   43f48:	898fc83a 	sub	r7,r17,r6
   43f4c:	89e3803a 	cmpltu	r17,r17,r7
   43f50:	1947c83a 	sub	r3,r3,r5
   43f54:	1c47c83a 	sub	r3,r3,r17
   43f58:	3823883a 	mov	r17,r7
   43f5c:	003f9b06 	br	43dcc <__alt_data_end+0xfffdcccc>
   43f60:	2988b03a 	or	r4,r5,r6
   43f64:	203f5c26 	beq	r4,zero,43cd8 <__alt_data_end+0xfffdcbd8>
   43f68:	10bfffc4 	addi	r2,r2,-1
   43f6c:	1000931e 	bne	r2,zero,441bc <__subdf3+0x568>
   43f70:	898d883a 	add	r6,r17,r6
   43f74:	3463803a 	cmpltu	r17,r6,r17
   43f78:	1947883a 	add	r3,r3,r5
   43f7c:	88c7883a 	add	r3,r17,r3
   43f80:	3023883a 	mov	r17,r6
   43f84:	003fd306 	br	43ed4 <__alt_data_end+0xfffdcdd4>
   43f88:	1000541e 	bne	r2,zero,440dc <__subdf3+0x488>
   43f8c:	80800044 	addi	r2,r16,1
   43f90:	1081ffcc 	andi	r2,r2,2047
   43f94:	01000044 	movi	r4,1
   43f98:	2080a20e 	bge	r4,r2,44224 <__subdf3+0x5d0>
   43f9c:	8989c83a 	sub	r4,r17,r6
   43fa0:	8905803a 	cmpltu	r2,r17,r4
   43fa4:	1967c83a 	sub	r19,r3,r5
   43fa8:	98a7c83a 	sub	r19,r19,r2
   43fac:	9880202c 	andhi	r2,r19,128
   43fb0:	10006326 	beq	r2,zero,44140 <__subdf3+0x4ec>
   43fb4:	3463c83a 	sub	r17,r6,r17
   43fb8:	28c7c83a 	sub	r3,r5,r3
   43fbc:	344d803a 	cmpltu	r6,r6,r17
   43fc0:	19a7c83a 	sub	r19,r3,r6
   43fc4:	3825883a 	mov	r18,r7
   43fc8:	983f861e 	bne	r19,zero,43de4 <__alt_data_end+0xfffdcce4>
   43fcc:	8809883a 	mov	r4,r17
   43fd0:	00448e40 	call	448e4 <__clzsi2>
   43fd4:	10800804 	addi	r2,r2,32
   43fd8:	113ffe04 	addi	r4,r2,-8
   43fdc:	00c007c4 	movi	r3,31
   43fe0:	193f850e 	bge	r3,r4,43df8 <__alt_data_end+0xfffdccf8>
   43fe4:	10bff604 	addi	r2,r2,-40
   43fe8:	8884983a 	sll	r2,r17,r2
   43fec:	0023883a 	mov	r17,zero
   43ff0:	243f880e 	bge	r4,r16,43e14 <__alt_data_end+0xfffdcd14>
   43ff4:	00ffe034 	movhi	r3,65408
   43ff8:	18ffffc4 	addi	r3,r3,-1
   43ffc:	8121c83a 	sub	r16,r16,r4
   44000:	10c6703a 	and	r3,r2,r3
   44004:	003f3406 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   44008:	9100004c 	andi	r4,r18,1
   4400c:	000b883a 	mov	r5,zero
   44010:	0005883a 	mov	r2,zero
   44014:	003f4806 	br	43d38 <__alt_data_end+0xfffdcc38>
   44018:	298cb03a 	or	r6,r5,r6
   4401c:	300cc03a 	cmpne	r6,r6,zero
   44020:	0005883a 	mov	r2,zero
   44024:	003f6406 	br	43db8 <__alt_data_end+0xfffdccb8>
   44028:	10009a1e 	bne	r2,zero,44294 <__subdf3+0x640>
   4402c:	82400044 	addi	r9,r16,1
   44030:	4881ffcc 	andi	r2,r9,2047
   44034:	02800044 	movi	r10,1
   44038:	5080670e 	bge	r10,r2,441d8 <__subdf3+0x584>
   4403c:	0081ffc4 	movi	r2,2047
   44040:	4880af26 	beq	r9,r2,44300 <__subdf3+0x6ac>
   44044:	898d883a 	add	r6,r17,r6
   44048:	1945883a 	add	r2,r3,r5
   4404c:	3447803a 	cmpltu	r3,r6,r17
   44050:	1887883a 	add	r3,r3,r2
   44054:	182297fa 	slli	r17,r3,31
   44058:	300cd07a 	srli	r6,r6,1
   4405c:	1806d07a 	srli	r3,r3,1
   44060:	4821883a 	mov	r16,r9
   44064:	89a2b03a 	or	r17,r17,r6
   44068:	003f1b06 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   4406c:	0101ffc4 	movi	r4,2047
   44070:	813f441e 	bne	r16,r4,43d84 <__alt_data_end+0xfffdcc84>
   44074:	003f1806 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   44078:	843ff844 	addi	r16,r16,-31
   4407c:	01400804 	movi	r5,32
   44080:	1408d83a 	srl	r4,r2,r16
   44084:	19405026 	beq	r3,r5,441c8 <__subdf3+0x574>
   44088:	01401004 	movi	r5,64
   4408c:	28c7c83a 	sub	r3,r5,r3
   44090:	10c4983a 	sll	r2,r2,r3
   44094:	88a2b03a 	or	r17,r17,r2
   44098:	8822c03a 	cmpne	r17,r17,zero
   4409c:	2462b03a 	or	r17,r4,r17
   440a0:	0007883a 	mov	r3,zero
   440a4:	0021883a 	mov	r16,zero
   440a8:	003f6d06 	br	43e60 <__alt_data_end+0xfffdcd60>
   440ac:	11fff804 	addi	r7,r2,-32
   440b0:	01000804 	movi	r4,32
   440b4:	29ced83a 	srl	r7,r5,r7
   440b8:	11004526 	beq	r2,r4,441d0 <__subdf3+0x57c>
   440bc:	01001004 	movi	r4,64
   440c0:	2089c83a 	sub	r4,r4,r2
   440c4:	2904983a 	sll	r2,r5,r4
   440c8:	118cb03a 	or	r6,r2,r6
   440cc:	300cc03a 	cmpne	r6,r6,zero
   440d0:	398cb03a 	or	r6,r7,r6
   440d4:	0005883a 	mov	r2,zero
   440d8:	003f3706 	br	43db8 <__alt_data_end+0xfffdccb8>
   440dc:	80002a26 	beq	r16,zero,44188 <__subdf3+0x534>
   440e0:	0101ffc4 	movi	r4,2047
   440e4:	49006626 	beq	r9,r4,44280 <__subdf3+0x62c>
   440e8:	0085c83a 	sub	r2,zero,r2
   440ec:	18c02034 	orhi	r3,r3,128
   440f0:	01000e04 	movi	r4,56
   440f4:	20807e16 	blt	r4,r2,442f0 <__subdf3+0x69c>
   440f8:	010007c4 	movi	r4,31
   440fc:	2080e716 	blt	r4,r2,4449c <__subdf3+0x848>
   44100:	01000804 	movi	r4,32
   44104:	2089c83a 	sub	r4,r4,r2
   44108:	1914983a 	sll	r10,r3,r4
   4410c:	8890d83a 	srl	r8,r17,r2
   44110:	8908983a 	sll	r4,r17,r4
   44114:	1884d83a 	srl	r2,r3,r2
   44118:	5222b03a 	or	r17,r10,r8
   4411c:	2006c03a 	cmpne	r3,r4,zero
   44120:	88e2b03a 	or	r17,r17,r3
   44124:	3463c83a 	sub	r17,r6,r17
   44128:	2885c83a 	sub	r2,r5,r2
   4412c:	344d803a 	cmpltu	r6,r6,r17
   44130:	1187c83a 	sub	r3,r2,r6
   44134:	4821883a 	mov	r16,r9
   44138:	3825883a 	mov	r18,r7
   4413c:	003f2306 	br	43dcc <__alt_data_end+0xfffdcccc>
   44140:	24d0b03a 	or	r8,r4,r19
   44144:	40001b1e 	bne	r8,zero,441b4 <__subdf3+0x560>
   44148:	0005883a 	mov	r2,zero
   4414c:	0009883a 	mov	r4,zero
   44150:	0021883a 	mov	r16,zero
   44154:	003f4906 	br	43e7c <__alt_data_end+0xfffdcd7c>
   44158:	010007c4 	movi	r4,31
   4415c:	20803a16 	blt	r4,r2,44248 <__subdf3+0x5f4>
   44160:	01000804 	movi	r4,32
   44164:	2089c83a 	sub	r4,r4,r2
   44168:	2912983a 	sll	r9,r5,r4
   4416c:	3090d83a 	srl	r8,r6,r2
   44170:	3108983a 	sll	r4,r6,r4
   44174:	2884d83a 	srl	r2,r5,r2
   44178:	4a12b03a 	or	r9,r9,r8
   4417c:	2008c03a 	cmpne	r4,r4,zero
   44180:	4912b03a 	or	r9,r9,r4
   44184:	003f4e06 	br	43ec0 <__alt_data_end+0xfffdcdc0>
   44188:	1c48b03a 	or	r4,r3,r17
   4418c:	20003c26 	beq	r4,zero,44280 <__subdf3+0x62c>
   44190:	0084303a 	nor	r2,zero,r2
   44194:	1000381e 	bne	r2,zero,44278 <__subdf3+0x624>
   44198:	3463c83a 	sub	r17,r6,r17
   4419c:	28c5c83a 	sub	r2,r5,r3
   441a0:	344d803a 	cmpltu	r6,r6,r17
   441a4:	1187c83a 	sub	r3,r2,r6
   441a8:	4821883a 	mov	r16,r9
   441ac:	3825883a 	mov	r18,r7
   441b0:	003f0606 	br	43dcc <__alt_data_end+0xfffdcccc>
   441b4:	2023883a 	mov	r17,r4
   441b8:	003f0906 	br	43de0 <__alt_data_end+0xfffdcce0>
   441bc:	0101ffc4 	movi	r4,2047
   441c0:	813f3a1e 	bne	r16,r4,43eac <__alt_data_end+0xfffdcdac>
   441c4:	003ec406 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   441c8:	0005883a 	mov	r2,zero
   441cc:	003fb106 	br	44094 <__alt_data_end+0xfffdcf94>
   441d0:	0005883a 	mov	r2,zero
   441d4:	003fbc06 	br	440c8 <__alt_data_end+0xfffdcfc8>
   441d8:	1c44b03a 	or	r2,r3,r17
   441dc:	80008e1e 	bne	r16,zero,44418 <__subdf3+0x7c4>
   441e0:	1000c826 	beq	r2,zero,44504 <__subdf3+0x8b0>
   441e4:	2984b03a 	or	r2,r5,r6
   441e8:	103ebb26 	beq	r2,zero,43cd8 <__alt_data_end+0xfffdcbd8>
   441ec:	8989883a 	add	r4,r17,r6
   441f0:	1945883a 	add	r2,r3,r5
   441f4:	2447803a 	cmpltu	r3,r4,r17
   441f8:	1887883a 	add	r3,r3,r2
   441fc:	1880202c 	andhi	r2,r3,128
   44200:	2023883a 	mov	r17,r4
   44204:	103f1626 	beq	r2,zero,43e60 <__alt_data_end+0xfffdcd60>
   44208:	00bfe034 	movhi	r2,65408
   4420c:	10bfffc4 	addi	r2,r2,-1
   44210:	5021883a 	mov	r16,r10
   44214:	1886703a 	and	r3,r3,r2
   44218:	003eaf06 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   4421c:	3825883a 	mov	r18,r7
   44220:	003f0f06 	br	43e60 <__alt_data_end+0xfffdcd60>
   44224:	1c44b03a 	or	r2,r3,r17
   44228:	8000251e 	bne	r16,zero,442c0 <__subdf3+0x66c>
   4422c:	1000661e 	bne	r2,zero,443c8 <__subdf3+0x774>
   44230:	2990b03a 	or	r8,r5,r6
   44234:	40009626 	beq	r8,zero,44490 <__subdf3+0x83c>
   44238:	2807883a 	mov	r3,r5
   4423c:	3023883a 	mov	r17,r6
   44240:	3825883a 	mov	r18,r7
   44244:	003ea406 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   44248:	127ff804 	addi	r9,r2,-32
   4424c:	01000804 	movi	r4,32
   44250:	2a52d83a 	srl	r9,r5,r9
   44254:	11008c26 	beq	r2,r4,44488 <__subdf3+0x834>
   44258:	01001004 	movi	r4,64
   4425c:	2085c83a 	sub	r2,r4,r2
   44260:	2884983a 	sll	r2,r5,r2
   44264:	118cb03a 	or	r6,r2,r6
   44268:	300cc03a 	cmpne	r6,r6,zero
   4426c:	4992b03a 	or	r9,r9,r6
   44270:	0005883a 	mov	r2,zero
   44274:	003f1206 	br	43ec0 <__alt_data_end+0xfffdcdc0>
   44278:	0101ffc4 	movi	r4,2047
   4427c:	493f9c1e 	bne	r9,r4,440f0 <__alt_data_end+0xfffdcff0>
   44280:	2807883a 	mov	r3,r5
   44284:	3023883a 	mov	r17,r6
   44288:	4821883a 	mov	r16,r9
   4428c:	3825883a 	mov	r18,r7
   44290:	003e9106 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   44294:	80001f1e 	bne	r16,zero,44314 <__subdf3+0x6c0>
   44298:	1c48b03a 	or	r4,r3,r17
   4429c:	20005a26 	beq	r4,zero,44408 <__subdf3+0x7b4>
   442a0:	0084303a 	nor	r2,zero,r2
   442a4:	1000561e 	bne	r2,zero,44400 <__subdf3+0x7ac>
   442a8:	89a3883a 	add	r17,r17,r6
   442ac:	1945883a 	add	r2,r3,r5
   442b0:	898d803a 	cmpltu	r6,r17,r6
   442b4:	3087883a 	add	r3,r6,r2
   442b8:	4821883a 	mov	r16,r9
   442bc:	003f0506 	br	43ed4 <__alt_data_end+0xfffdcdd4>
   442c0:	10002b1e 	bne	r2,zero,44370 <__subdf3+0x71c>
   442c4:	2984b03a 	or	r2,r5,r6
   442c8:	10008026 	beq	r2,zero,444cc <__subdf3+0x878>
   442cc:	2807883a 	mov	r3,r5
   442d0:	3023883a 	mov	r17,r6
   442d4:	3825883a 	mov	r18,r7
   442d8:	0401ffc4 	movi	r16,2047
   442dc:	003e7e06 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   442e0:	3809883a 	mov	r4,r7
   442e4:	0011883a 	mov	r8,zero
   442e8:	0005883a 	mov	r2,zero
   442ec:	003ee306 	br	43e7c <__alt_data_end+0xfffdcd7c>
   442f0:	1c62b03a 	or	r17,r3,r17
   442f4:	8822c03a 	cmpne	r17,r17,zero
   442f8:	0005883a 	mov	r2,zero
   442fc:	003f8906 	br	44124 <__alt_data_end+0xfffdd024>
   44300:	3809883a 	mov	r4,r7
   44304:	4821883a 	mov	r16,r9
   44308:	0011883a 	mov	r8,zero
   4430c:	0005883a 	mov	r2,zero
   44310:	003eda06 	br	43e7c <__alt_data_end+0xfffdcd7c>
   44314:	0101ffc4 	movi	r4,2047
   44318:	49003b26 	beq	r9,r4,44408 <__subdf3+0x7b4>
   4431c:	0085c83a 	sub	r2,zero,r2
   44320:	18c02034 	orhi	r3,r3,128
   44324:	01000e04 	movi	r4,56
   44328:	20806e16 	blt	r4,r2,444e4 <__subdf3+0x890>
   4432c:	010007c4 	movi	r4,31
   44330:	20807716 	blt	r4,r2,44510 <__subdf3+0x8bc>
   44334:	01000804 	movi	r4,32
   44338:	2089c83a 	sub	r4,r4,r2
   4433c:	1914983a 	sll	r10,r3,r4
   44340:	8890d83a 	srl	r8,r17,r2
   44344:	8908983a 	sll	r4,r17,r4
   44348:	1884d83a 	srl	r2,r3,r2
   4434c:	5222b03a 	or	r17,r10,r8
   44350:	2006c03a 	cmpne	r3,r4,zero
   44354:	88e2b03a 	or	r17,r17,r3
   44358:	89a3883a 	add	r17,r17,r6
   4435c:	1145883a 	add	r2,r2,r5
   44360:	898d803a 	cmpltu	r6,r17,r6
   44364:	3087883a 	add	r3,r6,r2
   44368:	4821883a 	mov	r16,r9
   4436c:	003ed906 	br	43ed4 <__alt_data_end+0xfffdcdd4>
   44370:	2984b03a 	or	r2,r5,r6
   44374:	10004226 	beq	r2,zero,44480 <__subdf3+0x82c>
   44378:	1808d0fa 	srli	r4,r3,3
   4437c:	8822d0fa 	srli	r17,r17,3
   44380:	1806977a 	slli	r3,r3,29
   44384:	2080022c 	andhi	r2,r4,8
   44388:	1c62b03a 	or	r17,r3,r17
   4438c:	10000826 	beq	r2,zero,443b0 <__subdf3+0x75c>
   44390:	2812d0fa 	srli	r9,r5,3
   44394:	4880022c 	andhi	r2,r9,8
   44398:	1000051e 	bne	r2,zero,443b0 <__subdf3+0x75c>
   4439c:	300cd0fa 	srli	r6,r6,3
   443a0:	2804977a 	slli	r2,r5,29
   443a4:	4809883a 	mov	r4,r9
   443a8:	3825883a 	mov	r18,r7
   443ac:	11a2b03a 	or	r17,r2,r6
   443b0:	8806d77a 	srli	r3,r17,29
   443b4:	200890fa 	slli	r4,r4,3
   443b8:	882290fa 	slli	r17,r17,3
   443bc:	0401ffc4 	movi	r16,2047
   443c0:	1906b03a 	or	r3,r3,r4
   443c4:	003e4406 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   443c8:	2984b03a 	or	r2,r5,r6
   443cc:	103e4226 	beq	r2,zero,43cd8 <__alt_data_end+0xfffdcbd8>
   443d0:	8989c83a 	sub	r4,r17,r6
   443d4:	8911803a 	cmpltu	r8,r17,r4
   443d8:	1945c83a 	sub	r2,r3,r5
   443dc:	1205c83a 	sub	r2,r2,r8
   443e0:	1200202c 	andhi	r8,r2,128
   443e4:	403e9a26 	beq	r8,zero,43e50 <__alt_data_end+0xfffdcd50>
   443e8:	3463c83a 	sub	r17,r6,r17
   443ec:	28c5c83a 	sub	r2,r5,r3
   443f0:	344d803a 	cmpltu	r6,r6,r17
   443f4:	1187c83a 	sub	r3,r2,r6
   443f8:	3825883a 	mov	r18,r7
   443fc:	003e3606 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   44400:	0101ffc4 	movi	r4,2047
   44404:	493fc71e 	bne	r9,r4,44324 <__alt_data_end+0xfffdd224>
   44408:	2807883a 	mov	r3,r5
   4440c:	3023883a 	mov	r17,r6
   44410:	4821883a 	mov	r16,r9
   44414:	003e3006 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   44418:	10003626 	beq	r2,zero,444f4 <__subdf3+0x8a0>
   4441c:	2984b03a 	or	r2,r5,r6
   44420:	10001726 	beq	r2,zero,44480 <__subdf3+0x82c>
   44424:	1808d0fa 	srli	r4,r3,3
   44428:	8822d0fa 	srli	r17,r17,3
   4442c:	1806977a 	slli	r3,r3,29
   44430:	2080022c 	andhi	r2,r4,8
   44434:	1c62b03a 	or	r17,r3,r17
   44438:	10000726 	beq	r2,zero,44458 <__subdf3+0x804>
   4443c:	2812d0fa 	srli	r9,r5,3
   44440:	4880022c 	andhi	r2,r9,8
   44444:	1000041e 	bne	r2,zero,44458 <__subdf3+0x804>
   44448:	300cd0fa 	srli	r6,r6,3
   4444c:	2804977a 	slli	r2,r5,29
   44450:	4809883a 	mov	r4,r9
   44454:	11a2b03a 	or	r17,r2,r6
   44458:	8806d77a 	srli	r3,r17,29
   4445c:	200890fa 	slli	r4,r4,3
   44460:	882290fa 	slli	r17,r17,3
   44464:	3825883a 	mov	r18,r7
   44468:	1906b03a 	or	r3,r3,r4
   4446c:	0401ffc4 	movi	r16,2047
   44470:	003e1906 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   44474:	000b883a 	mov	r5,zero
   44478:	0005883a 	mov	r2,zero
   4447c:	003e2e06 	br	43d38 <__alt_data_end+0xfffdcc38>
   44480:	0401ffc4 	movi	r16,2047
   44484:	003e1406 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   44488:	0005883a 	mov	r2,zero
   4448c:	003f7506 	br	44264 <__alt_data_end+0xfffdd164>
   44490:	0005883a 	mov	r2,zero
   44494:	0009883a 	mov	r4,zero
   44498:	003e7806 	br	43e7c <__alt_data_end+0xfffdcd7c>
   4449c:	123ff804 	addi	r8,r2,-32
   444a0:	01000804 	movi	r4,32
   444a4:	1a10d83a 	srl	r8,r3,r8
   444a8:	11002526 	beq	r2,r4,44540 <__subdf3+0x8ec>
   444ac:	01001004 	movi	r4,64
   444b0:	2085c83a 	sub	r2,r4,r2
   444b4:	1884983a 	sll	r2,r3,r2
   444b8:	1444b03a 	or	r2,r2,r17
   444bc:	1004c03a 	cmpne	r2,r2,zero
   444c0:	40a2b03a 	or	r17,r8,r2
   444c4:	0005883a 	mov	r2,zero
   444c8:	003f1606 	br	44124 <__alt_data_end+0xfffdd024>
   444cc:	02000434 	movhi	r8,16
   444d0:	0009883a 	mov	r4,zero
   444d4:	423fffc4 	addi	r8,r8,-1
   444d8:	00bfffc4 	movi	r2,-1
   444dc:	0401ffc4 	movi	r16,2047
   444e0:	003e6606 	br	43e7c <__alt_data_end+0xfffdcd7c>
   444e4:	1c62b03a 	or	r17,r3,r17
   444e8:	8822c03a 	cmpne	r17,r17,zero
   444ec:	0005883a 	mov	r2,zero
   444f0:	003f9906 	br	44358 <__alt_data_end+0xfffdd258>
   444f4:	2807883a 	mov	r3,r5
   444f8:	3023883a 	mov	r17,r6
   444fc:	0401ffc4 	movi	r16,2047
   44500:	003df506 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   44504:	2807883a 	mov	r3,r5
   44508:	3023883a 	mov	r17,r6
   4450c:	003df206 	br	43cd8 <__alt_data_end+0xfffdcbd8>
   44510:	123ff804 	addi	r8,r2,-32
   44514:	01000804 	movi	r4,32
   44518:	1a10d83a 	srl	r8,r3,r8
   4451c:	11000a26 	beq	r2,r4,44548 <__subdf3+0x8f4>
   44520:	01001004 	movi	r4,64
   44524:	2085c83a 	sub	r2,r4,r2
   44528:	1884983a 	sll	r2,r3,r2
   4452c:	1444b03a 	or	r2,r2,r17
   44530:	1004c03a 	cmpne	r2,r2,zero
   44534:	40a2b03a 	or	r17,r8,r2
   44538:	0005883a 	mov	r2,zero
   4453c:	003f8606 	br	44358 <__alt_data_end+0xfffdd258>
   44540:	0005883a 	mov	r2,zero
   44544:	003fdc06 	br	444b8 <__alt_data_end+0xfffdd3b8>
   44548:	0005883a 	mov	r2,zero
   4454c:	003ff706 	br	4452c <__alt_data_end+0xfffdd42c>

00044550 <__floatsidf>:
   44550:	defffd04 	addi	sp,sp,-12
   44554:	dfc00215 	stw	ra,8(sp)
   44558:	dc400115 	stw	r17,4(sp)
   4455c:	dc000015 	stw	r16,0(sp)
   44560:	20002b26 	beq	r4,zero,44610 <__floatsidf+0xc0>
   44564:	2023883a 	mov	r17,r4
   44568:	2020d7fa 	srli	r16,r4,31
   4456c:	20002d16 	blt	r4,zero,44624 <__floatsidf+0xd4>
   44570:	8809883a 	mov	r4,r17
   44574:	00448e40 	call	448e4 <__clzsi2>
   44578:	01410784 	movi	r5,1054
   4457c:	288bc83a 	sub	r5,r5,r2
   44580:	01010cc4 	movi	r4,1075
   44584:	2149c83a 	sub	r4,r4,r5
   44588:	00c007c4 	movi	r3,31
   4458c:	1900160e 	bge	r3,r4,445e8 <__floatsidf+0x98>
   44590:	00c104c4 	movi	r3,1043
   44594:	1947c83a 	sub	r3,r3,r5
   44598:	88c6983a 	sll	r3,r17,r3
   4459c:	00800434 	movhi	r2,16
   445a0:	10bfffc4 	addi	r2,r2,-1
   445a4:	1886703a 	and	r3,r3,r2
   445a8:	2941ffcc 	andi	r5,r5,2047
   445ac:	800d883a 	mov	r6,r16
   445b0:	0005883a 	mov	r2,zero
   445b4:	280a953a 	slli	r5,r5,20
   445b8:	31803fcc 	andi	r6,r6,255
   445bc:	01000434 	movhi	r4,16
   445c0:	300c97fa 	slli	r6,r6,31
   445c4:	213fffc4 	addi	r4,r4,-1
   445c8:	1906703a 	and	r3,r3,r4
   445cc:	1946b03a 	or	r3,r3,r5
   445d0:	1986b03a 	or	r3,r3,r6
   445d4:	dfc00217 	ldw	ra,8(sp)
   445d8:	dc400117 	ldw	r17,4(sp)
   445dc:	dc000017 	ldw	r16,0(sp)
   445e0:	dec00304 	addi	sp,sp,12
   445e4:	f800283a 	ret
   445e8:	00c002c4 	movi	r3,11
   445ec:	1887c83a 	sub	r3,r3,r2
   445f0:	88c6d83a 	srl	r3,r17,r3
   445f4:	8904983a 	sll	r2,r17,r4
   445f8:	01000434 	movhi	r4,16
   445fc:	213fffc4 	addi	r4,r4,-1
   44600:	2941ffcc 	andi	r5,r5,2047
   44604:	1906703a 	and	r3,r3,r4
   44608:	800d883a 	mov	r6,r16
   4460c:	003fe906 	br	445b4 <__alt_data_end+0xfffdd4b4>
   44610:	000d883a 	mov	r6,zero
   44614:	000b883a 	mov	r5,zero
   44618:	0007883a 	mov	r3,zero
   4461c:	0005883a 	mov	r2,zero
   44620:	003fe406 	br	445b4 <__alt_data_end+0xfffdd4b4>
   44624:	0123c83a 	sub	r17,zero,r4
   44628:	003fd106 	br	44570 <__alt_data_end+0xfffdd470>

0004462c <__extendsfdf2>:
   4462c:	200ad5fa 	srli	r5,r4,23
   44630:	defffd04 	addi	sp,sp,-12
   44634:	dc400115 	stw	r17,4(sp)
   44638:	29403fcc 	andi	r5,r5,255
   4463c:	29800044 	addi	r6,r5,1
   44640:	04402034 	movhi	r17,128
   44644:	dc000015 	stw	r16,0(sp)
   44648:	8c7fffc4 	addi	r17,r17,-1
   4464c:	dfc00215 	stw	ra,8(sp)
   44650:	31803fcc 	andi	r6,r6,255
   44654:	00800044 	movi	r2,1
   44658:	8922703a 	and	r17,r17,r4
   4465c:	2020d7fa 	srli	r16,r4,31
   44660:	1180110e 	bge	r2,r6,446a8 <__extendsfdf2+0x7c>
   44664:	880cd0fa 	srli	r6,r17,3
   44668:	8822977a 	slli	r17,r17,29
   4466c:	2940e004 	addi	r5,r5,896
   44670:	2941ffcc 	andi	r5,r5,2047
   44674:	2804953a 	slli	r2,r5,20
   44678:	01400434 	movhi	r5,16
   4467c:	800697fa 	slli	r3,r16,31
   44680:	297fffc4 	addi	r5,r5,-1
   44684:	314a703a 	and	r5,r6,r5
   44688:	288ab03a 	or	r5,r5,r2
   4468c:	28c6b03a 	or	r3,r5,r3
   44690:	8805883a 	mov	r2,r17
   44694:	dfc00217 	ldw	ra,8(sp)
   44698:	dc400117 	ldw	r17,4(sp)
   4469c:	dc000017 	ldw	r16,0(sp)
   446a0:	dec00304 	addi	sp,sp,12
   446a4:	f800283a 	ret
   446a8:	2800111e 	bne	r5,zero,446f0 <__extendsfdf2+0xc4>
   446ac:	88001c26 	beq	r17,zero,44720 <__extendsfdf2+0xf4>
   446b0:	8809883a 	mov	r4,r17
   446b4:	00448e40 	call	448e4 <__clzsi2>
   446b8:	00c00284 	movi	r3,10
   446bc:	18801b16 	blt	r3,r2,4472c <__extendsfdf2+0x100>
   446c0:	018002c4 	movi	r6,11
   446c4:	308dc83a 	sub	r6,r6,r2
   446c8:	11000544 	addi	r4,r2,21
   446cc:	8986d83a 	srl	r3,r17,r6
   446d0:	8922983a 	sll	r17,r17,r4
   446d4:	0180e244 	movi	r6,905
   446d8:	01400434 	movhi	r5,16
   446dc:	3085c83a 	sub	r2,r6,r2
   446e0:	297fffc4 	addi	r5,r5,-1
   446e4:	194c703a 	and	r6,r3,r5
   446e8:	1141ffcc 	andi	r5,r2,2047
   446ec:	003fe006 	br	44670 <__alt_data_end+0xfffdd570>
   446f0:	88000826 	beq	r17,zero,44714 <__extendsfdf2+0xe8>
   446f4:	880cd0fa 	srli	r6,r17,3
   446f8:	00800434 	movhi	r2,16
   446fc:	10bfffc4 	addi	r2,r2,-1
   44700:	31800234 	orhi	r6,r6,8
   44704:	8822977a 	slli	r17,r17,29
   44708:	308c703a 	and	r6,r6,r2
   4470c:	0141ffc4 	movi	r5,2047
   44710:	003fd706 	br	44670 <__alt_data_end+0xfffdd570>
   44714:	0141ffc4 	movi	r5,2047
   44718:	000d883a 	mov	r6,zero
   4471c:	003fd406 	br	44670 <__alt_data_end+0xfffdd570>
   44720:	000b883a 	mov	r5,zero
   44724:	000d883a 	mov	r6,zero
   44728:	003fd106 	br	44670 <__alt_data_end+0xfffdd570>
   4472c:	11bffd44 	addi	r6,r2,-11
   44730:	8986983a 	sll	r3,r17,r6
   44734:	0023883a 	mov	r17,zero
   44738:	003fe606 	br	446d4 <__alt_data_end+0xfffdd5d4>

0004473c <__truncdfsf2>:
   4473c:	2810d53a 	srli	r8,r5,20
   44740:	01c00434 	movhi	r7,16
   44744:	39ffffc4 	addi	r7,r7,-1
   44748:	29ce703a 	and	r7,r5,r7
   4474c:	4201ffcc 	andi	r8,r8,2047
   44750:	380e90fa 	slli	r7,r7,3
   44754:	200cd77a 	srli	r6,r4,29
   44758:	42400044 	addi	r9,r8,1
   4475c:	4a41ffcc 	andi	r9,r9,2047
   44760:	00c00044 	movi	r3,1
   44764:	280ad7fa 	srli	r5,r5,31
   44768:	31ceb03a 	or	r7,r6,r7
   4476c:	200490fa 	slli	r2,r4,3
   44770:	1a40230e 	bge	r3,r9,44800 <__truncdfsf2+0xc4>
   44774:	40ff2004 	addi	r3,r8,-896
   44778:	01803f84 	movi	r6,254
   4477c:	30c01516 	blt	r6,r3,447d4 <__truncdfsf2+0x98>
   44780:	00c0380e 	bge	zero,r3,44864 <__truncdfsf2+0x128>
   44784:	200c91ba 	slli	r6,r4,6
   44788:	380e90fa 	slli	r7,r7,3
   4478c:	1004d77a 	srli	r2,r2,29
   44790:	300cc03a 	cmpne	r6,r6,zero
   44794:	31ccb03a 	or	r6,r6,r7
   44798:	308cb03a 	or	r6,r6,r2
   4479c:	308001cc 	andi	r2,r6,7
   447a0:	10000426 	beq	r2,zero,447b4 <__truncdfsf2+0x78>
   447a4:	308003cc 	andi	r2,r6,15
   447a8:	01000104 	movi	r4,4
   447ac:	11000126 	beq	r2,r4,447b4 <__truncdfsf2+0x78>
   447b0:	31800104 	addi	r6,r6,4
   447b4:	3081002c 	andhi	r2,r6,1024
   447b8:	10001626 	beq	r2,zero,44814 <__truncdfsf2+0xd8>
   447bc:	18c00044 	addi	r3,r3,1
   447c0:	00803fc4 	movi	r2,255
   447c4:	18800326 	beq	r3,r2,447d4 <__truncdfsf2+0x98>
   447c8:	300c91ba 	slli	r6,r6,6
   447cc:	300cd27a 	srli	r6,r6,9
   447d0:	00000206 	br	447dc <__truncdfsf2+0xa0>
   447d4:	00ffffc4 	movi	r3,-1
   447d8:	000d883a 	mov	r6,zero
   447dc:	18c03fcc 	andi	r3,r3,255
   447e0:	180895fa 	slli	r4,r3,23
   447e4:	00c02034 	movhi	r3,128
   447e8:	280a97fa 	slli	r5,r5,31
   447ec:	18ffffc4 	addi	r3,r3,-1
   447f0:	30c6703a 	and	r3,r6,r3
   447f4:	1906b03a 	or	r3,r3,r4
   447f8:	1944b03a 	or	r2,r3,r5
   447fc:	f800283a 	ret
   44800:	40000b1e 	bne	r8,zero,44830 <__truncdfsf2+0xf4>
   44804:	388cb03a 	or	r6,r7,r2
   44808:	0007883a 	mov	r3,zero
   4480c:	30000426 	beq	r6,zero,44820 <__truncdfsf2+0xe4>
   44810:	01800144 	movi	r6,5
   44814:	00803fc4 	movi	r2,255
   44818:	300cd0fa 	srli	r6,r6,3
   4481c:	18800a26 	beq	r3,r2,44848 <__truncdfsf2+0x10c>
   44820:	00802034 	movhi	r2,128
   44824:	10bfffc4 	addi	r2,r2,-1
   44828:	308c703a 	and	r6,r6,r2
   4482c:	003feb06 	br	447dc <__alt_data_end+0xfffdd6dc>
   44830:	3888b03a 	or	r4,r7,r2
   44834:	203fe726 	beq	r4,zero,447d4 <__alt_data_end+0xfffdd6d4>
   44838:	380c90fa 	slli	r6,r7,3
   4483c:	00c03fc4 	movi	r3,255
   44840:	31808034 	orhi	r6,r6,512
   44844:	003fd506 	br	4479c <__alt_data_end+0xfffdd69c>
   44848:	303fe226 	beq	r6,zero,447d4 <__alt_data_end+0xfffdd6d4>
   4484c:	00802034 	movhi	r2,128
   44850:	31801034 	orhi	r6,r6,64
   44854:	10bfffc4 	addi	r2,r2,-1
   44858:	00ffffc4 	movi	r3,-1
   4485c:	308c703a 	and	r6,r6,r2
   44860:	003fde06 	br	447dc <__alt_data_end+0xfffdd6dc>
   44864:	013ffa44 	movi	r4,-23
   44868:	19000e16 	blt	r3,r4,448a4 <__truncdfsf2+0x168>
   4486c:	01000784 	movi	r4,30
   44870:	20c9c83a 	sub	r4,r4,r3
   44874:	018007c4 	movi	r6,31
   44878:	39c02034 	orhi	r7,r7,128
   4487c:	31000b16 	blt	r6,r4,448ac <__truncdfsf2+0x170>
   44880:	423f2084 	addi	r8,r8,-894
   44884:	120c983a 	sll	r6,r2,r8
   44888:	3a0e983a 	sll	r7,r7,r8
   4488c:	1104d83a 	srl	r2,r2,r4
   44890:	300cc03a 	cmpne	r6,r6,zero
   44894:	31ceb03a 	or	r7,r6,r7
   44898:	388cb03a 	or	r6,r7,r2
   4489c:	0007883a 	mov	r3,zero
   448a0:	003fbe06 	br	4479c <__alt_data_end+0xfffdd69c>
   448a4:	0007883a 	mov	r3,zero
   448a8:	003fd906 	br	44810 <__alt_data_end+0xfffdd710>
   448ac:	01bfff84 	movi	r6,-2
   448b0:	30cdc83a 	sub	r6,r6,r3
   448b4:	00c00804 	movi	r3,32
   448b8:	398cd83a 	srl	r6,r7,r6
   448bc:	20c00726 	beq	r4,r3,448dc <__truncdfsf2+0x1a0>
   448c0:	423f2884 	addi	r8,r8,-862
   448c4:	3a0e983a 	sll	r7,r7,r8
   448c8:	3884b03a 	or	r2,r7,r2
   448cc:	1004c03a 	cmpne	r2,r2,zero
   448d0:	118cb03a 	or	r6,r2,r6
   448d4:	0007883a 	mov	r3,zero
   448d8:	003fb006 	br	4479c <__alt_data_end+0xfffdd69c>
   448dc:	000f883a 	mov	r7,zero
   448e0:	003ff906 	br	448c8 <__alt_data_end+0xfffdd7c8>

000448e4 <__clzsi2>:
   448e4:	00bfffd4 	movui	r2,65535
   448e8:	11000536 	bltu	r2,r4,44900 <__clzsi2+0x1c>
   448ec:	00803fc4 	movi	r2,255
   448f0:	11000f36 	bltu	r2,r4,44930 <__clzsi2+0x4c>
   448f4:	00800804 	movi	r2,32
   448f8:	0007883a 	mov	r3,zero
   448fc:	00000506 	br	44914 <__clzsi2+0x30>
   44900:	00804034 	movhi	r2,256
   44904:	10bfffc4 	addi	r2,r2,-1
   44908:	11000c2e 	bgeu	r2,r4,4493c <__clzsi2+0x58>
   4490c:	00800204 	movi	r2,8
   44910:	00c00604 	movi	r3,24
   44914:	20c8d83a 	srl	r4,r4,r3
   44918:	00c00174 	movhi	r3,5
   4491c:	18e80244 	addi	r3,r3,-24567
   44920:	1909883a 	add	r4,r3,r4
   44924:	20c00003 	ldbu	r3,0(r4)
   44928:	10c5c83a 	sub	r2,r2,r3
   4492c:	f800283a 	ret
   44930:	00800604 	movi	r2,24
   44934:	00c00204 	movi	r3,8
   44938:	003ff606 	br	44914 <__alt_data_end+0xfffdd814>
   4493c:	00800404 	movi	r2,16
   44940:	1007883a 	mov	r3,r2
   44944:	003ff306 	br	44914 <__alt_data_end+0xfffdd814>

00044948 <__divsi3>:
   44948:	20001b16 	blt	r4,zero,449b8 <__divsi3+0x70>
   4494c:	000f883a 	mov	r7,zero
   44950:	28001616 	blt	r5,zero,449ac <__divsi3+0x64>
   44954:	200d883a 	mov	r6,r4
   44958:	29001a2e 	bgeu	r5,r4,449c4 <__divsi3+0x7c>
   4495c:	00800804 	movi	r2,32
   44960:	00c00044 	movi	r3,1
   44964:	00000106 	br	4496c <__divsi3+0x24>
   44968:	10000d26 	beq	r2,zero,449a0 <__divsi3+0x58>
   4496c:	294b883a 	add	r5,r5,r5
   44970:	10bfffc4 	addi	r2,r2,-1
   44974:	18c7883a 	add	r3,r3,r3
   44978:	293ffb36 	bltu	r5,r4,44968 <__alt_data_end+0xfffdd868>
   4497c:	0005883a 	mov	r2,zero
   44980:	18000726 	beq	r3,zero,449a0 <__divsi3+0x58>
   44984:	0005883a 	mov	r2,zero
   44988:	31400236 	bltu	r6,r5,44994 <__divsi3+0x4c>
   4498c:	314dc83a 	sub	r6,r6,r5
   44990:	10c4b03a 	or	r2,r2,r3
   44994:	1806d07a 	srli	r3,r3,1
   44998:	280ad07a 	srli	r5,r5,1
   4499c:	183ffa1e 	bne	r3,zero,44988 <__alt_data_end+0xfffdd888>
   449a0:	38000126 	beq	r7,zero,449a8 <__divsi3+0x60>
   449a4:	0085c83a 	sub	r2,zero,r2
   449a8:	f800283a 	ret
   449ac:	014bc83a 	sub	r5,zero,r5
   449b0:	39c0005c 	xori	r7,r7,1
   449b4:	003fe706 	br	44954 <__alt_data_end+0xfffdd854>
   449b8:	0109c83a 	sub	r4,zero,r4
   449bc:	01c00044 	movi	r7,1
   449c0:	003fe306 	br	44950 <__alt_data_end+0xfffdd850>
   449c4:	00c00044 	movi	r3,1
   449c8:	003fee06 	br	44984 <__alt_data_end+0xfffdd884>

000449cc <__modsi3>:
   449cc:	20001716 	blt	r4,zero,44a2c <__modsi3+0x60>
   449d0:	000f883a 	mov	r7,zero
   449d4:	2005883a 	mov	r2,r4
   449d8:	28001216 	blt	r5,zero,44a24 <__modsi3+0x58>
   449dc:	2900162e 	bgeu	r5,r4,44a38 <__modsi3+0x6c>
   449e0:	01800804 	movi	r6,32
   449e4:	00c00044 	movi	r3,1
   449e8:	00000106 	br	449f0 <__modsi3+0x24>
   449ec:	30000a26 	beq	r6,zero,44a18 <__modsi3+0x4c>
   449f0:	294b883a 	add	r5,r5,r5
   449f4:	31bfffc4 	addi	r6,r6,-1
   449f8:	18c7883a 	add	r3,r3,r3
   449fc:	293ffb36 	bltu	r5,r4,449ec <__alt_data_end+0xfffdd8ec>
   44a00:	18000526 	beq	r3,zero,44a18 <__modsi3+0x4c>
   44a04:	1806d07a 	srli	r3,r3,1
   44a08:	11400136 	bltu	r2,r5,44a10 <__modsi3+0x44>
   44a0c:	1145c83a 	sub	r2,r2,r5
   44a10:	280ad07a 	srli	r5,r5,1
   44a14:	183ffb1e 	bne	r3,zero,44a04 <__alt_data_end+0xfffdd904>
   44a18:	38000126 	beq	r7,zero,44a20 <__modsi3+0x54>
   44a1c:	0085c83a 	sub	r2,zero,r2
   44a20:	f800283a 	ret
   44a24:	014bc83a 	sub	r5,zero,r5
   44a28:	003fec06 	br	449dc <__alt_data_end+0xfffdd8dc>
   44a2c:	0109c83a 	sub	r4,zero,r4
   44a30:	01c00044 	movi	r7,1
   44a34:	003fe706 	br	449d4 <__alt_data_end+0xfffdd8d4>
   44a38:	00c00044 	movi	r3,1
   44a3c:	003ff106 	br	44a04 <__alt_data_end+0xfffdd904>

00044a40 <__udivsi3>:
   44a40:	200d883a 	mov	r6,r4
   44a44:	2900152e 	bgeu	r5,r4,44a9c <__udivsi3+0x5c>
   44a48:	28001416 	blt	r5,zero,44a9c <__udivsi3+0x5c>
   44a4c:	00800804 	movi	r2,32
   44a50:	00c00044 	movi	r3,1
   44a54:	00000206 	br	44a60 <__udivsi3+0x20>
   44a58:	10000e26 	beq	r2,zero,44a94 <__udivsi3+0x54>
   44a5c:	28000516 	blt	r5,zero,44a74 <__udivsi3+0x34>
   44a60:	294b883a 	add	r5,r5,r5
   44a64:	10bfffc4 	addi	r2,r2,-1
   44a68:	18c7883a 	add	r3,r3,r3
   44a6c:	293ffa36 	bltu	r5,r4,44a58 <__alt_data_end+0xfffdd958>
   44a70:	18000826 	beq	r3,zero,44a94 <__udivsi3+0x54>
   44a74:	0005883a 	mov	r2,zero
   44a78:	31400236 	bltu	r6,r5,44a84 <__udivsi3+0x44>
   44a7c:	314dc83a 	sub	r6,r6,r5
   44a80:	10c4b03a 	or	r2,r2,r3
   44a84:	1806d07a 	srli	r3,r3,1
   44a88:	280ad07a 	srli	r5,r5,1
   44a8c:	183ffa1e 	bne	r3,zero,44a78 <__alt_data_end+0xfffdd978>
   44a90:	f800283a 	ret
   44a94:	0005883a 	mov	r2,zero
   44a98:	f800283a 	ret
   44a9c:	00c00044 	movi	r3,1
   44aa0:	003ff406 	br	44a74 <__alt_data_end+0xfffdd974>

00044aa4 <__umodsi3>:
   44aa4:	2005883a 	mov	r2,r4
   44aa8:	2900122e 	bgeu	r5,r4,44af4 <__umodsi3+0x50>
   44aac:	28001116 	blt	r5,zero,44af4 <__umodsi3+0x50>
   44ab0:	01800804 	movi	r6,32
   44ab4:	00c00044 	movi	r3,1
   44ab8:	00000206 	br	44ac4 <__umodsi3+0x20>
   44abc:	30000c26 	beq	r6,zero,44af0 <__umodsi3+0x4c>
   44ac0:	28000516 	blt	r5,zero,44ad8 <__umodsi3+0x34>
   44ac4:	294b883a 	add	r5,r5,r5
   44ac8:	31bfffc4 	addi	r6,r6,-1
   44acc:	18c7883a 	add	r3,r3,r3
   44ad0:	293ffa36 	bltu	r5,r4,44abc <__alt_data_end+0xfffdd9bc>
   44ad4:	18000626 	beq	r3,zero,44af0 <__umodsi3+0x4c>
   44ad8:	1806d07a 	srli	r3,r3,1
   44adc:	11400136 	bltu	r2,r5,44ae4 <__umodsi3+0x40>
   44ae0:	1145c83a 	sub	r2,r2,r5
   44ae4:	280ad07a 	srli	r5,r5,1
   44ae8:	183ffb1e 	bne	r3,zero,44ad8 <__alt_data_end+0xfffdd9d8>
   44aec:	f800283a 	ret
   44af0:	f800283a 	ret
   44af4:	00c00044 	movi	r3,1
   44af8:	003ff706 	br	44ad8 <__alt_data_end+0xfffdd9d8>

00044afc <__errno>:
   44afc:	00800174 	movhi	r2,5
   44b00:	10aedf04 	addi	r2,r2,-17540
   44b04:	10800017 	ldw	r2,0(r2)
   44b08:	f800283a 	ret

00044b0c <_puts_r>:
   44b0c:	defff604 	addi	sp,sp,-40
   44b10:	dc000715 	stw	r16,28(sp)
   44b14:	2021883a 	mov	r16,r4
   44b18:	2809883a 	mov	r4,r5
   44b1c:	dc400815 	stw	r17,32(sp)
   44b20:	dfc00915 	stw	ra,36(sp)
   44b24:	2823883a 	mov	r17,r5
   44b28:	0044be00 	call	44be0 <strlen>
   44b2c:	10c00044 	addi	r3,r2,1
   44b30:	d8800115 	stw	r2,4(sp)
   44b34:	00800174 	movhi	r2,5
   44b38:	10a84404 	addi	r2,r2,-24304
   44b3c:	d8800215 	stw	r2,8(sp)
   44b40:	00800044 	movi	r2,1
   44b44:	d8800315 	stw	r2,12(sp)
   44b48:	00800084 	movi	r2,2
   44b4c:	dc400015 	stw	r17,0(sp)
   44b50:	d8c00615 	stw	r3,24(sp)
   44b54:	dec00415 	stw	sp,16(sp)
   44b58:	d8800515 	stw	r2,20(sp)
   44b5c:	80000226 	beq	r16,zero,44b68 <_puts_r+0x5c>
   44b60:	80800e17 	ldw	r2,56(r16)
   44b64:	10001426 	beq	r2,zero,44bb8 <_puts_r+0xac>
   44b68:	81400217 	ldw	r5,8(r16)
   44b6c:	2880030b 	ldhu	r2,12(r5)
   44b70:	10c8000c 	andi	r3,r2,8192
   44b74:	1800061e 	bne	r3,zero,44b90 <_puts_r+0x84>
   44b78:	29001917 	ldw	r4,100(r5)
   44b7c:	00f7ffc4 	movi	r3,-8193
   44b80:	10880014 	ori	r2,r2,8192
   44b84:	20c6703a 	and	r3,r4,r3
   44b88:	2880030d 	sth	r2,12(r5)
   44b8c:	28c01915 	stw	r3,100(r5)
   44b90:	d9800404 	addi	r6,sp,16
   44b94:	8009883a 	mov	r4,r16
   44b98:	00450180 	call	45018 <__sfvwrite_r>
   44b9c:	1000091e 	bne	r2,zero,44bc4 <_puts_r+0xb8>
   44ba0:	00800284 	movi	r2,10
   44ba4:	dfc00917 	ldw	ra,36(sp)
   44ba8:	dc400817 	ldw	r17,32(sp)
   44bac:	dc000717 	ldw	r16,28(sp)
   44bb0:	dec00a04 	addi	sp,sp,40
   44bb4:	f800283a 	ret
   44bb8:	8009883a 	mov	r4,r16
   44bbc:	0044fc80 	call	44fc8 <__sinit>
   44bc0:	003fe906 	br	44b68 <__alt_data_end+0xfffdda68>
   44bc4:	00bfffc4 	movi	r2,-1
   44bc8:	003ff606 	br	44ba4 <__alt_data_end+0xfffddaa4>

00044bcc <puts>:
   44bcc:	00800174 	movhi	r2,5
   44bd0:	10aedf04 	addi	r2,r2,-17540
   44bd4:	200b883a 	mov	r5,r4
   44bd8:	11000017 	ldw	r4,0(r2)
   44bdc:	0044b0c1 	jmpi	44b0c <_puts_r>

00044be0 <strlen>:
   44be0:	208000cc 	andi	r2,r4,3
   44be4:	10002026 	beq	r2,zero,44c68 <strlen+0x88>
   44be8:	20800007 	ldb	r2,0(r4)
   44bec:	10002026 	beq	r2,zero,44c70 <strlen+0x90>
   44bf0:	2005883a 	mov	r2,r4
   44bf4:	00000206 	br	44c00 <strlen+0x20>
   44bf8:	10c00007 	ldb	r3,0(r2)
   44bfc:	18001826 	beq	r3,zero,44c60 <strlen+0x80>
   44c00:	10800044 	addi	r2,r2,1
   44c04:	10c000cc 	andi	r3,r2,3
   44c08:	183ffb1e 	bne	r3,zero,44bf8 <__alt_data_end+0xfffddaf8>
   44c0c:	10c00017 	ldw	r3,0(r2)
   44c10:	01ffbff4 	movhi	r7,65279
   44c14:	39ffbfc4 	addi	r7,r7,-257
   44c18:	00ca303a 	nor	r5,zero,r3
   44c1c:	01a02074 	movhi	r6,32897
   44c20:	19c7883a 	add	r3,r3,r7
   44c24:	31a02004 	addi	r6,r6,-32640
   44c28:	1946703a 	and	r3,r3,r5
   44c2c:	1986703a 	and	r3,r3,r6
   44c30:	1800091e 	bne	r3,zero,44c58 <strlen+0x78>
   44c34:	10800104 	addi	r2,r2,4
   44c38:	10c00017 	ldw	r3,0(r2)
   44c3c:	19cb883a 	add	r5,r3,r7
   44c40:	00c6303a 	nor	r3,zero,r3
   44c44:	28c6703a 	and	r3,r5,r3
   44c48:	1986703a 	and	r3,r3,r6
   44c4c:	183ff926 	beq	r3,zero,44c34 <__alt_data_end+0xfffddb34>
   44c50:	00000106 	br	44c58 <strlen+0x78>
   44c54:	10800044 	addi	r2,r2,1
   44c58:	10c00007 	ldb	r3,0(r2)
   44c5c:	183ffd1e 	bne	r3,zero,44c54 <__alt_data_end+0xfffddb54>
   44c60:	1105c83a 	sub	r2,r2,r4
   44c64:	f800283a 	ret
   44c68:	2005883a 	mov	r2,r4
   44c6c:	003fe706 	br	44c0c <__alt_data_end+0xfffddb0c>
   44c70:	0005883a 	mov	r2,zero
   44c74:	f800283a 	ret

00044c78 <__fp_unlock>:
   44c78:	0005883a 	mov	r2,zero
   44c7c:	f800283a 	ret

00044c80 <_cleanup_r>:
   44c80:	01400134 	movhi	r5,4
   44c84:	295b0504 	addi	r5,r5,27668
   44c88:	00455981 	jmpi	45598 <_fwalk_reent>

00044c8c <__sinit.part.1>:
   44c8c:	defff704 	addi	sp,sp,-36
   44c90:	00c00134 	movhi	r3,4
   44c94:	dfc00815 	stw	ra,32(sp)
   44c98:	ddc00715 	stw	r23,28(sp)
   44c9c:	dd800615 	stw	r22,24(sp)
   44ca0:	dd400515 	stw	r21,20(sp)
   44ca4:	dd000415 	stw	r20,16(sp)
   44ca8:	dcc00315 	stw	r19,12(sp)
   44cac:	dc800215 	stw	r18,8(sp)
   44cb0:	dc400115 	stw	r17,4(sp)
   44cb4:	dc000015 	stw	r16,0(sp)
   44cb8:	18d32004 	addi	r3,r3,19584
   44cbc:	24000117 	ldw	r16,4(r4)
   44cc0:	20c00f15 	stw	r3,60(r4)
   44cc4:	2080bb04 	addi	r2,r4,748
   44cc8:	00c000c4 	movi	r3,3
   44ccc:	20c0b915 	stw	r3,740(r4)
   44cd0:	2080ba15 	stw	r2,744(r4)
   44cd4:	2000b815 	stw	zero,736(r4)
   44cd8:	05c00204 	movi	r23,8
   44cdc:	00800104 	movi	r2,4
   44ce0:	2025883a 	mov	r18,r4
   44ce4:	b80d883a 	mov	r6,r23
   44ce8:	81001704 	addi	r4,r16,92
   44cec:	000b883a 	mov	r5,zero
   44cf0:	80000015 	stw	zero,0(r16)
   44cf4:	80000115 	stw	zero,4(r16)
   44cf8:	80000215 	stw	zero,8(r16)
   44cfc:	8080030d 	sth	r2,12(r16)
   44d00:	80001915 	stw	zero,100(r16)
   44d04:	8000038d 	sth	zero,14(r16)
   44d08:	80000415 	stw	zero,16(r16)
   44d0c:	80000515 	stw	zero,20(r16)
   44d10:	80000615 	stw	zero,24(r16)
   44d14:	00461f00 	call	461f0 <memset>
   44d18:	05800134 	movhi	r22,4
   44d1c:	94400217 	ldw	r17,8(r18)
   44d20:	05400134 	movhi	r21,4
   44d24:	05000134 	movhi	r20,4
   44d28:	04c00134 	movhi	r19,4
   44d2c:	b59a3404 	addi	r22,r22,26832
   44d30:	ad5a4b04 	addi	r21,r21,26924
   44d34:	a51a6a04 	addi	r20,r20,27048
   44d38:	9cda8104 	addi	r19,r19,27140
   44d3c:	85800815 	stw	r22,32(r16)
   44d40:	85400915 	stw	r21,36(r16)
   44d44:	85000a15 	stw	r20,40(r16)
   44d48:	84c00b15 	stw	r19,44(r16)
   44d4c:	84000715 	stw	r16,28(r16)
   44d50:	00800284 	movi	r2,10
   44d54:	8880030d 	sth	r2,12(r17)
   44d58:	00800044 	movi	r2,1
   44d5c:	b80d883a 	mov	r6,r23
   44d60:	89001704 	addi	r4,r17,92
   44d64:	000b883a 	mov	r5,zero
   44d68:	88000015 	stw	zero,0(r17)
   44d6c:	88000115 	stw	zero,4(r17)
   44d70:	88000215 	stw	zero,8(r17)
   44d74:	88001915 	stw	zero,100(r17)
   44d78:	8880038d 	sth	r2,14(r17)
   44d7c:	88000415 	stw	zero,16(r17)
   44d80:	88000515 	stw	zero,20(r17)
   44d84:	88000615 	stw	zero,24(r17)
   44d88:	00461f00 	call	461f0 <memset>
   44d8c:	94000317 	ldw	r16,12(r18)
   44d90:	00800484 	movi	r2,18
   44d94:	8c400715 	stw	r17,28(r17)
   44d98:	8d800815 	stw	r22,32(r17)
   44d9c:	8d400915 	stw	r21,36(r17)
   44da0:	8d000a15 	stw	r20,40(r17)
   44da4:	8cc00b15 	stw	r19,44(r17)
   44da8:	8080030d 	sth	r2,12(r16)
   44dac:	00800084 	movi	r2,2
   44db0:	80000015 	stw	zero,0(r16)
   44db4:	80000115 	stw	zero,4(r16)
   44db8:	80000215 	stw	zero,8(r16)
   44dbc:	80001915 	stw	zero,100(r16)
   44dc0:	8080038d 	sth	r2,14(r16)
   44dc4:	80000415 	stw	zero,16(r16)
   44dc8:	80000515 	stw	zero,20(r16)
   44dcc:	80000615 	stw	zero,24(r16)
   44dd0:	b80d883a 	mov	r6,r23
   44dd4:	000b883a 	mov	r5,zero
   44dd8:	81001704 	addi	r4,r16,92
   44ddc:	00461f00 	call	461f0 <memset>
   44de0:	00800044 	movi	r2,1
   44de4:	84000715 	stw	r16,28(r16)
   44de8:	85800815 	stw	r22,32(r16)
   44dec:	85400915 	stw	r21,36(r16)
   44df0:	85000a15 	stw	r20,40(r16)
   44df4:	84c00b15 	stw	r19,44(r16)
   44df8:	90800e15 	stw	r2,56(r18)
   44dfc:	dfc00817 	ldw	ra,32(sp)
   44e00:	ddc00717 	ldw	r23,28(sp)
   44e04:	dd800617 	ldw	r22,24(sp)
   44e08:	dd400517 	ldw	r21,20(sp)
   44e0c:	dd000417 	ldw	r20,16(sp)
   44e10:	dcc00317 	ldw	r19,12(sp)
   44e14:	dc800217 	ldw	r18,8(sp)
   44e18:	dc400117 	ldw	r17,4(sp)
   44e1c:	dc000017 	ldw	r16,0(sp)
   44e20:	dec00904 	addi	sp,sp,36
   44e24:	f800283a 	ret

00044e28 <__fp_lock>:
   44e28:	0005883a 	mov	r2,zero
   44e2c:	f800283a 	ret

00044e30 <__sfmoreglue>:
   44e30:	defffc04 	addi	sp,sp,-16
   44e34:	dc400115 	stw	r17,4(sp)
   44e38:	2c7fffc4 	addi	r17,r5,-1
   44e3c:	8c401a24 	muli	r17,r17,104
   44e40:	dc800215 	stw	r18,8(sp)
   44e44:	2825883a 	mov	r18,r5
   44e48:	89401d04 	addi	r5,r17,116
   44e4c:	dc000015 	stw	r16,0(sp)
   44e50:	dfc00315 	stw	ra,12(sp)
   44e54:	004565c0 	call	4565c <_malloc_r>
   44e58:	1021883a 	mov	r16,r2
   44e5c:	10000726 	beq	r2,zero,44e7c <__sfmoreglue+0x4c>
   44e60:	11000304 	addi	r4,r2,12
   44e64:	10000015 	stw	zero,0(r2)
   44e68:	14800115 	stw	r18,4(r2)
   44e6c:	11000215 	stw	r4,8(r2)
   44e70:	89801a04 	addi	r6,r17,104
   44e74:	000b883a 	mov	r5,zero
   44e78:	00461f00 	call	461f0 <memset>
   44e7c:	8005883a 	mov	r2,r16
   44e80:	dfc00317 	ldw	ra,12(sp)
   44e84:	dc800217 	ldw	r18,8(sp)
   44e88:	dc400117 	ldw	r17,4(sp)
   44e8c:	dc000017 	ldw	r16,0(sp)
   44e90:	dec00404 	addi	sp,sp,16
   44e94:	f800283a 	ret

00044e98 <__sfp>:
   44e98:	defffb04 	addi	sp,sp,-20
   44e9c:	dc000015 	stw	r16,0(sp)
   44ea0:	04000174 	movhi	r16,5
   44ea4:	842ede04 	addi	r16,r16,-17544
   44ea8:	dcc00315 	stw	r19,12(sp)
   44eac:	2027883a 	mov	r19,r4
   44eb0:	81000017 	ldw	r4,0(r16)
   44eb4:	dfc00415 	stw	ra,16(sp)
   44eb8:	dc800215 	stw	r18,8(sp)
   44ebc:	20800e17 	ldw	r2,56(r4)
   44ec0:	dc400115 	stw	r17,4(sp)
   44ec4:	1000021e 	bne	r2,zero,44ed0 <__sfp+0x38>
   44ec8:	0044c8c0 	call	44c8c <__sinit.part.1>
   44ecc:	81000017 	ldw	r4,0(r16)
   44ed0:	2480b804 	addi	r18,r4,736
   44ed4:	047fffc4 	movi	r17,-1
   44ed8:	91000117 	ldw	r4,4(r18)
   44edc:	94000217 	ldw	r16,8(r18)
   44ee0:	213fffc4 	addi	r4,r4,-1
   44ee4:	20000a16 	blt	r4,zero,44f10 <__sfp+0x78>
   44ee8:	8080030f 	ldh	r2,12(r16)
   44eec:	10000c26 	beq	r2,zero,44f20 <__sfp+0x88>
   44ef0:	80c01d04 	addi	r3,r16,116
   44ef4:	00000206 	br	44f00 <__sfp+0x68>
   44ef8:	18bfe60f 	ldh	r2,-104(r3)
   44efc:	10000826 	beq	r2,zero,44f20 <__sfp+0x88>
   44f00:	213fffc4 	addi	r4,r4,-1
   44f04:	1c3ffd04 	addi	r16,r3,-12
   44f08:	18c01a04 	addi	r3,r3,104
   44f0c:	247ffa1e 	bne	r4,r17,44ef8 <__alt_data_end+0xfffdddf8>
   44f10:	90800017 	ldw	r2,0(r18)
   44f14:	10001d26 	beq	r2,zero,44f8c <__sfp+0xf4>
   44f18:	1025883a 	mov	r18,r2
   44f1c:	003fee06 	br	44ed8 <__alt_data_end+0xfffdddd8>
   44f20:	00bfffc4 	movi	r2,-1
   44f24:	8080038d 	sth	r2,14(r16)
   44f28:	00800044 	movi	r2,1
   44f2c:	8080030d 	sth	r2,12(r16)
   44f30:	80001915 	stw	zero,100(r16)
   44f34:	80000015 	stw	zero,0(r16)
   44f38:	80000215 	stw	zero,8(r16)
   44f3c:	80000115 	stw	zero,4(r16)
   44f40:	80000415 	stw	zero,16(r16)
   44f44:	80000515 	stw	zero,20(r16)
   44f48:	80000615 	stw	zero,24(r16)
   44f4c:	01800204 	movi	r6,8
   44f50:	000b883a 	mov	r5,zero
   44f54:	81001704 	addi	r4,r16,92
   44f58:	00461f00 	call	461f0 <memset>
   44f5c:	8005883a 	mov	r2,r16
   44f60:	80000c15 	stw	zero,48(r16)
   44f64:	80000d15 	stw	zero,52(r16)
   44f68:	80001115 	stw	zero,68(r16)
   44f6c:	80001215 	stw	zero,72(r16)
   44f70:	dfc00417 	ldw	ra,16(sp)
   44f74:	dcc00317 	ldw	r19,12(sp)
   44f78:	dc800217 	ldw	r18,8(sp)
   44f7c:	dc400117 	ldw	r17,4(sp)
   44f80:	dc000017 	ldw	r16,0(sp)
   44f84:	dec00504 	addi	sp,sp,20
   44f88:	f800283a 	ret
   44f8c:	01400104 	movi	r5,4
   44f90:	9809883a 	mov	r4,r19
   44f94:	0044e300 	call	44e30 <__sfmoreglue>
   44f98:	90800015 	stw	r2,0(r18)
   44f9c:	103fde1e 	bne	r2,zero,44f18 <__alt_data_end+0xfffdde18>
   44fa0:	00800304 	movi	r2,12
   44fa4:	98800015 	stw	r2,0(r19)
   44fa8:	0005883a 	mov	r2,zero
   44fac:	003ff006 	br	44f70 <__alt_data_end+0xfffdde70>

00044fb0 <_cleanup>:
   44fb0:	00800174 	movhi	r2,5
   44fb4:	10aede04 	addi	r2,r2,-17544
   44fb8:	11000017 	ldw	r4,0(r2)
   44fbc:	01400134 	movhi	r5,4
   44fc0:	295b0504 	addi	r5,r5,27668
   44fc4:	00455981 	jmpi	45598 <_fwalk_reent>

00044fc8 <__sinit>:
   44fc8:	20800e17 	ldw	r2,56(r4)
   44fcc:	10000126 	beq	r2,zero,44fd4 <__sinit+0xc>
   44fd0:	f800283a 	ret
   44fd4:	0044c8c1 	jmpi	44c8c <__sinit.part.1>

00044fd8 <__sfp_lock_acquire>:
   44fd8:	f800283a 	ret

00044fdc <__sfp_lock_release>:
   44fdc:	f800283a 	ret

00044fe0 <__sinit_lock_acquire>:
   44fe0:	f800283a 	ret

00044fe4 <__sinit_lock_release>:
   44fe4:	f800283a 	ret

00044fe8 <__fp_lock_all>:
   44fe8:	00800174 	movhi	r2,5
   44fec:	10aedf04 	addi	r2,r2,-17540
   44ff0:	11000017 	ldw	r4,0(r2)
   44ff4:	01400134 	movhi	r5,4
   44ff8:	29538a04 	addi	r5,r5,20008
   44ffc:	00454d41 	jmpi	454d4 <_fwalk>

00045000 <__fp_unlock_all>:
   45000:	00800174 	movhi	r2,5
   45004:	10aedf04 	addi	r2,r2,-17540
   45008:	11000017 	ldw	r4,0(r2)
   4500c:	01400134 	movhi	r5,4
   45010:	29531e04 	addi	r5,r5,19576
   45014:	00454d41 	jmpi	454d4 <_fwalk>

00045018 <__sfvwrite_r>:
   45018:	30800217 	ldw	r2,8(r6)
   4501c:	10006726 	beq	r2,zero,451bc <__sfvwrite_r+0x1a4>
   45020:	28c0030b 	ldhu	r3,12(r5)
   45024:	defff404 	addi	sp,sp,-48
   45028:	dd400715 	stw	r21,28(sp)
   4502c:	dd000615 	stw	r20,24(sp)
   45030:	dc000215 	stw	r16,8(sp)
   45034:	dfc00b15 	stw	ra,44(sp)
   45038:	df000a15 	stw	fp,40(sp)
   4503c:	ddc00915 	stw	r23,36(sp)
   45040:	dd800815 	stw	r22,32(sp)
   45044:	dcc00515 	stw	r19,20(sp)
   45048:	dc800415 	stw	r18,16(sp)
   4504c:	dc400315 	stw	r17,12(sp)
   45050:	1880020c 	andi	r2,r3,8
   45054:	2821883a 	mov	r16,r5
   45058:	202b883a 	mov	r21,r4
   4505c:	3029883a 	mov	r20,r6
   45060:	10002726 	beq	r2,zero,45100 <__sfvwrite_r+0xe8>
   45064:	28800417 	ldw	r2,16(r5)
   45068:	10002526 	beq	r2,zero,45100 <__sfvwrite_r+0xe8>
   4506c:	1880008c 	andi	r2,r3,2
   45070:	a4400017 	ldw	r17,0(r20)
   45074:	10002a26 	beq	r2,zero,45120 <__sfvwrite_r+0x108>
   45078:	05a00034 	movhi	r22,32768
   4507c:	0027883a 	mov	r19,zero
   45080:	0025883a 	mov	r18,zero
   45084:	b5bf0004 	addi	r22,r22,-1024
   45088:	980d883a 	mov	r6,r19
   4508c:	a809883a 	mov	r4,r21
   45090:	90004626 	beq	r18,zero,451ac <__sfvwrite_r+0x194>
   45094:	900f883a 	mov	r7,r18
   45098:	b480022e 	bgeu	r22,r18,450a4 <__sfvwrite_r+0x8c>
   4509c:	01e00034 	movhi	r7,32768
   450a0:	39ff0004 	addi	r7,r7,-1024
   450a4:	80800917 	ldw	r2,36(r16)
   450a8:	81400717 	ldw	r5,28(r16)
   450ac:	103ee83a 	callr	r2
   450b0:	0080570e 	bge	zero,r2,45210 <__sfvwrite_r+0x1f8>
   450b4:	a0c00217 	ldw	r3,8(r20)
   450b8:	98a7883a 	add	r19,r19,r2
   450bc:	90a5c83a 	sub	r18,r18,r2
   450c0:	1885c83a 	sub	r2,r3,r2
   450c4:	a0800215 	stw	r2,8(r20)
   450c8:	103fef1e 	bne	r2,zero,45088 <__alt_data_end+0xfffddf88>
   450cc:	0005883a 	mov	r2,zero
   450d0:	dfc00b17 	ldw	ra,44(sp)
   450d4:	df000a17 	ldw	fp,40(sp)
   450d8:	ddc00917 	ldw	r23,36(sp)
   450dc:	dd800817 	ldw	r22,32(sp)
   450e0:	dd400717 	ldw	r21,28(sp)
   450e4:	dd000617 	ldw	r20,24(sp)
   450e8:	dcc00517 	ldw	r19,20(sp)
   450ec:	dc800417 	ldw	r18,16(sp)
   450f0:	dc400317 	ldw	r17,12(sp)
   450f4:	dc000217 	ldw	r16,8(sp)
   450f8:	dec00c04 	addi	sp,sp,48
   450fc:	f800283a 	ret
   45100:	800b883a 	mov	r5,r16
   45104:	a809883a 	mov	r4,r21
   45108:	0046a6c0 	call	46a6c <__swsetup_r>
   4510c:	1000eb1e 	bne	r2,zero,454bc <__sfvwrite_r+0x4a4>
   45110:	80c0030b 	ldhu	r3,12(r16)
   45114:	a4400017 	ldw	r17,0(r20)
   45118:	1880008c 	andi	r2,r3,2
   4511c:	103fd61e 	bne	r2,zero,45078 <__alt_data_end+0xfffddf78>
   45120:	1880004c 	andi	r2,r3,1
   45124:	10003f1e 	bne	r2,zero,45224 <__sfvwrite_r+0x20c>
   45128:	0039883a 	mov	fp,zero
   4512c:	0025883a 	mov	r18,zero
   45130:	90001a26 	beq	r18,zero,4519c <__sfvwrite_r+0x184>
   45134:	1880800c 	andi	r2,r3,512
   45138:	84c00217 	ldw	r19,8(r16)
   4513c:	10002126 	beq	r2,zero,451c4 <__sfvwrite_r+0x1ac>
   45140:	982f883a 	mov	r23,r19
   45144:	94c09336 	bltu	r18,r19,45394 <__sfvwrite_r+0x37c>
   45148:	1881200c 	andi	r2,r3,1152
   4514c:	10009e1e 	bne	r2,zero,453c8 <__sfvwrite_r+0x3b0>
   45150:	81000017 	ldw	r4,0(r16)
   45154:	b80d883a 	mov	r6,r23
   45158:	e00b883a 	mov	r5,fp
   4515c:	00460940 	call	46094 <memmove>
   45160:	80c00217 	ldw	r3,8(r16)
   45164:	81000017 	ldw	r4,0(r16)
   45168:	9005883a 	mov	r2,r18
   4516c:	1ce7c83a 	sub	r19,r3,r19
   45170:	25cf883a 	add	r7,r4,r23
   45174:	84c00215 	stw	r19,8(r16)
   45178:	81c00015 	stw	r7,0(r16)
   4517c:	a0c00217 	ldw	r3,8(r20)
   45180:	e0b9883a 	add	fp,fp,r2
   45184:	90a5c83a 	sub	r18,r18,r2
   45188:	18a7c83a 	sub	r19,r3,r2
   4518c:	a4c00215 	stw	r19,8(r20)
   45190:	983fce26 	beq	r19,zero,450cc <__alt_data_end+0xfffddfcc>
   45194:	80c0030b 	ldhu	r3,12(r16)
   45198:	903fe61e 	bne	r18,zero,45134 <__alt_data_end+0xfffde034>
   4519c:	8f000017 	ldw	fp,0(r17)
   451a0:	8c800117 	ldw	r18,4(r17)
   451a4:	8c400204 	addi	r17,r17,8
   451a8:	003fe106 	br	45130 <__alt_data_end+0xfffde030>
   451ac:	8cc00017 	ldw	r19,0(r17)
   451b0:	8c800117 	ldw	r18,4(r17)
   451b4:	8c400204 	addi	r17,r17,8
   451b8:	003fb306 	br	45088 <__alt_data_end+0xfffddf88>
   451bc:	0005883a 	mov	r2,zero
   451c0:	f800283a 	ret
   451c4:	81000017 	ldw	r4,0(r16)
   451c8:	80800417 	ldw	r2,16(r16)
   451cc:	11005736 	bltu	r2,r4,4532c <__sfvwrite_r+0x314>
   451d0:	85c00517 	ldw	r23,20(r16)
   451d4:	95c05536 	bltu	r18,r23,4532c <__sfvwrite_r+0x314>
   451d8:	00a00034 	movhi	r2,32768
   451dc:	10bfffc4 	addi	r2,r2,-1
   451e0:	9009883a 	mov	r4,r18
   451e4:	1480012e 	bgeu	r2,r18,451ec <__sfvwrite_r+0x1d4>
   451e8:	1009883a 	mov	r4,r2
   451ec:	b80b883a 	mov	r5,r23
   451f0:	00449480 	call	44948 <__divsi3>
   451f4:	15cf383a 	mul	r7,r2,r23
   451f8:	81400717 	ldw	r5,28(r16)
   451fc:	80800917 	ldw	r2,36(r16)
   45200:	e00d883a 	mov	r6,fp
   45204:	a809883a 	mov	r4,r21
   45208:	103ee83a 	callr	r2
   4520c:	00bfdb16 	blt	zero,r2,4517c <__alt_data_end+0xfffde07c>
   45210:	8080030b 	ldhu	r2,12(r16)
   45214:	10801014 	ori	r2,r2,64
   45218:	8080030d 	sth	r2,12(r16)
   4521c:	00bfffc4 	movi	r2,-1
   45220:	003fab06 	br	450d0 <__alt_data_end+0xfffddfd0>
   45224:	0027883a 	mov	r19,zero
   45228:	0011883a 	mov	r8,zero
   4522c:	0039883a 	mov	fp,zero
   45230:	0025883a 	mov	r18,zero
   45234:	90001f26 	beq	r18,zero,452b4 <__sfvwrite_r+0x29c>
   45238:	40005a26 	beq	r8,zero,453a4 <__sfvwrite_r+0x38c>
   4523c:	982d883a 	mov	r22,r19
   45240:	94c0012e 	bgeu	r18,r19,45248 <__sfvwrite_r+0x230>
   45244:	902d883a 	mov	r22,r18
   45248:	81000017 	ldw	r4,0(r16)
   4524c:	80800417 	ldw	r2,16(r16)
   45250:	b02f883a 	mov	r23,r22
   45254:	81c00517 	ldw	r7,20(r16)
   45258:	1100032e 	bgeu	r2,r4,45268 <__sfvwrite_r+0x250>
   4525c:	80c00217 	ldw	r3,8(r16)
   45260:	38c7883a 	add	r3,r7,r3
   45264:	1d801816 	blt	r3,r22,452c8 <__sfvwrite_r+0x2b0>
   45268:	b1c03e16 	blt	r22,r7,45364 <__sfvwrite_r+0x34c>
   4526c:	80800917 	ldw	r2,36(r16)
   45270:	81400717 	ldw	r5,28(r16)
   45274:	e00d883a 	mov	r6,fp
   45278:	da000115 	stw	r8,4(sp)
   4527c:	a809883a 	mov	r4,r21
   45280:	103ee83a 	callr	r2
   45284:	102f883a 	mov	r23,r2
   45288:	da000117 	ldw	r8,4(sp)
   4528c:	00bfe00e 	bge	zero,r2,45210 <__alt_data_end+0xfffde110>
   45290:	9de7c83a 	sub	r19,r19,r23
   45294:	98001f26 	beq	r19,zero,45314 <__sfvwrite_r+0x2fc>
   45298:	a0800217 	ldw	r2,8(r20)
   4529c:	e5f9883a 	add	fp,fp,r23
   452a0:	95e5c83a 	sub	r18,r18,r23
   452a4:	15efc83a 	sub	r23,r2,r23
   452a8:	a5c00215 	stw	r23,8(r20)
   452ac:	b83f8726 	beq	r23,zero,450cc <__alt_data_end+0xfffddfcc>
   452b0:	903fe11e 	bne	r18,zero,45238 <__alt_data_end+0xfffde138>
   452b4:	8f000017 	ldw	fp,0(r17)
   452b8:	8c800117 	ldw	r18,4(r17)
   452bc:	0011883a 	mov	r8,zero
   452c0:	8c400204 	addi	r17,r17,8
   452c4:	003fdb06 	br	45234 <__alt_data_end+0xfffde134>
   452c8:	180d883a 	mov	r6,r3
   452cc:	e00b883a 	mov	r5,fp
   452d0:	da000115 	stw	r8,4(sp)
   452d4:	d8c00015 	stw	r3,0(sp)
   452d8:	00460940 	call	46094 <memmove>
   452dc:	d8c00017 	ldw	r3,0(sp)
   452e0:	80800017 	ldw	r2,0(r16)
   452e4:	800b883a 	mov	r5,r16
   452e8:	a809883a 	mov	r4,r21
   452ec:	10c5883a 	add	r2,r2,r3
   452f0:	80800015 	stw	r2,0(r16)
   452f4:	d8c00015 	stw	r3,0(sp)
   452f8:	0046f340 	call	46f34 <_fflush_r>
   452fc:	d8c00017 	ldw	r3,0(sp)
   45300:	da000117 	ldw	r8,4(sp)
   45304:	103fc21e 	bne	r2,zero,45210 <__alt_data_end+0xfffde110>
   45308:	182f883a 	mov	r23,r3
   4530c:	9de7c83a 	sub	r19,r19,r23
   45310:	983fe11e 	bne	r19,zero,45298 <__alt_data_end+0xfffde198>
   45314:	800b883a 	mov	r5,r16
   45318:	a809883a 	mov	r4,r21
   4531c:	0046f340 	call	46f34 <_fflush_r>
   45320:	103fbb1e 	bne	r2,zero,45210 <__alt_data_end+0xfffde110>
   45324:	0011883a 	mov	r8,zero
   45328:	003fdb06 	br	45298 <__alt_data_end+0xfffde198>
   4532c:	94c0012e 	bgeu	r18,r19,45334 <__sfvwrite_r+0x31c>
   45330:	9027883a 	mov	r19,r18
   45334:	980d883a 	mov	r6,r19
   45338:	e00b883a 	mov	r5,fp
   4533c:	00460940 	call	46094 <memmove>
   45340:	80800217 	ldw	r2,8(r16)
   45344:	80c00017 	ldw	r3,0(r16)
   45348:	14c5c83a 	sub	r2,r2,r19
   4534c:	1cc7883a 	add	r3,r3,r19
   45350:	80800215 	stw	r2,8(r16)
   45354:	80c00015 	stw	r3,0(r16)
   45358:	10004326 	beq	r2,zero,45468 <__sfvwrite_r+0x450>
   4535c:	9805883a 	mov	r2,r19
   45360:	003f8606 	br	4517c <__alt_data_end+0xfffde07c>
   45364:	b00d883a 	mov	r6,r22
   45368:	e00b883a 	mov	r5,fp
   4536c:	da000115 	stw	r8,4(sp)
   45370:	00460940 	call	46094 <memmove>
   45374:	80800217 	ldw	r2,8(r16)
   45378:	80c00017 	ldw	r3,0(r16)
   4537c:	da000117 	ldw	r8,4(sp)
   45380:	1585c83a 	sub	r2,r2,r22
   45384:	1dad883a 	add	r22,r3,r22
   45388:	80800215 	stw	r2,8(r16)
   4538c:	85800015 	stw	r22,0(r16)
   45390:	003fbf06 	br	45290 <__alt_data_end+0xfffde190>
   45394:	81000017 	ldw	r4,0(r16)
   45398:	9027883a 	mov	r19,r18
   4539c:	902f883a 	mov	r23,r18
   453a0:	003f6c06 	br	45154 <__alt_data_end+0xfffde054>
   453a4:	900d883a 	mov	r6,r18
   453a8:	01400284 	movi	r5,10
   453ac:	e009883a 	mov	r4,fp
   453b0:	0045e680 	call	45e68 <memchr>
   453b4:	10003e26 	beq	r2,zero,454b0 <__sfvwrite_r+0x498>
   453b8:	10800044 	addi	r2,r2,1
   453bc:	1727c83a 	sub	r19,r2,fp
   453c0:	02000044 	movi	r8,1
   453c4:	003f9d06 	br	4523c <__alt_data_end+0xfffde13c>
   453c8:	80800517 	ldw	r2,20(r16)
   453cc:	81400417 	ldw	r5,16(r16)
   453d0:	81c00017 	ldw	r7,0(r16)
   453d4:	10a7883a 	add	r19,r2,r2
   453d8:	9885883a 	add	r2,r19,r2
   453dc:	1026d7fa 	srli	r19,r2,31
   453e0:	396dc83a 	sub	r22,r7,r5
   453e4:	b1000044 	addi	r4,r22,1
   453e8:	9885883a 	add	r2,r19,r2
   453ec:	1027d07a 	srai	r19,r2,1
   453f0:	2485883a 	add	r2,r4,r18
   453f4:	980d883a 	mov	r6,r19
   453f8:	9880022e 	bgeu	r19,r2,45404 <__sfvwrite_r+0x3ec>
   453fc:	1027883a 	mov	r19,r2
   45400:	100d883a 	mov	r6,r2
   45404:	18c1000c 	andi	r3,r3,1024
   45408:	18001c26 	beq	r3,zero,4547c <__sfvwrite_r+0x464>
   4540c:	300b883a 	mov	r5,r6
   45410:	a809883a 	mov	r4,r21
   45414:	004565c0 	call	4565c <_malloc_r>
   45418:	102f883a 	mov	r23,r2
   4541c:	10002926 	beq	r2,zero,454c4 <__sfvwrite_r+0x4ac>
   45420:	81400417 	ldw	r5,16(r16)
   45424:	b00d883a 	mov	r6,r22
   45428:	1009883a 	mov	r4,r2
   4542c:	0045f4c0 	call	45f4c <memcpy>
   45430:	8080030b 	ldhu	r2,12(r16)
   45434:	00fedfc4 	movi	r3,-1153
   45438:	10c4703a 	and	r2,r2,r3
   4543c:	10802014 	ori	r2,r2,128
   45440:	8080030d 	sth	r2,12(r16)
   45444:	bd89883a 	add	r4,r23,r22
   45448:	9d8fc83a 	sub	r7,r19,r22
   4544c:	85c00415 	stw	r23,16(r16)
   45450:	84c00515 	stw	r19,20(r16)
   45454:	81000015 	stw	r4,0(r16)
   45458:	9027883a 	mov	r19,r18
   4545c:	81c00215 	stw	r7,8(r16)
   45460:	902f883a 	mov	r23,r18
   45464:	003f3b06 	br	45154 <__alt_data_end+0xfffde054>
   45468:	800b883a 	mov	r5,r16
   4546c:	a809883a 	mov	r4,r21
   45470:	0046f340 	call	46f34 <_fflush_r>
   45474:	103fb926 	beq	r2,zero,4535c <__alt_data_end+0xfffde25c>
   45478:	003f6506 	br	45210 <__alt_data_end+0xfffde110>
   4547c:	a809883a 	mov	r4,r21
   45480:	00463180 	call	46318 <_realloc_r>
   45484:	102f883a 	mov	r23,r2
   45488:	103fee1e 	bne	r2,zero,45444 <__alt_data_end+0xfffde344>
   4548c:	81400417 	ldw	r5,16(r16)
   45490:	a809883a 	mov	r4,r21
   45494:	00470e40 	call	470e4 <_free_r>
   45498:	8080030b 	ldhu	r2,12(r16)
   4549c:	00ffdfc4 	movi	r3,-129
   454a0:	1884703a 	and	r2,r3,r2
   454a4:	00c00304 	movi	r3,12
   454a8:	a8c00015 	stw	r3,0(r21)
   454ac:	003f5906 	br	45214 <__alt_data_end+0xfffde114>
   454b0:	94c00044 	addi	r19,r18,1
   454b4:	02000044 	movi	r8,1
   454b8:	003f6006 	br	4523c <__alt_data_end+0xfffde13c>
   454bc:	00bfffc4 	movi	r2,-1
   454c0:	003f0306 	br	450d0 <__alt_data_end+0xfffddfd0>
   454c4:	00800304 	movi	r2,12
   454c8:	a8800015 	stw	r2,0(r21)
   454cc:	8080030b 	ldhu	r2,12(r16)
   454d0:	003f5006 	br	45214 <__alt_data_end+0xfffde114>

000454d4 <_fwalk>:
   454d4:	defff704 	addi	sp,sp,-36
   454d8:	dd000415 	stw	r20,16(sp)
   454dc:	dfc00815 	stw	ra,32(sp)
   454e0:	ddc00715 	stw	r23,28(sp)
   454e4:	dd800615 	stw	r22,24(sp)
   454e8:	dd400515 	stw	r21,20(sp)
   454ec:	dcc00315 	stw	r19,12(sp)
   454f0:	dc800215 	stw	r18,8(sp)
   454f4:	dc400115 	stw	r17,4(sp)
   454f8:	dc000015 	stw	r16,0(sp)
   454fc:	2500b804 	addi	r20,r4,736
   45500:	a0002326 	beq	r20,zero,45590 <_fwalk+0xbc>
   45504:	282b883a 	mov	r21,r5
   45508:	002f883a 	mov	r23,zero
   4550c:	05800044 	movi	r22,1
   45510:	04ffffc4 	movi	r19,-1
   45514:	a4400117 	ldw	r17,4(r20)
   45518:	a4800217 	ldw	r18,8(r20)
   4551c:	8c7fffc4 	addi	r17,r17,-1
   45520:	88000d16 	blt	r17,zero,45558 <_fwalk+0x84>
   45524:	94000304 	addi	r16,r18,12
   45528:	94800384 	addi	r18,r18,14
   4552c:	8080000b 	ldhu	r2,0(r16)
   45530:	8c7fffc4 	addi	r17,r17,-1
   45534:	813ffd04 	addi	r4,r16,-12
   45538:	b080042e 	bgeu	r22,r2,4554c <_fwalk+0x78>
   4553c:	9080000f 	ldh	r2,0(r18)
   45540:	14c00226 	beq	r2,r19,4554c <_fwalk+0x78>
   45544:	a83ee83a 	callr	r21
   45548:	b8aeb03a 	or	r23,r23,r2
   4554c:	84001a04 	addi	r16,r16,104
   45550:	94801a04 	addi	r18,r18,104
   45554:	8cfff51e 	bne	r17,r19,4552c <__alt_data_end+0xfffde42c>
   45558:	a5000017 	ldw	r20,0(r20)
   4555c:	a03fed1e 	bne	r20,zero,45514 <__alt_data_end+0xfffde414>
   45560:	b805883a 	mov	r2,r23
   45564:	dfc00817 	ldw	ra,32(sp)
   45568:	ddc00717 	ldw	r23,28(sp)
   4556c:	dd800617 	ldw	r22,24(sp)
   45570:	dd400517 	ldw	r21,20(sp)
   45574:	dd000417 	ldw	r20,16(sp)
   45578:	dcc00317 	ldw	r19,12(sp)
   4557c:	dc800217 	ldw	r18,8(sp)
   45580:	dc400117 	ldw	r17,4(sp)
   45584:	dc000017 	ldw	r16,0(sp)
   45588:	dec00904 	addi	sp,sp,36
   4558c:	f800283a 	ret
   45590:	002f883a 	mov	r23,zero
   45594:	003ff206 	br	45560 <__alt_data_end+0xfffde460>

00045598 <_fwalk_reent>:
   45598:	defff704 	addi	sp,sp,-36
   4559c:	dd000415 	stw	r20,16(sp)
   455a0:	dfc00815 	stw	ra,32(sp)
   455a4:	ddc00715 	stw	r23,28(sp)
   455a8:	dd800615 	stw	r22,24(sp)
   455ac:	dd400515 	stw	r21,20(sp)
   455b0:	dcc00315 	stw	r19,12(sp)
   455b4:	dc800215 	stw	r18,8(sp)
   455b8:	dc400115 	stw	r17,4(sp)
   455bc:	dc000015 	stw	r16,0(sp)
   455c0:	2500b804 	addi	r20,r4,736
   455c4:	a0002326 	beq	r20,zero,45654 <_fwalk_reent+0xbc>
   455c8:	282b883a 	mov	r21,r5
   455cc:	2027883a 	mov	r19,r4
   455d0:	002f883a 	mov	r23,zero
   455d4:	05800044 	movi	r22,1
   455d8:	04bfffc4 	movi	r18,-1
   455dc:	a4400117 	ldw	r17,4(r20)
   455e0:	a4000217 	ldw	r16,8(r20)
   455e4:	8c7fffc4 	addi	r17,r17,-1
   455e8:	88000c16 	blt	r17,zero,4561c <_fwalk_reent+0x84>
   455ec:	84000304 	addi	r16,r16,12
   455f0:	8080000b 	ldhu	r2,0(r16)
   455f4:	8c7fffc4 	addi	r17,r17,-1
   455f8:	817ffd04 	addi	r5,r16,-12
   455fc:	b080052e 	bgeu	r22,r2,45614 <_fwalk_reent+0x7c>
   45600:	8080008f 	ldh	r2,2(r16)
   45604:	9809883a 	mov	r4,r19
   45608:	14800226 	beq	r2,r18,45614 <_fwalk_reent+0x7c>
   4560c:	a83ee83a 	callr	r21
   45610:	b8aeb03a 	or	r23,r23,r2
   45614:	84001a04 	addi	r16,r16,104
   45618:	8cbff51e 	bne	r17,r18,455f0 <__alt_data_end+0xfffde4f0>
   4561c:	a5000017 	ldw	r20,0(r20)
   45620:	a03fee1e 	bne	r20,zero,455dc <__alt_data_end+0xfffde4dc>
   45624:	b805883a 	mov	r2,r23
   45628:	dfc00817 	ldw	ra,32(sp)
   4562c:	ddc00717 	ldw	r23,28(sp)
   45630:	dd800617 	ldw	r22,24(sp)
   45634:	dd400517 	ldw	r21,20(sp)
   45638:	dd000417 	ldw	r20,16(sp)
   4563c:	dcc00317 	ldw	r19,12(sp)
   45640:	dc800217 	ldw	r18,8(sp)
   45644:	dc400117 	ldw	r17,4(sp)
   45648:	dc000017 	ldw	r16,0(sp)
   4564c:	dec00904 	addi	sp,sp,36
   45650:	f800283a 	ret
   45654:	002f883a 	mov	r23,zero
   45658:	003ff206 	br	45624 <__alt_data_end+0xfffde524>

0004565c <_malloc_r>:
   4565c:	defff504 	addi	sp,sp,-44
   45660:	dc800315 	stw	r18,12(sp)
   45664:	dfc00a15 	stw	ra,40(sp)
   45668:	df000915 	stw	fp,36(sp)
   4566c:	ddc00815 	stw	r23,32(sp)
   45670:	dd800715 	stw	r22,28(sp)
   45674:	dd400615 	stw	r21,24(sp)
   45678:	dd000515 	stw	r20,20(sp)
   4567c:	dcc00415 	stw	r19,16(sp)
   45680:	dc400215 	stw	r17,8(sp)
   45684:	dc000115 	stw	r16,4(sp)
   45688:	288002c4 	addi	r2,r5,11
   4568c:	00c00584 	movi	r3,22
   45690:	2025883a 	mov	r18,r4
   45694:	18807f2e 	bgeu	r3,r2,45894 <_malloc_r+0x238>
   45698:	047ffe04 	movi	r17,-8
   4569c:	1462703a 	and	r17,r2,r17
   456a0:	8800a316 	blt	r17,zero,45930 <_malloc_r+0x2d4>
   456a4:	8940a236 	bltu	r17,r5,45930 <_malloc_r+0x2d4>
   456a8:	0047cec0 	call	47cec <__malloc_lock>
   456ac:	00807dc4 	movi	r2,503
   456b0:	1441e92e 	bgeu	r2,r17,45e58 <_malloc_r+0x7fc>
   456b4:	8804d27a 	srli	r2,r17,9
   456b8:	1000a126 	beq	r2,zero,45940 <_malloc_r+0x2e4>
   456bc:	00c00104 	movi	r3,4
   456c0:	18811e36 	bltu	r3,r2,45b3c <_malloc_r+0x4e0>
   456c4:	8804d1ba 	srli	r2,r17,6
   456c8:	12000e44 	addi	r8,r2,57
   456cc:	11c00e04 	addi	r7,r2,56
   456d0:	4209883a 	add	r4,r8,r8
   456d4:	04c00174 	movhi	r19,5
   456d8:	2109883a 	add	r4,r4,r4
   456dc:	9ce95904 	addi	r19,r19,-23196
   456e0:	2109883a 	add	r4,r4,r4
   456e4:	9909883a 	add	r4,r19,r4
   456e8:	24000117 	ldw	r16,4(r4)
   456ec:	213ffe04 	addi	r4,r4,-8
   456f0:	24009726 	beq	r4,r16,45950 <_malloc_r+0x2f4>
   456f4:	80800117 	ldw	r2,4(r16)
   456f8:	01bfff04 	movi	r6,-4
   456fc:	014003c4 	movi	r5,15
   45700:	1184703a 	and	r2,r2,r6
   45704:	1447c83a 	sub	r3,r2,r17
   45708:	28c00716 	blt	r5,r3,45728 <_malloc_r+0xcc>
   4570c:	1800920e 	bge	r3,zero,45958 <_malloc_r+0x2fc>
   45710:	84000317 	ldw	r16,12(r16)
   45714:	24008e26 	beq	r4,r16,45950 <_malloc_r+0x2f4>
   45718:	80800117 	ldw	r2,4(r16)
   4571c:	1184703a 	and	r2,r2,r6
   45720:	1447c83a 	sub	r3,r2,r17
   45724:	28fff90e 	bge	r5,r3,4570c <__alt_data_end+0xfffde60c>
   45728:	3809883a 	mov	r4,r7
   4572c:	01800174 	movhi	r6,5
   45730:	9c000417 	ldw	r16,16(r19)
   45734:	31a95904 	addi	r6,r6,-23196
   45738:	32000204 	addi	r8,r6,8
   4573c:	82013426 	beq	r16,r8,45c10 <_malloc_r+0x5b4>
   45740:	80c00117 	ldw	r3,4(r16)
   45744:	00bfff04 	movi	r2,-4
   45748:	188e703a 	and	r7,r3,r2
   4574c:	3c45c83a 	sub	r2,r7,r17
   45750:	00c003c4 	movi	r3,15
   45754:	18811f16 	blt	r3,r2,45bd4 <_malloc_r+0x578>
   45758:	32000515 	stw	r8,20(r6)
   4575c:	32000415 	stw	r8,16(r6)
   45760:	10007f0e 	bge	r2,zero,45960 <_malloc_r+0x304>
   45764:	00807fc4 	movi	r2,511
   45768:	11c0fd36 	bltu	r2,r7,45b60 <_malloc_r+0x504>
   4576c:	3806d0fa 	srli	r3,r7,3
   45770:	01c00044 	movi	r7,1
   45774:	30800117 	ldw	r2,4(r6)
   45778:	19400044 	addi	r5,r3,1
   4577c:	294b883a 	add	r5,r5,r5
   45780:	1807d0ba 	srai	r3,r3,2
   45784:	294b883a 	add	r5,r5,r5
   45788:	294b883a 	add	r5,r5,r5
   4578c:	298b883a 	add	r5,r5,r6
   45790:	38c6983a 	sll	r3,r7,r3
   45794:	29c00017 	ldw	r7,0(r5)
   45798:	2a7ffe04 	addi	r9,r5,-8
   4579c:	1886b03a 	or	r3,r3,r2
   457a0:	82400315 	stw	r9,12(r16)
   457a4:	81c00215 	stw	r7,8(r16)
   457a8:	30c00115 	stw	r3,4(r6)
   457ac:	2c000015 	stw	r16,0(r5)
   457b0:	3c000315 	stw	r16,12(r7)
   457b4:	2005d0ba 	srai	r2,r4,2
   457b8:	01400044 	movi	r5,1
   457bc:	288a983a 	sll	r5,r5,r2
   457c0:	19406f36 	bltu	r3,r5,45980 <_malloc_r+0x324>
   457c4:	28c4703a 	and	r2,r5,r3
   457c8:	10000a1e 	bne	r2,zero,457f4 <_malloc_r+0x198>
   457cc:	00bfff04 	movi	r2,-4
   457d0:	294b883a 	add	r5,r5,r5
   457d4:	2088703a 	and	r4,r4,r2
   457d8:	28c4703a 	and	r2,r5,r3
   457dc:	21000104 	addi	r4,r4,4
   457e0:	1000041e 	bne	r2,zero,457f4 <_malloc_r+0x198>
   457e4:	294b883a 	add	r5,r5,r5
   457e8:	28c4703a 	and	r2,r5,r3
   457ec:	21000104 	addi	r4,r4,4
   457f0:	103ffc26 	beq	r2,zero,457e4 <__alt_data_end+0xfffde6e4>
   457f4:	02bfff04 	movi	r10,-4
   457f8:	024003c4 	movi	r9,15
   457fc:	21800044 	addi	r6,r4,1
   45800:	318d883a 	add	r6,r6,r6
   45804:	318d883a 	add	r6,r6,r6
   45808:	318d883a 	add	r6,r6,r6
   4580c:	998d883a 	add	r6,r19,r6
   45810:	333ffe04 	addi	r12,r6,-8
   45814:	2017883a 	mov	r11,r4
   45818:	31800104 	addi	r6,r6,4
   4581c:	34000017 	ldw	r16,0(r6)
   45820:	31fffd04 	addi	r7,r6,-12
   45824:	81c0041e 	bne	r16,r7,45838 <_malloc_r+0x1dc>
   45828:	0000fb06 	br	45c18 <_malloc_r+0x5bc>
   4582c:	1801030e 	bge	r3,zero,45c3c <_malloc_r+0x5e0>
   45830:	84000317 	ldw	r16,12(r16)
   45834:	81c0f826 	beq	r16,r7,45c18 <_malloc_r+0x5bc>
   45838:	80800117 	ldw	r2,4(r16)
   4583c:	1284703a 	and	r2,r2,r10
   45840:	1447c83a 	sub	r3,r2,r17
   45844:	48fff90e 	bge	r9,r3,4582c <__alt_data_end+0xfffde72c>
   45848:	80800317 	ldw	r2,12(r16)
   4584c:	81000217 	ldw	r4,8(r16)
   45850:	89400054 	ori	r5,r17,1
   45854:	81400115 	stw	r5,4(r16)
   45858:	20800315 	stw	r2,12(r4)
   4585c:	11000215 	stw	r4,8(r2)
   45860:	8463883a 	add	r17,r16,r17
   45864:	9c400515 	stw	r17,20(r19)
   45868:	9c400415 	stw	r17,16(r19)
   4586c:	18800054 	ori	r2,r3,1
   45870:	88800115 	stw	r2,4(r17)
   45874:	8a000315 	stw	r8,12(r17)
   45878:	8a000215 	stw	r8,8(r17)
   4587c:	88e3883a 	add	r17,r17,r3
   45880:	88c00015 	stw	r3,0(r17)
   45884:	9009883a 	mov	r4,r18
   45888:	0047d100 	call	47d10 <__malloc_unlock>
   4588c:	80800204 	addi	r2,r16,8
   45890:	00001b06 	br	45900 <_malloc_r+0x2a4>
   45894:	04400404 	movi	r17,16
   45898:	89402536 	bltu	r17,r5,45930 <_malloc_r+0x2d4>
   4589c:	0047cec0 	call	47cec <__malloc_lock>
   458a0:	00800184 	movi	r2,6
   458a4:	01000084 	movi	r4,2
   458a8:	04c00174 	movhi	r19,5
   458ac:	1085883a 	add	r2,r2,r2
   458b0:	9ce95904 	addi	r19,r19,-23196
   458b4:	1085883a 	add	r2,r2,r2
   458b8:	9885883a 	add	r2,r19,r2
   458bc:	14000117 	ldw	r16,4(r2)
   458c0:	10fffe04 	addi	r3,r2,-8
   458c4:	80c0d926 	beq	r16,r3,45c2c <_malloc_r+0x5d0>
   458c8:	80c00117 	ldw	r3,4(r16)
   458cc:	81000317 	ldw	r4,12(r16)
   458d0:	00bfff04 	movi	r2,-4
   458d4:	1884703a 	and	r2,r3,r2
   458d8:	81400217 	ldw	r5,8(r16)
   458dc:	8085883a 	add	r2,r16,r2
   458e0:	10c00117 	ldw	r3,4(r2)
   458e4:	29000315 	stw	r4,12(r5)
   458e8:	21400215 	stw	r5,8(r4)
   458ec:	18c00054 	ori	r3,r3,1
   458f0:	10c00115 	stw	r3,4(r2)
   458f4:	9009883a 	mov	r4,r18
   458f8:	0047d100 	call	47d10 <__malloc_unlock>
   458fc:	80800204 	addi	r2,r16,8
   45900:	dfc00a17 	ldw	ra,40(sp)
   45904:	df000917 	ldw	fp,36(sp)
   45908:	ddc00817 	ldw	r23,32(sp)
   4590c:	dd800717 	ldw	r22,28(sp)
   45910:	dd400617 	ldw	r21,24(sp)
   45914:	dd000517 	ldw	r20,20(sp)
   45918:	dcc00417 	ldw	r19,16(sp)
   4591c:	dc800317 	ldw	r18,12(sp)
   45920:	dc400217 	ldw	r17,8(sp)
   45924:	dc000117 	ldw	r16,4(sp)
   45928:	dec00b04 	addi	sp,sp,44
   4592c:	f800283a 	ret
   45930:	00800304 	movi	r2,12
   45934:	90800015 	stw	r2,0(r18)
   45938:	0005883a 	mov	r2,zero
   4593c:	003ff006 	br	45900 <__alt_data_end+0xfffde800>
   45940:	01002004 	movi	r4,128
   45944:	02001004 	movi	r8,64
   45948:	01c00fc4 	movi	r7,63
   4594c:	003f6106 	br	456d4 <__alt_data_end+0xfffde5d4>
   45950:	4009883a 	mov	r4,r8
   45954:	003f7506 	br	4572c <__alt_data_end+0xfffde62c>
   45958:	81000317 	ldw	r4,12(r16)
   4595c:	003fde06 	br	458d8 <__alt_data_end+0xfffde7d8>
   45960:	81c5883a 	add	r2,r16,r7
   45964:	11400117 	ldw	r5,4(r2)
   45968:	9009883a 	mov	r4,r18
   4596c:	29400054 	ori	r5,r5,1
   45970:	11400115 	stw	r5,4(r2)
   45974:	0047d100 	call	47d10 <__malloc_unlock>
   45978:	80800204 	addi	r2,r16,8
   4597c:	003fe006 	br	45900 <__alt_data_end+0xfffde800>
   45980:	9c000217 	ldw	r16,8(r19)
   45984:	00bfff04 	movi	r2,-4
   45988:	85800117 	ldw	r22,4(r16)
   4598c:	b0ac703a 	and	r22,r22,r2
   45990:	b4400336 	bltu	r22,r17,459a0 <_malloc_r+0x344>
   45994:	b445c83a 	sub	r2,r22,r17
   45998:	00c003c4 	movi	r3,15
   4599c:	18805d16 	blt	r3,r2,45b14 <_malloc_r+0x4b8>
   459a0:	05c00174 	movhi	r23,5
   459a4:	00800174 	movhi	r2,5
   459a8:	10b58a04 	addi	r2,r2,-10712
   459ac:	bdeee004 	addi	r23,r23,-17536
   459b0:	15400017 	ldw	r21,0(r2)
   459b4:	b8c00017 	ldw	r3,0(r23)
   459b8:	00bfffc4 	movi	r2,-1
   459bc:	858d883a 	add	r6,r16,r22
   459c0:	8d6b883a 	add	r21,r17,r21
   459c4:	1880ea26 	beq	r3,r2,45d70 <_malloc_r+0x714>
   459c8:	ad4403c4 	addi	r21,r21,4111
   459cc:	00bc0004 	movi	r2,-4096
   459d0:	a8aa703a 	and	r21,r21,r2
   459d4:	a80b883a 	mov	r5,r21
   459d8:	9009883a 	mov	r4,r18
   459dc:	d9800015 	stw	r6,0(sp)
   459e0:	004687c0 	call	4687c <_sbrk_r>
   459e4:	1029883a 	mov	r20,r2
   459e8:	00bfffc4 	movi	r2,-1
   459ec:	d9800017 	ldw	r6,0(sp)
   459f0:	a080e826 	beq	r20,r2,45d94 <_malloc_r+0x738>
   459f4:	a180a636 	bltu	r20,r6,45c90 <_malloc_r+0x634>
   459f8:	07000174 	movhi	fp,5
   459fc:	e7359204 	addi	fp,fp,-10680
   45a00:	e0800017 	ldw	r2,0(fp)
   45a04:	a887883a 	add	r3,r21,r2
   45a08:	e0c00015 	stw	r3,0(fp)
   45a0c:	3500e626 	beq	r6,r20,45da8 <_malloc_r+0x74c>
   45a10:	b9000017 	ldw	r4,0(r23)
   45a14:	00bfffc4 	movi	r2,-1
   45a18:	2080ee26 	beq	r4,r2,45dd4 <_malloc_r+0x778>
   45a1c:	a185c83a 	sub	r2,r20,r6
   45a20:	10c5883a 	add	r2,r2,r3
   45a24:	e0800015 	stw	r2,0(fp)
   45a28:	a0c001cc 	andi	r3,r20,7
   45a2c:	1800bc26 	beq	r3,zero,45d20 <_malloc_r+0x6c4>
   45a30:	a0e9c83a 	sub	r20,r20,r3
   45a34:	00840204 	movi	r2,4104
   45a38:	a5000204 	addi	r20,r20,8
   45a3c:	10c7c83a 	sub	r3,r2,r3
   45a40:	a545883a 	add	r2,r20,r21
   45a44:	1083ffcc 	andi	r2,r2,4095
   45a48:	18abc83a 	sub	r21,r3,r2
   45a4c:	a80b883a 	mov	r5,r21
   45a50:	9009883a 	mov	r4,r18
   45a54:	004687c0 	call	4687c <_sbrk_r>
   45a58:	00ffffc4 	movi	r3,-1
   45a5c:	10c0e126 	beq	r2,r3,45de4 <_malloc_r+0x788>
   45a60:	1505c83a 	sub	r2,r2,r20
   45a64:	1545883a 	add	r2,r2,r21
   45a68:	10800054 	ori	r2,r2,1
   45a6c:	e0c00017 	ldw	r3,0(fp)
   45a70:	9d000215 	stw	r20,8(r19)
   45a74:	a0800115 	stw	r2,4(r20)
   45a78:	a8c7883a 	add	r3,r21,r3
   45a7c:	e0c00015 	stw	r3,0(fp)
   45a80:	84c00e26 	beq	r16,r19,45abc <_malloc_r+0x460>
   45a84:	018003c4 	movi	r6,15
   45a88:	3580a72e 	bgeu	r6,r22,45d28 <_malloc_r+0x6cc>
   45a8c:	81400117 	ldw	r5,4(r16)
   45a90:	013ffe04 	movi	r4,-8
   45a94:	b0bffd04 	addi	r2,r22,-12
   45a98:	1104703a 	and	r2,r2,r4
   45a9c:	2900004c 	andi	r4,r5,1
   45aa0:	2088b03a 	or	r4,r4,r2
   45aa4:	81000115 	stw	r4,4(r16)
   45aa8:	01400144 	movi	r5,5
   45aac:	8089883a 	add	r4,r16,r2
   45ab0:	21400115 	stw	r5,4(r4)
   45ab4:	21400215 	stw	r5,8(r4)
   45ab8:	3080cd36 	bltu	r6,r2,45df0 <_malloc_r+0x794>
   45abc:	00800174 	movhi	r2,5
   45ac0:	10b58904 	addi	r2,r2,-10716
   45ac4:	11000017 	ldw	r4,0(r2)
   45ac8:	20c0012e 	bgeu	r4,r3,45ad0 <_malloc_r+0x474>
   45acc:	10c00015 	stw	r3,0(r2)
   45ad0:	00800174 	movhi	r2,5
   45ad4:	10b58804 	addi	r2,r2,-10720
   45ad8:	11000017 	ldw	r4,0(r2)
   45adc:	9c000217 	ldw	r16,8(r19)
   45ae0:	20c0012e 	bgeu	r4,r3,45ae8 <_malloc_r+0x48c>
   45ae4:	10c00015 	stw	r3,0(r2)
   45ae8:	80c00117 	ldw	r3,4(r16)
   45aec:	00bfff04 	movi	r2,-4
   45af0:	1886703a 	and	r3,r3,r2
   45af4:	1c45c83a 	sub	r2,r3,r17
   45af8:	1c400236 	bltu	r3,r17,45b04 <_malloc_r+0x4a8>
   45afc:	00c003c4 	movi	r3,15
   45b00:	18800416 	blt	r3,r2,45b14 <_malloc_r+0x4b8>
   45b04:	9009883a 	mov	r4,r18
   45b08:	0047d100 	call	47d10 <__malloc_unlock>
   45b0c:	0005883a 	mov	r2,zero
   45b10:	003f7b06 	br	45900 <__alt_data_end+0xfffde800>
   45b14:	88c00054 	ori	r3,r17,1
   45b18:	80c00115 	stw	r3,4(r16)
   45b1c:	8463883a 	add	r17,r16,r17
   45b20:	10800054 	ori	r2,r2,1
   45b24:	9c400215 	stw	r17,8(r19)
   45b28:	88800115 	stw	r2,4(r17)
   45b2c:	9009883a 	mov	r4,r18
   45b30:	0047d100 	call	47d10 <__malloc_unlock>
   45b34:	80800204 	addi	r2,r16,8
   45b38:	003f7106 	br	45900 <__alt_data_end+0xfffde800>
   45b3c:	00c00504 	movi	r3,20
   45b40:	18804a2e 	bgeu	r3,r2,45c6c <_malloc_r+0x610>
   45b44:	00c01504 	movi	r3,84
   45b48:	18806e36 	bltu	r3,r2,45d04 <_malloc_r+0x6a8>
   45b4c:	8804d33a 	srli	r2,r17,12
   45b50:	12001bc4 	addi	r8,r2,111
   45b54:	11c01b84 	addi	r7,r2,110
   45b58:	4209883a 	add	r4,r8,r8
   45b5c:	003edd06 	br	456d4 <__alt_data_end+0xfffde5d4>
   45b60:	3804d27a 	srli	r2,r7,9
   45b64:	00c00104 	movi	r3,4
   45b68:	1880442e 	bgeu	r3,r2,45c7c <_malloc_r+0x620>
   45b6c:	00c00504 	movi	r3,20
   45b70:	18808136 	bltu	r3,r2,45d78 <_malloc_r+0x71c>
   45b74:	11401704 	addi	r5,r2,92
   45b78:	10c016c4 	addi	r3,r2,91
   45b7c:	294b883a 	add	r5,r5,r5
   45b80:	294b883a 	add	r5,r5,r5
   45b84:	294b883a 	add	r5,r5,r5
   45b88:	994b883a 	add	r5,r19,r5
   45b8c:	28800017 	ldw	r2,0(r5)
   45b90:	01800174 	movhi	r6,5
   45b94:	297ffe04 	addi	r5,r5,-8
   45b98:	31a95904 	addi	r6,r6,-23196
   45b9c:	28806526 	beq	r5,r2,45d34 <_malloc_r+0x6d8>
   45ba0:	01bfff04 	movi	r6,-4
   45ba4:	10c00117 	ldw	r3,4(r2)
   45ba8:	1986703a 	and	r3,r3,r6
   45bac:	38c0022e 	bgeu	r7,r3,45bb8 <_malloc_r+0x55c>
   45bb0:	10800217 	ldw	r2,8(r2)
   45bb4:	28bffb1e 	bne	r5,r2,45ba4 <__alt_data_end+0xfffdeaa4>
   45bb8:	11400317 	ldw	r5,12(r2)
   45bbc:	98c00117 	ldw	r3,4(r19)
   45bc0:	81400315 	stw	r5,12(r16)
   45bc4:	80800215 	stw	r2,8(r16)
   45bc8:	2c000215 	stw	r16,8(r5)
   45bcc:	14000315 	stw	r16,12(r2)
   45bd0:	003ef806 	br	457b4 <__alt_data_end+0xfffde6b4>
   45bd4:	88c00054 	ori	r3,r17,1
   45bd8:	80c00115 	stw	r3,4(r16)
   45bdc:	8463883a 	add	r17,r16,r17
   45be0:	34400515 	stw	r17,20(r6)
   45be4:	34400415 	stw	r17,16(r6)
   45be8:	10c00054 	ori	r3,r2,1
   45bec:	8a000315 	stw	r8,12(r17)
   45bf0:	8a000215 	stw	r8,8(r17)
   45bf4:	88c00115 	stw	r3,4(r17)
   45bf8:	88a3883a 	add	r17,r17,r2
   45bfc:	88800015 	stw	r2,0(r17)
   45c00:	9009883a 	mov	r4,r18
   45c04:	0047d100 	call	47d10 <__malloc_unlock>
   45c08:	80800204 	addi	r2,r16,8
   45c0c:	003f3c06 	br	45900 <__alt_data_end+0xfffde800>
   45c10:	30c00117 	ldw	r3,4(r6)
   45c14:	003ee706 	br	457b4 <__alt_data_end+0xfffde6b4>
   45c18:	5ac00044 	addi	r11,r11,1
   45c1c:	588000cc 	andi	r2,r11,3
   45c20:	31800204 	addi	r6,r6,8
   45c24:	103efd1e 	bne	r2,zero,4581c <__alt_data_end+0xfffde71c>
   45c28:	00002406 	br	45cbc <_malloc_r+0x660>
   45c2c:	14000317 	ldw	r16,12(r2)
   45c30:	143f251e 	bne	r2,r16,458c8 <__alt_data_end+0xfffde7c8>
   45c34:	21000084 	addi	r4,r4,2
   45c38:	003ebc06 	br	4572c <__alt_data_end+0xfffde62c>
   45c3c:	8085883a 	add	r2,r16,r2
   45c40:	10c00117 	ldw	r3,4(r2)
   45c44:	81000317 	ldw	r4,12(r16)
   45c48:	81400217 	ldw	r5,8(r16)
   45c4c:	18c00054 	ori	r3,r3,1
   45c50:	10c00115 	stw	r3,4(r2)
   45c54:	29000315 	stw	r4,12(r5)
   45c58:	21400215 	stw	r5,8(r4)
   45c5c:	9009883a 	mov	r4,r18
   45c60:	0047d100 	call	47d10 <__malloc_unlock>
   45c64:	80800204 	addi	r2,r16,8
   45c68:	003f2506 	br	45900 <__alt_data_end+0xfffde800>
   45c6c:	12001704 	addi	r8,r2,92
   45c70:	11c016c4 	addi	r7,r2,91
   45c74:	4209883a 	add	r4,r8,r8
   45c78:	003e9606 	br	456d4 <__alt_data_end+0xfffde5d4>
   45c7c:	3804d1ba 	srli	r2,r7,6
   45c80:	11400e44 	addi	r5,r2,57
   45c84:	10c00e04 	addi	r3,r2,56
   45c88:	294b883a 	add	r5,r5,r5
   45c8c:	003fbc06 	br	45b80 <__alt_data_end+0xfffdea80>
   45c90:	84ff5926 	beq	r16,r19,459f8 <__alt_data_end+0xfffde8f8>
   45c94:	00800174 	movhi	r2,5
   45c98:	10a95904 	addi	r2,r2,-23196
   45c9c:	14000217 	ldw	r16,8(r2)
   45ca0:	00bfff04 	movi	r2,-4
   45ca4:	80c00117 	ldw	r3,4(r16)
   45ca8:	1886703a 	and	r3,r3,r2
   45cac:	003f9106 	br	45af4 <__alt_data_end+0xfffde9f4>
   45cb0:	60800217 	ldw	r2,8(r12)
   45cb4:	213fffc4 	addi	r4,r4,-1
   45cb8:	1300651e 	bne	r2,r12,45e50 <_malloc_r+0x7f4>
   45cbc:	208000cc 	andi	r2,r4,3
   45cc0:	633ffe04 	addi	r12,r12,-8
   45cc4:	103ffa1e 	bne	r2,zero,45cb0 <__alt_data_end+0xfffdebb0>
   45cc8:	98800117 	ldw	r2,4(r19)
   45ccc:	0146303a 	nor	r3,zero,r5
   45cd0:	1884703a 	and	r2,r3,r2
   45cd4:	98800115 	stw	r2,4(r19)
   45cd8:	294b883a 	add	r5,r5,r5
   45cdc:	117f2836 	bltu	r2,r5,45980 <__alt_data_end+0xfffde880>
   45ce0:	283f2726 	beq	r5,zero,45980 <__alt_data_end+0xfffde880>
   45ce4:	2886703a 	and	r3,r5,r2
   45ce8:	5809883a 	mov	r4,r11
   45cec:	183ec31e 	bne	r3,zero,457fc <__alt_data_end+0xfffde6fc>
   45cf0:	294b883a 	add	r5,r5,r5
   45cf4:	2886703a 	and	r3,r5,r2
   45cf8:	21000104 	addi	r4,r4,4
   45cfc:	183ffc26 	beq	r3,zero,45cf0 <__alt_data_end+0xfffdebf0>
   45d00:	003ebe06 	br	457fc <__alt_data_end+0xfffde6fc>
   45d04:	00c05504 	movi	r3,340
   45d08:	18801236 	bltu	r3,r2,45d54 <_malloc_r+0x6f8>
   45d0c:	8804d3fa 	srli	r2,r17,15
   45d10:	12001e04 	addi	r8,r2,120
   45d14:	11c01dc4 	addi	r7,r2,119
   45d18:	4209883a 	add	r4,r8,r8
   45d1c:	003e6d06 	br	456d4 <__alt_data_end+0xfffde5d4>
   45d20:	00c40004 	movi	r3,4096
   45d24:	003f4606 	br	45a40 <__alt_data_end+0xfffde940>
   45d28:	00800044 	movi	r2,1
   45d2c:	a0800115 	stw	r2,4(r20)
   45d30:	003f7406 	br	45b04 <__alt_data_end+0xfffdea04>
   45d34:	1805d0ba 	srai	r2,r3,2
   45d38:	01c00044 	movi	r7,1
   45d3c:	30c00117 	ldw	r3,4(r6)
   45d40:	388e983a 	sll	r7,r7,r2
   45d44:	2805883a 	mov	r2,r5
   45d48:	38c6b03a 	or	r3,r7,r3
   45d4c:	30c00115 	stw	r3,4(r6)
   45d50:	003f9b06 	br	45bc0 <__alt_data_end+0xfffdeac0>
   45d54:	00c15504 	movi	r3,1364
   45d58:	18801a36 	bltu	r3,r2,45dc4 <_malloc_r+0x768>
   45d5c:	8804d4ba 	srli	r2,r17,18
   45d60:	12001f44 	addi	r8,r2,125
   45d64:	11c01f04 	addi	r7,r2,124
   45d68:	4209883a 	add	r4,r8,r8
   45d6c:	003e5906 	br	456d4 <__alt_data_end+0xfffde5d4>
   45d70:	ad400404 	addi	r21,r21,16
   45d74:	003f1706 	br	459d4 <__alt_data_end+0xfffde8d4>
   45d78:	00c01504 	movi	r3,84
   45d7c:	18802336 	bltu	r3,r2,45e0c <_malloc_r+0x7b0>
   45d80:	3804d33a 	srli	r2,r7,12
   45d84:	11401bc4 	addi	r5,r2,111
   45d88:	10c01b84 	addi	r3,r2,110
   45d8c:	294b883a 	add	r5,r5,r5
   45d90:	003f7b06 	br	45b80 <__alt_data_end+0xfffdea80>
   45d94:	9c000217 	ldw	r16,8(r19)
   45d98:	00bfff04 	movi	r2,-4
   45d9c:	80c00117 	ldw	r3,4(r16)
   45da0:	1886703a 	and	r3,r3,r2
   45da4:	003f5306 	br	45af4 <__alt_data_end+0xfffde9f4>
   45da8:	3083ffcc 	andi	r2,r6,4095
   45dac:	103f181e 	bne	r2,zero,45a10 <__alt_data_end+0xfffde910>
   45db0:	99000217 	ldw	r4,8(r19)
   45db4:	b545883a 	add	r2,r22,r21
   45db8:	10800054 	ori	r2,r2,1
   45dbc:	20800115 	stw	r2,4(r4)
   45dc0:	003f3e06 	br	45abc <__alt_data_end+0xfffde9bc>
   45dc4:	01003f84 	movi	r4,254
   45dc8:	02001fc4 	movi	r8,127
   45dcc:	01c01f84 	movi	r7,126
   45dd0:	003e4006 	br	456d4 <__alt_data_end+0xfffde5d4>
   45dd4:	00800174 	movhi	r2,5
   45dd8:	10aee004 	addi	r2,r2,-17536
   45ddc:	15000015 	stw	r20,0(r2)
   45de0:	003f1106 	br	45a28 <__alt_data_end+0xfffde928>
   45de4:	00800044 	movi	r2,1
   45de8:	002b883a 	mov	r21,zero
   45dec:	003f1f06 	br	45a6c <__alt_data_end+0xfffde96c>
   45df0:	81400204 	addi	r5,r16,8
   45df4:	9009883a 	mov	r4,r18
   45df8:	00470e40 	call	470e4 <_free_r>
   45dfc:	00800174 	movhi	r2,5
   45e00:	10b59204 	addi	r2,r2,-10680
   45e04:	10c00017 	ldw	r3,0(r2)
   45e08:	003f2c06 	br	45abc <__alt_data_end+0xfffde9bc>
   45e0c:	00c05504 	movi	r3,340
   45e10:	18800536 	bltu	r3,r2,45e28 <_malloc_r+0x7cc>
   45e14:	3804d3fa 	srli	r2,r7,15
   45e18:	11401e04 	addi	r5,r2,120
   45e1c:	10c01dc4 	addi	r3,r2,119
   45e20:	294b883a 	add	r5,r5,r5
   45e24:	003f5606 	br	45b80 <__alt_data_end+0xfffdea80>
   45e28:	00c15504 	movi	r3,1364
   45e2c:	18800536 	bltu	r3,r2,45e44 <_malloc_r+0x7e8>
   45e30:	3804d4ba 	srli	r2,r7,18
   45e34:	11401f44 	addi	r5,r2,125
   45e38:	10c01f04 	addi	r3,r2,124
   45e3c:	294b883a 	add	r5,r5,r5
   45e40:	003f4f06 	br	45b80 <__alt_data_end+0xfffdea80>
   45e44:	01403f84 	movi	r5,254
   45e48:	00c01f84 	movi	r3,126
   45e4c:	003f4c06 	br	45b80 <__alt_data_end+0xfffdea80>
   45e50:	98800117 	ldw	r2,4(r19)
   45e54:	003fa006 	br	45cd8 <__alt_data_end+0xfffdebd8>
   45e58:	8808d0fa 	srli	r4,r17,3
   45e5c:	20800044 	addi	r2,r4,1
   45e60:	1085883a 	add	r2,r2,r2
   45e64:	003e9006 	br	458a8 <__alt_data_end+0xfffde7a8>

00045e68 <memchr>:
   45e68:	208000cc 	andi	r2,r4,3
   45e6c:	280f883a 	mov	r7,r5
   45e70:	10003426 	beq	r2,zero,45f44 <memchr+0xdc>
   45e74:	30bfffc4 	addi	r2,r6,-1
   45e78:	30001a26 	beq	r6,zero,45ee4 <memchr+0x7c>
   45e7c:	20c00003 	ldbu	r3,0(r4)
   45e80:	29803fcc 	andi	r6,r5,255
   45e84:	30c0051e 	bne	r6,r3,45e9c <memchr+0x34>
   45e88:	00001806 	br	45eec <memchr+0x84>
   45e8c:	10001526 	beq	r2,zero,45ee4 <memchr+0x7c>
   45e90:	20c00003 	ldbu	r3,0(r4)
   45e94:	10bfffc4 	addi	r2,r2,-1
   45e98:	30c01426 	beq	r6,r3,45eec <memchr+0x84>
   45e9c:	21000044 	addi	r4,r4,1
   45ea0:	20c000cc 	andi	r3,r4,3
   45ea4:	183ff91e 	bne	r3,zero,45e8c <__alt_data_end+0xfffded8c>
   45ea8:	020000c4 	movi	r8,3
   45eac:	40801136 	bltu	r8,r2,45ef4 <memchr+0x8c>
   45eb0:	10000c26 	beq	r2,zero,45ee4 <memchr+0x7c>
   45eb4:	20c00003 	ldbu	r3,0(r4)
   45eb8:	29403fcc 	andi	r5,r5,255
   45ebc:	28c00b26 	beq	r5,r3,45eec <memchr+0x84>
   45ec0:	20c00044 	addi	r3,r4,1
   45ec4:	39803fcc 	andi	r6,r7,255
   45ec8:	2089883a 	add	r4,r4,r2
   45ecc:	00000306 	br	45edc <memchr+0x74>
   45ed0:	18c00044 	addi	r3,r3,1
   45ed4:	197fffc3 	ldbu	r5,-1(r3)
   45ed8:	31400526 	beq	r6,r5,45ef0 <memchr+0x88>
   45edc:	1805883a 	mov	r2,r3
   45ee0:	20fffb1e 	bne	r4,r3,45ed0 <__alt_data_end+0xfffdedd0>
   45ee4:	0005883a 	mov	r2,zero
   45ee8:	f800283a 	ret
   45eec:	2005883a 	mov	r2,r4
   45ef0:	f800283a 	ret
   45ef4:	28c03fcc 	andi	r3,r5,255
   45ef8:	1812923a 	slli	r9,r3,8
   45efc:	02ffbff4 	movhi	r11,65279
   45f00:	02a02074 	movhi	r10,32897
   45f04:	48d2b03a 	or	r9,r9,r3
   45f08:	4806943a 	slli	r3,r9,16
   45f0c:	5affbfc4 	addi	r11,r11,-257
   45f10:	52a02004 	addi	r10,r10,-32640
   45f14:	48d2b03a 	or	r9,r9,r3
   45f18:	20c00017 	ldw	r3,0(r4)
   45f1c:	48c6f03a 	xor	r3,r9,r3
   45f20:	1acd883a 	add	r6,r3,r11
   45f24:	00c6303a 	nor	r3,zero,r3
   45f28:	30c6703a 	and	r3,r6,r3
   45f2c:	1a86703a 	and	r3,r3,r10
   45f30:	183fe01e 	bne	r3,zero,45eb4 <__alt_data_end+0xfffdedb4>
   45f34:	10bfff04 	addi	r2,r2,-4
   45f38:	21000104 	addi	r4,r4,4
   45f3c:	40bff636 	bltu	r8,r2,45f18 <__alt_data_end+0xfffdee18>
   45f40:	003fdb06 	br	45eb0 <__alt_data_end+0xfffdedb0>
   45f44:	3005883a 	mov	r2,r6
   45f48:	003fd706 	br	45ea8 <__alt_data_end+0xfffdeda8>

00045f4c <memcpy>:
   45f4c:	defffd04 	addi	sp,sp,-12
   45f50:	dfc00215 	stw	ra,8(sp)
   45f54:	dc400115 	stw	r17,4(sp)
   45f58:	dc000015 	stw	r16,0(sp)
   45f5c:	00c003c4 	movi	r3,15
   45f60:	2005883a 	mov	r2,r4
   45f64:	1980452e 	bgeu	r3,r6,4607c <memcpy+0x130>
   45f68:	2906b03a 	or	r3,r5,r4
   45f6c:	18c000cc 	andi	r3,r3,3
   45f70:	1800441e 	bne	r3,zero,46084 <memcpy+0x138>
   45f74:	347ffc04 	addi	r17,r6,-16
   45f78:	8822d13a 	srli	r17,r17,4
   45f7c:	28c00104 	addi	r3,r5,4
   45f80:	23400104 	addi	r13,r4,4
   45f84:	8820913a 	slli	r16,r17,4
   45f88:	2b000204 	addi	r12,r5,8
   45f8c:	22c00204 	addi	r11,r4,8
   45f90:	84000504 	addi	r16,r16,20
   45f94:	2a800304 	addi	r10,r5,12
   45f98:	22400304 	addi	r9,r4,12
   45f9c:	2c21883a 	add	r16,r5,r16
   45fa0:	2811883a 	mov	r8,r5
   45fa4:	200f883a 	mov	r7,r4
   45fa8:	41000017 	ldw	r4,0(r8)
   45fac:	1fc00017 	ldw	ra,0(r3)
   45fb0:	63c00017 	ldw	r15,0(r12)
   45fb4:	39000015 	stw	r4,0(r7)
   45fb8:	53800017 	ldw	r14,0(r10)
   45fbc:	6fc00015 	stw	ra,0(r13)
   45fc0:	5bc00015 	stw	r15,0(r11)
   45fc4:	4b800015 	stw	r14,0(r9)
   45fc8:	18c00404 	addi	r3,r3,16
   45fcc:	39c00404 	addi	r7,r7,16
   45fd0:	42000404 	addi	r8,r8,16
   45fd4:	6b400404 	addi	r13,r13,16
   45fd8:	63000404 	addi	r12,r12,16
   45fdc:	5ac00404 	addi	r11,r11,16
   45fe0:	52800404 	addi	r10,r10,16
   45fe4:	4a400404 	addi	r9,r9,16
   45fe8:	1c3fef1e 	bne	r3,r16,45fa8 <__alt_data_end+0xfffdeea8>
   45fec:	89c00044 	addi	r7,r17,1
   45ff0:	380e913a 	slli	r7,r7,4
   45ff4:	310003cc 	andi	r4,r6,15
   45ff8:	02c000c4 	movi	r11,3
   45ffc:	11c7883a 	add	r3,r2,r7
   46000:	29cb883a 	add	r5,r5,r7
   46004:	5900212e 	bgeu	r11,r4,4608c <memcpy+0x140>
   46008:	1813883a 	mov	r9,r3
   4600c:	2811883a 	mov	r8,r5
   46010:	200f883a 	mov	r7,r4
   46014:	42800017 	ldw	r10,0(r8)
   46018:	4a400104 	addi	r9,r9,4
   4601c:	39ffff04 	addi	r7,r7,-4
   46020:	4abfff15 	stw	r10,-4(r9)
   46024:	42000104 	addi	r8,r8,4
   46028:	59fffa36 	bltu	r11,r7,46014 <__alt_data_end+0xfffdef14>
   4602c:	213fff04 	addi	r4,r4,-4
   46030:	2008d0ba 	srli	r4,r4,2
   46034:	318000cc 	andi	r6,r6,3
   46038:	21000044 	addi	r4,r4,1
   4603c:	2109883a 	add	r4,r4,r4
   46040:	2109883a 	add	r4,r4,r4
   46044:	1907883a 	add	r3,r3,r4
   46048:	290b883a 	add	r5,r5,r4
   4604c:	30000626 	beq	r6,zero,46068 <memcpy+0x11c>
   46050:	198d883a 	add	r6,r3,r6
   46054:	29c00003 	ldbu	r7,0(r5)
   46058:	18c00044 	addi	r3,r3,1
   4605c:	29400044 	addi	r5,r5,1
   46060:	19ffffc5 	stb	r7,-1(r3)
   46064:	19bffb1e 	bne	r3,r6,46054 <__alt_data_end+0xfffdef54>
   46068:	dfc00217 	ldw	ra,8(sp)
   4606c:	dc400117 	ldw	r17,4(sp)
   46070:	dc000017 	ldw	r16,0(sp)
   46074:	dec00304 	addi	sp,sp,12
   46078:	f800283a 	ret
   4607c:	2007883a 	mov	r3,r4
   46080:	003ff206 	br	4604c <__alt_data_end+0xfffdef4c>
   46084:	2007883a 	mov	r3,r4
   46088:	003ff106 	br	46050 <__alt_data_end+0xfffdef50>
   4608c:	200d883a 	mov	r6,r4
   46090:	003fee06 	br	4604c <__alt_data_end+0xfffdef4c>

00046094 <memmove>:
   46094:	2005883a 	mov	r2,r4
   46098:	29000b2e 	bgeu	r5,r4,460c8 <memmove+0x34>
   4609c:	298f883a 	add	r7,r5,r6
   460a0:	21c0092e 	bgeu	r4,r7,460c8 <memmove+0x34>
   460a4:	2187883a 	add	r3,r4,r6
   460a8:	198bc83a 	sub	r5,r3,r6
   460ac:	30004826 	beq	r6,zero,461d0 <memmove+0x13c>
   460b0:	39ffffc4 	addi	r7,r7,-1
   460b4:	39000003 	ldbu	r4,0(r7)
   460b8:	18ffffc4 	addi	r3,r3,-1
   460bc:	19000005 	stb	r4,0(r3)
   460c0:	28fffb1e 	bne	r5,r3,460b0 <__alt_data_end+0xfffdefb0>
   460c4:	f800283a 	ret
   460c8:	00c003c4 	movi	r3,15
   460cc:	1980412e 	bgeu	r3,r6,461d4 <memmove+0x140>
   460d0:	2886b03a 	or	r3,r5,r2
   460d4:	18c000cc 	andi	r3,r3,3
   460d8:	1800401e 	bne	r3,zero,461dc <memmove+0x148>
   460dc:	33fffc04 	addi	r15,r6,-16
   460e0:	781ed13a 	srli	r15,r15,4
   460e4:	28c00104 	addi	r3,r5,4
   460e8:	13400104 	addi	r13,r2,4
   460ec:	781c913a 	slli	r14,r15,4
   460f0:	2b000204 	addi	r12,r5,8
   460f4:	12c00204 	addi	r11,r2,8
   460f8:	73800504 	addi	r14,r14,20
   460fc:	2a800304 	addi	r10,r5,12
   46100:	12400304 	addi	r9,r2,12
   46104:	2b9d883a 	add	r14,r5,r14
   46108:	2811883a 	mov	r8,r5
   4610c:	100f883a 	mov	r7,r2
   46110:	41000017 	ldw	r4,0(r8)
   46114:	39c00404 	addi	r7,r7,16
   46118:	18c00404 	addi	r3,r3,16
   4611c:	393ffc15 	stw	r4,-16(r7)
   46120:	193ffc17 	ldw	r4,-16(r3)
   46124:	6b400404 	addi	r13,r13,16
   46128:	5ac00404 	addi	r11,r11,16
   4612c:	693ffc15 	stw	r4,-16(r13)
   46130:	61000017 	ldw	r4,0(r12)
   46134:	4a400404 	addi	r9,r9,16
   46138:	42000404 	addi	r8,r8,16
   4613c:	593ffc15 	stw	r4,-16(r11)
   46140:	51000017 	ldw	r4,0(r10)
   46144:	63000404 	addi	r12,r12,16
   46148:	52800404 	addi	r10,r10,16
   4614c:	493ffc15 	stw	r4,-16(r9)
   46150:	1bbfef1e 	bne	r3,r14,46110 <__alt_data_end+0xfffdf010>
   46154:	79000044 	addi	r4,r15,1
   46158:	2008913a 	slli	r4,r4,4
   4615c:	328003cc 	andi	r10,r6,15
   46160:	02c000c4 	movi	r11,3
   46164:	1107883a 	add	r3,r2,r4
   46168:	290b883a 	add	r5,r5,r4
   4616c:	5a801e2e 	bgeu	r11,r10,461e8 <memmove+0x154>
   46170:	1813883a 	mov	r9,r3
   46174:	2811883a 	mov	r8,r5
   46178:	500f883a 	mov	r7,r10
   4617c:	41000017 	ldw	r4,0(r8)
   46180:	4a400104 	addi	r9,r9,4
   46184:	39ffff04 	addi	r7,r7,-4
   46188:	493fff15 	stw	r4,-4(r9)
   4618c:	42000104 	addi	r8,r8,4
   46190:	59fffa36 	bltu	r11,r7,4617c <__alt_data_end+0xfffdf07c>
   46194:	513fff04 	addi	r4,r10,-4
   46198:	2008d0ba 	srli	r4,r4,2
   4619c:	318000cc 	andi	r6,r6,3
   461a0:	21000044 	addi	r4,r4,1
   461a4:	2109883a 	add	r4,r4,r4
   461a8:	2109883a 	add	r4,r4,r4
   461ac:	1907883a 	add	r3,r3,r4
   461b0:	290b883a 	add	r5,r5,r4
   461b4:	30000b26 	beq	r6,zero,461e4 <memmove+0x150>
   461b8:	198d883a 	add	r6,r3,r6
   461bc:	29c00003 	ldbu	r7,0(r5)
   461c0:	18c00044 	addi	r3,r3,1
   461c4:	29400044 	addi	r5,r5,1
   461c8:	19ffffc5 	stb	r7,-1(r3)
   461cc:	19bffb1e 	bne	r3,r6,461bc <__alt_data_end+0xfffdf0bc>
   461d0:	f800283a 	ret
   461d4:	1007883a 	mov	r3,r2
   461d8:	003ff606 	br	461b4 <__alt_data_end+0xfffdf0b4>
   461dc:	1007883a 	mov	r3,r2
   461e0:	003ff506 	br	461b8 <__alt_data_end+0xfffdf0b8>
   461e4:	f800283a 	ret
   461e8:	500d883a 	mov	r6,r10
   461ec:	003ff106 	br	461b4 <__alt_data_end+0xfffdf0b4>

000461f0 <memset>:
   461f0:	20c000cc 	andi	r3,r4,3
   461f4:	2005883a 	mov	r2,r4
   461f8:	18004426 	beq	r3,zero,4630c <memset+0x11c>
   461fc:	31ffffc4 	addi	r7,r6,-1
   46200:	30004026 	beq	r6,zero,46304 <memset+0x114>
   46204:	2813883a 	mov	r9,r5
   46208:	200d883a 	mov	r6,r4
   4620c:	2007883a 	mov	r3,r4
   46210:	00000406 	br	46224 <memset+0x34>
   46214:	3a3fffc4 	addi	r8,r7,-1
   46218:	31800044 	addi	r6,r6,1
   4621c:	38003926 	beq	r7,zero,46304 <memset+0x114>
   46220:	400f883a 	mov	r7,r8
   46224:	18c00044 	addi	r3,r3,1
   46228:	32400005 	stb	r9,0(r6)
   4622c:	1a0000cc 	andi	r8,r3,3
   46230:	403ff81e 	bne	r8,zero,46214 <__alt_data_end+0xfffdf114>
   46234:	010000c4 	movi	r4,3
   46238:	21c02d2e 	bgeu	r4,r7,462f0 <memset+0x100>
   4623c:	29003fcc 	andi	r4,r5,255
   46240:	200c923a 	slli	r6,r4,8
   46244:	3108b03a 	or	r4,r6,r4
   46248:	200c943a 	slli	r6,r4,16
   4624c:	218cb03a 	or	r6,r4,r6
   46250:	010003c4 	movi	r4,15
   46254:	21c0182e 	bgeu	r4,r7,462b8 <memset+0xc8>
   46258:	3b3ffc04 	addi	r12,r7,-16
   4625c:	6018d13a 	srli	r12,r12,4
   46260:	1a000104 	addi	r8,r3,4
   46264:	1ac00204 	addi	r11,r3,8
   46268:	6008913a 	slli	r4,r12,4
   4626c:	1a800304 	addi	r10,r3,12
   46270:	1813883a 	mov	r9,r3
   46274:	21000504 	addi	r4,r4,20
   46278:	1909883a 	add	r4,r3,r4
   4627c:	49800015 	stw	r6,0(r9)
   46280:	41800015 	stw	r6,0(r8)
   46284:	59800015 	stw	r6,0(r11)
   46288:	51800015 	stw	r6,0(r10)
   4628c:	42000404 	addi	r8,r8,16
   46290:	4a400404 	addi	r9,r9,16
   46294:	5ac00404 	addi	r11,r11,16
   46298:	52800404 	addi	r10,r10,16
   4629c:	413ff71e 	bne	r8,r4,4627c <__alt_data_end+0xfffdf17c>
   462a0:	63000044 	addi	r12,r12,1
   462a4:	6018913a 	slli	r12,r12,4
   462a8:	39c003cc 	andi	r7,r7,15
   462ac:	010000c4 	movi	r4,3
   462b0:	1b07883a 	add	r3,r3,r12
   462b4:	21c00e2e 	bgeu	r4,r7,462f0 <memset+0x100>
   462b8:	1813883a 	mov	r9,r3
   462bc:	3811883a 	mov	r8,r7
   462c0:	010000c4 	movi	r4,3
   462c4:	49800015 	stw	r6,0(r9)
   462c8:	423fff04 	addi	r8,r8,-4
   462cc:	4a400104 	addi	r9,r9,4
   462d0:	223ffc36 	bltu	r4,r8,462c4 <__alt_data_end+0xfffdf1c4>
   462d4:	393fff04 	addi	r4,r7,-4
   462d8:	2008d0ba 	srli	r4,r4,2
   462dc:	39c000cc 	andi	r7,r7,3
   462e0:	21000044 	addi	r4,r4,1
   462e4:	2109883a 	add	r4,r4,r4
   462e8:	2109883a 	add	r4,r4,r4
   462ec:	1907883a 	add	r3,r3,r4
   462f0:	38000526 	beq	r7,zero,46308 <memset+0x118>
   462f4:	19cf883a 	add	r7,r3,r7
   462f8:	19400005 	stb	r5,0(r3)
   462fc:	18c00044 	addi	r3,r3,1
   46300:	38fffd1e 	bne	r7,r3,462f8 <__alt_data_end+0xfffdf1f8>
   46304:	f800283a 	ret
   46308:	f800283a 	ret
   4630c:	2007883a 	mov	r3,r4
   46310:	300f883a 	mov	r7,r6
   46314:	003fc706 	br	46234 <__alt_data_end+0xfffdf134>

00046318 <_realloc_r>:
   46318:	defff604 	addi	sp,sp,-40
   4631c:	dc800215 	stw	r18,8(sp)
   46320:	dfc00915 	stw	ra,36(sp)
   46324:	df000815 	stw	fp,32(sp)
   46328:	ddc00715 	stw	r23,28(sp)
   4632c:	dd800615 	stw	r22,24(sp)
   46330:	dd400515 	stw	r21,20(sp)
   46334:	dd000415 	stw	r20,16(sp)
   46338:	dcc00315 	stw	r19,12(sp)
   4633c:	dc400115 	stw	r17,4(sp)
   46340:	dc000015 	stw	r16,0(sp)
   46344:	3025883a 	mov	r18,r6
   46348:	2800b726 	beq	r5,zero,46628 <_realloc_r+0x310>
   4634c:	282b883a 	mov	r21,r5
   46350:	2029883a 	mov	r20,r4
   46354:	0047cec0 	call	47cec <__malloc_lock>
   46358:	a8bfff17 	ldw	r2,-4(r21)
   4635c:	043fff04 	movi	r16,-4
   46360:	90c002c4 	addi	r3,r18,11
   46364:	01000584 	movi	r4,22
   46368:	acfffe04 	addi	r19,r21,-8
   4636c:	1420703a 	and	r16,r2,r16
   46370:	20c0332e 	bgeu	r4,r3,46440 <_realloc_r+0x128>
   46374:	047ffe04 	movi	r17,-8
   46378:	1c62703a 	and	r17,r3,r17
   4637c:	8807883a 	mov	r3,r17
   46380:	88005816 	blt	r17,zero,464e4 <_realloc_r+0x1cc>
   46384:	8c805736 	bltu	r17,r18,464e4 <_realloc_r+0x1cc>
   46388:	80c0300e 	bge	r16,r3,4644c <_realloc_r+0x134>
   4638c:	07000174 	movhi	fp,5
   46390:	e7295904 	addi	fp,fp,-23196
   46394:	e1c00217 	ldw	r7,8(fp)
   46398:	9c09883a 	add	r4,r19,r16
   4639c:	22000117 	ldw	r8,4(r4)
   463a0:	21c06326 	beq	r4,r7,46530 <_realloc_r+0x218>
   463a4:	017fff84 	movi	r5,-2
   463a8:	414a703a 	and	r5,r8,r5
   463ac:	214b883a 	add	r5,r4,r5
   463b0:	29800117 	ldw	r6,4(r5)
   463b4:	3180004c 	andi	r6,r6,1
   463b8:	30003f26 	beq	r6,zero,464b8 <_realloc_r+0x1a0>
   463bc:	1080004c 	andi	r2,r2,1
   463c0:	10008326 	beq	r2,zero,465d0 <_realloc_r+0x2b8>
   463c4:	900b883a 	mov	r5,r18
   463c8:	a009883a 	mov	r4,r20
   463cc:	004565c0 	call	4565c <_malloc_r>
   463d0:	1025883a 	mov	r18,r2
   463d4:	10011e26 	beq	r2,zero,46850 <_realloc_r+0x538>
   463d8:	a93fff17 	ldw	r4,-4(r21)
   463dc:	10fffe04 	addi	r3,r2,-8
   463e0:	00bfff84 	movi	r2,-2
   463e4:	2084703a 	and	r2,r4,r2
   463e8:	9885883a 	add	r2,r19,r2
   463ec:	1880ee26 	beq	r3,r2,467a8 <_realloc_r+0x490>
   463f0:	81bfff04 	addi	r6,r16,-4
   463f4:	00800904 	movi	r2,36
   463f8:	1180b836 	bltu	r2,r6,466dc <_realloc_r+0x3c4>
   463fc:	00c004c4 	movi	r3,19
   46400:	19809636 	bltu	r3,r6,4665c <_realloc_r+0x344>
   46404:	9005883a 	mov	r2,r18
   46408:	a807883a 	mov	r3,r21
   4640c:	19000017 	ldw	r4,0(r3)
   46410:	11000015 	stw	r4,0(r2)
   46414:	19000117 	ldw	r4,4(r3)
   46418:	11000115 	stw	r4,4(r2)
   4641c:	18c00217 	ldw	r3,8(r3)
   46420:	10c00215 	stw	r3,8(r2)
   46424:	a80b883a 	mov	r5,r21
   46428:	a009883a 	mov	r4,r20
   4642c:	00470e40 	call	470e4 <_free_r>
   46430:	a009883a 	mov	r4,r20
   46434:	0047d100 	call	47d10 <__malloc_unlock>
   46438:	9005883a 	mov	r2,r18
   4643c:	00001206 	br	46488 <_realloc_r+0x170>
   46440:	00c00404 	movi	r3,16
   46444:	1823883a 	mov	r17,r3
   46448:	003fce06 	br	46384 <__alt_data_end+0xfffdf284>
   4644c:	a825883a 	mov	r18,r21
   46450:	8445c83a 	sub	r2,r16,r17
   46454:	00c003c4 	movi	r3,15
   46458:	18802636 	bltu	r3,r2,464f4 <_realloc_r+0x1dc>
   4645c:	99800117 	ldw	r6,4(r19)
   46460:	9c07883a 	add	r3,r19,r16
   46464:	3180004c 	andi	r6,r6,1
   46468:	3420b03a 	or	r16,r6,r16
   4646c:	9c000115 	stw	r16,4(r19)
   46470:	18800117 	ldw	r2,4(r3)
   46474:	10800054 	ori	r2,r2,1
   46478:	18800115 	stw	r2,4(r3)
   4647c:	a009883a 	mov	r4,r20
   46480:	0047d100 	call	47d10 <__malloc_unlock>
   46484:	9005883a 	mov	r2,r18
   46488:	dfc00917 	ldw	ra,36(sp)
   4648c:	df000817 	ldw	fp,32(sp)
   46490:	ddc00717 	ldw	r23,28(sp)
   46494:	dd800617 	ldw	r22,24(sp)
   46498:	dd400517 	ldw	r21,20(sp)
   4649c:	dd000417 	ldw	r20,16(sp)
   464a0:	dcc00317 	ldw	r19,12(sp)
   464a4:	dc800217 	ldw	r18,8(sp)
   464a8:	dc400117 	ldw	r17,4(sp)
   464ac:	dc000017 	ldw	r16,0(sp)
   464b0:	dec00a04 	addi	sp,sp,40
   464b4:	f800283a 	ret
   464b8:	017fff04 	movi	r5,-4
   464bc:	414a703a 	and	r5,r8,r5
   464c0:	814d883a 	add	r6,r16,r5
   464c4:	30c01f16 	blt	r6,r3,46544 <_realloc_r+0x22c>
   464c8:	20800317 	ldw	r2,12(r4)
   464cc:	20c00217 	ldw	r3,8(r4)
   464d0:	a825883a 	mov	r18,r21
   464d4:	3021883a 	mov	r16,r6
   464d8:	18800315 	stw	r2,12(r3)
   464dc:	10c00215 	stw	r3,8(r2)
   464e0:	003fdb06 	br	46450 <__alt_data_end+0xfffdf350>
   464e4:	00800304 	movi	r2,12
   464e8:	a0800015 	stw	r2,0(r20)
   464ec:	0005883a 	mov	r2,zero
   464f0:	003fe506 	br	46488 <__alt_data_end+0xfffdf388>
   464f4:	98c00117 	ldw	r3,4(r19)
   464f8:	9c4b883a 	add	r5,r19,r17
   464fc:	11000054 	ori	r4,r2,1
   46500:	18c0004c 	andi	r3,r3,1
   46504:	1c62b03a 	or	r17,r3,r17
   46508:	9c400115 	stw	r17,4(r19)
   4650c:	29000115 	stw	r4,4(r5)
   46510:	2885883a 	add	r2,r5,r2
   46514:	10c00117 	ldw	r3,4(r2)
   46518:	29400204 	addi	r5,r5,8
   4651c:	a009883a 	mov	r4,r20
   46520:	18c00054 	ori	r3,r3,1
   46524:	10c00115 	stw	r3,4(r2)
   46528:	00470e40 	call	470e4 <_free_r>
   4652c:	003fd306 	br	4647c <__alt_data_end+0xfffdf37c>
   46530:	017fff04 	movi	r5,-4
   46534:	414a703a 	and	r5,r8,r5
   46538:	89800404 	addi	r6,r17,16
   4653c:	8151883a 	add	r8,r16,r5
   46540:	4180590e 	bge	r8,r6,466a8 <_realloc_r+0x390>
   46544:	1080004c 	andi	r2,r2,1
   46548:	103f9e1e 	bne	r2,zero,463c4 <__alt_data_end+0xfffdf2c4>
   4654c:	adbffe17 	ldw	r22,-8(r21)
   46550:	00bfff04 	movi	r2,-4
   46554:	9dadc83a 	sub	r22,r19,r22
   46558:	b1800117 	ldw	r6,4(r22)
   4655c:	3084703a 	and	r2,r6,r2
   46560:	20002026 	beq	r4,zero,465e4 <_realloc_r+0x2cc>
   46564:	80af883a 	add	r23,r16,r2
   46568:	b96f883a 	add	r23,r23,r5
   4656c:	21c05f26 	beq	r4,r7,466ec <_realloc_r+0x3d4>
   46570:	b8c01c16 	blt	r23,r3,465e4 <_realloc_r+0x2cc>
   46574:	20800317 	ldw	r2,12(r4)
   46578:	20c00217 	ldw	r3,8(r4)
   4657c:	81bfff04 	addi	r6,r16,-4
   46580:	01000904 	movi	r4,36
   46584:	18800315 	stw	r2,12(r3)
   46588:	10c00215 	stw	r3,8(r2)
   4658c:	b0c00217 	ldw	r3,8(r22)
   46590:	b0800317 	ldw	r2,12(r22)
   46594:	b4800204 	addi	r18,r22,8
   46598:	18800315 	stw	r2,12(r3)
   4659c:	10c00215 	stw	r3,8(r2)
   465a0:	21801b36 	bltu	r4,r6,46610 <_realloc_r+0x2f8>
   465a4:	008004c4 	movi	r2,19
   465a8:	1180352e 	bgeu	r2,r6,46680 <_realloc_r+0x368>
   465ac:	a8800017 	ldw	r2,0(r21)
   465b0:	b0800215 	stw	r2,8(r22)
   465b4:	a8800117 	ldw	r2,4(r21)
   465b8:	b0800315 	stw	r2,12(r22)
   465bc:	008006c4 	movi	r2,27
   465c0:	11807f36 	bltu	r2,r6,467c0 <_realloc_r+0x4a8>
   465c4:	b0800404 	addi	r2,r22,16
   465c8:	ad400204 	addi	r21,r21,8
   465cc:	00002d06 	br	46684 <_realloc_r+0x36c>
   465d0:	adbffe17 	ldw	r22,-8(r21)
   465d4:	00bfff04 	movi	r2,-4
   465d8:	9dadc83a 	sub	r22,r19,r22
   465dc:	b1000117 	ldw	r4,4(r22)
   465e0:	2084703a 	and	r2,r4,r2
   465e4:	b03f7726 	beq	r22,zero,463c4 <__alt_data_end+0xfffdf2c4>
   465e8:	80af883a 	add	r23,r16,r2
   465ec:	b8ff7516 	blt	r23,r3,463c4 <__alt_data_end+0xfffdf2c4>
   465f0:	b0800317 	ldw	r2,12(r22)
   465f4:	b0c00217 	ldw	r3,8(r22)
   465f8:	81bfff04 	addi	r6,r16,-4
   465fc:	01000904 	movi	r4,36
   46600:	18800315 	stw	r2,12(r3)
   46604:	10c00215 	stw	r3,8(r2)
   46608:	b4800204 	addi	r18,r22,8
   4660c:	21bfe52e 	bgeu	r4,r6,465a4 <__alt_data_end+0xfffdf4a4>
   46610:	a80b883a 	mov	r5,r21
   46614:	9009883a 	mov	r4,r18
   46618:	00460940 	call	46094 <memmove>
   4661c:	b821883a 	mov	r16,r23
   46620:	b027883a 	mov	r19,r22
   46624:	003f8a06 	br	46450 <__alt_data_end+0xfffdf350>
   46628:	300b883a 	mov	r5,r6
   4662c:	dfc00917 	ldw	ra,36(sp)
   46630:	df000817 	ldw	fp,32(sp)
   46634:	ddc00717 	ldw	r23,28(sp)
   46638:	dd800617 	ldw	r22,24(sp)
   4663c:	dd400517 	ldw	r21,20(sp)
   46640:	dd000417 	ldw	r20,16(sp)
   46644:	dcc00317 	ldw	r19,12(sp)
   46648:	dc800217 	ldw	r18,8(sp)
   4664c:	dc400117 	ldw	r17,4(sp)
   46650:	dc000017 	ldw	r16,0(sp)
   46654:	dec00a04 	addi	sp,sp,40
   46658:	004565c1 	jmpi	4565c <_malloc_r>
   4665c:	a8c00017 	ldw	r3,0(r21)
   46660:	90c00015 	stw	r3,0(r18)
   46664:	a8c00117 	ldw	r3,4(r21)
   46668:	90c00115 	stw	r3,4(r18)
   4666c:	00c006c4 	movi	r3,27
   46670:	19804536 	bltu	r3,r6,46788 <_realloc_r+0x470>
   46674:	90800204 	addi	r2,r18,8
   46678:	a8c00204 	addi	r3,r21,8
   4667c:	003f6306 	br	4640c <__alt_data_end+0xfffdf30c>
   46680:	9005883a 	mov	r2,r18
   46684:	a8c00017 	ldw	r3,0(r21)
   46688:	b821883a 	mov	r16,r23
   4668c:	b027883a 	mov	r19,r22
   46690:	10c00015 	stw	r3,0(r2)
   46694:	a8c00117 	ldw	r3,4(r21)
   46698:	10c00115 	stw	r3,4(r2)
   4669c:	a8c00217 	ldw	r3,8(r21)
   466a0:	10c00215 	stw	r3,8(r2)
   466a4:	003f6a06 	br	46450 <__alt_data_end+0xfffdf350>
   466a8:	9c67883a 	add	r19,r19,r17
   466ac:	4445c83a 	sub	r2,r8,r17
   466b0:	e4c00215 	stw	r19,8(fp)
   466b4:	10800054 	ori	r2,r2,1
   466b8:	98800115 	stw	r2,4(r19)
   466bc:	a8bfff17 	ldw	r2,-4(r21)
   466c0:	a009883a 	mov	r4,r20
   466c4:	1080004c 	andi	r2,r2,1
   466c8:	1462b03a 	or	r17,r2,r17
   466cc:	ac7fff15 	stw	r17,-4(r21)
   466d0:	0047d100 	call	47d10 <__malloc_unlock>
   466d4:	a805883a 	mov	r2,r21
   466d8:	003f6b06 	br	46488 <__alt_data_end+0xfffdf388>
   466dc:	a80b883a 	mov	r5,r21
   466e0:	9009883a 	mov	r4,r18
   466e4:	00460940 	call	46094 <memmove>
   466e8:	003f4e06 	br	46424 <__alt_data_end+0xfffdf324>
   466ec:	89000404 	addi	r4,r17,16
   466f0:	b93fbc16 	blt	r23,r4,465e4 <__alt_data_end+0xfffdf4e4>
   466f4:	b0800317 	ldw	r2,12(r22)
   466f8:	b0c00217 	ldw	r3,8(r22)
   466fc:	81bfff04 	addi	r6,r16,-4
   46700:	01000904 	movi	r4,36
   46704:	18800315 	stw	r2,12(r3)
   46708:	10c00215 	stw	r3,8(r2)
   4670c:	b4800204 	addi	r18,r22,8
   46710:	21804336 	bltu	r4,r6,46820 <_realloc_r+0x508>
   46714:	008004c4 	movi	r2,19
   46718:	11803f2e 	bgeu	r2,r6,46818 <_realloc_r+0x500>
   4671c:	a8800017 	ldw	r2,0(r21)
   46720:	b0800215 	stw	r2,8(r22)
   46724:	a8800117 	ldw	r2,4(r21)
   46728:	b0800315 	stw	r2,12(r22)
   4672c:	008006c4 	movi	r2,27
   46730:	11803f36 	bltu	r2,r6,46830 <_realloc_r+0x518>
   46734:	b0800404 	addi	r2,r22,16
   46738:	ad400204 	addi	r21,r21,8
   4673c:	a8c00017 	ldw	r3,0(r21)
   46740:	10c00015 	stw	r3,0(r2)
   46744:	a8c00117 	ldw	r3,4(r21)
   46748:	10c00115 	stw	r3,4(r2)
   4674c:	a8c00217 	ldw	r3,8(r21)
   46750:	10c00215 	stw	r3,8(r2)
   46754:	b447883a 	add	r3,r22,r17
   46758:	bc45c83a 	sub	r2,r23,r17
   4675c:	e0c00215 	stw	r3,8(fp)
   46760:	10800054 	ori	r2,r2,1
   46764:	18800115 	stw	r2,4(r3)
   46768:	b0800117 	ldw	r2,4(r22)
   4676c:	a009883a 	mov	r4,r20
   46770:	1080004c 	andi	r2,r2,1
   46774:	1462b03a 	or	r17,r2,r17
   46778:	b4400115 	stw	r17,4(r22)
   4677c:	0047d100 	call	47d10 <__malloc_unlock>
   46780:	9005883a 	mov	r2,r18
   46784:	003f4006 	br	46488 <__alt_data_end+0xfffdf388>
   46788:	a8c00217 	ldw	r3,8(r21)
   4678c:	90c00215 	stw	r3,8(r18)
   46790:	a8c00317 	ldw	r3,12(r21)
   46794:	90c00315 	stw	r3,12(r18)
   46798:	30801126 	beq	r6,r2,467e0 <_realloc_r+0x4c8>
   4679c:	90800404 	addi	r2,r18,16
   467a0:	a8c00404 	addi	r3,r21,16
   467a4:	003f1906 	br	4640c <__alt_data_end+0xfffdf30c>
   467a8:	90ffff17 	ldw	r3,-4(r18)
   467ac:	00bfff04 	movi	r2,-4
   467b0:	a825883a 	mov	r18,r21
   467b4:	1884703a 	and	r2,r3,r2
   467b8:	80a1883a 	add	r16,r16,r2
   467bc:	003f2406 	br	46450 <__alt_data_end+0xfffdf350>
   467c0:	a8800217 	ldw	r2,8(r21)
   467c4:	b0800415 	stw	r2,16(r22)
   467c8:	a8800317 	ldw	r2,12(r21)
   467cc:	b0800515 	stw	r2,20(r22)
   467d0:	31000a26 	beq	r6,r4,467fc <_realloc_r+0x4e4>
   467d4:	b0800604 	addi	r2,r22,24
   467d8:	ad400404 	addi	r21,r21,16
   467dc:	003fa906 	br	46684 <__alt_data_end+0xfffdf584>
   467e0:	a9000417 	ldw	r4,16(r21)
   467e4:	90800604 	addi	r2,r18,24
   467e8:	a8c00604 	addi	r3,r21,24
   467ec:	91000415 	stw	r4,16(r18)
   467f0:	a9000517 	ldw	r4,20(r21)
   467f4:	91000515 	stw	r4,20(r18)
   467f8:	003f0406 	br	4640c <__alt_data_end+0xfffdf30c>
   467fc:	a8c00417 	ldw	r3,16(r21)
   46800:	ad400604 	addi	r21,r21,24
   46804:	b0800804 	addi	r2,r22,32
   46808:	b0c00615 	stw	r3,24(r22)
   4680c:	a8ffff17 	ldw	r3,-4(r21)
   46810:	b0c00715 	stw	r3,28(r22)
   46814:	003f9b06 	br	46684 <__alt_data_end+0xfffdf584>
   46818:	9005883a 	mov	r2,r18
   4681c:	003fc706 	br	4673c <__alt_data_end+0xfffdf63c>
   46820:	a80b883a 	mov	r5,r21
   46824:	9009883a 	mov	r4,r18
   46828:	00460940 	call	46094 <memmove>
   4682c:	003fc906 	br	46754 <__alt_data_end+0xfffdf654>
   46830:	a8800217 	ldw	r2,8(r21)
   46834:	b0800415 	stw	r2,16(r22)
   46838:	a8800317 	ldw	r2,12(r21)
   4683c:	b0800515 	stw	r2,20(r22)
   46840:	31000726 	beq	r6,r4,46860 <_realloc_r+0x548>
   46844:	b0800604 	addi	r2,r22,24
   46848:	ad400404 	addi	r21,r21,16
   4684c:	003fbb06 	br	4673c <__alt_data_end+0xfffdf63c>
   46850:	a009883a 	mov	r4,r20
   46854:	0047d100 	call	47d10 <__malloc_unlock>
   46858:	0005883a 	mov	r2,zero
   4685c:	003f0a06 	br	46488 <__alt_data_end+0xfffdf388>
   46860:	a8c00417 	ldw	r3,16(r21)
   46864:	ad400604 	addi	r21,r21,24
   46868:	b0800804 	addi	r2,r22,32
   4686c:	b0c00615 	stw	r3,24(r22)
   46870:	a8ffff17 	ldw	r3,-4(r21)
   46874:	b0c00715 	stw	r3,28(r22)
   46878:	003fb006 	br	4673c <__alt_data_end+0xfffdf63c>

0004687c <_sbrk_r>:
   4687c:	defffd04 	addi	sp,sp,-12
   46880:	dc000015 	stw	r16,0(sp)
   46884:	04000174 	movhi	r16,5
   46888:	dc400115 	stw	r17,4(sp)
   4688c:	84358b04 	addi	r16,r16,-10708
   46890:	2023883a 	mov	r17,r4
   46894:	2809883a 	mov	r4,r5
   46898:	dfc00215 	stw	ra,8(sp)
   4689c:	80000015 	stw	zero,0(r16)
   468a0:	0047ee40 	call	47ee4 <sbrk>
   468a4:	00ffffc4 	movi	r3,-1
   468a8:	10c00526 	beq	r2,r3,468c0 <_sbrk_r+0x44>
   468ac:	dfc00217 	ldw	ra,8(sp)
   468b0:	dc400117 	ldw	r17,4(sp)
   468b4:	dc000017 	ldw	r16,0(sp)
   468b8:	dec00304 	addi	sp,sp,12
   468bc:	f800283a 	ret
   468c0:	80c00017 	ldw	r3,0(r16)
   468c4:	183ff926 	beq	r3,zero,468ac <__alt_data_end+0xfffdf7ac>
   468c8:	88c00015 	stw	r3,0(r17)
   468cc:	003ff706 	br	468ac <__alt_data_end+0xfffdf7ac>

000468d0 <__sread>:
   468d0:	defffe04 	addi	sp,sp,-8
   468d4:	dc000015 	stw	r16,0(sp)
   468d8:	2821883a 	mov	r16,r5
   468dc:	2940038f 	ldh	r5,14(r5)
   468e0:	dfc00115 	stw	ra,4(sp)
   468e4:	00476100 	call	47610 <_read_r>
   468e8:	10000716 	blt	r2,zero,46908 <__sread+0x38>
   468ec:	80c01417 	ldw	r3,80(r16)
   468f0:	1887883a 	add	r3,r3,r2
   468f4:	80c01415 	stw	r3,80(r16)
   468f8:	dfc00117 	ldw	ra,4(sp)
   468fc:	dc000017 	ldw	r16,0(sp)
   46900:	dec00204 	addi	sp,sp,8
   46904:	f800283a 	ret
   46908:	80c0030b 	ldhu	r3,12(r16)
   4690c:	18fbffcc 	andi	r3,r3,61439
   46910:	80c0030d 	sth	r3,12(r16)
   46914:	dfc00117 	ldw	ra,4(sp)
   46918:	dc000017 	ldw	r16,0(sp)
   4691c:	dec00204 	addi	sp,sp,8
   46920:	f800283a 	ret

00046924 <__seofread>:
   46924:	0005883a 	mov	r2,zero
   46928:	f800283a 	ret

0004692c <__swrite>:
   4692c:	2880030b 	ldhu	r2,12(r5)
   46930:	defffb04 	addi	sp,sp,-20
   46934:	dcc00315 	stw	r19,12(sp)
   46938:	dc800215 	stw	r18,8(sp)
   4693c:	dc400115 	stw	r17,4(sp)
   46940:	dc000015 	stw	r16,0(sp)
   46944:	dfc00415 	stw	ra,16(sp)
   46948:	10c0400c 	andi	r3,r2,256
   4694c:	2821883a 	mov	r16,r5
   46950:	2023883a 	mov	r17,r4
   46954:	3025883a 	mov	r18,r6
   46958:	3827883a 	mov	r19,r7
   4695c:	18000526 	beq	r3,zero,46974 <__swrite+0x48>
   46960:	2940038f 	ldh	r5,14(r5)
   46964:	01c00084 	movi	r7,2
   46968:	000d883a 	mov	r6,zero
   4696c:	00473f40 	call	473f4 <_lseek_r>
   46970:	8080030b 	ldhu	r2,12(r16)
   46974:	8140038f 	ldh	r5,14(r16)
   46978:	10bbffcc 	andi	r2,r2,61439
   4697c:	980f883a 	mov	r7,r19
   46980:	900d883a 	mov	r6,r18
   46984:	8809883a 	mov	r4,r17
   46988:	8080030d 	sth	r2,12(r16)
   4698c:	dfc00417 	ldw	ra,16(sp)
   46990:	dcc00317 	ldw	r19,12(sp)
   46994:	dc800217 	ldw	r18,8(sp)
   46998:	dc400117 	ldw	r17,4(sp)
   4699c:	dc000017 	ldw	r16,0(sp)
   469a0:	dec00504 	addi	sp,sp,20
   469a4:	0046a0c1 	jmpi	46a0c <_write_r>

000469a8 <__sseek>:
   469a8:	defffe04 	addi	sp,sp,-8
   469ac:	dc000015 	stw	r16,0(sp)
   469b0:	2821883a 	mov	r16,r5
   469b4:	2940038f 	ldh	r5,14(r5)
   469b8:	dfc00115 	stw	ra,4(sp)
   469bc:	00473f40 	call	473f4 <_lseek_r>
   469c0:	00ffffc4 	movi	r3,-1
   469c4:	10c00826 	beq	r2,r3,469e8 <__sseek+0x40>
   469c8:	80c0030b 	ldhu	r3,12(r16)
   469cc:	80801415 	stw	r2,80(r16)
   469d0:	18c40014 	ori	r3,r3,4096
   469d4:	80c0030d 	sth	r3,12(r16)
   469d8:	dfc00117 	ldw	ra,4(sp)
   469dc:	dc000017 	ldw	r16,0(sp)
   469e0:	dec00204 	addi	sp,sp,8
   469e4:	f800283a 	ret
   469e8:	80c0030b 	ldhu	r3,12(r16)
   469ec:	18fbffcc 	andi	r3,r3,61439
   469f0:	80c0030d 	sth	r3,12(r16)
   469f4:	dfc00117 	ldw	ra,4(sp)
   469f8:	dc000017 	ldw	r16,0(sp)
   469fc:	dec00204 	addi	sp,sp,8
   46a00:	f800283a 	ret

00046a04 <__sclose>:
   46a04:	2940038f 	ldh	r5,14(r5)
   46a08:	0046bc01 	jmpi	46bc0 <_close_r>

00046a0c <_write_r>:
   46a0c:	defffd04 	addi	sp,sp,-12
   46a10:	2805883a 	mov	r2,r5
   46a14:	dc000015 	stw	r16,0(sp)
   46a18:	04000174 	movhi	r16,5
   46a1c:	dc400115 	stw	r17,4(sp)
   46a20:	300b883a 	mov	r5,r6
   46a24:	84358b04 	addi	r16,r16,-10708
   46a28:	2023883a 	mov	r17,r4
   46a2c:	380d883a 	mov	r6,r7
   46a30:	1009883a 	mov	r4,r2
   46a34:	dfc00215 	stw	ra,8(sp)
   46a38:	80000015 	stw	zero,0(r16)
   46a3c:	00480140 	call	48014 <write>
   46a40:	00ffffc4 	movi	r3,-1
   46a44:	10c00526 	beq	r2,r3,46a5c <_write_r+0x50>
   46a48:	dfc00217 	ldw	ra,8(sp)
   46a4c:	dc400117 	ldw	r17,4(sp)
   46a50:	dc000017 	ldw	r16,0(sp)
   46a54:	dec00304 	addi	sp,sp,12
   46a58:	f800283a 	ret
   46a5c:	80c00017 	ldw	r3,0(r16)
   46a60:	183ff926 	beq	r3,zero,46a48 <__alt_data_end+0xfffdf948>
   46a64:	88c00015 	stw	r3,0(r17)
   46a68:	003ff706 	br	46a48 <__alt_data_end+0xfffdf948>

00046a6c <__swsetup_r>:
   46a6c:	00800174 	movhi	r2,5
   46a70:	defffd04 	addi	sp,sp,-12
   46a74:	10aedf04 	addi	r2,r2,-17540
   46a78:	dc400115 	stw	r17,4(sp)
   46a7c:	2023883a 	mov	r17,r4
   46a80:	11000017 	ldw	r4,0(r2)
   46a84:	dc000015 	stw	r16,0(sp)
   46a88:	dfc00215 	stw	ra,8(sp)
   46a8c:	2821883a 	mov	r16,r5
   46a90:	20000226 	beq	r4,zero,46a9c <__swsetup_r+0x30>
   46a94:	20800e17 	ldw	r2,56(r4)
   46a98:	10003126 	beq	r2,zero,46b60 <__swsetup_r+0xf4>
   46a9c:	8080030b 	ldhu	r2,12(r16)
   46aa0:	10c0020c 	andi	r3,r2,8
   46aa4:	1009883a 	mov	r4,r2
   46aa8:	18000f26 	beq	r3,zero,46ae8 <__swsetup_r+0x7c>
   46aac:	80c00417 	ldw	r3,16(r16)
   46ab0:	18001526 	beq	r3,zero,46b08 <__swsetup_r+0x9c>
   46ab4:	1100004c 	andi	r4,r2,1
   46ab8:	20001c1e 	bne	r4,zero,46b2c <__swsetup_r+0xc0>
   46abc:	1080008c 	andi	r2,r2,2
   46ac0:	1000291e 	bne	r2,zero,46b68 <__swsetup_r+0xfc>
   46ac4:	80800517 	ldw	r2,20(r16)
   46ac8:	80800215 	stw	r2,8(r16)
   46acc:	18001c26 	beq	r3,zero,46b40 <__swsetup_r+0xd4>
   46ad0:	0005883a 	mov	r2,zero
   46ad4:	dfc00217 	ldw	ra,8(sp)
   46ad8:	dc400117 	ldw	r17,4(sp)
   46adc:	dc000017 	ldw	r16,0(sp)
   46ae0:	dec00304 	addi	sp,sp,12
   46ae4:	f800283a 	ret
   46ae8:	2080040c 	andi	r2,r4,16
   46aec:	10002e26 	beq	r2,zero,46ba8 <__swsetup_r+0x13c>
   46af0:	2080010c 	andi	r2,r4,4
   46af4:	10001e1e 	bne	r2,zero,46b70 <__swsetup_r+0x104>
   46af8:	80c00417 	ldw	r3,16(r16)
   46afc:	20800214 	ori	r2,r4,8
   46b00:	8080030d 	sth	r2,12(r16)
   46b04:	183feb1e 	bne	r3,zero,46ab4 <__alt_data_end+0xfffdf9b4>
   46b08:	1100a00c 	andi	r4,r2,640
   46b0c:	01408004 	movi	r5,512
   46b10:	217fe826 	beq	r4,r5,46ab4 <__alt_data_end+0xfffdf9b4>
   46b14:	800b883a 	mov	r5,r16
   46b18:	8809883a 	mov	r4,r17
   46b1c:	00474540 	call	47454 <__smakebuf_r>
   46b20:	8080030b 	ldhu	r2,12(r16)
   46b24:	80c00417 	ldw	r3,16(r16)
   46b28:	003fe206 	br	46ab4 <__alt_data_end+0xfffdf9b4>
   46b2c:	80800517 	ldw	r2,20(r16)
   46b30:	80000215 	stw	zero,8(r16)
   46b34:	0085c83a 	sub	r2,zero,r2
   46b38:	80800615 	stw	r2,24(r16)
   46b3c:	183fe41e 	bne	r3,zero,46ad0 <__alt_data_end+0xfffdf9d0>
   46b40:	80c0030b 	ldhu	r3,12(r16)
   46b44:	0005883a 	mov	r2,zero
   46b48:	1900200c 	andi	r4,r3,128
   46b4c:	203fe126 	beq	r4,zero,46ad4 <__alt_data_end+0xfffdf9d4>
   46b50:	18c01014 	ori	r3,r3,64
   46b54:	80c0030d 	sth	r3,12(r16)
   46b58:	00bfffc4 	movi	r2,-1
   46b5c:	003fdd06 	br	46ad4 <__alt_data_end+0xfffdf9d4>
   46b60:	0044fc80 	call	44fc8 <__sinit>
   46b64:	003fcd06 	br	46a9c <__alt_data_end+0xfffdf99c>
   46b68:	0005883a 	mov	r2,zero
   46b6c:	003fd606 	br	46ac8 <__alt_data_end+0xfffdf9c8>
   46b70:	81400c17 	ldw	r5,48(r16)
   46b74:	28000626 	beq	r5,zero,46b90 <__swsetup_r+0x124>
   46b78:	80801004 	addi	r2,r16,64
   46b7c:	28800326 	beq	r5,r2,46b8c <__swsetup_r+0x120>
   46b80:	8809883a 	mov	r4,r17
   46b84:	00470e40 	call	470e4 <_free_r>
   46b88:	8100030b 	ldhu	r4,12(r16)
   46b8c:	80000c15 	stw	zero,48(r16)
   46b90:	80c00417 	ldw	r3,16(r16)
   46b94:	00bff6c4 	movi	r2,-37
   46b98:	1108703a 	and	r4,r2,r4
   46b9c:	80000115 	stw	zero,4(r16)
   46ba0:	80c00015 	stw	r3,0(r16)
   46ba4:	003fd506 	br	46afc <__alt_data_end+0xfffdf9fc>
   46ba8:	00800244 	movi	r2,9
   46bac:	88800015 	stw	r2,0(r17)
   46bb0:	20801014 	ori	r2,r4,64
   46bb4:	8080030d 	sth	r2,12(r16)
   46bb8:	00bfffc4 	movi	r2,-1
   46bbc:	003fc506 	br	46ad4 <__alt_data_end+0xfffdf9d4>

00046bc0 <_close_r>:
   46bc0:	defffd04 	addi	sp,sp,-12
   46bc4:	dc000015 	stw	r16,0(sp)
   46bc8:	04000174 	movhi	r16,5
   46bcc:	dc400115 	stw	r17,4(sp)
   46bd0:	84358b04 	addi	r16,r16,-10708
   46bd4:	2023883a 	mov	r17,r4
   46bd8:	2809883a 	mov	r4,r5
   46bdc:	dfc00215 	stw	ra,8(sp)
   46be0:	80000015 	stw	zero,0(r16)
   46be4:	00477700 	call	47770 <close>
   46be8:	00ffffc4 	movi	r3,-1
   46bec:	10c00526 	beq	r2,r3,46c04 <_close_r+0x44>
   46bf0:	dfc00217 	ldw	ra,8(sp)
   46bf4:	dc400117 	ldw	r17,4(sp)
   46bf8:	dc000017 	ldw	r16,0(sp)
   46bfc:	dec00304 	addi	sp,sp,12
   46c00:	f800283a 	ret
   46c04:	80c00017 	ldw	r3,0(r16)
   46c08:	183ff926 	beq	r3,zero,46bf0 <__alt_data_end+0xfffdfaf0>
   46c0c:	88c00015 	stw	r3,0(r17)
   46c10:	003ff706 	br	46bf0 <__alt_data_end+0xfffdfaf0>

00046c14 <_fclose_r>:
   46c14:	28003926 	beq	r5,zero,46cfc <_fclose_r+0xe8>
   46c18:	defffc04 	addi	sp,sp,-16
   46c1c:	dc400115 	stw	r17,4(sp)
   46c20:	dc000015 	stw	r16,0(sp)
   46c24:	dfc00315 	stw	ra,12(sp)
   46c28:	dc800215 	stw	r18,8(sp)
   46c2c:	2023883a 	mov	r17,r4
   46c30:	2821883a 	mov	r16,r5
   46c34:	20000226 	beq	r4,zero,46c40 <_fclose_r+0x2c>
   46c38:	20800e17 	ldw	r2,56(r4)
   46c3c:	10002726 	beq	r2,zero,46cdc <_fclose_r+0xc8>
   46c40:	8080030f 	ldh	r2,12(r16)
   46c44:	1000071e 	bne	r2,zero,46c64 <_fclose_r+0x50>
   46c48:	0005883a 	mov	r2,zero
   46c4c:	dfc00317 	ldw	ra,12(sp)
   46c50:	dc800217 	ldw	r18,8(sp)
   46c54:	dc400117 	ldw	r17,4(sp)
   46c58:	dc000017 	ldw	r16,0(sp)
   46c5c:	dec00404 	addi	sp,sp,16
   46c60:	f800283a 	ret
   46c64:	800b883a 	mov	r5,r16
   46c68:	8809883a 	mov	r4,r17
   46c6c:	0046d180 	call	46d18 <__sflush_r>
   46c70:	1025883a 	mov	r18,r2
   46c74:	80800b17 	ldw	r2,44(r16)
   46c78:	10000426 	beq	r2,zero,46c8c <_fclose_r+0x78>
   46c7c:	81400717 	ldw	r5,28(r16)
   46c80:	8809883a 	mov	r4,r17
   46c84:	103ee83a 	callr	r2
   46c88:	10001616 	blt	r2,zero,46ce4 <_fclose_r+0xd0>
   46c8c:	8080030b 	ldhu	r2,12(r16)
   46c90:	1080200c 	andi	r2,r2,128
   46c94:	1000151e 	bne	r2,zero,46cec <_fclose_r+0xd8>
   46c98:	81400c17 	ldw	r5,48(r16)
   46c9c:	28000526 	beq	r5,zero,46cb4 <_fclose_r+0xa0>
   46ca0:	80801004 	addi	r2,r16,64
   46ca4:	28800226 	beq	r5,r2,46cb0 <_fclose_r+0x9c>
   46ca8:	8809883a 	mov	r4,r17
   46cac:	00470e40 	call	470e4 <_free_r>
   46cb0:	80000c15 	stw	zero,48(r16)
   46cb4:	81401117 	ldw	r5,68(r16)
   46cb8:	28000326 	beq	r5,zero,46cc8 <_fclose_r+0xb4>
   46cbc:	8809883a 	mov	r4,r17
   46cc0:	00470e40 	call	470e4 <_free_r>
   46cc4:	80001115 	stw	zero,68(r16)
   46cc8:	0044fd80 	call	44fd8 <__sfp_lock_acquire>
   46ccc:	8000030d 	sth	zero,12(r16)
   46cd0:	0044fdc0 	call	44fdc <__sfp_lock_release>
   46cd4:	9005883a 	mov	r2,r18
   46cd8:	003fdc06 	br	46c4c <__alt_data_end+0xfffdfb4c>
   46cdc:	0044fc80 	call	44fc8 <__sinit>
   46ce0:	003fd706 	br	46c40 <__alt_data_end+0xfffdfb40>
   46ce4:	04bfffc4 	movi	r18,-1
   46ce8:	003fe806 	br	46c8c <__alt_data_end+0xfffdfb8c>
   46cec:	81400417 	ldw	r5,16(r16)
   46cf0:	8809883a 	mov	r4,r17
   46cf4:	00470e40 	call	470e4 <_free_r>
   46cf8:	003fe706 	br	46c98 <__alt_data_end+0xfffdfb98>
   46cfc:	0005883a 	mov	r2,zero
   46d00:	f800283a 	ret

00046d04 <fclose>:
   46d04:	00800174 	movhi	r2,5
   46d08:	10aedf04 	addi	r2,r2,-17540
   46d0c:	200b883a 	mov	r5,r4
   46d10:	11000017 	ldw	r4,0(r2)
   46d14:	0046c141 	jmpi	46c14 <_fclose_r>

00046d18 <__sflush_r>:
   46d18:	2880030b 	ldhu	r2,12(r5)
   46d1c:	defffb04 	addi	sp,sp,-20
   46d20:	dcc00315 	stw	r19,12(sp)
   46d24:	dc400115 	stw	r17,4(sp)
   46d28:	dfc00415 	stw	ra,16(sp)
   46d2c:	dc800215 	stw	r18,8(sp)
   46d30:	dc000015 	stw	r16,0(sp)
   46d34:	10c0020c 	andi	r3,r2,8
   46d38:	2823883a 	mov	r17,r5
   46d3c:	2027883a 	mov	r19,r4
   46d40:	1800311e 	bne	r3,zero,46e08 <__sflush_r+0xf0>
   46d44:	28c00117 	ldw	r3,4(r5)
   46d48:	10820014 	ori	r2,r2,2048
   46d4c:	2880030d 	sth	r2,12(r5)
   46d50:	00c04b0e 	bge	zero,r3,46e80 <__sflush_r+0x168>
   46d54:	8a000a17 	ldw	r8,40(r17)
   46d58:	40002326 	beq	r8,zero,46de8 <__sflush_r+0xd0>
   46d5c:	9c000017 	ldw	r16,0(r19)
   46d60:	10c4000c 	andi	r3,r2,4096
   46d64:	98000015 	stw	zero,0(r19)
   46d68:	18004826 	beq	r3,zero,46e8c <__sflush_r+0x174>
   46d6c:	89801417 	ldw	r6,80(r17)
   46d70:	10c0010c 	andi	r3,r2,4
   46d74:	18000626 	beq	r3,zero,46d90 <__sflush_r+0x78>
   46d78:	88c00117 	ldw	r3,4(r17)
   46d7c:	88800c17 	ldw	r2,48(r17)
   46d80:	30cdc83a 	sub	r6,r6,r3
   46d84:	10000226 	beq	r2,zero,46d90 <__sflush_r+0x78>
   46d88:	88800f17 	ldw	r2,60(r17)
   46d8c:	308dc83a 	sub	r6,r6,r2
   46d90:	89400717 	ldw	r5,28(r17)
   46d94:	000f883a 	mov	r7,zero
   46d98:	9809883a 	mov	r4,r19
   46d9c:	403ee83a 	callr	r8
   46da0:	00ffffc4 	movi	r3,-1
   46da4:	10c04426 	beq	r2,r3,46eb8 <__sflush_r+0x1a0>
   46da8:	88c0030b 	ldhu	r3,12(r17)
   46dac:	89000417 	ldw	r4,16(r17)
   46db0:	88000115 	stw	zero,4(r17)
   46db4:	197dffcc 	andi	r5,r3,63487
   46db8:	8940030d 	sth	r5,12(r17)
   46dbc:	89000015 	stw	r4,0(r17)
   46dc0:	18c4000c 	andi	r3,r3,4096
   46dc4:	18002c1e 	bne	r3,zero,46e78 <__sflush_r+0x160>
   46dc8:	89400c17 	ldw	r5,48(r17)
   46dcc:	9c000015 	stw	r16,0(r19)
   46dd0:	28000526 	beq	r5,zero,46de8 <__sflush_r+0xd0>
   46dd4:	88801004 	addi	r2,r17,64
   46dd8:	28800226 	beq	r5,r2,46de4 <__sflush_r+0xcc>
   46ddc:	9809883a 	mov	r4,r19
   46de0:	00470e40 	call	470e4 <_free_r>
   46de4:	88000c15 	stw	zero,48(r17)
   46de8:	0005883a 	mov	r2,zero
   46dec:	dfc00417 	ldw	ra,16(sp)
   46df0:	dcc00317 	ldw	r19,12(sp)
   46df4:	dc800217 	ldw	r18,8(sp)
   46df8:	dc400117 	ldw	r17,4(sp)
   46dfc:	dc000017 	ldw	r16,0(sp)
   46e00:	dec00504 	addi	sp,sp,20
   46e04:	f800283a 	ret
   46e08:	2c800417 	ldw	r18,16(r5)
   46e0c:	903ff626 	beq	r18,zero,46de8 <__alt_data_end+0xfffdfce8>
   46e10:	2c000017 	ldw	r16,0(r5)
   46e14:	108000cc 	andi	r2,r2,3
   46e18:	2c800015 	stw	r18,0(r5)
   46e1c:	84a1c83a 	sub	r16,r16,r18
   46e20:	1000131e 	bne	r2,zero,46e70 <__sflush_r+0x158>
   46e24:	28800517 	ldw	r2,20(r5)
   46e28:	88800215 	stw	r2,8(r17)
   46e2c:	04000316 	blt	zero,r16,46e3c <__sflush_r+0x124>
   46e30:	003fed06 	br	46de8 <__alt_data_end+0xfffdfce8>
   46e34:	90a5883a 	add	r18,r18,r2
   46e38:	043feb0e 	bge	zero,r16,46de8 <__alt_data_end+0xfffdfce8>
   46e3c:	88800917 	ldw	r2,36(r17)
   46e40:	89400717 	ldw	r5,28(r17)
   46e44:	800f883a 	mov	r7,r16
   46e48:	900d883a 	mov	r6,r18
   46e4c:	9809883a 	mov	r4,r19
   46e50:	103ee83a 	callr	r2
   46e54:	80a1c83a 	sub	r16,r16,r2
   46e58:	00bff616 	blt	zero,r2,46e34 <__alt_data_end+0xfffdfd34>
   46e5c:	88c0030b 	ldhu	r3,12(r17)
   46e60:	00bfffc4 	movi	r2,-1
   46e64:	18c01014 	ori	r3,r3,64
   46e68:	88c0030d 	sth	r3,12(r17)
   46e6c:	003fdf06 	br	46dec <__alt_data_end+0xfffdfcec>
   46e70:	0005883a 	mov	r2,zero
   46e74:	003fec06 	br	46e28 <__alt_data_end+0xfffdfd28>
   46e78:	88801415 	stw	r2,80(r17)
   46e7c:	003fd206 	br	46dc8 <__alt_data_end+0xfffdfcc8>
   46e80:	28c00f17 	ldw	r3,60(r5)
   46e84:	00ffb316 	blt	zero,r3,46d54 <__alt_data_end+0xfffdfc54>
   46e88:	003fd706 	br	46de8 <__alt_data_end+0xfffdfce8>
   46e8c:	89400717 	ldw	r5,28(r17)
   46e90:	000d883a 	mov	r6,zero
   46e94:	01c00044 	movi	r7,1
   46e98:	9809883a 	mov	r4,r19
   46e9c:	403ee83a 	callr	r8
   46ea0:	100d883a 	mov	r6,r2
   46ea4:	00bfffc4 	movi	r2,-1
   46ea8:	30801426 	beq	r6,r2,46efc <__sflush_r+0x1e4>
   46eac:	8880030b 	ldhu	r2,12(r17)
   46eb0:	8a000a17 	ldw	r8,40(r17)
   46eb4:	003fae06 	br	46d70 <__alt_data_end+0xfffdfc70>
   46eb8:	98c00017 	ldw	r3,0(r19)
   46ebc:	183fba26 	beq	r3,zero,46da8 <__alt_data_end+0xfffdfca8>
   46ec0:	01000744 	movi	r4,29
   46ec4:	19000626 	beq	r3,r4,46ee0 <__sflush_r+0x1c8>
   46ec8:	01000584 	movi	r4,22
   46ecc:	19000426 	beq	r3,r4,46ee0 <__sflush_r+0x1c8>
   46ed0:	88c0030b 	ldhu	r3,12(r17)
   46ed4:	18c01014 	ori	r3,r3,64
   46ed8:	88c0030d 	sth	r3,12(r17)
   46edc:	003fc306 	br	46dec <__alt_data_end+0xfffdfcec>
   46ee0:	8880030b 	ldhu	r2,12(r17)
   46ee4:	88c00417 	ldw	r3,16(r17)
   46ee8:	88000115 	stw	zero,4(r17)
   46eec:	10bdffcc 	andi	r2,r2,63487
   46ef0:	8880030d 	sth	r2,12(r17)
   46ef4:	88c00015 	stw	r3,0(r17)
   46ef8:	003fb306 	br	46dc8 <__alt_data_end+0xfffdfcc8>
   46efc:	98800017 	ldw	r2,0(r19)
   46f00:	103fea26 	beq	r2,zero,46eac <__alt_data_end+0xfffdfdac>
   46f04:	00c00744 	movi	r3,29
   46f08:	10c00226 	beq	r2,r3,46f14 <__sflush_r+0x1fc>
   46f0c:	00c00584 	movi	r3,22
   46f10:	10c0031e 	bne	r2,r3,46f20 <__sflush_r+0x208>
   46f14:	9c000015 	stw	r16,0(r19)
   46f18:	0005883a 	mov	r2,zero
   46f1c:	003fb306 	br	46dec <__alt_data_end+0xfffdfcec>
   46f20:	88c0030b 	ldhu	r3,12(r17)
   46f24:	3005883a 	mov	r2,r6
   46f28:	18c01014 	ori	r3,r3,64
   46f2c:	88c0030d 	sth	r3,12(r17)
   46f30:	003fae06 	br	46dec <__alt_data_end+0xfffdfcec>

00046f34 <_fflush_r>:
   46f34:	defffd04 	addi	sp,sp,-12
   46f38:	dc000115 	stw	r16,4(sp)
   46f3c:	dfc00215 	stw	ra,8(sp)
   46f40:	2021883a 	mov	r16,r4
   46f44:	20000226 	beq	r4,zero,46f50 <_fflush_r+0x1c>
   46f48:	20800e17 	ldw	r2,56(r4)
   46f4c:	10000c26 	beq	r2,zero,46f80 <_fflush_r+0x4c>
   46f50:	2880030f 	ldh	r2,12(r5)
   46f54:	1000051e 	bne	r2,zero,46f6c <_fflush_r+0x38>
   46f58:	0005883a 	mov	r2,zero
   46f5c:	dfc00217 	ldw	ra,8(sp)
   46f60:	dc000117 	ldw	r16,4(sp)
   46f64:	dec00304 	addi	sp,sp,12
   46f68:	f800283a 	ret
   46f6c:	8009883a 	mov	r4,r16
   46f70:	dfc00217 	ldw	ra,8(sp)
   46f74:	dc000117 	ldw	r16,4(sp)
   46f78:	dec00304 	addi	sp,sp,12
   46f7c:	0046d181 	jmpi	46d18 <__sflush_r>
   46f80:	d9400015 	stw	r5,0(sp)
   46f84:	0044fc80 	call	44fc8 <__sinit>
   46f88:	d9400017 	ldw	r5,0(sp)
   46f8c:	003ff006 	br	46f50 <__alt_data_end+0xfffdfe50>

00046f90 <fflush>:
   46f90:	20000526 	beq	r4,zero,46fa8 <fflush+0x18>
   46f94:	00800174 	movhi	r2,5
   46f98:	10aedf04 	addi	r2,r2,-17540
   46f9c:	200b883a 	mov	r5,r4
   46fa0:	11000017 	ldw	r4,0(r2)
   46fa4:	0046f341 	jmpi	46f34 <_fflush_r>
   46fa8:	00800174 	movhi	r2,5
   46fac:	10aede04 	addi	r2,r2,-17544
   46fb0:	11000017 	ldw	r4,0(r2)
   46fb4:	01400134 	movhi	r5,4
   46fb8:	295bcd04 	addi	r5,r5,28468
   46fbc:	00455981 	jmpi	45598 <_fwalk_reent>

00046fc0 <_malloc_trim_r>:
   46fc0:	defffb04 	addi	sp,sp,-20
   46fc4:	dcc00315 	stw	r19,12(sp)
   46fc8:	04c00174 	movhi	r19,5
   46fcc:	dc800215 	stw	r18,8(sp)
   46fd0:	dc400115 	stw	r17,4(sp)
   46fd4:	dc000015 	stw	r16,0(sp)
   46fd8:	dfc00415 	stw	ra,16(sp)
   46fdc:	2821883a 	mov	r16,r5
   46fe0:	9ce95904 	addi	r19,r19,-23196
   46fe4:	2025883a 	mov	r18,r4
   46fe8:	0047cec0 	call	47cec <__malloc_lock>
   46fec:	98800217 	ldw	r2,8(r19)
   46ff0:	14400117 	ldw	r17,4(r2)
   46ff4:	00bfff04 	movi	r2,-4
   46ff8:	88a2703a 	and	r17,r17,r2
   46ffc:	8c21c83a 	sub	r16,r17,r16
   47000:	8403fbc4 	addi	r16,r16,4079
   47004:	8020d33a 	srli	r16,r16,12
   47008:	0083ffc4 	movi	r2,4095
   4700c:	843fffc4 	addi	r16,r16,-1
   47010:	8020933a 	slli	r16,r16,12
   47014:	1400060e 	bge	r2,r16,47030 <_malloc_trim_r+0x70>
   47018:	000b883a 	mov	r5,zero
   4701c:	9009883a 	mov	r4,r18
   47020:	004687c0 	call	4687c <_sbrk_r>
   47024:	98c00217 	ldw	r3,8(r19)
   47028:	1c47883a 	add	r3,r3,r17
   4702c:	10c00a26 	beq	r2,r3,47058 <_malloc_trim_r+0x98>
   47030:	9009883a 	mov	r4,r18
   47034:	0047d100 	call	47d10 <__malloc_unlock>
   47038:	0005883a 	mov	r2,zero
   4703c:	dfc00417 	ldw	ra,16(sp)
   47040:	dcc00317 	ldw	r19,12(sp)
   47044:	dc800217 	ldw	r18,8(sp)
   47048:	dc400117 	ldw	r17,4(sp)
   4704c:	dc000017 	ldw	r16,0(sp)
   47050:	dec00504 	addi	sp,sp,20
   47054:	f800283a 	ret
   47058:	040bc83a 	sub	r5,zero,r16
   4705c:	9009883a 	mov	r4,r18
   47060:	004687c0 	call	4687c <_sbrk_r>
   47064:	00ffffc4 	movi	r3,-1
   47068:	10c00d26 	beq	r2,r3,470a0 <_malloc_trim_r+0xe0>
   4706c:	00c00174 	movhi	r3,5
   47070:	18f59204 	addi	r3,r3,-10680
   47074:	18800017 	ldw	r2,0(r3)
   47078:	99000217 	ldw	r4,8(r19)
   4707c:	8c23c83a 	sub	r17,r17,r16
   47080:	8c400054 	ori	r17,r17,1
   47084:	1421c83a 	sub	r16,r2,r16
   47088:	24400115 	stw	r17,4(r4)
   4708c:	9009883a 	mov	r4,r18
   47090:	1c000015 	stw	r16,0(r3)
   47094:	0047d100 	call	47d10 <__malloc_unlock>
   47098:	00800044 	movi	r2,1
   4709c:	003fe706 	br	4703c <__alt_data_end+0xfffdff3c>
   470a0:	000b883a 	mov	r5,zero
   470a4:	9009883a 	mov	r4,r18
   470a8:	004687c0 	call	4687c <_sbrk_r>
   470ac:	99000217 	ldw	r4,8(r19)
   470b0:	014003c4 	movi	r5,15
   470b4:	1107c83a 	sub	r3,r2,r4
   470b8:	28ffdd0e 	bge	r5,r3,47030 <__alt_data_end+0xfffdff30>
   470bc:	01400174 	movhi	r5,5
   470c0:	296ee004 	addi	r5,r5,-17536
   470c4:	29400017 	ldw	r5,0(r5)
   470c8:	18c00054 	ori	r3,r3,1
   470cc:	20c00115 	stw	r3,4(r4)
   470d0:	00c00174 	movhi	r3,5
   470d4:	1145c83a 	sub	r2,r2,r5
   470d8:	18f59204 	addi	r3,r3,-10680
   470dc:	18800015 	stw	r2,0(r3)
   470e0:	003fd306 	br	47030 <__alt_data_end+0xfffdff30>

000470e4 <_free_r>:
   470e4:	28004126 	beq	r5,zero,471ec <_free_r+0x108>
   470e8:	defffd04 	addi	sp,sp,-12
   470ec:	dc400115 	stw	r17,4(sp)
   470f0:	dc000015 	stw	r16,0(sp)
   470f4:	2023883a 	mov	r17,r4
   470f8:	2821883a 	mov	r16,r5
   470fc:	dfc00215 	stw	ra,8(sp)
   47100:	0047cec0 	call	47cec <__malloc_lock>
   47104:	81ffff17 	ldw	r7,-4(r16)
   47108:	00bfff84 	movi	r2,-2
   4710c:	01000174 	movhi	r4,5
   47110:	81bffe04 	addi	r6,r16,-8
   47114:	3884703a 	and	r2,r7,r2
   47118:	21295904 	addi	r4,r4,-23196
   4711c:	308b883a 	add	r5,r6,r2
   47120:	2a400117 	ldw	r9,4(r5)
   47124:	22000217 	ldw	r8,8(r4)
   47128:	00ffff04 	movi	r3,-4
   4712c:	48c6703a 	and	r3,r9,r3
   47130:	2a005726 	beq	r5,r8,47290 <_free_r+0x1ac>
   47134:	28c00115 	stw	r3,4(r5)
   47138:	39c0004c 	andi	r7,r7,1
   4713c:	3800091e 	bne	r7,zero,47164 <_free_r+0x80>
   47140:	823ffe17 	ldw	r8,-8(r16)
   47144:	22400204 	addi	r9,r4,8
   47148:	320dc83a 	sub	r6,r6,r8
   4714c:	31c00217 	ldw	r7,8(r6)
   47150:	1205883a 	add	r2,r2,r8
   47154:	3a406526 	beq	r7,r9,472ec <_free_r+0x208>
   47158:	32000317 	ldw	r8,12(r6)
   4715c:	3a000315 	stw	r8,12(r7)
   47160:	41c00215 	stw	r7,8(r8)
   47164:	28cf883a 	add	r7,r5,r3
   47168:	39c00117 	ldw	r7,4(r7)
   4716c:	39c0004c 	andi	r7,r7,1
   47170:	38003a26 	beq	r7,zero,4725c <_free_r+0x178>
   47174:	10c00054 	ori	r3,r2,1
   47178:	30c00115 	stw	r3,4(r6)
   4717c:	3087883a 	add	r3,r6,r2
   47180:	18800015 	stw	r2,0(r3)
   47184:	00c07fc4 	movi	r3,511
   47188:	18801936 	bltu	r3,r2,471f0 <_free_r+0x10c>
   4718c:	1004d0fa 	srli	r2,r2,3
   47190:	01c00044 	movi	r7,1
   47194:	21400117 	ldw	r5,4(r4)
   47198:	10c00044 	addi	r3,r2,1
   4719c:	18c7883a 	add	r3,r3,r3
   471a0:	1005d0ba 	srai	r2,r2,2
   471a4:	18c7883a 	add	r3,r3,r3
   471a8:	18c7883a 	add	r3,r3,r3
   471ac:	1907883a 	add	r3,r3,r4
   471b0:	3884983a 	sll	r2,r7,r2
   471b4:	19c00017 	ldw	r7,0(r3)
   471b8:	1a3ffe04 	addi	r8,r3,-8
   471bc:	1144b03a 	or	r2,r2,r5
   471c0:	32000315 	stw	r8,12(r6)
   471c4:	31c00215 	stw	r7,8(r6)
   471c8:	20800115 	stw	r2,4(r4)
   471cc:	19800015 	stw	r6,0(r3)
   471d0:	39800315 	stw	r6,12(r7)
   471d4:	8809883a 	mov	r4,r17
   471d8:	dfc00217 	ldw	ra,8(sp)
   471dc:	dc400117 	ldw	r17,4(sp)
   471e0:	dc000017 	ldw	r16,0(sp)
   471e4:	dec00304 	addi	sp,sp,12
   471e8:	0047d101 	jmpi	47d10 <__malloc_unlock>
   471ec:	f800283a 	ret
   471f0:	100ad27a 	srli	r5,r2,9
   471f4:	00c00104 	movi	r3,4
   471f8:	19404a36 	bltu	r3,r5,47324 <_free_r+0x240>
   471fc:	100ad1ba 	srli	r5,r2,6
   47200:	28c00e44 	addi	r3,r5,57
   47204:	18c7883a 	add	r3,r3,r3
   47208:	29400e04 	addi	r5,r5,56
   4720c:	18c7883a 	add	r3,r3,r3
   47210:	18c7883a 	add	r3,r3,r3
   47214:	1909883a 	add	r4,r3,r4
   47218:	20c00017 	ldw	r3,0(r4)
   4721c:	01c00174 	movhi	r7,5
   47220:	213ffe04 	addi	r4,r4,-8
   47224:	39e95904 	addi	r7,r7,-23196
   47228:	20c04426 	beq	r4,r3,4733c <_free_r+0x258>
   4722c:	01ffff04 	movi	r7,-4
   47230:	19400117 	ldw	r5,4(r3)
   47234:	29ca703a 	and	r5,r5,r7
   47238:	1140022e 	bgeu	r2,r5,47244 <_free_r+0x160>
   4723c:	18c00217 	ldw	r3,8(r3)
   47240:	20fffb1e 	bne	r4,r3,47230 <__alt_data_end+0xfffe0130>
   47244:	19000317 	ldw	r4,12(r3)
   47248:	31000315 	stw	r4,12(r6)
   4724c:	30c00215 	stw	r3,8(r6)
   47250:	21800215 	stw	r6,8(r4)
   47254:	19800315 	stw	r6,12(r3)
   47258:	003fde06 	br	471d4 <__alt_data_end+0xfffe00d4>
   4725c:	29c00217 	ldw	r7,8(r5)
   47260:	10c5883a 	add	r2,r2,r3
   47264:	00c00174 	movhi	r3,5
   47268:	18e95b04 	addi	r3,r3,-23188
   4726c:	38c03b26 	beq	r7,r3,4735c <_free_r+0x278>
   47270:	2a000317 	ldw	r8,12(r5)
   47274:	11400054 	ori	r5,r2,1
   47278:	3087883a 	add	r3,r6,r2
   4727c:	3a000315 	stw	r8,12(r7)
   47280:	41c00215 	stw	r7,8(r8)
   47284:	31400115 	stw	r5,4(r6)
   47288:	18800015 	stw	r2,0(r3)
   4728c:	003fbd06 	br	47184 <__alt_data_end+0xfffe0084>
   47290:	39c0004c 	andi	r7,r7,1
   47294:	10c5883a 	add	r2,r2,r3
   47298:	3800071e 	bne	r7,zero,472b8 <_free_r+0x1d4>
   4729c:	81fffe17 	ldw	r7,-8(r16)
   472a0:	31cdc83a 	sub	r6,r6,r7
   472a4:	30c00317 	ldw	r3,12(r6)
   472a8:	31400217 	ldw	r5,8(r6)
   472ac:	11c5883a 	add	r2,r2,r7
   472b0:	28c00315 	stw	r3,12(r5)
   472b4:	19400215 	stw	r5,8(r3)
   472b8:	10c00054 	ori	r3,r2,1
   472bc:	30c00115 	stw	r3,4(r6)
   472c0:	00c00174 	movhi	r3,5
   472c4:	18eee104 	addi	r3,r3,-17532
   472c8:	18c00017 	ldw	r3,0(r3)
   472cc:	21800215 	stw	r6,8(r4)
   472d0:	10ffc036 	bltu	r2,r3,471d4 <__alt_data_end+0xfffe00d4>
   472d4:	00800174 	movhi	r2,5
   472d8:	10b58a04 	addi	r2,r2,-10712
   472dc:	11400017 	ldw	r5,0(r2)
   472e0:	8809883a 	mov	r4,r17
   472e4:	0046fc00 	call	46fc0 <_malloc_trim_r>
   472e8:	003fba06 	br	471d4 <__alt_data_end+0xfffe00d4>
   472ec:	28c9883a 	add	r4,r5,r3
   472f0:	21000117 	ldw	r4,4(r4)
   472f4:	2100004c 	andi	r4,r4,1
   472f8:	2000391e 	bne	r4,zero,473e0 <_free_r+0x2fc>
   472fc:	29c00217 	ldw	r7,8(r5)
   47300:	29000317 	ldw	r4,12(r5)
   47304:	1885883a 	add	r2,r3,r2
   47308:	10c00054 	ori	r3,r2,1
   4730c:	39000315 	stw	r4,12(r7)
   47310:	21c00215 	stw	r7,8(r4)
   47314:	30c00115 	stw	r3,4(r6)
   47318:	308d883a 	add	r6,r6,r2
   4731c:	30800015 	stw	r2,0(r6)
   47320:	003fac06 	br	471d4 <__alt_data_end+0xfffe00d4>
   47324:	00c00504 	movi	r3,20
   47328:	19401536 	bltu	r3,r5,47380 <_free_r+0x29c>
   4732c:	28c01704 	addi	r3,r5,92
   47330:	18c7883a 	add	r3,r3,r3
   47334:	294016c4 	addi	r5,r5,91
   47338:	003fb406 	br	4720c <__alt_data_end+0xfffe010c>
   4733c:	280bd0ba 	srai	r5,r5,2
   47340:	00c00044 	movi	r3,1
   47344:	38800117 	ldw	r2,4(r7)
   47348:	194a983a 	sll	r5,r3,r5
   4734c:	2007883a 	mov	r3,r4
   47350:	2884b03a 	or	r2,r5,r2
   47354:	38800115 	stw	r2,4(r7)
   47358:	003fbb06 	br	47248 <__alt_data_end+0xfffe0148>
   4735c:	21800515 	stw	r6,20(r4)
   47360:	21800415 	stw	r6,16(r4)
   47364:	10c00054 	ori	r3,r2,1
   47368:	31c00315 	stw	r7,12(r6)
   4736c:	31c00215 	stw	r7,8(r6)
   47370:	30c00115 	stw	r3,4(r6)
   47374:	308d883a 	add	r6,r6,r2
   47378:	30800015 	stw	r2,0(r6)
   4737c:	003f9506 	br	471d4 <__alt_data_end+0xfffe00d4>
   47380:	00c01504 	movi	r3,84
   47384:	19400536 	bltu	r3,r5,4739c <_free_r+0x2b8>
   47388:	100ad33a 	srli	r5,r2,12
   4738c:	28c01bc4 	addi	r3,r5,111
   47390:	18c7883a 	add	r3,r3,r3
   47394:	29401b84 	addi	r5,r5,110
   47398:	003f9c06 	br	4720c <__alt_data_end+0xfffe010c>
   4739c:	00c05504 	movi	r3,340
   473a0:	19400536 	bltu	r3,r5,473b8 <_free_r+0x2d4>
   473a4:	100ad3fa 	srli	r5,r2,15
   473a8:	28c01e04 	addi	r3,r5,120
   473ac:	18c7883a 	add	r3,r3,r3
   473b0:	29401dc4 	addi	r5,r5,119
   473b4:	003f9506 	br	4720c <__alt_data_end+0xfffe010c>
   473b8:	00c15504 	movi	r3,1364
   473bc:	19400536 	bltu	r3,r5,473d4 <_free_r+0x2f0>
   473c0:	100ad4ba 	srli	r5,r2,18
   473c4:	28c01f44 	addi	r3,r5,125
   473c8:	18c7883a 	add	r3,r3,r3
   473cc:	29401f04 	addi	r5,r5,124
   473d0:	003f8e06 	br	4720c <__alt_data_end+0xfffe010c>
   473d4:	00c03f84 	movi	r3,254
   473d8:	01401f84 	movi	r5,126
   473dc:	003f8b06 	br	4720c <__alt_data_end+0xfffe010c>
   473e0:	10c00054 	ori	r3,r2,1
   473e4:	30c00115 	stw	r3,4(r6)
   473e8:	308d883a 	add	r6,r6,r2
   473ec:	30800015 	stw	r2,0(r6)
   473f0:	003f7806 	br	471d4 <__alt_data_end+0xfffe00d4>

000473f4 <_lseek_r>:
   473f4:	defffd04 	addi	sp,sp,-12
   473f8:	2805883a 	mov	r2,r5
   473fc:	dc000015 	stw	r16,0(sp)
   47400:	04000174 	movhi	r16,5
   47404:	dc400115 	stw	r17,4(sp)
   47408:	300b883a 	mov	r5,r6
   4740c:	84358b04 	addi	r16,r16,-10708
   47410:	2023883a 	mov	r17,r4
   47414:	380d883a 	mov	r6,r7
   47418:	1009883a 	mov	r4,r2
   4741c:	dfc00215 	stw	ra,8(sp)
   47420:	80000015 	stw	zero,0(r16)
   47424:	0047b9c0 	call	47b9c <lseek>
   47428:	00ffffc4 	movi	r3,-1
   4742c:	10c00526 	beq	r2,r3,47444 <_lseek_r+0x50>
   47430:	dfc00217 	ldw	ra,8(sp)
   47434:	dc400117 	ldw	r17,4(sp)
   47438:	dc000017 	ldw	r16,0(sp)
   4743c:	dec00304 	addi	sp,sp,12
   47440:	f800283a 	ret
   47444:	80c00017 	ldw	r3,0(r16)
   47448:	183ff926 	beq	r3,zero,47430 <__alt_data_end+0xfffe0330>
   4744c:	88c00015 	stw	r3,0(r17)
   47450:	003ff706 	br	47430 <__alt_data_end+0xfffe0330>

00047454 <__smakebuf_r>:
   47454:	2880030b 	ldhu	r2,12(r5)
   47458:	10c0008c 	andi	r3,r2,2
   4745c:	1800411e 	bne	r3,zero,47564 <__smakebuf_r+0x110>
   47460:	deffec04 	addi	sp,sp,-80
   47464:	dc000f15 	stw	r16,60(sp)
   47468:	2821883a 	mov	r16,r5
   4746c:	2940038f 	ldh	r5,14(r5)
   47470:	dc401015 	stw	r17,64(sp)
   47474:	dfc01315 	stw	ra,76(sp)
   47478:	dcc01215 	stw	r19,72(sp)
   4747c:	dc801115 	stw	r18,68(sp)
   47480:	2023883a 	mov	r17,r4
   47484:	28001c16 	blt	r5,zero,474f8 <__smakebuf_r+0xa4>
   47488:	d80d883a 	mov	r6,sp
   4748c:	00476700 	call	47670 <_fstat_r>
   47490:	10001816 	blt	r2,zero,474f4 <__smakebuf_r+0xa0>
   47494:	d8800117 	ldw	r2,4(sp)
   47498:	00e00014 	movui	r3,32768
   4749c:	10bc000c 	andi	r2,r2,61440
   474a0:	14c80020 	cmpeqi	r19,r2,8192
   474a4:	10c03726 	beq	r2,r3,47584 <__smakebuf_r+0x130>
   474a8:	80c0030b 	ldhu	r3,12(r16)
   474ac:	18c20014 	ori	r3,r3,2048
   474b0:	80c0030d 	sth	r3,12(r16)
   474b4:	00c80004 	movi	r3,8192
   474b8:	10c0521e 	bne	r2,r3,47604 <__smakebuf_r+0x1b0>
   474bc:	8140038f 	ldh	r5,14(r16)
   474c0:	8809883a 	mov	r4,r17
   474c4:	00476cc0 	call	476cc <_isatty_r>
   474c8:	10004c26 	beq	r2,zero,475fc <__smakebuf_r+0x1a8>
   474cc:	8080030b 	ldhu	r2,12(r16)
   474d0:	80c010c4 	addi	r3,r16,67
   474d4:	80c00015 	stw	r3,0(r16)
   474d8:	10800054 	ori	r2,r2,1
   474dc:	8080030d 	sth	r2,12(r16)
   474e0:	00800044 	movi	r2,1
   474e4:	80c00415 	stw	r3,16(r16)
   474e8:	80800515 	stw	r2,20(r16)
   474ec:	04810004 	movi	r18,1024
   474f0:	00000706 	br	47510 <__smakebuf_r+0xbc>
   474f4:	8080030b 	ldhu	r2,12(r16)
   474f8:	10c0200c 	andi	r3,r2,128
   474fc:	18001f1e 	bne	r3,zero,4757c <__smakebuf_r+0x128>
   47500:	04810004 	movi	r18,1024
   47504:	10820014 	ori	r2,r2,2048
   47508:	8080030d 	sth	r2,12(r16)
   4750c:	0027883a 	mov	r19,zero
   47510:	900b883a 	mov	r5,r18
   47514:	8809883a 	mov	r4,r17
   47518:	004565c0 	call	4565c <_malloc_r>
   4751c:	10002c26 	beq	r2,zero,475d0 <__smakebuf_r+0x17c>
   47520:	80c0030b 	ldhu	r3,12(r16)
   47524:	01000134 	movhi	r4,4
   47528:	21132004 	addi	r4,r4,19584
   4752c:	89000f15 	stw	r4,60(r17)
   47530:	18c02014 	ori	r3,r3,128
   47534:	80c0030d 	sth	r3,12(r16)
   47538:	80800015 	stw	r2,0(r16)
   4753c:	80800415 	stw	r2,16(r16)
   47540:	84800515 	stw	r18,20(r16)
   47544:	98001a1e 	bne	r19,zero,475b0 <__smakebuf_r+0x15c>
   47548:	dfc01317 	ldw	ra,76(sp)
   4754c:	dcc01217 	ldw	r19,72(sp)
   47550:	dc801117 	ldw	r18,68(sp)
   47554:	dc401017 	ldw	r17,64(sp)
   47558:	dc000f17 	ldw	r16,60(sp)
   4755c:	dec01404 	addi	sp,sp,80
   47560:	f800283a 	ret
   47564:	288010c4 	addi	r2,r5,67
   47568:	28800015 	stw	r2,0(r5)
   4756c:	28800415 	stw	r2,16(r5)
   47570:	00800044 	movi	r2,1
   47574:	28800515 	stw	r2,20(r5)
   47578:	f800283a 	ret
   4757c:	04801004 	movi	r18,64
   47580:	003fe006 	br	47504 <__alt_data_end+0xfffe0404>
   47584:	81000a17 	ldw	r4,40(r16)
   47588:	00c00134 	movhi	r3,4
   4758c:	18da6a04 	addi	r3,r3,27048
   47590:	20ffc51e 	bne	r4,r3,474a8 <__alt_data_end+0xfffe03a8>
   47594:	8080030b 	ldhu	r2,12(r16)
   47598:	04810004 	movi	r18,1024
   4759c:	84801315 	stw	r18,76(r16)
   475a0:	1484b03a 	or	r2,r2,r18
   475a4:	8080030d 	sth	r2,12(r16)
   475a8:	0027883a 	mov	r19,zero
   475ac:	003fd806 	br	47510 <__alt_data_end+0xfffe0410>
   475b0:	8140038f 	ldh	r5,14(r16)
   475b4:	8809883a 	mov	r4,r17
   475b8:	00476cc0 	call	476cc <_isatty_r>
   475bc:	103fe226 	beq	r2,zero,47548 <__alt_data_end+0xfffe0448>
   475c0:	8080030b 	ldhu	r2,12(r16)
   475c4:	10800054 	ori	r2,r2,1
   475c8:	8080030d 	sth	r2,12(r16)
   475cc:	003fde06 	br	47548 <__alt_data_end+0xfffe0448>
   475d0:	8080030b 	ldhu	r2,12(r16)
   475d4:	10c0800c 	andi	r3,r2,512
   475d8:	183fdb1e 	bne	r3,zero,47548 <__alt_data_end+0xfffe0448>
   475dc:	10800094 	ori	r2,r2,2
   475e0:	80c010c4 	addi	r3,r16,67
   475e4:	8080030d 	sth	r2,12(r16)
   475e8:	00800044 	movi	r2,1
   475ec:	80c00015 	stw	r3,0(r16)
   475f0:	80c00415 	stw	r3,16(r16)
   475f4:	80800515 	stw	r2,20(r16)
   475f8:	003fd306 	br	47548 <__alt_data_end+0xfffe0448>
   475fc:	04810004 	movi	r18,1024
   47600:	003fc306 	br	47510 <__alt_data_end+0xfffe0410>
   47604:	0027883a 	mov	r19,zero
   47608:	04810004 	movi	r18,1024
   4760c:	003fc006 	br	47510 <__alt_data_end+0xfffe0410>

00047610 <_read_r>:
   47610:	defffd04 	addi	sp,sp,-12
   47614:	2805883a 	mov	r2,r5
   47618:	dc000015 	stw	r16,0(sp)
   4761c:	04000174 	movhi	r16,5
   47620:	dc400115 	stw	r17,4(sp)
   47624:	300b883a 	mov	r5,r6
   47628:	84358b04 	addi	r16,r16,-10708
   4762c:	2023883a 	mov	r17,r4
   47630:	380d883a 	mov	r6,r7
   47634:	1009883a 	mov	r4,r2
   47638:	dfc00215 	stw	ra,8(sp)
   4763c:	80000015 	stw	zero,0(r16)
   47640:	0047d840 	call	47d84 <read>
   47644:	00ffffc4 	movi	r3,-1
   47648:	10c00526 	beq	r2,r3,47660 <_read_r+0x50>
   4764c:	dfc00217 	ldw	ra,8(sp)
   47650:	dc400117 	ldw	r17,4(sp)
   47654:	dc000017 	ldw	r16,0(sp)
   47658:	dec00304 	addi	sp,sp,12
   4765c:	f800283a 	ret
   47660:	80c00017 	ldw	r3,0(r16)
   47664:	183ff926 	beq	r3,zero,4764c <__alt_data_end+0xfffe054c>
   47668:	88c00015 	stw	r3,0(r17)
   4766c:	003ff706 	br	4764c <__alt_data_end+0xfffe054c>

00047670 <_fstat_r>:
   47670:	defffd04 	addi	sp,sp,-12
   47674:	2805883a 	mov	r2,r5
   47678:	dc000015 	stw	r16,0(sp)
   4767c:	04000174 	movhi	r16,5
   47680:	dc400115 	stw	r17,4(sp)
   47684:	84358b04 	addi	r16,r16,-10708
   47688:	2023883a 	mov	r17,r4
   4768c:	300b883a 	mov	r5,r6
   47690:	1009883a 	mov	r4,r2
   47694:	dfc00215 	stw	ra,8(sp)
   47698:	80000015 	stw	zero,0(r16)
   4769c:	00478bc0 	call	478bc <fstat>
   476a0:	00ffffc4 	movi	r3,-1
   476a4:	10c00526 	beq	r2,r3,476bc <_fstat_r+0x4c>
   476a8:	dfc00217 	ldw	ra,8(sp)
   476ac:	dc400117 	ldw	r17,4(sp)
   476b0:	dc000017 	ldw	r16,0(sp)
   476b4:	dec00304 	addi	sp,sp,12
   476b8:	f800283a 	ret
   476bc:	80c00017 	ldw	r3,0(r16)
   476c0:	183ff926 	beq	r3,zero,476a8 <__alt_data_end+0xfffe05a8>
   476c4:	88c00015 	stw	r3,0(r17)
   476c8:	003ff706 	br	476a8 <__alt_data_end+0xfffe05a8>

000476cc <_isatty_r>:
   476cc:	defffd04 	addi	sp,sp,-12
   476d0:	dc000015 	stw	r16,0(sp)
   476d4:	04000174 	movhi	r16,5
   476d8:	dc400115 	stw	r17,4(sp)
   476dc:	84358b04 	addi	r16,r16,-10708
   476e0:	2023883a 	mov	r17,r4
   476e4:	2809883a 	mov	r4,r5
   476e8:	dfc00215 	stw	ra,8(sp)
   476ec:	80000015 	stw	zero,0(r16)
   476f0:	00479bc0 	call	479bc <isatty>
   476f4:	00ffffc4 	movi	r3,-1
   476f8:	10c00526 	beq	r2,r3,47710 <_isatty_r+0x44>
   476fc:	dfc00217 	ldw	ra,8(sp)
   47700:	dc400117 	ldw	r17,4(sp)
   47704:	dc000017 	ldw	r16,0(sp)
   47708:	dec00304 	addi	sp,sp,12
   4770c:	f800283a 	ret
   47710:	80c00017 	ldw	r3,0(r16)
   47714:	183ff926 	beq	r3,zero,476fc <__alt_data_end+0xfffe05fc>
   47718:	88c00015 	stw	r3,0(r17)
   4771c:	003ff706 	br	476fc <__alt_data_end+0xfffe05fc>

00047720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   47720:	defffe04 	addi	sp,sp,-8
   47724:	dfc00115 	stw	ra,4(sp)
   47728:	df000015 	stw	fp,0(sp)
   4772c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   47730:	00800174 	movhi	r2,5
   47734:	10aee704 	addi	r2,r2,-17508
   47738:	10800017 	ldw	r2,0(r2)
   4773c:	10000526 	beq	r2,zero,47754 <alt_get_errno+0x34>
   47740:	00800174 	movhi	r2,5
   47744:	10aee704 	addi	r2,r2,-17508
   47748:	10800017 	ldw	r2,0(r2)
   4774c:	103ee83a 	callr	r2
   47750:	00000206 	br	4775c <alt_get_errno+0x3c>
   47754:	00800174 	movhi	r2,5
   47758:	10b58b04 	addi	r2,r2,-10708
}
   4775c:	e037883a 	mov	sp,fp
   47760:	dfc00117 	ldw	ra,4(sp)
   47764:	df000017 	ldw	fp,0(sp)
   47768:	dec00204 	addi	sp,sp,8
   4776c:	f800283a 	ret

00047770 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   47770:	defffb04 	addi	sp,sp,-20
   47774:	dfc00415 	stw	ra,16(sp)
   47778:	df000315 	stw	fp,12(sp)
   4777c:	df000304 	addi	fp,sp,12
   47780:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   47784:	e0bfff17 	ldw	r2,-4(fp)
   47788:	10000616 	blt	r2,zero,477a4 <close+0x34>
   4778c:	e0bfff17 	ldw	r2,-4(fp)
   47790:	10c00324 	muli	r3,r2,12
   47794:	00800174 	movhi	r2,5
   47798:	10aa6504 	addi	r2,r2,-22124
   4779c:	1885883a 	add	r2,r3,r2
   477a0:	00000106 	br	477a8 <close+0x38>
   477a4:	0005883a 	mov	r2,zero
   477a8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   477ac:	e0bffd17 	ldw	r2,-12(fp)
   477b0:	10001926 	beq	r2,zero,47818 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   477b4:	e0bffd17 	ldw	r2,-12(fp)
   477b8:	10800017 	ldw	r2,0(r2)
   477bc:	10800417 	ldw	r2,16(r2)
   477c0:	10000626 	beq	r2,zero,477dc <close+0x6c>
   477c4:	e0bffd17 	ldw	r2,-12(fp)
   477c8:	10800017 	ldw	r2,0(r2)
   477cc:	10800417 	ldw	r2,16(r2)
   477d0:	e13ffd17 	ldw	r4,-12(fp)
   477d4:	103ee83a 	callr	r2
   477d8:	00000106 	br	477e0 <close+0x70>
   477dc:	0005883a 	mov	r2,zero
   477e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   477e4:	e13fff17 	ldw	r4,-4(fp)
   477e8:	0047e800 	call	47e80 <alt_release_fd>
    if (rval < 0)
   477ec:	e0bffe17 	ldw	r2,-8(fp)
   477f0:	1000070e 	bge	r2,zero,47810 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   477f4:	00477200 	call	47720 <alt_get_errno>
   477f8:	1007883a 	mov	r3,r2
   477fc:	e0bffe17 	ldw	r2,-8(fp)
   47800:	0085c83a 	sub	r2,zero,r2
   47804:	18800015 	stw	r2,0(r3)
      return -1;
   47808:	00bfffc4 	movi	r2,-1
   4780c:	00000706 	br	4782c <close+0xbc>
    }
    return 0;
   47810:	0005883a 	mov	r2,zero
   47814:	00000506 	br	4782c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   47818:	00477200 	call	47720 <alt_get_errno>
   4781c:	1007883a 	mov	r3,r2
   47820:	00801444 	movi	r2,81
   47824:	18800015 	stw	r2,0(r3)
    return -1;
   47828:	00bfffc4 	movi	r2,-1
  }
}
   4782c:	e037883a 	mov	sp,fp
   47830:	dfc00117 	ldw	ra,4(sp)
   47834:	df000017 	ldw	fp,0(sp)
   47838:	dec00204 	addi	sp,sp,8
   4783c:	f800283a 	ret

00047840 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   47840:	defffc04 	addi	sp,sp,-16
   47844:	df000315 	stw	fp,12(sp)
   47848:	df000304 	addi	fp,sp,12
   4784c:	e13ffd15 	stw	r4,-12(fp)
   47850:	e17ffe15 	stw	r5,-8(fp)
   47854:	e1bfff15 	stw	r6,-4(fp)
  return len;
   47858:	e0bfff17 	ldw	r2,-4(fp)
}
   4785c:	e037883a 	mov	sp,fp
   47860:	df000017 	ldw	fp,0(sp)
   47864:	dec00104 	addi	sp,sp,4
   47868:	f800283a 	ret

0004786c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4786c:	defffe04 	addi	sp,sp,-8
   47870:	dfc00115 	stw	ra,4(sp)
   47874:	df000015 	stw	fp,0(sp)
   47878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4787c:	00800174 	movhi	r2,5
   47880:	10aee704 	addi	r2,r2,-17508
   47884:	10800017 	ldw	r2,0(r2)
   47888:	10000526 	beq	r2,zero,478a0 <alt_get_errno+0x34>
   4788c:	00800174 	movhi	r2,5
   47890:	10aee704 	addi	r2,r2,-17508
   47894:	10800017 	ldw	r2,0(r2)
   47898:	103ee83a 	callr	r2
   4789c:	00000206 	br	478a8 <alt_get_errno+0x3c>
   478a0:	00800174 	movhi	r2,5
   478a4:	10b58b04 	addi	r2,r2,-10708
}
   478a8:	e037883a 	mov	sp,fp
   478ac:	dfc00117 	ldw	ra,4(sp)
   478b0:	df000017 	ldw	fp,0(sp)
   478b4:	dec00204 	addi	sp,sp,8
   478b8:	f800283a 	ret

000478bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   478bc:	defffb04 	addi	sp,sp,-20
   478c0:	dfc00415 	stw	ra,16(sp)
   478c4:	df000315 	stw	fp,12(sp)
   478c8:	df000304 	addi	fp,sp,12
   478cc:	e13ffe15 	stw	r4,-8(fp)
   478d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   478d4:	e0bffe17 	ldw	r2,-8(fp)
   478d8:	10000616 	blt	r2,zero,478f4 <fstat+0x38>
   478dc:	e0bffe17 	ldw	r2,-8(fp)
   478e0:	10c00324 	muli	r3,r2,12
   478e4:	00800174 	movhi	r2,5
   478e8:	10aa6504 	addi	r2,r2,-22124
   478ec:	1885883a 	add	r2,r3,r2
   478f0:	00000106 	br	478f8 <fstat+0x3c>
   478f4:	0005883a 	mov	r2,zero
   478f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   478fc:	e0bffd17 	ldw	r2,-12(fp)
   47900:	10001026 	beq	r2,zero,47944 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   47904:	e0bffd17 	ldw	r2,-12(fp)
   47908:	10800017 	ldw	r2,0(r2)
   4790c:	10800817 	ldw	r2,32(r2)
   47910:	10000726 	beq	r2,zero,47930 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   47914:	e0bffd17 	ldw	r2,-12(fp)
   47918:	10800017 	ldw	r2,0(r2)
   4791c:	10800817 	ldw	r2,32(r2)
   47920:	e17fff17 	ldw	r5,-4(fp)
   47924:	e13ffd17 	ldw	r4,-12(fp)
   47928:	103ee83a 	callr	r2
   4792c:	00000a06 	br	47958 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   47930:	e0bfff17 	ldw	r2,-4(fp)
   47934:	00c80004 	movi	r3,8192
   47938:	10c00115 	stw	r3,4(r2)
      return 0;
   4793c:	0005883a 	mov	r2,zero
   47940:	00000506 	br	47958 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   47944:	004786c0 	call	4786c <alt_get_errno>
   47948:	1007883a 	mov	r3,r2
   4794c:	00801444 	movi	r2,81
   47950:	18800015 	stw	r2,0(r3)
    return -1;
   47954:	00bfffc4 	movi	r2,-1
  }
}
   47958:	e037883a 	mov	sp,fp
   4795c:	dfc00117 	ldw	ra,4(sp)
   47960:	df000017 	ldw	fp,0(sp)
   47964:	dec00204 	addi	sp,sp,8
   47968:	f800283a 	ret

0004796c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4796c:	defffe04 	addi	sp,sp,-8
   47970:	dfc00115 	stw	ra,4(sp)
   47974:	df000015 	stw	fp,0(sp)
   47978:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4797c:	00800174 	movhi	r2,5
   47980:	10aee704 	addi	r2,r2,-17508
   47984:	10800017 	ldw	r2,0(r2)
   47988:	10000526 	beq	r2,zero,479a0 <alt_get_errno+0x34>
   4798c:	00800174 	movhi	r2,5
   47990:	10aee704 	addi	r2,r2,-17508
   47994:	10800017 	ldw	r2,0(r2)
   47998:	103ee83a 	callr	r2
   4799c:	00000206 	br	479a8 <alt_get_errno+0x3c>
   479a0:	00800174 	movhi	r2,5
   479a4:	10b58b04 	addi	r2,r2,-10708
}
   479a8:	e037883a 	mov	sp,fp
   479ac:	dfc00117 	ldw	ra,4(sp)
   479b0:	df000017 	ldw	fp,0(sp)
   479b4:	dec00204 	addi	sp,sp,8
   479b8:	f800283a 	ret

000479bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   479bc:	deffed04 	addi	sp,sp,-76
   479c0:	dfc01215 	stw	ra,72(sp)
   479c4:	df001115 	stw	fp,68(sp)
   479c8:	df001104 	addi	fp,sp,68
   479cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   479d0:	e0bfff17 	ldw	r2,-4(fp)
   479d4:	10000616 	blt	r2,zero,479f0 <isatty+0x34>
   479d8:	e0bfff17 	ldw	r2,-4(fp)
   479dc:	10c00324 	muli	r3,r2,12
   479e0:	00800174 	movhi	r2,5
   479e4:	10aa6504 	addi	r2,r2,-22124
   479e8:	1885883a 	add	r2,r3,r2
   479ec:	00000106 	br	479f4 <isatty+0x38>
   479f0:	0005883a 	mov	r2,zero
   479f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   479f8:	e0bfef17 	ldw	r2,-68(fp)
   479fc:	10000e26 	beq	r2,zero,47a38 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   47a00:	e0bfef17 	ldw	r2,-68(fp)
   47a04:	10800017 	ldw	r2,0(r2)
   47a08:	10800817 	ldw	r2,32(r2)
   47a0c:	1000021e 	bne	r2,zero,47a18 <isatty+0x5c>
    {
      return 1;
   47a10:	00800044 	movi	r2,1
   47a14:	00000d06 	br	47a4c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   47a18:	e0bff004 	addi	r2,fp,-64
   47a1c:	100b883a 	mov	r5,r2
   47a20:	e13fff17 	ldw	r4,-4(fp)
   47a24:	00478bc0 	call	478bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   47a28:	e0bff117 	ldw	r2,-60(fp)
   47a2c:	10880020 	cmpeqi	r2,r2,8192
   47a30:	10803fcc 	andi	r2,r2,255
   47a34:	00000506 	br	47a4c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   47a38:	004796c0 	call	4796c <alt_get_errno>
   47a3c:	1007883a 	mov	r3,r2
   47a40:	00801444 	movi	r2,81
   47a44:	18800015 	stw	r2,0(r3)
    return 0;
   47a48:	0005883a 	mov	r2,zero
  }
}
   47a4c:	e037883a 	mov	sp,fp
   47a50:	dfc00117 	ldw	ra,4(sp)
   47a54:	df000017 	ldw	fp,0(sp)
   47a58:	dec00204 	addi	sp,sp,8
   47a5c:	f800283a 	ret

00047a60 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   47a60:	defffc04 	addi	sp,sp,-16
   47a64:	df000315 	stw	fp,12(sp)
   47a68:	df000304 	addi	fp,sp,12
   47a6c:	e13ffd15 	stw	r4,-12(fp)
   47a70:	e17ffe15 	stw	r5,-8(fp)
   47a74:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   47a78:	e0fffe17 	ldw	r3,-8(fp)
   47a7c:	e0bffd17 	ldw	r2,-12(fp)
   47a80:	18800c26 	beq	r3,r2,47ab4 <alt_load_section+0x54>
  {
    while( to != end )
   47a84:	00000806 	br	47aa8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   47a88:	e0bffe17 	ldw	r2,-8(fp)
   47a8c:	10c00104 	addi	r3,r2,4
   47a90:	e0fffe15 	stw	r3,-8(fp)
   47a94:	e0fffd17 	ldw	r3,-12(fp)
   47a98:	19000104 	addi	r4,r3,4
   47a9c:	e13ffd15 	stw	r4,-12(fp)
   47aa0:	18c00017 	ldw	r3,0(r3)
   47aa4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   47aa8:	e0fffe17 	ldw	r3,-8(fp)
   47aac:	e0bfff17 	ldw	r2,-4(fp)
   47ab0:	18bff51e 	bne	r3,r2,47a88 <__alt_data_end+0xfffe0988>
    {
      *to++ = *from++;
    }
  }
}
   47ab4:	0001883a 	nop
   47ab8:	e037883a 	mov	sp,fp
   47abc:	df000017 	ldw	fp,0(sp)
   47ac0:	dec00104 	addi	sp,sp,4
   47ac4:	f800283a 	ret

00047ac8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   47ac8:	defffe04 	addi	sp,sp,-8
   47acc:	dfc00115 	stw	ra,4(sp)
   47ad0:	df000015 	stw	fp,0(sp)
   47ad4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   47ad8:	01800174 	movhi	r6,5
   47adc:	31aeec04 	addi	r6,r6,-17488
   47ae0:	01400174 	movhi	r5,5
   47ae4:	29685004 	addi	r5,r5,-24256
   47ae8:	01000174 	movhi	r4,5
   47aec:	212eec04 	addi	r4,r4,-17488
   47af0:	0047a600 	call	47a60 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   47af4:	01800134 	movhi	r6,4
   47af8:	31807004 	addi	r6,r6,448
   47afc:	01400134 	movhi	r5,4
   47b00:	29400804 	addi	r5,r5,32
   47b04:	01000134 	movhi	r4,4
   47b08:	21000804 	addi	r4,r4,32
   47b0c:	0047a600 	call	47a60 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   47b10:	01800174 	movhi	r6,5
   47b14:	31a85004 	addi	r6,r6,-24256
   47b18:	01400174 	movhi	r5,5
   47b1c:	2967f404 	addi	r5,r5,-24624
   47b20:	01000174 	movhi	r4,5
   47b24:	2127f404 	addi	r4,r4,-24624
   47b28:	0047a600 	call	47a60 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   47b2c:	0048ed80 	call	48ed8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   47b30:	00490d40 	call	490d4 <alt_icache_flush_all>
}
   47b34:	0001883a 	nop
   47b38:	e037883a 	mov	sp,fp
   47b3c:	dfc00117 	ldw	ra,4(sp)
   47b40:	df000017 	ldw	fp,0(sp)
   47b44:	dec00204 	addi	sp,sp,8
   47b48:	f800283a 	ret

00047b4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   47b4c:	defffe04 	addi	sp,sp,-8
   47b50:	dfc00115 	stw	ra,4(sp)
   47b54:	df000015 	stw	fp,0(sp)
   47b58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   47b5c:	00800174 	movhi	r2,5
   47b60:	10aee704 	addi	r2,r2,-17508
   47b64:	10800017 	ldw	r2,0(r2)
   47b68:	10000526 	beq	r2,zero,47b80 <alt_get_errno+0x34>
   47b6c:	00800174 	movhi	r2,5
   47b70:	10aee704 	addi	r2,r2,-17508
   47b74:	10800017 	ldw	r2,0(r2)
   47b78:	103ee83a 	callr	r2
   47b7c:	00000206 	br	47b88 <alt_get_errno+0x3c>
   47b80:	00800174 	movhi	r2,5
   47b84:	10b58b04 	addi	r2,r2,-10708
}
   47b88:	e037883a 	mov	sp,fp
   47b8c:	dfc00117 	ldw	ra,4(sp)
   47b90:	df000017 	ldw	fp,0(sp)
   47b94:	dec00204 	addi	sp,sp,8
   47b98:	f800283a 	ret

00047b9c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   47b9c:	defff904 	addi	sp,sp,-28
   47ba0:	dfc00615 	stw	ra,24(sp)
   47ba4:	df000515 	stw	fp,20(sp)
   47ba8:	df000504 	addi	fp,sp,20
   47bac:	e13ffd15 	stw	r4,-12(fp)
   47bb0:	e17ffe15 	stw	r5,-8(fp)
   47bb4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   47bb8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   47bbc:	e0bffd17 	ldw	r2,-12(fp)
   47bc0:	10000616 	blt	r2,zero,47bdc <lseek+0x40>
   47bc4:	e0bffd17 	ldw	r2,-12(fp)
   47bc8:	10c00324 	muli	r3,r2,12
   47bcc:	00800174 	movhi	r2,5
   47bd0:	10aa6504 	addi	r2,r2,-22124
   47bd4:	1885883a 	add	r2,r3,r2
   47bd8:	00000106 	br	47be0 <lseek+0x44>
   47bdc:	0005883a 	mov	r2,zero
   47be0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   47be4:	e0bffc17 	ldw	r2,-16(fp)
   47be8:	10001026 	beq	r2,zero,47c2c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   47bec:	e0bffc17 	ldw	r2,-16(fp)
   47bf0:	10800017 	ldw	r2,0(r2)
   47bf4:	10800717 	ldw	r2,28(r2)
   47bf8:	10000926 	beq	r2,zero,47c20 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   47bfc:	e0bffc17 	ldw	r2,-16(fp)
   47c00:	10800017 	ldw	r2,0(r2)
   47c04:	10800717 	ldw	r2,28(r2)
   47c08:	e1bfff17 	ldw	r6,-4(fp)
   47c0c:	e17ffe17 	ldw	r5,-8(fp)
   47c10:	e13ffc17 	ldw	r4,-16(fp)
   47c14:	103ee83a 	callr	r2
   47c18:	e0bffb15 	stw	r2,-20(fp)
   47c1c:	00000506 	br	47c34 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   47c20:	00bfde84 	movi	r2,-134
   47c24:	e0bffb15 	stw	r2,-20(fp)
   47c28:	00000206 	br	47c34 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   47c2c:	00bfebc4 	movi	r2,-81
   47c30:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   47c34:	e0bffb17 	ldw	r2,-20(fp)
   47c38:	1000070e 	bge	r2,zero,47c58 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   47c3c:	0047b4c0 	call	47b4c <alt_get_errno>
   47c40:	1007883a 	mov	r3,r2
   47c44:	e0bffb17 	ldw	r2,-20(fp)
   47c48:	0085c83a 	sub	r2,zero,r2
   47c4c:	18800015 	stw	r2,0(r3)
    rc = -1;
   47c50:	00bfffc4 	movi	r2,-1
   47c54:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   47c58:	e0bffb17 	ldw	r2,-20(fp)
}
   47c5c:	e037883a 	mov	sp,fp
   47c60:	dfc00117 	ldw	ra,4(sp)
   47c64:	df000017 	ldw	fp,0(sp)
   47c68:	dec00204 	addi	sp,sp,8
   47c6c:	f800283a 	ret

00047c70 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   47c70:	defffd04 	addi	sp,sp,-12
   47c74:	dfc00215 	stw	ra,8(sp)
   47c78:	df000115 	stw	fp,4(sp)
   47c7c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   47c80:	0009883a 	mov	r4,zero
   47c84:	00481440 	call	48144 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   47c88:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   47c8c:	004817c0 	call	4817c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   47c90:	01800174 	movhi	r6,5
   47c94:	31a84804 	addi	r6,r6,-24288
   47c98:	01400174 	movhi	r5,5
   47c9c:	29684804 	addi	r5,r5,-24288
   47ca0:	01000174 	movhi	r4,5
   47ca4:	21284804 	addi	r4,r4,-24288
   47ca8:	004949c0 	call	4949c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   47cac:	00490140 	call	49014 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   47cb0:	01000174 	movhi	r4,5
   47cb4:	21241d04 	addi	r4,r4,-28556
   47cb8:	0049c3c0 	call	49c3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   47cbc:	d0a6af17 	ldw	r2,-25924(gp)
   47cc0:	d0e6b017 	ldw	r3,-25920(gp)
   47cc4:	d126b117 	ldw	r4,-25916(gp)
   47cc8:	200d883a 	mov	r6,r4
   47ccc:	180b883a 	mov	r5,r3
   47cd0:	1009883a 	mov	r4,r2
   47cd4:	004020c0 	call	4020c <main>
   47cd8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   47cdc:	01000044 	movi	r4,1
   47ce0:	00477700 	call	47770 <close>
  exit (result);
   47ce4:	e13fff17 	ldw	r4,-4(fp)
   47ce8:	0049c500 	call	49c50 <exit>

00047cec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   47cec:	defffe04 	addi	sp,sp,-8
   47cf0:	df000115 	stw	fp,4(sp)
   47cf4:	df000104 	addi	fp,sp,4
   47cf8:	e13fff15 	stw	r4,-4(fp)
}
   47cfc:	0001883a 	nop
   47d00:	e037883a 	mov	sp,fp
   47d04:	df000017 	ldw	fp,0(sp)
   47d08:	dec00104 	addi	sp,sp,4
   47d0c:	f800283a 	ret

00047d10 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   47d10:	defffe04 	addi	sp,sp,-8
   47d14:	df000115 	stw	fp,4(sp)
   47d18:	df000104 	addi	fp,sp,4
   47d1c:	e13fff15 	stw	r4,-4(fp)
}
   47d20:	0001883a 	nop
   47d24:	e037883a 	mov	sp,fp
   47d28:	df000017 	ldw	fp,0(sp)
   47d2c:	dec00104 	addi	sp,sp,4
   47d30:	f800283a 	ret

00047d34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   47d34:	defffe04 	addi	sp,sp,-8
   47d38:	dfc00115 	stw	ra,4(sp)
   47d3c:	df000015 	stw	fp,0(sp)
   47d40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   47d44:	00800174 	movhi	r2,5
   47d48:	10aee704 	addi	r2,r2,-17508
   47d4c:	10800017 	ldw	r2,0(r2)
   47d50:	10000526 	beq	r2,zero,47d68 <alt_get_errno+0x34>
   47d54:	00800174 	movhi	r2,5
   47d58:	10aee704 	addi	r2,r2,-17508
   47d5c:	10800017 	ldw	r2,0(r2)
   47d60:	103ee83a 	callr	r2
   47d64:	00000206 	br	47d70 <alt_get_errno+0x3c>
   47d68:	00800174 	movhi	r2,5
   47d6c:	10b58b04 	addi	r2,r2,-10708
}
   47d70:	e037883a 	mov	sp,fp
   47d74:	dfc00117 	ldw	ra,4(sp)
   47d78:	df000017 	ldw	fp,0(sp)
   47d7c:	dec00204 	addi	sp,sp,8
   47d80:	f800283a 	ret

00047d84 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   47d84:	defff904 	addi	sp,sp,-28
   47d88:	dfc00615 	stw	ra,24(sp)
   47d8c:	df000515 	stw	fp,20(sp)
   47d90:	df000504 	addi	fp,sp,20
   47d94:	e13ffd15 	stw	r4,-12(fp)
   47d98:	e17ffe15 	stw	r5,-8(fp)
   47d9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   47da0:	e0bffd17 	ldw	r2,-12(fp)
   47da4:	10000616 	blt	r2,zero,47dc0 <read+0x3c>
   47da8:	e0bffd17 	ldw	r2,-12(fp)
   47dac:	10c00324 	muli	r3,r2,12
   47db0:	00800174 	movhi	r2,5
   47db4:	10aa6504 	addi	r2,r2,-22124
   47db8:	1885883a 	add	r2,r3,r2
   47dbc:	00000106 	br	47dc4 <read+0x40>
   47dc0:	0005883a 	mov	r2,zero
   47dc4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   47dc8:	e0bffb17 	ldw	r2,-20(fp)
   47dcc:	10002226 	beq	r2,zero,47e58 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   47dd0:	e0bffb17 	ldw	r2,-20(fp)
   47dd4:	10800217 	ldw	r2,8(r2)
   47dd8:	108000cc 	andi	r2,r2,3
   47ddc:	10800060 	cmpeqi	r2,r2,1
   47de0:	1000181e 	bne	r2,zero,47e44 <read+0xc0>
        (fd->dev->read))
   47de4:	e0bffb17 	ldw	r2,-20(fp)
   47de8:	10800017 	ldw	r2,0(r2)
   47dec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   47df0:	10001426 	beq	r2,zero,47e44 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   47df4:	e0bffb17 	ldw	r2,-20(fp)
   47df8:	10800017 	ldw	r2,0(r2)
   47dfc:	10800517 	ldw	r2,20(r2)
   47e00:	e0ffff17 	ldw	r3,-4(fp)
   47e04:	180d883a 	mov	r6,r3
   47e08:	e17ffe17 	ldw	r5,-8(fp)
   47e0c:	e13ffb17 	ldw	r4,-20(fp)
   47e10:	103ee83a 	callr	r2
   47e14:	e0bffc15 	stw	r2,-16(fp)
   47e18:	e0bffc17 	ldw	r2,-16(fp)
   47e1c:	1000070e 	bge	r2,zero,47e3c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   47e20:	0047d340 	call	47d34 <alt_get_errno>
   47e24:	1007883a 	mov	r3,r2
   47e28:	e0bffc17 	ldw	r2,-16(fp)
   47e2c:	0085c83a 	sub	r2,zero,r2
   47e30:	18800015 	stw	r2,0(r3)
          return -1;
   47e34:	00bfffc4 	movi	r2,-1
   47e38:	00000c06 	br	47e6c <read+0xe8>
        }
        return rval;
   47e3c:	e0bffc17 	ldw	r2,-16(fp)
   47e40:	00000a06 	br	47e6c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   47e44:	0047d340 	call	47d34 <alt_get_errno>
   47e48:	1007883a 	mov	r3,r2
   47e4c:	00800344 	movi	r2,13
   47e50:	18800015 	stw	r2,0(r3)
   47e54:	00000406 	br	47e68 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   47e58:	0047d340 	call	47d34 <alt_get_errno>
   47e5c:	1007883a 	mov	r3,r2
   47e60:	00801444 	movi	r2,81
   47e64:	18800015 	stw	r2,0(r3)
  }
  return -1;
   47e68:	00bfffc4 	movi	r2,-1
}
   47e6c:	e037883a 	mov	sp,fp
   47e70:	dfc00117 	ldw	ra,4(sp)
   47e74:	df000017 	ldw	fp,0(sp)
   47e78:	dec00204 	addi	sp,sp,8
   47e7c:	f800283a 	ret

00047e80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   47e80:	defffe04 	addi	sp,sp,-8
   47e84:	df000115 	stw	fp,4(sp)
   47e88:	df000104 	addi	fp,sp,4
   47e8c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   47e90:	e0bfff17 	ldw	r2,-4(fp)
   47e94:	108000d0 	cmplti	r2,r2,3
   47e98:	10000d1e 	bne	r2,zero,47ed0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   47e9c:	00800174 	movhi	r2,5
   47ea0:	10aa6504 	addi	r2,r2,-22124
   47ea4:	e0ffff17 	ldw	r3,-4(fp)
   47ea8:	18c00324 	muli	r3,r3,12
   47eac:	10c5883a 	add	r2,r2,r3
   47eb0:	10800204 	addi	r2,r2,8
   47eb4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   47eb8:	00800174 	movhi	r2,5
   47ebc:	10aa6504 	addi	r2,r2,-22124
   47ec0:	e0ffff17 	ldw	r3,-4(fp)
   47ec4:	18c00324 	muli	r3,r3,12
   47ec8:	10c5883a 	add	r2,r2,r3
   47ecc:	10000015 	stw	zero,0(r2)
  }
}
   47ed0:	0001883a 	nop
   47ed4:	e037883a 	mov	sp,fp
   47ed8:	df000017 	ldw	fp,0(sp)
   47edc:	dec00104 	addi	sp,sp,4
   47ee0:	f800283a 	ret

00047ee4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   47ee4:	defff904 	addi	sp,sp,-28
   47ee8:	df000615 	stw	fp,24(sp)
   47eec:	df000604 	addi	fp,sp,24
   47ef0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   47ef4:	0005303a 	rdctl	r2,status
   47ef8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   47efc:	e0fffe17 	ldw	r3,-8(fp)
   47f00:	00bfff84 	movi	r2,-2
   47f04:	1884703a 	and	r2,r3,r2
   47f08:	1001703a 	wrctl	status,r2
  
  return context;
   47f0c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   47f10:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   47f14:	d0a00b17 	ldw	r2,-32724(gp)
   47f18:	10c000c4 	addi	r3,r2,3
   47f1c:	00bfff04 	movi	r2,-4
   47f20:	1884703a 	and	r2,r3,r2
   47f24:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   47f28:	d0e00b17 	ldw	r3,-32724(gp)
   47f2c:	e0bfff17 	ldw	r2,-4(fp)
   47f30:	1887883a 	add	r3,r3,r2
   47f34:	008001b4 	movhi	r2,6
   47f38:	109c4004 	addi	r2,r2,28928
   47f3c:	10c0062e 	bgeu	r2,r3,47f58 <sbrk+0x74>
   47f40:	e0bffb17 	ldw	r2,-20(fp)
   47f44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   47f48:	e0bffa17 	ldw	r2,-24(fp)
   47f4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   47f50:	00bfffc4 	movi	r2,-1
   47f54:	00000b06 	br	47f84 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   47f58:	d0a00b17 	ldw	r2,-32724(gp)
   47f5c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   47f60:	d0e00b17 	ldw	r3,-32724(gp)
   47f64:	e0bfff17 	ldw	r2,-4(fp)
   47f68:	1885883a 	add	r2,r3,r2
   47f6c:	d0a00b15 	stw	r2,-32724(gp)
   47f70:	e0bffb17 	ldw	r2,-20(fp)
   47f74:	e0bffc15 	stw	r2,-16(fp)
   47f78:	e0bffc17 	ldw	r2,-16(fp)
   47f7c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   47f80:	e0bffd17 	ldw	r2,-12(fp)
} 
   47f84:	e037883a 	mov	sp,fp
   47f88:	df000017 	ldw	fp,0(sp)
   47f8c:	dec00104 	addi	sp,sp,4
   47f90:	f800283a 	ret

00047f94 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   47f94:	defffd04 	addi	sp,sp,-12
   47f98:	dfc00215 	stw	ra,8(sp)
   47f9c:	df000115 	stw	fp,4(sp)
   47fa0:	df000104 	addi	fp,sp,4
   47fa4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   47fa8:	e13fff17 	ldw	r4,-4(fp)
   47fac:	0048d800 	call	48d80 <alt_busy_sleep>
}
   47fb0:	e037883a 	mov	sp,fp
   47fb4:	dfc00117 	ldw	ra,4(sp)
   47fb8:	df000017 	ldw	fp,0(sp)
   47fbc:	dec00204 	addi	sp,sp,8
   47fc0:	f800283a 	ret

00047fc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   47fc4:	defffe04 	addi	sp,sp,-8
   47fc8:	dfc00115 	stw	ra,4(sp)
   47fcc:	df000015 	stw	fp,0(sp)
   47fd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   47fd4:	00800174 	movhi	r2,5
   47fd8:	10aee704 	addi	r2,r2,-17508
   47fdc:	10800017 	ldw	r2,0(r2)
   47fe0:	10000526 	beq	r2,zero,47ff8 <alt_get_errno+0x34>
   47fe4:	00800174 	movhi	r2,5
   47fe8:	10aee704 	addi	r2,r2,-17508
   47fec:	10800017 	ldw	r2,0(r2)
   47ff0:	103ee83a 	callr	r2
   47ff4:	00000206 	br	48000 <alt_get_errno+0x3c>
   47ff8:	00800174 	movhi	r2,5
   47ffc:	10b58b04 	addi	r2,r2,-10708
}
   48000:	e037883a 	mov	sp,fp
   48004:	dfc00117 	ldw	ra,4(sp)
   48008:	df000017 	ldw	fp,0(sp)
   4800c:	dec00204 	addi	sp,sp,8
   48010:	f800283a 	ret

00048014 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   48014:	defff904 	addi	sp,sp,-28
   48018:	dfc00615 	stw	ra,24(sp)
   4801c:	df000515 	stw	fp,20(sp)
   48020:	df000504 	addi	fp,sp,20
   48024:	e13ffd15 	stw	r4,-12(fp)
   48028:	e17ffe15 	stw	r5,-8(fp)
   4802c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   48030:	e0bffd17 	ldw	r2,-12(fp)
   48034:	10000616 	blt	r2,zero,48050 <write+0x3c>
   48038:	e0bffd17 	ldw	r2,-12(fp)
   4803c:	10c00324 	muli	r3,r2,12
   48040:	00800174 	movhi	r2,5
   48044:	10aa6504 	addi	r2,r2,-22124
   48048:	1885883a 	add	r2,r3,r2
   4804c:	00000106 	br	48054 <write+0x40>
   48050:	0005883a 	mov	r2,zero
   48054:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   48058:	e0bffb17 	ldw	r2,-20(fp)
   4805c:	10002126 	beq	r2,zero,480e4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   48060:	e0bffb17 	ldw	r2,-20(fp)
   48064:	10800217 	ldw	r2,8(r2)
   48068:	108000cc 	andi	r2,r2,3
   4806c:	10001826 	beq	r2,zero,480d0 <write+0xbc>
   48070:	e0bffb17 	ldw	r2,-20(fp)
   48074:	10800017 	ldw	r2,0(r2)
   48078:	10800617 	ldw	r2,24(r2)
   4807c:	10001426 	beq	r2,zero,480d0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   48080:	e0bffb17 	ldw	r2,-20(fp)
   48084:	10800017 	ldw	r2,0(r2)
   48088:	10800617 	ldw	r2,24(r2)
   4808c:	e0ffff17 	ldw	r3,-4(fp)
   48090:	180d883a 	mov	r6,r3
   48094:	e17ffe17 	ldw	r5,-8(fp)
   48098:	e13ffb17 	ldw	r4,-20(fp)
   4809c:	103ee83a 	callr	r2
   480a0:	e0bffc15 	stw	r2,-16(fp)
   480a4:	e0bffc17 	ldw	r2,-16(fp)
   480a8:	1000070e 	bge	r2,zero,480c8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   480ac:	0047fc40 	call	47fc4 <alt_get_errno>
   480b0:	1007883a 	mov	r3,r2
   480b4:	e0bffc17 	ldw	r2,-16(fp)
   480b8:	0085c83a 	sub	r2,zero,r2
   480bc:	18800015 	stw	r2,0(r3)
        return -1;
   480c0:	00bfffc4 	movi	r2,-1
   480c4:	00000c06 	br	480f8 <write+0xe4>
      }
      return rval;
   480c8:	e0bffc17 	ldw	r2,-16(fp)
   480cc:	00000a06 	br	480f8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   480d0:	0047fc40 	call	47fc4 <alt_get_errno>
   480d4:	1007883a 	mov	r3,r2
   480d8:	00800344 	movi	r2,13
   480dc:	18800015 	stw	r2,0(r3)
   480e0:	00000406 	br	480f4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   480e4:	0047fc40 	call	47fc4 <alt_get_errno>
   480e8:	1007883a 	mov	r3,r2
   480ec:	00801444 	movi	r2,81
   480f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   480f4:	00bfffc4 	movi	r2,-1
}
   480f8:	e037883a 	mov	sp,fp
   480fc:	dfc00117 	ldw	ra,4(sp)
   48100:	df000017 	ldw	fp,0(sp)
   48104:	dec00204 	addi	sp,sp,8
   48108:	f800283a 	ret

0004810c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4810c:	defffd04 	addi	sp,sp,-12
   48110:	dfc00215 	stw	ra,8(sp)
   48114:	df000115 	stw	fp,4(sp)
   48118:	df000104 	addi	fp,sp,4
   4811c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   48120:	01400174 	movhi	r5,5
   48124:	296ee404 	addi	r5,r5,-17520
   48128:	e13fff17 	ldw	r4,-4(fp)
   4812c:	0048f700 	call	48f70 <alt_dev_llist_insert>
}
   48130:	e037883a 	mov	sp,fp
   48134:	dfc00117 	ldw	ra,4(sp)
   48138:	df000017 	ldw	fp,0(sp)
   4813c:	dec00204 	addi	sp,sp,8
   48140:	f800283a 	ret

00048144 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   48144:	defffd04 	addi	sp,sp,-12
   48148:	dfc00215 	stw	ra,8(sp)
   4814c:	df000115 	stw	fp,4(sp)
   48150:	df000104 	addi	fp,sp,4
   48154:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   48158:	00499300 	call	49930 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4815c:	00800044 	movi	r2,1
   48160:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   48164:	0001883a 	nop
   48168:	e037883a 	mov	sp,fp
   4816c:	dfc00117 	ldw	ra,4(sp)
   48170:	df000017 	ldw	fp,0(sp)
   48174:	dec00204 	addi	sp,sp,8
   48178:	f800283a 	ret

0004817c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4817c:	defffe04 	addi	sp,sp,-8
   48180:	dfc00115 	stw	ra,4(sp)
   48184:	df000015 	stw	fp,0(sp)
   48188:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4818c:	000d883a 	mov	r6,zero
   48190:	000b883a 	mov	r5,zero
   48194:	01000174 	movhi	r4,5
   48198:	212acf04 	addi	r4,r4,-21700
   4819c:	004832c0 	call	4832c <altera_avalon_jtag_uart_init>
   481a0:	01000174 	movhi	r4,5
   481a4:	212ac504 	addi	r4,r4,-21740
   481a8:	004810c0 	call	4810c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   481ac:	0001883a 	nop
}
   481b0:	0001883a 	nop
   481b4:	e037883a 	mov	sp,fp
   481b8:	dfc00117 	ldw	ra,4(sp)
   481bc:	df000017 	ldw	fp,0(sp)
   481c0:	dec00204 	addi	sp,sp,8
   481c4:	f800283a 	ret

000481c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   481c8:	defffa04 	addi	sp,sp,-24
   481cc:	dfc00515 	stw	ra,20(sp)
   481d0:	df000415 	stw	fp,16(sp)
   481d4:	df000404 	addi	fp,sp,16
   481d8:	e13ffd15 	stw	r4,-12(fp)
   481dc:	e17ffe15 	stw	r5,-8(fp)
   481e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   481e4:	e0bffd17 	ldw	r2,-12(fp)
   481e8:	10800017 	ldw	r2,0(r2)
   481ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   481f0:	e0bffc17 	ldw	r2,-16(fp)
   481f4:	10c00a04 	addi	r3,r2,40
   481f8:	e0bffd17 	ldw	r2,-12(fp)
   481fc:	10800217 	ldw	r2,8(r2)
   48200:	100f883a 	mov	r7,r2
   48204:	e1bfff17 	ldw	r6,-4(fp)
   48208:	e17ffe17 	ldw	r5,-8(fp)
   4820c:	1809883a 	mov	r4,r3
   48210:	00488000 	call	48800 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   48214:	e037883a 	mov	sp,fp
   48218:	dfc00117 	ldw	ra,4(sp)
   4821c:	df000017 	ldw	fp,0(sp)
   48220:	dec00204 	addi	sp,sp,8
   48224:	f800283a 	ret

00048228 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   48228:	defffa04 	addi	sp,sp,-24
   4822c:	dfc00515 	stw	ra,20(sp)
   48230:	df000415 	stw	fp,16(sp)
   48234:	df000404 	addi	fp,sp,16
   48238:	e13ffd15 	stw	r4,-12(fp)
   4823c:	e17ffe15 	stw	r5,-8(fp)
   48240:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   48244:	e0bffd17 	ldw	r2,-12(fp)
   48248:	10800017 	ldw	r2,0(r2)
   4824c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   48250:	e0bffc17 	ldw	r2,-16(fp)
   48254:	10c00a04 	addi	r3,r2,40
   48258:	e0bffd17 	ldw	r2,-12(fp)
   4825c:	10800217 	ldw	r2,8(r2)
   48260:	100f883a 	mov	r7,r2
   48264:	e1bfff17 	ldw	r6,-4(fp)
   48268:	e17ffe17 	ldw	r5,-8(fp)
   4826c:	1809883a 	mov	r4,r3
   48270:	0048a1c0 	call	48a1c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   48274:	e037883a 	mov	sp,fp
   48278:	dfc00117 	ldw	ra,4(sp)
   4827c:	df000017 	ldw	fp,0(sp)
   48280:	dec00204 	addi	sp,sp,8
   48284:	f800283a 	ret

00048288 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   48288:	defffc04 	addi	sp,sp,-16
   4828c:	dfc00315 	stw	ra,12(sp)
   48290:	df000215 	stw	fp,8(sp)
   48294:	df000204 	addi	fp,sp,8
   48298:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4829c:	e0bfff17 	ldw	r2,-4(fp)
   482a0:	10800017 	ldw	r2,0(r2)
   482a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   482a8:	e0bffe17 	ldw	r2,-8(fp)
   482ac:	10c00a04 	addi	r3,r2,40
   482b0:	e0bfff17 	ldw	r2,-4(fp)
   482b4:	10800217 	ldw	r2,8(r2)
   482b8:	100b883a 	mov	r5,r2
   482bc:	1809883a 	mov	r4,r3
   482c0:	00486a80 	call	486a8 <altera_avalon_jtag_uart_close>
}
   482c4:	e037883a 	mov	sp,fp
   482c8:	dfc00117 	ldw	ra,4(sp)
   482cc:	df000017 	ldw	fp,0(sp)
   482d0:	dec00204 	addi	sp,sp,8
   482d4:	f800283a 	ret

000482d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   482d8:	defffa04 	addi	sp,sp,-24
   482dc:	dfc00515 	stw	ra,20(sp)
   482e0:	df000415 	stw	fp,16(sp)
   482e4:	df000404 	addi	fp,sp,16
   482e8:	e13ffd15 	stw	r4,-12(fp)
   482ec:	e17ffe15 	stw	r5,-8(fp)
   482f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   482f4:	e0bffd17 	ldw	r2,-12(fp)
   482f8:	10800017 	ldw	r2,0(r2)
   482fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   48300:	e0bffc17 	ldw	r2,-16(fp)
   48304:	10800a04 	addi	r2,r2,40
   48308:	e1bfff17 	ldw	r6,-4(fp)
   4830c:	e17ffe17 	ldw	r5,-8(fp)
   48310:	1009883a 	mov	r4,r2
   48314:	00487100 	call	48710 <altera_avalon_jtag_uart_ioctl>
}
   48318:	e037883a 	mov	sp,fp
   4831c:	dfc00117 	ldw	ra,4(sp)
   48320:	df000017 	ldw	fp,0(sp)
   48324:	dec00204 	addi	sp,sp,8
   48328:	f800283a 	ret

0004832c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4832c:	defffa04 	addi	sp,sp,-24
   48330:	dfc00515 	stw	ra,20(sp)
   48334:	df000415 	stw	fp,16(sp)
   48338:	df000404 	addi	fp,sp,16
   4833c:	e13ffd15 	stw	r4,-12(fp)
   48340:	e17ffe15 	stw	r5,-8(fp)
   48344:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   48348:	e0bffd17 	ldw	r2,-12(fp)
   4834c:	00c00044 	movi	r3,1
   48350:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   48354:	e0bffd17 	ldw	r2,-12(fp)
   48358:	10800017 	ldw	r2,0(r2)
   4835c:	10800104 	addi	r2,r2,4
   48360:	1007883a 	mov	r3,r2
   48364:	e0bffd17 	ldw	r2,-12(fp)
   48368:	10800817 	ldw	r2,32(r2)
   4836c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   48370:	e0bffe17 	ldw	r2,-8(fp)
   48374:	e0ffff17 	ldw	r3,-4(fp)
   48378:	d8000015 	stw	zero,0(sp)
   4837c:	e1fffd17 	ldw	r7,-12(fp)
   48380:	01800174 	movhi	r6,5
   48384:	31a0fd04 	addi	r6,r6,-31756
   48388:	180b883a 	mov	r5,r3
   4838c:	1009883a 	mov	r4,r2
   48390:	00491080 	call	49108 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   48394:	e0bffd17 	ldw	r2,-12(fp)
   48398:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4839c:	e0bffd17 	ldw	r2,-12(fp)
   483a0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   483a4:	00800174 	movhi	r2,5
   483a8:	10b59004 	addi	r2,r2,-10688
   483ac:	10800017 	ldw	r2,0(r2)
   483b0:	e1fffd17 	ldw	r7,-12(fp)
   483b4:	01800174 	movhi	r6,5
   483b8:	31a18004 	addi	r6,r6,-31232
   483bc:	100b883a 	mov	r5,r2
   483c0:	1809883a 	mov	r4,r3
   483c4:	0048c400 	call	48c40 <alt_alarm_start>
   483c8:	1000040e 	bge	r2,zero,483dc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   483cc:	e0fffd17 	ldw	r3,-12(fp)
   483d0:	00a00034 	movhi	r2,32768
   483d4:	10bfffc4 	addi	r2,r2,-1
   483d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   483dc:	0001883a 	nop
   483e0:	e037883a 	mov	sp,fp
   483e4:	dfc00117 	ldw	ra,4(sp)
   483e8:	df000017 	ldw	fp,0(sp)
   483ec:	dec00204 	addi	sp,sp,8
   483f0:	f800283a 	ret

000483f4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   483f4:	defff804 	addi	sp,sp,-32
   483f8:	df000715 	stw	fp,28(sp)
   483fc:	df000704 	addi	fp,sp,28
   48400:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   48404:	e0bfff17 	ldw	r2,-4(fp)
   48408:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4840c:	e0bffb17 	ldw	r2,-20(fp)
   48410:	10800017 	ldw	r2,0(r2)
   48414:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   48418:	e0bffc17 	ldw	r2,-16(fp)
   4841c:	10800104 	addi	r2,r2,4
   48420:	10800037 	ldwio	r2,0(r2)
   48424:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   48428:	e0bffd17 	ldw	r2,-12(fp)
   4842c:	1080c00c 	andi	r2,r2,768
   48430:	10006d26 	beq	r2,zero,485e8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   48434:	e0bffd17 	ldw	r2,-12(fp)
   48438:	1080400c 	andi	r2,r2,256
   4843c:	10003526 	beq	r2,zero,48514 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   48440:	00800074 	movhi	r2,1
   48444:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   48448:	e0bffb17 	ldw	r2,-20(fp)
   4844c:	10800a17 	ldw	r2,40(r2)
   48450:	10800044 	addi	r2,r2,1
   48454:	1081ffcc 	andi	r2,r2,2047
   48458:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4845c:	e0bffb17 	ldw	r2,-20(fp)
   48460:	10c00b17 	ldw	r3,44(r2)
   48464:	e0bffe17 	ldw	r2,-8(fp)
   48468:	18801526 	beq	r3,r2,484c0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4846c:	e0bffc17 	ldw	r2,-16(fp)
   48470:	10800037 	ldwio	r2,0(r2)
   48474:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   48478:	e0bff917 	ldw	r2,-28(fp)
   4847c:	10a0000c 	andi	r2,r2,32768
   48480:	10001126 	beq	r2,zero,484c8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   48484:	e0bffb17 	ldw	r2,-20(fp)
   48488:	10800a17 	ldw	r2,40(r2)
   4848c:	e0fff917 	ldw	r3,-28(fp)
   48490:	1809883a 	mov	r4,r3
   48494:	e0fffb17 	ldw	r3,-20(fp)
   48498:	1885883a 	add	r2,r3,r2
   4849c:	10800e04 	addi	r2,r2,56
   484a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   484a4:	e0bffb17 	ldw	r2,-20(fp)
   484a8:	10800a17 	ldw	r2,40(r2)
   484ac:	10800044 	addi	r2,r2,1
   484b0:	10c1ffcc 	andi	r3,r2,2047
   484b4:	e0bffb17 	ldw	r2,-20(fp)
   484b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   484bc:	003fe206 	br	48448 <__alt_data_end+0xfffe1348>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   484c0:	0001883a 	nop
   484c4:	00000106 	br	484cc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   484c8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   484cc:	e0bff917 	ldw	r2,-28(fp)
   484d0:	10bfffec 	andhi	r2,r2,65535
   484d4:	10000f26 	beq	r2,zero,48514 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   484d8:	e0bffb17 	ldw	r2,-20(fp)
   484dc:	10c00817 	ldw	r3,32(r2)
   484e0:	00bfff84 	movi	r2,-2
   484e4:	1886703a 	and	r3,r3,r2
   484e8:	e0bffb17 	ldw	r2,-20(fp)
   484ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   484f0:	e0bffc17 	ldw	r2,-16(fp)
   484f4:	10800104 	addi	r2,r2,4
   484f8:	1007883a 	mov	r3,r2
   484fc:	e0bffb17 	ldw	r2,-20(fp)
   48500:	10800817 	ldw	r2,32(r2)
   48504:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   48508:	e0bffc17 	ldw	r2,-16(fp)
   4850c:	10800104 	addi	r2,r2,4
   48510:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   48514:	e0bffd17 	ldw	r2,-12(fp)
   48518:	1080800c 	andi	r2,r2,512
   4851c:	103fbe26 	beq	r2,zero,48418 <__alt_data_end+0xfffe1318>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   48520:	e0bffd17 	ldw	r2,-12(fp)
   48524:	1004d43a 	srli	r2,r2,16
   48528:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4852c:	00001406 	br	48580 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   48530:	e0bffc17 	ldw	r2,-16(fp)
   48534:	e0fffb17 	ldw	r3,-20(fp)
   48538:	18c00d17 	ldw	r3,52(r3)
   4853c:	e13ffb17 	ldw	r4,-20(fp)
   48540:	20c7883a 	add	r3,r4,r3
   48544:	18c20e04 	addi	r3,r3,2104
   48548:	18c00003 	ldbu	r3,0(r3)
   4854c:	18c03fcc 	andi	r3,r3,255
   48550:	18c0201c 	xori	r3,r3,128
   48554:	18ffe004 	addi	r3,r3,-128
   48558:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4855c:	e0bffb17 	ldw	r2,-20(fp)
   48560:	10800d17 	ldw	r2,52(r2)
   48564:	10800044 	addi	r2,r2,1
   48568:	10c1ffcc 	andi	r3,r2,2047
   4856c:	e0bffb17 	ldw	r2,-20(fp)
   48570:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   48574:	e0bffa17 	ldw	r2,-24(fp)
   48578:	10bfffc4 	addi	r2,r2,-1
   4857c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   48580:	e0bffa17 	ldw	r2,-24(fp)
   48584:	10000526 	beq	r2,zero,4859c <altera_avalon_jtag_uart_irq+0x1a8>
   48588:	e0bffb17 	ldw	r2,-20(fp)
   4858c:	10c00d17 	ldw	r3,52(r2)
   48590:	e0bffb17 	ldw	r2,-20(fp)
   48594:	10800c17 	ldw	r2,48(r2)
   48598:	18bfe51e 	bne	r3,r2,48530 <__alt_data_end+0xfffe1430>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4859c:	e0bffa17 	ldw	r2,-24(fp)
   485a0:	103f9d26 	beq	r2,zero,48418 <__alt_data_end+0xfffe1318>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   485a4:	e0bffb17 	ldw	r2,-20(fp)
   485a8:	10c00817 	ldw	r3,32(r2)
   485ac:	00bfff44 	movi	r2,-3
   485b0:	1886703a 	and	r3,r3,r2
   485b4:	e0bffb17 	ldw	r2,-20(fp)
   485b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   485bc:	e0bffb17 	ldw	r2,-20(fp)
   485c0:	10800017 	ldw	r2,0(r2)
   485c4:	10800104 	addi	r2,r2,4
   485c8:	1007883a 	mov	r3,r2
   485cc:	e0bffb17 	ldw	r2,-20(fp)
   485d0:	10800817 	ldw	r2,32(r2)
   485d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   485d8:	e0bffc17 	ldw	r2,-16(fp)
   485dc:	10800104 	addi	r2,r2,4
   485e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   485e4:	003f8c06 	br	48418 <__alt_data_end+0xfffe1318>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   485e8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   485ec:	0001883a 	nop
   485f0:	e037883a 	mov	sp,fp
   485f4:	df000017 	ldw	fp,0(sp)
   485f8:	dec00104 	addi	sp,sp,4
   485fc:	f800283a 	ret

00048600 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   48600:	defff804 	addi	sp,sp,-32
   48604:	df000715 	stw	fp,28(sp)
   48608:	df000704 	addi	fp,sp,28
   4860c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   48610:	e0bffb17 	ldw	r2,-20(fp)
   48614:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   48618:	e0bff917 	ldw	r2,-28(fp)
   4861c:	10800017 	ldw	r2,0(r2)
   48620:	10800104 	addi	r2,r2,4
   48624:	10800037 	ldwio	r2,0(r2)
   48628:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4862c:	e0bffa17 	ldw	r2,-24(fp)
   48630:	1081000c 	andi	r2,r2,1024
   48634:	10000b26 	beq	r2,zero,48664 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   48638:	e0bff917 	ldw	r2,-28(fp)
   4863c:	10800017 	ldw	r2,0(r2)
   48640:	10800104 	addi	r2,r2,4
   48644:	1007883a 	mov	r3,r2
   48648:	e0bff917 	ldw	r2,-28(fp)
   4864c:	10800817 	ldw	r2,32(r2)
   48650:	10810014 	ori	r2,r2,1024
   48654:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   48658:	e0bff917 	ldw	r2,-28(fp)
   4865c:	10000915 	stw	zero,36(r2)
   48660:	00000a06 	br	4868c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   48664:	e0bff917 	ldw	r2,-28(fp)
   48668:	10c00917 	ldw	r3,36(r2)
   4866c:	00a00034 	movhi	r2,32768
   48670:	10bfff04 	addi	r2,r2,-4
   48674:	10c00536 	bltu	r2,r3,4868c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   48678:	e0bff917 	ldw	r2,-28(fp)
   4867c:	10800917 	ldw	r2,36(r2)
   48680:	10c00044 	addi	r3,r2,1
   48684:	e0bff917 	ldw	r2,-28(fp)
   48688:	10c00915 	stw	r3,36(r2)
   4868c:	00800174 	movhi	r2,5
   48690:	10b59004 	addi	r2,r2,-10688
   48694:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   48698:	e037883a 	mov	sp,fp
   4869c:	df000017 	ldw	fp,0(sp)
   486a0:	dec00104 	addi	sp,sp,4
   486a4:	f800283a 	ret

000486a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   486a8:	defffd04 	addi	sp,sp,-12
   486ac:	df000215 	stw	fp,8(sp)
   486b0:	df000204 	addi	fp,sp,8
   486b4:	e13ffe15 	stw	r4,-8(fp)
   486b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   486bc:	00000506 	br	486d4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   486c0:	e0bfff17 	ldw	r2,-4(fp)
   486c4:	1090000c 	andi	r2,r2,16384
   486c8:	10000226 	beq	r2,zero,486d4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   486cc:	00bffd44 	movi	r2,-11
   486d0:	00000b06 	br	48700 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   486d4:	e0bffe17 	ldw	r2,-8(fp)
   486d8:	10c00d17 	ldw	r3,52(r2)
   486dc:	e0bffe17 	ldw	r2,-8(fp)
   486e0:	10800c17 	ldw	r2,48(r2)
   486e4:	18800526 	beq	r3,r2,486fc <altera_avalon_jtag_uart_close+0x54>
   486e8:	e0bffe17 	ldw	r2,-8(fp)
   486ec:	10c00917 	ldw	r3,36(r2)
   486f0:	e0bffe17 	ldw	r2,-8(fp)
   486f4:	10800117 	ldw	r2,4(r2)
   486f8:	18bff136 	bltu	r3,r2,486c0 <__alt_data_end+0xfffe15c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   486fc:	0005883a 	mov	r2,zero
}
   48700:	e037883a 	mov	sp,fp
   48704:	df000017 	ldw	fp,0(sp)
   48708:	dec00104 	addi	sp,sp,4
   4870c:	f800283a 	ret

00048710 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   48710:	defffa04 	addi	sp,sp,-24
   48714:	df000515 	stw	fp,20(sp)
   48718:	df000504 	addi	fp,sp,20
   4871c:	e13ffd15 	stw	r4,-12(fp)
   48720:	e17ffe15 	stw	r5,-8(fp)
   48724:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   48728:	00bff9c4 	movi	r2,-25
   4872c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   48730:	e0bffe17 	ldw	r2,-8(fp)
   48734:	10da8060 	cmpeqi	r3,r2,27137
   48738:	1800031e 	bne	r3,zero,48748 <altera_avalon_jtag_uart_ioctl+0x38>
   4873c:	109a80a0 	cmpeqi	r2,r2,27138
   48740:	1000181e 	bne	r2,zero,487a4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   48744:	00002906 	br	487ec <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   48748:	e0bffd17 	ldw	r2,-12(fp)
   4874c:	10c00117 	ldw	r3,4(r2)
   48750:	00a00034 	movhi	r2,32768
   48754:	10bfffc4 	addi	r2,r2,-1
   48758:	18802126 	beq	r3,r2,487e0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   4875c:	e0bfff17 	ldw	r2,-4(fp)
   48760:	10800017 	ldw	r2,0(r2)
   48764:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   48768:	e0bffc17 	ldw	r2,-16(fp)
   4876c:	10800090 	cmplti	r2,r2,2
   48770:	1000061e 	bne	r2,zero,4878c <altera_avalon_jtag_uart_ioctl+0x7c>
   48774:	e0fffc17 	ldw	r3,-16(fp)
   48778:	00a00034 	movhi	r2,32768
   4877c:	10bfffc4 	addi	r2,r2,-1
   48780:	18800226 	beq	r3,r2,4878c <altera_avalon_jtag_uart_ioctl+0x7c>
   48784:	e0bffc17 	ldw	r2,-16(fp)
   48788:	00000206 	br	48794 <altera_avalon_jtag_uart_ioctl+0x84>
   4878c:	00a00034 	movhi	r2,32768
   48790:	10bfff84 	addi	r2,r2,-2
   48794:	e0fffd17 	ldw	r3,-12(fp)
   48798:	18800115 	stw	r2,4(r3)
      rc = 0;
   4879c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   487a0:	00000f06 	br	487e0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   487a4:	e0bffd17 	ldw	r2,-12(fp)
   487a8:	10c00117 	ldw	r3,4(r2)
   487ac:	00a00034 	movhi	r2,32768
   487b0:	10bfffc4 	addi	r2,r2,-1
   487b4:	18800c26 	beq	r3,r2,487e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   487b8:	e0bffd17 	ldw	r2,-12(fp)
   487bc:	10c00917 	ldw	r3,36(r2)
   487c0:	e0bffd17 	ldw	r2,-12(fp)
   487c4:	10800117 	ldw	r2,4(r2)
   487c8:	1885803a 	cmpltu	r2,r3,r2
   487cc:	10c03fcc 	andi	r3,r2,255
   487d0:	e0bfff17 	ldw	r2,-4(fp)
   487d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   487d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   487dc:	00000206 	br	487e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   487e0:	0001883a 	nop
   487e4:	00000106 	br	487ec <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   487e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   487ec:	e0bffb17 	ldw	r2,-20(fp)
}
   487f0:	e037883a 	mov	sp,fp
   487f4:	df000017 	ldw	fp,0(sp)
   487f8:	dec00104 	addi	sp,sp,4
   487fc:	f800283a 	ret

00048800 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   48800:	defff304 	addi	sp,sp,-52
   48804:	dfc00c15 	stw	ra,48(sp)
   48808:	df000b15 	stw	fp,44(sp)
   4880c:	df000b04 	addi	fp,sp,44
   48810:	e13ffc15 	stw	r4,-16(fp)
   48814:	e17ffd15 	stw	r5,-12(fp)
   48818:	e1bffe15 	stw	r6,-8(fp)
   4881c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   48820:	e0bffd17 	ldw	r2,-12(fp)
   48824:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   48828:	00004706 	br	48948 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4882c:	e0bffc17 	ldw	r2,-16(fp)
   48830:	10800a17 	ldw	r2,40(r2)
   48834:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   48838:	e0bffc17 	ldw	r2,-16(fp)
   4883c:	10800b17 	ldw	r2,44(r2)
   48840:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   48844:	e0fff717 	ldw	r3,-36(fp)
   48848:	e0bff817 	ldw	r2,-32(fp)
   4884c:	18800536 	bltu	r3,r2,48864 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   48850:	e0fff717 	ldw	r3,-36(fp)
   48854:	e0bff817 	ldw	r2,-32(fp)
   48858:	1885c83a 	sub	r2,r3,r2
   4885c:	e0bff615 	stw	r2,-40(fp)
   48860:	00000406 	br	48874 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   48864:	00c20004 	movi	r3,2048
   48868:	e0bff817 	ldw	r2,-32(fp)
   4886c:	1885c83a 	sub	r2,r3,r2
   48870:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   48874:	e0bff617 	ldw	r2,-40(fp)
   48878:	10001e26 	beq	r2,zero,488f4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4887c:	e0fffe17 	ldw	r3,-8(fp)
   48880:	e0bff617 	ldw	r2,-40(fp)
   48884:	1880022e 	bgeu	r3,r2,48890 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   48888:	e0bffe17 	ldw	r2,-8(fp)
   4888c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   48890:	e0bffc17 	ldw	r2,-16(fp)
   48894:	10c00e04 	addi	r3,r2,56
   48898:	e0bff817 	ldw	r2,-32(fp)
   4889c:	1885883a 	add	r2,r3,r2
   488a0:	e1bff617 	ldw	r6,-40(fp)
   488a4:	100b883a 	mov	r5,r2
   488a8:	e13ff517 	ldw	r4,-44(fp)
   488ac:	0045f4c0 	call	45f4c <memcpy>
      ptr   += n;
   488b0:	e0fff517 	ldw	r3,-44(fp)
   488b4:	e0bff617 	ldw	r2,-40(fp)
   488b8:	1885883a 	add	r2,r3,r2
   488bc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   488c0:	e0fffe17 	ldw	r3,-8(fp)
   488c4:	e0bff617 	ldw	r2,-40(fp)
   488c8:	1885c83a 	sub	r2,r3,r2
   488cc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   488d0:	e0fff817 	ldw	r3,-32(fp)
   488d4:	e0bff617 	ldw	r2,-40(fp)
   488d8:	1885883a 	add	r2,r3,r2
   488dc:	10c1ffcc 	andi	r3,r2,2047
   488e0:	e0bffc17 	ldw	r2,-16(fp)
   488e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   488e8:	e0bffe17 	ldw	r2,-8(fp)
   488ec:	00bfcf16 	blt	zero,r2,4882c <__alt_data_end+0xfffe172c>
   488f0:	00000106 	br	488f8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   488f4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   488f8:	e0fff517 	ldw	r3,-44(fp)
   488fc:	e0bffd17 	ldw	r2,-12(fp)
   48900:	1880141e 	bne	r3,r2,48954 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   48904:	e0bfff17 	ldw	r2,-4(fp)
   48908:	1090000c 	andi	r2,r2,16384
   4890c:	1000131e 	bne	r2,zero,4895c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   48910:	0001883a 	nop
   48914:	e0bffc17 	ldw	r2,-16(fp)
   48918:	10c00a17 	ldw	r3,40(r2)
   4891c:	e0bff717 	ldw	r2,-36(fp)
   48920:	1880051e 	bne	r3,r2,48938 <altera_avalon_jtag_uart_read+0x138>
   48924:	e0bffc17 	ldw	r2,-16(fp)
   48928:	10c00917 	ldw	r3,36(r2)
   4892c:	e0bffc17 	ldw	r2,-16(fp)
   48930:	10800117 	ldw	r2,4(r2)
   48934:	18bff736 	bltu	r3,r2,48914 <__alt_data_end+0xfffe1814>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   48938:	e0bffc17 	ldw	r2,-16(fp)
   4893c:	10c00a17 	ldw	r3,40(r2)
   48940:	e0bff717 	ldw	r2,-36(fp)
   48944:	18800726 	beq	r3,r2,48964 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   48948:	e0bffe17 	ldw	r2,-8(fp)
   4894c:	00bfb716 	blt	zero,r2,4882c <__alt_data_end+0xfffe172c>
   48950:	00000506 	br	48968 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   48954:	0001883a 	nop
   48958:	00000306 	br	48968 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4895c:	0001883a 	nop
   48960:	00000106 	br	48968 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   48964:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   48968:	e0fff517 	ldw	r3,-44(fp)
   4896c:	e0bffd17 	ldw	r2,-12(fp)
   48970:	18801826 	beq	r3,r2,489d4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48974:	0005303a 	rdctl	r2,status
   48978:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4897c:	e0fffb17 	ldw	r3,-20(fp)
   48980:	00bfff84 	movi	r2,-2
   48984:	1884703a 	and	r2,r3,r2
   48988:	1001703a 	wrctl	status,r2
  
  return context;
   4898c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   48990:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   48994:	e0bffc17 	ldw	r2,-16(fp)
   48998:	10800817 	ldw	r2,32(r2)
   4899c:	10c00054 	ori	r3,r2,1
   489a0:	e0bffc17 	ldw	r2,-16(fp)
   489a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   489a8:	e0bffc17 	ldw	r2,-16(fp)
   489ac:	10800017 	ldw	r2,0(r2)
   489b0:	10800104 	addi	r2,r2,4
   489b4:	1007883a 	mov	r3,r2
   489b8:	e0bffc17 	ldw	r2,-16(fp)
   489bc:	10800817 	ldw	r2,32(r2)
   489c0:	18800035 	stwio	r2,0(r3)
   489c4:	e0bffa17 	ldw	r2,-24(fp)
   489c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   489cc:	e0bff917 	ldw	r2,-28(fp)
   489d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   489d4:	e0fff517 	ldw	r3,-44(fp)
   489d8:	e0bffd17 	ldw	r2,-12(fp)
   489dc:	18800426 	beq	r3,r2,489f0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   489e0:	e0fff517 	ldw	r3,-44(fp)
   489e4:	e0bffd17 	ldw	r2,-12(fp)
   489e8:	1885c83a 	sub	r2,r3,r2
   489ec:	00000606 	br	48a08 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   489f0:	e0bfff17 	ldw	r2,-4(fp)
   489f4:	1090000c 	andi	r2,r2,16384
   489f8:	10000226 	beq	r2,zero,48a04 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   489fc:	00bffd44 	movi	r2,-11
   48a00:	00000106 	br	48a08 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   48a04:	00bffec4 	movi	r2,-5
}
   48a08:	e037883a 	mov	sp,fp
   48a0c:	dfc00117 	ldw	ra,4(sp)
   48a10:	df000017 	ldw	fp,0(sp)
   48a14:	dec00204 	addi	sp,sp,8
   48a18:	f800283a 	ret

00048a1c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   48a1c:	defff304 	addi	sp,sp,-52
   48a20:	dfc00c15 	stw	ra,48(sp)
   48a24:	df000b15 	stw	fp,44(sp)
   48a28:	df000b04 	addi	fp,sp,44
   48a2c:	e13ffc15 	stw	r4,-16(fp)
   48a30:	e17ffd15 	stw	r5,-12(fp)
   48a34:	e1bffe15 	stw	r6,-8(fp)
   48a38:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   48a3c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   48a40:	e0bffd17 	ldw	r2,-12(fp)
   48a44:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   48a48:	00003706 	br	48b28 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   48a4c:	e0bffc17 	ldw	r2,-16(fp)
   48a50:	10800c17 	ldw	r2,48(r2)
   48a54:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   48a58:	e0bffc17 	ldw	r2,-16(fp)
   48a5c:	10800d17 	ldw	r2,52(r2)
   48a60:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   48a64:	e0fff917 	ldw	r3,-28(fp)
   48a68:	e0bff517 	ldw	r2,-44(fp)
   48a6c:	1880062e 	bgeu	r3,r2,48a88 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   48a70:	e0fff517 	ldw	r3,-44(fp)
   48a74:	e0bff917 	ldw	r2,-28(fp)
   48a78:	1885c83a 	sub	r2,r3,r2
   48a7c:	10bfffc4 	addi	r2,r2,-1
   48a80:	e0bff615 	stw	r2,-40(fp)
   48a84:	00000b06 	br	48ab4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   48a88:	e0bff517 	ldw	r2,-44(fp)
   48a8c:	10000526 	beq	r2,zero,48aa4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   48a90:	00c20004 	movi	r3,2048
   48a94:	e0bff917 	ldw	r2,-28(fp)
   48a98:	1885c83a 	sub	r2,r3,r2
   48a9c:	e0bff615 	stw	r2,-40(fp)
   48aa0:	00000406 	br	48ab4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   48aa4:	00c1ffc4 	movi	r3,2047
   48aa8:	e0bff917 	ldw	r2,-28(fp)
   48aac:	1885c83a 	sub	r2,r3,r2
   48ab0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   48ab4:	e0bff617 	ldw	r2,-40(fp)
   48ab8:	10001e26 	beq	r2,zero,48b34 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   48abc:	e0fffe17 	ldw	r3,-8(fp)
   48ac0:	e0bff617 	ldw	r2,-40(fp)
   48ac4:	1880022e 	bgeu	r3,r2,48ad0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   48ac8:	e0bffe17 	ldw	r2,-8(fp)
   48acc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   48ad0:	e0bffc17 	ldw	r2,-16(fp)
   48ad4:	10c20e04 	addi	r3,r2,2104
   48ad8:	e0bff917 	ldw	r2,-28(fp)
   48adc:	1885883a 	add	r2,r3,r2
   48ae0:	e1bff617 	ldw	r6,-40(fp)
   48ae4:	e17ffd17 	ldw	r5,-12(fp)
   48ae8:	1009883a 	mov	r4,r2
   48aec:	0045f4c0 	call	45f4c <memcpy>
      ptr   += n;
   48af0:	e0fffd17 	ldw	r3,-12(fp)
   48af4:	e0bff617 	ldw	r2,-40(fp)
   48af8:	1885883a 	add	r2,r3,r2
   48afc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   48b00:	e0fffe17 	ldw	r3,-8(fp)
   48b04:	e0bff617 	ldw	r2,-40(fp)
   48b08:	1885c83a 	sub	r2,r3,r2
   48b0c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   48b10:	e0fff917 	ldw	r3,-28(fp)
   48b14:	e0bff617 	ldw	r2,-40(fp)
   48b18:	1885883a 	add	r2,r3,r2
   48b1c:	10c1ffcc 	andi	r3,r2,2047
   48b20:	e0bffc17 	ldw	r2,-16(fp)
   48b24:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   48b28:	e0bffe17 	ldw	r2,-8(fp)
   48b2c:	00bfc716 	blt	zero,r2,48a4c <__alt_data_end+0xfffe194c>
   48b30:	00000106 	br	48b38 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   48b34:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48b38:	0005303a 	rdctl	r2,status
   48b3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48b40:	e0fffb17 	ldw	r3,-20(fp)
   48b44:	00bfff84 	movi	r2,-2
   48b48:	1884703a 	and	r2,r3,r2
   48b4c:	1001703a 	wrctl	status,r2
  
  return context;
   48b50:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   48b54:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   48b58:	e0bffc17 	ldw	r2,-16(fp)
   48b5c:	10800817 	ldw	r2,32(r2)
   48b60:	10c00094 	ori	r3,r2,2
   48b64:	e0bffc17 	ldw	r2,-16(fp)
   48b68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   48b6c:	e0bffc17 	ldw	r2,-16(fp)
   48b70:	10800017 	ldw	r2,0(r2)
   48b74:	10800104 	addi	r2,r2,4
   48b78:	1007883a 	mov	r3,r2
   48b7c:	e0bffc17 	ldw	r2,-16(fp)
   48b80:	10800817 	ldw	r2,32(r2)
   48b84:	18800035 	stwio	r2,0(r3)
   48b88:	e0bffa17 	ldw	r2,-24(fp)
   48b8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48b90:	e0bff817 	ldw	r2,-32(fp)
   48b94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   48b98:	e0bffe17 	ldw	r2,-8(fp)
   48b9c:	0080100e 	bge	zero,r2,48be0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   48ba0:	e0bfff17 	ldw	r2,-4(fp)
   48ba4:	1090000c 	andi	r2,r2,16384
   48ba8:	1000101e 	bne	r2,zero,48bec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   48bac:	0001883a 	nop
   48bb0:	e0bffc17 	ldw	r2,-16(fp)
   48bb4:	10c00d17 	ldw	r3,52(r2)
   48bb8:	e0bff517 	ldw	r2,-44(fp)
   48bbc:	1880051e 	bne	r3,r2,48bd4 <altera_avalon_jtag_uart_write+0x1b8>
   48bc0:	e0bffc17 	ldw	r2,-16(fp)
   48bc4:	10c00917 	ldw	r3,36(r2)
   48bc8:	e0bffc17 	ldw	r2,-16(fp)
   48bcc:	10800117 	ldw	r2,4(r2)
   48bd0:	18bff736 	bltu	r3,r2,48bb0 <__alt_data_end+0xfffe1ab0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   48bd4:	e0bffc17 	ldw	r2,-16(fp)
   48bd8:	10800917 	ldw	r2,36(r2)
   48bdc:	1000051e 	bne	r2,zero,48bf4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   48be0:	e0bffe17 	ldw	r2,-8(fp)
   48be4:	00bfd016 	blt	zero,r2,48b28 <__alt_data_end+0xfffe1a28>
   48be8:	00000306 	br	48bf8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   48bec:	0001883a 	nop
   48bf0:	00000106 	br	48bf8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   48bf4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   48bf8:	e0fffd17 	ldw	r3,-12(fp)
   48bfc:	e0bff717 	ldw	r2,-36(fp)
   48c00:	18800426 	beq	r3,r2,48c14 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   48c04:	e0fffd17 	ldw	r3,-12(fp)
   48c08:	e0bff717 	ldw	r2,-36(fp)
   48c0c:	1885c83a 	sub	r2,r3,r2
   48c10:	00000606 	br	48c2c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   48c14:	e0bfff17 	ldw	r2,-4(fp)
   48c18:	1090000c 	andi	r2,r2,16384
   48c1c:	10000226 	beq	r2,zero,48c28 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   48c20:	00bffd44 	movi	r2,-11
   48c24:	00000106 	br	48c2c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   48c28:	00bffec4 	movi	r2,-5
}
   48c2c:	e037883a 	mov	sp,fp
   48c30:	dfc00117 	ldw	ra,4(sp)
   48c34:	df000017 	ldw	fp,0(sp)
   48c38:	dec00204 	addi	sp,sp,8
   48c3c:	f800283a 	ret

00048c40 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   48c40:	defff504 	addi	sp,sp,-44
   48c44:	df000a15 	stw	fp,40(sp)
   48c48:	df000a04 	addi	fp,sp,40
   48c4c:	e13ffc15 	stw	r4,-16(fp)
   48c50:	e17ffd15 	stw	r5,-12(fp)
   48c54:	e1bffe15 	stw	r6,-8(fp)
   48c58:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   48c5c:	e03ff615 	stw	zero,-40(fp)
   48c60:	00800174 	movhi	r2,5
   48c64:	10b59004 	addi	r2,r2,-10688
   48c68:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   48c6c:	10003f26 	beq	r2,zero,48d6c <alt_alarm_start+0x12c>
  {
    if (alarm)
   48c70:	e0bffc17 	ldw	r2,-16(fp)
   48c74:	10003b26 	beq	r2,zero,48d64 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   48c78:	e0bffc17 	ldw	r2,-16(fp)
   48c7c:	e0fffe17 	ldw	r3,-8(fp)
   48c80:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   48c84:	e0bffc17 	ldw	r2,-16(fp)
   48c88:	e0ffff17 	ldw	r3,-4(fp)
   48c8c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   48c90:	0005303a 	rdctl	r2,status
   48c94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   48c98:	e0fff917 	ldw	r3,-28(fp)
   48c9c:	00bfff84 	movi	r2,-2
   48ca0:	1884703a 	and	r2,r3,r2
   48ca4:	1001703a 	wrctl	status,r2
  
  return context;
   48ca8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   48cac:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   48cb0:	00800174 	movhi	r2,5
   48cb4:	10b59104 	addi	r2,r2,-10684
   48cb8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   48cbc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   48cc0:	e0fffd17 	ldw	r3,-12(fp)
   48cc4:	e0bff617 	ldw	r2,-40(fp)
   48cc8:	1885883a 	add	r2,r3,r2
   48ccc:	10c00044 	addi	r3,r2,1
   48cd0:	e0bffc17 	ldw	r2,-16(fp)
   48cd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   48cd8:	e0bffc17 	ldw	r2,-16(fp)
   48cdc:	10c00217 	ldw	r3,8(r2)
   48ce0:	e0bff617 	ldw	r2,-40(fp)
   48ce4:	1880042e 	bgeu	r3,r2,48cf8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   48ce8:	e0bffc17 	ldw	r2,-16(fp)
   48cec:	00c00044 	movi	r3,1
   48cf0:	10c00405 	stb	r3,16(r2)
   48cf4:	00000206 	br	48d00 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   48cf8:	e0bffc17 	ldw	r2,-16(fp)
   48cfc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   48d00:	e0fffc17 	ldw	r3,-16(fp)
   48d04:	00800174 	movhi	r2,5
   48d08:	10aeea04 	addi	r2,r2,-17496
   48d0c:	e0bffa15 	stw	r2,-24(fp)
   48d10:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   48d14:	e0bffb17 	ldw	r2,-20(fp)
   48d18:	e0fffa17 	ldw	r3,-24(fp)
   48d1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   48d20:	e0bffa17 	ldw	r2,-24(fp)
   48d24:	10c00017 	ldw	r3,0(r2)
   48d28:	e0bffb17 	ldw	r2,-20(fp)
   48d2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   48d30:	e0bffa17 	ldw	r2,-24(fp)
   48d34:	10800017 	ldw	r2,0(r2)
   48d38:	e0fffb17 	ldw	r3,-20(fp)
   48d3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   48d40:	e0bffa17 	ldw	r2,-24(fp)
   48d44:	e0fffb17 	ldw	r3,-20(fp)
   48d48:	10c00015 	stw	r3,0(r2)
   48d4c:	e0bff817 	ldw	r2,-32(fp)
   48d50:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   48d54:	e0bff717 	ldw	r2,-36(fp)
   48d58:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   48d5c:	0005883a 	mov	r2,zero
   48d60:	00000306 	br	48d70 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   48d64:	00bffa84 	movi	r2,-22
   48d68:	00000106 	br	48d70 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   48d6c:	00bfde84 	movi	r2,-134
  }
}
   48d70:	e037883a 	mov	sp,fp
   48d74:	df000017 	ldw	fp,0(sp)
   48d78:	dec00104 	addi	sp,sp,4
   48d7c:	f800283a 	ret

00048d80 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   48d80:	defffa04 	addi	sp,sp,-24
   48d84:	dfc00515 	stw	ra,20(sp)
   48d88:	df000415 	stw	fp,16(sp)
   48d8c:	df000404 	addi	fp,sp,16
   48d90:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   48d94:	008000c4 	movi	r2,3
   48d98:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   48d9c:	e0fffd17 	ldw	r3,-12(fp)
   48da0:	008003f4 	movhi	r2,15
   48da4:	10909004 	addi	r2,r2,16960
   48da8:	1885383a 	mul	r2,r3,r2
   48dac:	100b883a 	mov	r5,r2
   48db0:	01017db4 	movhi	r4,1526
   48db4:	21384004 	addi	r4,r4,-7936
   48db8:	0044a400 	call	44a40 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   48dbc:	100b883a 	mov	r5,r2
   48dc0:	01200034 	movhi	r4,32768
   48dc4:	213fffc4 	addi	r4,r4,-1
   48dc8:	0044a400 	call	44a40 <__udivsi3>
   48dcc:	100b883a 	mov	r5,r2
   48dd0:	e13fff17 	ldw	r4,-4(fp)
   48dd4:	0044a400 	call	44a40 <__udivsi3>
   48dd8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   48ddc:	e0bffe17 	ldw	r2,-8(fp)
   48de0:	10002a26 	beq	r2,zero,48e8c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   48de4:	e03ffc15 	stw	zero,-16(fp)
   48de8:	00001706 	br	48e48 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   48dec:	00a00034 	movhi	r2,32768
   48df0:	10bfffc4 	addi	r2,r2,-1
   48df4:	10bfffc4 	addi	r2,r2,-1
   48df8:	103ffe1e 	bne	r2,zero,48df4 <__alt_data_end+0xfffe1cf4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   48dfc:	e0fffd17 	ldw	r3,-12(fp)
   48e00:	008003f4 	movhi	r2,15
   48e04:	10909004 	addi	r2,r2,16960
   48e08:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   48e0c:	100b883a 	mov	r5,r2
   48e10:	01017db4 	movhi	r4,1526
   48e14:	21384004 	addi	r4,r4,-7936
   48e18:	0044a400 	call	44a40 <__udivsi3>
   48e1c:	100b883a 	mov	r5,r2
   48e20:	01200034 	movhi	r4,32768
   48e24:	213fffc4 	addi	r4,r4,-1
   48e28:	0044a400 	call	44a40 <__udivsi3>
   48e2c:	1007883a 	mov	r3,r2
   48e30:	e0bfff17 	ldw	r2,-4(fp)
   48e34:	10c5c83a 	sub	r2,r2,r3
   48e38:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   48e3c:	e0bffc17 	ldw	r2,-16(fp)
   48e40:	10800044 	addi	r2,r2,1
   48e44:	e0bffc15 	stw	r2,-16(fp)
   48e48:	e0fffc17 	ldw	r3,-16(fp)
   48e4c:	e0bffe17 	ldw	r2,-8(fp)
   48e50:	18bfe616 	blt	r3,r2,48dec <__alt_data_end+0xfffe1cec>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   48e54:	e0fffd17 	ldw	r3,-12(fp)
   48e58:	008003f4 	movhi	r2,15
   48e5c:	10909004 	addi	r2,r2,16960
   48e60:	1885383a 	mul	r2,r3,r2
   48e64:	100b883a 	mov	r5,r2
   48e68:	01017db4 	movhi	r4,1526
   48e6c:	21384004 	addi	r4,r4,-7936
   48e70:	0044a400 	call	44a40 <__udivsi3>
   48e74:	1007883a 	mov	r3,r2
   48e78:	e0bfff17 	ldw	r2,-4(fp)
   48e7c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   48e80:	10bfffc4 	addi	r2,r2,-1
   48e84:	103ffe1e 	bne	r2,zero,48e80 <__alt_data_end+0xfffe1d80>
   48e88:	00000d06 	br	48ec0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   48e8c:	e0fffd17 	ldw	r3,-12(fp)
   48e90:	008003f4 	movhi	r2,15
   48e94:	10909004 	addi	r2,r2,16960
   48e98:	1885383a 	mul	r2,r3,r2
   48e9c:	100b883a 	mov	r5,r2
   48ea0:	01017db4 	movhi	r4,1526
   48ea4:	21384004 	addi	r4,r4,-7936
   48ea8:	0044a400 	call	44a40 <__udivsi3>
   48eac:	1007883a 	mov	r3,r2
   48eb0:	e0bfff17 	ldw	r2,-4(fp)
   48eb4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   48eb8:	10bfffc4 	addi	r2,r2,-1
   48ebc:	00bffe16 	blt	zero,r2,48eb8 <__alt_data_end+0xfffe1db8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   48ec0:	0005883a 	mov	r2,zero
}
   48ec4:	e037883a 	mov	sp,fp
   48ec8:	dfc00117 	ldw	ra,4(sp)
   48ecc:	df000017 	ldw	fp,0(sp)
   48ed0:	dec00204 	addi	sp,sp,8
   48ed4:	f800283a 	ret

00048ed8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   48ed8:	defffe04 	addi	sp,sp,-8
   48edc:	df000115 	stw	fp,4(sp)
   48ee0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   48ee4:	e03fff15 	stw	zero,-4(fp)
   48ee8:	00000506 	br	48f00 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   48eec:	e0bfff17 	ldw	r2,-4(fp)
   48ef0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   48ef4:	e0bfff17 	ldw	r2,-4(fp)
   48ef8:	10800804 	addi	r2,r2,32
   48efc:	e0bfff15 	stw	r2,-4(fp)
   48f00:	e0bfff17 	ldw	r2,-4(fp)
   48f04:	10820030 	cmpltui	r2,r2,2048
   48f08:	103ff81e 	bne	r2,zero,48eec <__alt_data_end+0xfffe1dec>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   48f0c:	0001883a 	nop
   48f10:	e037883a 	mov	sp,fp
   48f14:	df000017 	ldw	fp,0(sp)
   48f18:	dec00104 	addi	sp,sp,4
   48f1c:	f800283a 	ret

00048f20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   48f20:	defffe04 	addi	sp,sp,-8
   48f24:	dfc00115 	stw	ra,4(sp)
   48f28:	df000015 	stw	fp,0(sp)
   48f2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   48f30:	00800174 	movhi	r2,5
   48f34:	10aee704 	addi	r2,r2,-17508
   48f38:	10800017 	ldw	r2,0(r2)
   48f3c:	10000526 	beq	r2,zero,48f54 <alt_get_errno+0x34>
   48f40:	00800174 	movhi	r2,5
   48f44:	10aee704 	addi	r2,r2,-17508
   48f48:	10800017 	ldw	r2,0(r2)
   48f4c:	103ee83a 	callr	r2
   48f50:	00000206 	br	48f5c <alt_get_errno+0x3c>
   48f54:	00800174 	movhi	r2,5
   48f58:	10b58b04 	addi	r2,r2,-10708
}
   48f5c:	e037883a 	mov	sp,fp
   48f60:	dfc00117 	ldw	ra,4(sp)
   48f64:	df000017 	ldw	fp,0(sp)
   48f68:	dec00204 	addi	sp,sp,8
   48f6c:	f800283a 	ret

00048f70 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   48f70:	defffa04 	addi	sp,sp,-24
   48f74:	dfc00515 	stw	ra,20(sp)
   48f78:	df000415 	stw	fp,16(sp)
   48f7c:	df000404 	addi	fp,sp,16
   48f80:	e13ffe15 	stw	r4,-8(fp)
   48f84:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   48f88:	e0bffe17 	ldw	r2,-8(fp)
   48f8c:	10000326 	beq	r2,zero,48f9c <alt_dev_llist_insert+0x2c>
   48f90:	e0bffe17 	ldw	r2,-8(fp)
   48f94:	10800217 	ldw	r2,8(r2)
   48f98:	1000061e 	bne	r2,zero,48fb4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   48f9c:	0048f200 	call	48f20 <alt_get_errno>
   48fa0:	1007883a 	mov	r3,r2
   48fa4:	00800584 	movi	r2,22
   48fa8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   48fac:	00bffa84 	movi	r2,-22
   48fb0:	00001306 	br	49000 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   48fb4:	e0bffe17 	ldw	r2,-8(fp)
   48fb8:	e0ffff17 	ldw	r3,-4(fp)
   48fbc:	e0fffc15 	stw	r3,-16(fp)
   48fc0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   48fc4:	e0bffd17 	ldw	r2,-12(fp)
   48fc8:	e0fffc17 	ldw	r3,-16(fp)
   48fcc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   48fd0:	e0bffc17 	ldw	r2,-16(fp)
   48fd4:	10c00017 	ldw	r3,0(r2)
   48fd8:	e0bffd17 	ldw	r2,-12(fp)
   48fdc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   48fe0:	e0bffc17 	ldw	r2,-16(fp)
   48fe4:	10800017 	ldw	r2,0(r2)
   48fe8:	e0fffd17 	ldw	r3,-12(fp)
   48fec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   48ff0:	e0bffc17 	ldw	r2,-16(fp)
   48ff4:	e0fffd17 	ldw	r3,-12(fp)
   48ff8:	10c00015 	stw	r3,0(r2)

  return 0;  
   48ffc:	0005883a 	mov	r2,zero
}
   49000:	e037883a 	mov	sp,fp
   49004:	dfc00117 	ldw	ra,4(sp)
   49008:	df000017 	ldw	fp,0(sp)
   4900c:	dec00204 	addi	sp,sp,8
   49010:	f800283a 	ret

00049014 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   49014:	defffd04 	addi	sp,sp,-12
   49018:	dfc00215 	stw	ra,8(sp)
   4901c:	df000115 	stw	fp,4(sp)
   49020:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   49024:	00800174 	movhi	r2,5
   49028:	10a7f304 	addi	r2,r2,-24628
   4902c:	e0bfff15 	stw	r2,-4(fp)
   49030:	00000606 	br	4904c <_do_ctors+0x38>
        (*ctor) (); 
   49034:	e0bfff17 	ldw	r2,-4(fp)
   49038:	10800017 	ldw	r2,0(r2)
   4903c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   49040:	e0bfff17 	ldw	r2,-4(fp)
   49044:	10bfff04 	addi	r2,r2,-4
   49048:	e0bfff15 	stw	r2,-4(fp)
   4904c:	e0ffff17 	ldw	r3,-4(fp)
   49050:	00800174 	movhi	r2,5
   49054:	10a7f404 	addi	r2,r2,-24624
   49058:	18bff62e 	bgeu	r3,r2,49034 <__alt_data_end+0xfffe1f34>
        (*ctor) (); 
}
   4905c:	0001883a 	nop
   49060:	e037883a 	mov	sp,fp
   49064:	dfc00117 	ldw	ra,4(sp)
   49068:	df000017 	ldw	fp,0(sp)
   4906c:	dec00204 	addi	sp,sp,8
   49070:	f800283a 	ret

00049074 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   49074:	defffd04 	addi	sp,sp,-12
   49078:	dfc00215 	stw	ra,8(sp)
   4907c:	df000115 	stw	fp,4(sp)
   49080:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   49084:	00800174 	movhi	r2,5
   49088:	10a7f304 	addi	r2,r2,-24628
   4908c:	e0bfff15 	stw	r2,-4(fp)
   49090:	00000606 	br	490ac <_do_dtors+0x38>
        (*dtor) (); 
   49094:	e0bfff17 	ldw	r2,-4(fp)
   49098:	10800017 	ldw	r2,0(r2)
   4909c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   490a0:	e0bfff17 	ldw	r2,-4(fp)
   490a4:	10bfff04 	addi	r2,r2,-4
   490a8:	e0bfff15 	stw	r2,-4(fp)
   490ac:	e0ffff17 	ldw	r3,-4(fp)
   490b0:	00800174 	movhi	r2,5
   490b4:	10a7f404 	addi	r2,r2,-24624
   490b8:	18bff62e 	bgeu	r3,r2,49094 <__alt_data_end+0xfffe1f94>
        (*dtor) (); 
}
   490bc:	0001883a 	nop
   490c0:	e037883a 	mov	sp,fp
   490c4:	dfc00117 	ldw	ra,4(sp)
   490c8:	df000017 	ldw	fp,0(sp)
   490cc:	dec00204 	addi	sp,sp,8
   490d0:	f800283a 	ret

000490d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   490d4:	defffe04 	addi	sp,sp,-8
   490d8:	dfc00115 	stw	ra,4(sp)
   490dc:	df000015 	stw	fp,0(sp)
   490e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   490e4:	01440004 	movi	r5,4096
   490e8:	0009883a 	mov	r4,zero
   490ec:	0049bac0 	call	49bac <alt_icache_flush>
#endif
}
   490f0:	0001883a 	nop
   490f4:	e037883a 	mov	sp,fp
   490f8:	dfc00117 	ldw	ra,4(sp)
   490fc:	df000017 	ldw	fp,0(sp)
   49100:	dec00204 	addi	sp,sp,8
   49104:	f800283a 	ret

00049108 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   49108:	defff904 	addi	sp,sp,-28
   4910c:	dfc00615 	stw	ra,24(sp)
   49110:	df000515 	stw	fp,20(sp)
   49114:	df000504 	addi	fp,sp,20
   49118:	e13ffc15 	stw	r4,-16(fp)
   4911c:	e17ffd15 	stw	r5,-12(fp)
   49120:	e1bffe15 	stw	r6,-8(fp)
   49124:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   49128:	e0800217 	ldw	r2,8(fp)
   4912c:	d8800015 	stw	r2,0(sp)
   49130:	e1ffff17 	ldw	r7,-4(fp)
   49134:	e1bffe17 	ldw	r6,-8(fp)
   49138:	e17ffd17 	ldw	r5,-12(fp)
   4913c:	e13ffc17 	ldw	r4,-16(fp)
   49140:	00492e80 	call	492e8 <alt_iic_isr_register>
}  
   49144:	e037883a 	mov	sp,fp
   49148:	dfc00117 	ldw	ra,4(sp)
   4914c:	df000017 	ldw	fp,0(sp)
   49150:	dec00204 	addi	sp,sp,8
   49154:	f800283a 	ret

00049158 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   49158:	defff904 	addi	sp,sp,-28
   4915c:	df000615 	stw	fp,24(sp)
   49160:	df000604 	addi	fp,sp,24
   49164:	e13ffe15 	stw	r4,-8(fp)
   49168:	e17fff15 	stw	r5,-4(fp)
   4916c:	e0bfff17 	ldw	r2,-4(fp)
   49170:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49174:	0005303a 	rdctl	r2,status
   49178:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4917c:	e0fffb17 	ldw	r3,-20(fp)
   49180:	00bfff84 	movi	r2,-2
   49184:	1884703a 	and	r2,r3,r2
   49188:	1001703a 	wrctl	status,r2
  
  return context;
   4918c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   49190:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   49194:	00c00044 	movi	r3,1
   49198:	e0bffa17 	ldw	r2,-24(fp)
   4919c:	1884983a 	sll	r2,r3,r2
   491a0:	1007883a 	mov	r3,r2
   491a4:	00800174 	movhi	r2,5
   491a8:	10b58f04 	addi	r2,r2,-10692
   491ac:	10800017 	ldw	r2,0(r2)
   491b0:	1886b03a 	or	r3,r3,r2
   491b4:	00800174 	movhi	r2,5
   491b8:	10b58f04 	addi	r2,r2,-10692
   491bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   491c0:	00800174 	movhi	r2,5
   491c4:	10b58f04 	addi	r2,r2,-10692
   491c8:	10800017 	ldw	r2,0(r2)
   491cc:	100170fa 	wrctl	ienable,r2
   491d0:	e0bffc17 	ldw	r2,-16(fp)
   491d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   491d8:	e0bffd17 	ldw	r2,-12(fp)
   491dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   491e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   491e4:	0001883a 	nop
}
   491e8:	e037883a 	mov	sp,fp
   491ec:	df000017 	ldw	fp,0(sp)
   491f0:	dec00104 	addi	sp,sp,4
   491f4:	f800283a 	ret

000491f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   491f8:	defff904 	addi	sp,sp,-28
   491fc:	df000615 	stw	fp,24(sp)
   49200:	df000604 	addi	fp,sp,24
   49204:	e13ffe15 	stw	r4,-8(fp)
   49208:	e17fff15 	stw	r5,-4(fp)
   4920c:	e0bfff17 	ldw	r2,-4(fp)
   49210:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49214:	0005303a 	rdctl	r2,status
   49218:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4921c:	e0fffb17 	ldw	r3,-20(fp)
   49220:	00bfff84 	movi	r2,-2
   49224:	1884703a 	and	r2,r3,r2
   49228:	1001703a 	wrctl	status,r2
  
  return context;
   4922c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   49230:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   49234:	00c00044 	movi	r3,1
   49238:	e0bffa17 	ldw	r2,-24(fp)
   4923c:	1884983a 	sll	r2,r3,r2
   49240:	0084303a 	nor	r2,zero,r2
   49244:	1007883a 	mov	r3,r2
   49248:	00800174 	movhi	r2,5
   4924c:	10b58f04 	addi	r2,r2,-10692
   49250:	10800017 	ldw	r2,0(r2)
   49254:	1886703a 	and	r3,r3,r2
   49258:	00800174 	movhi	r2,5
   4925c:	10b58f04 	addi	r2,r2,-10692
   49260:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   49264:	00800174 	movhi	r2,5
   49268:	10b58f04 	addi	r2,r2,-10692
   4926c:	10800017 	ldw	r2,0(r2)
   49270:	100170fa 	wrctl	ienable,r2
   49274:	e0bffc17 	ldw	r2,-16(fp)
   49278:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4927c:	e0bffd17 	ldw	r2,-12(fp)
   49280:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   49284:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   49288:	0001883a 	nop
}
   4928c:	e037883a 	mov	sp,fp
   49290:	df000017 	ldw	fp,0(sp)
   49294:	dec00104 	addi	sp,sp,4
   49298:	f800283a 	ret

0004929c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4929c:	defffc04 	addi	sp,sp,-16
   492a0:	df000315 	stw	fp,12(sp)
   492a4:	df000304 	addi	fp,sp,12
   492a8:	e13ffe15 	stw	r4,-8(fp)
   492ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   492b0:	000530fa 	rdctl	r2,ienable
   492b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   492b8:	00c00044 	movi	r3,1
   492bc:	e0bfff17 	ldw	r2,-4(fp)
   492c0:	1884983a 	sll	r2,r3,r2
   492c4:	1007883a 	mov	r3,r2
   492c8:	e0bffd17 	ldw	r2,-12(fp)
   492cc:	1884703a 	and	r2,r3,r2
   492d0:	1004c03a 	cmpne	r2,r2,zero
   492d4:	10803fcc 	andi	r2,r2,255
}
   492d8:	e037883a 	mov	sp,fp
   492dc:	df000017 	ldw	fp,0(sp)
   492e0:	dec00104 	addi	sp,sp,4
   492e4:	f800283a 	ret

000492e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   492e8:	defff504 	addi	sp,sp,-44
   492ec:	dfc00a15 	stw	ra,40(sp)
   492f0:	df000915 	stw	fp,36(sp)
   492f4:	df000904 	addi	fp,sp,36
   492f8:	e13ffc15 	stw	r4,-16(fp)
   492fc:	e17ffd15 	stw	r5,-12(fp)
   49300:	e1bffe15 	stw	r6,-8(fp)
   49304:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   49308:	00bffa84 	movi	r2,-22
   4930c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   49310:	e0bffd17 	ldw	r2,-12(fp)
   49314:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   49318:	e0bff817 	ldw	r2,-32(fp)
   4931c:	10800808 	cmpgei	r2,r2,32
   49320:	1000271e 	bne	r2,zero,493c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   49324:	0005303a 	rdctl	r2,status
   49328:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4932c:	e0fffb17 	ldw	r3,-20(fp)
   49330:	00bfff84 	movi	r2,-2
   49334:	1884703a 	and	r2,r3,r2
   49338:	1001703a 	wrctl	status,r2
  
  return context;
   4933c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   49340:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   49344:	00800174 	movhi	r2,5
   49348:	10b59c04 	addi	r2,r2,-10640
   4934c:	e0fff817 	ldw	r3,-32(fp)
   49350:	180690fa 	slli	r3,r3,3
   49354:	10c5883a 	add	r2,r2,r3
   49358:	e0fffe17 	ldw	r3,-8(fp)
   4935c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   49360:	00800174 	movhi	r2,5
   49364:	10b59c04 	addi	r2,r2,-10640
   49368:	e0fff817 	ldw	r3,-32(fp)
   4936c:	180690fa 	slli	r3,r3,3
   49370:	10c5883a 	add	r2,r2,r3
   49374:	10800104 	addi	r2,r2,4
   49378:	e0ffff17 	ldw	r3,-4(fp)
   4937c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   49380:	e0bffe17 	ldw	r2,-8(fp)
   49384:	10000526 	beq	r2,zero,4939c <alt_iic_isr_register+0xb4>
   49388:	e0bff817 	ldw	r2,-32(fp)
   4938c:	100b883a 	mov	r5,r2
   49390:	e13ffc17 	ldw	r4,-16(fp)
   49394:	00491580 	call	49158 <alt_ic_irq_enable>
   49398:	00000406 	br	493ac <alt_iic_isr_register+0xc4>
   4939c:	e0bff817 	ldw	r2,-32(fp)
   493a0:	100b883a 	mov	r5,r2
   493a4:	e13ffc17 	ldw	r4,-16(fp)
   493a8:	00491f80 	call	491f8 <alt_ic_irq_disable>
   493ac:	e0bff715 	stw	r2,-36(fp)
   493b0:	e0bffa17 	ldw	r2,-24(fp)
   493b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   493b8:	e0bff917 	ldw	r2,-28(fp)
   493bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   493c0:	e0bff717 	ldw	r2,-36(fp)
}
   493c4:	e037883a 	mov	sp,fp
   493c8:	dfc00117 	ldw	ra,4(sp)
   493cc:	df000017 	ldw	fp,0(sp)
   493d0:	dec00204 	addi	sp,sp,8
   493d4:	f800283a 	ret

000493d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   493d8:	defff904 	addi	sp,sp,-28
   493dc:	dfc00615 	stw	ra,24(sp)
   493e0:	df000515 	stw	fp,20(sp)
   493e4:	df000504 	addi	fp,sp,20
   493e8:	e13ffc15 	stw	r4,-16(fp)
   493ec:	e17ffd15 	stw	r5,-12(fp)
   493f0:	e1bffe15 	stw	r6,-8(fp)
   493f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   493f8:	e1bfff17 	ldw	r6,-4(fp)
   493fc:	e17ffe17 	ldw	r5,-8(fp)
   49400:	e13ffd17 	ldw	r4,-12(fp)
   49404:	00496340 	call	49634 <open>
   49408:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4940c:	e0bffb17 	ldw	r2,-20(fp)
   49410:	10001c16 	blt	r2,zero,49484 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   49414:	00800174 	movhi	r2,5
   49418:	10aa6504 	addi	r2,r2,-22124
   4941c:	e0fffb17 	ldw	r3,-20(fp)
   49420:	18c00324 	muli	r3,r3,12
   49424:	10c5883a 	add	r2,r2,r3
   49428:	10c00017 	ldw	r3,0(r2)
   4942c:	e0bffc17 	ldw	r2,-16(fp)
   49430:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   49434:	00800174 	movhi	r2,5
   49438:	10aa6504 	addi	r2,r2,-22124
   4943c:	e0fffb17 	ldw	r3,-20(fp)
   49440:	18c00324 	muli	r3,r3,12
   49444:	10c5883a 	add	r2,r2,r3
   49448:	10800104 	addi	r2,r2,4
   4944c:	10c00017 	ldw	r3,0(r2)
   49450:	e0bffc17 	ldw	r2,-16(fp)
   49454:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   49458:	00800174 	movhi	r2,5
   4945c:	10aa6504 	addi	r2,r2,-22124
   49460:	e0fffb17 	ldw	r3,-20(fp)
   49464:	18c00324 	muli	r3,r3,12
   49468:	10c5883a 	add	r2,r2,r3
   4946c:	10800204 	addi	r2,r2,8
   49470:	10c00017 	ldw	r3,0(r2)
   49474:	e0bffc17 	ldw	r2,-16(fp)
   49478:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4947c:	e13ffb17 	ldw	r4,-20(fp)
   49480:	0047e800 	call	47e80 <alt_release_fd>
  }
} 
   49484:	0001883a 	nop
   49488:	e037883a 	mov	sp,fp
   4948c:	dfc00117 	ldw	ra,4(sp)
   49490:	df000017 	ldw	fp,0(sp)
   49494:	dec00204 	addi	sp,sp,8
   49498:	f800283a 	ret

0004949c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4949c:	defffb04 	addi	sp,sp,-20
   494a0:	dfc00415 	stw	ra,16(sp)
   494a4:	df000315 	stw	fp,12(sp)
   494a8:	df000304 	addi	fp,sp,12
   494ac:	e13ffd15 	stw	r4,-12(fp)
   494b0:	e17ffe15 	stw	r5,-8(fp)
   494b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   494b8:	01c07fc4 	movi	r7,511
   494bc:	01800044 	movi	r6,1
   494c0:	e17ffd17 	ldw	r5,-12(fp)
   494c4:	01000174 	movhi	r4,5
   494c8:	212a6804 	addi	r4,r4,-22112
   494cc:	00493d80 	call	493d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   494d0:	01c07fc4 	movi	r7,511
   494d4:	000d883a 	mov	r6,zero
   494d8:	e17ffe17 	ldw	r5,-8(fp)
   494dc:	01000174 	movhi	r4,5
   494e0:	212a6504 	addi	r4,r4,-22124
   494e4:	00493d80 	call	493d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   494e8:	01c07fc4 	movi	r7,511
   494ec:	01800044 	movi	r6,1
   494f0:	e17fff17 	ldw	r5,-4(fp)
   494f4:	01000174 	movhi	r4,5
   494f8:	212a6b04 	addi	r4,r4,-22100
   494fc:	00493d80 	call	493d8 <alt_open_fd>
}  
   49500:	0001883a 	nop
   49504:	e037883a 	mov	sp,fp
   49508:	dfc00117 	ldw	ra,4(sp)
   4950c:	df000017 	ldw	fp,0(sp)
   49510:	dec00204 	addi	sp,sp,8
   49514:	f800283a 	ret

00049518 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49518:	defffe04 	addi	sp,sp,-8
   4951c:	dfc00115 	stw	ra,4(sp)
   49520:	df000015 	stw	fp,0(sp)
   49524:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   49528:	00800174 	movhi	r2,5
   4952c:	10aee704 	addi	r2,r2,-17508
   49530:	10800017 	ldw	r2,0(r2)
   49534:	10000526 	beq	r2,zero,4954c <alt_get_errno+0x34>
   49538:	00800174 	movhi	r2,5
   4953c:	10aee704 	addi	r2,r2,-17508
   49540:	10800017 	ldw	r2,0(r2)
   49544:	103ee83a 	callr	r2
   49548:	00000206 	br	49554 <alt_get_errno+0x3c>
   4954c:	00800174 	movhi	r2,5
   49550:	10b58b04 	addi	r2,r2,-10708
}
   49554:	e037883a 	mov	sp,fp
   49558:	dfc00117 	ldw	ra,4(sp)
   4955c:	df000017 	ldw	fp,0(sp)
   49560:	dec00204 	addi	sp,sp,8
   49564:	f800283a 	ret

00049568 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   49568:	defffd04 	addi	sp,sp,-12
   4956c:	df000215 	stw	fp,8(sp)
   49570:	df000204 	addi	fp,sp,8
   49574:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   49578:	e0bfff17 	ldw	r2,-4(fp)
   4957c:	10800217 	ldw	r2,8(r2)
   49580:	10d00034 	orhi	r3,r2,16384
   49584:	e0bfff17 	ldw	r2,-4(fp)
   49588:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4958c:	e03ffe15 	stw	zero,-8(fp)
   49590:	00001d06 	br	49608 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   49594:	00800174 	movhi	r2,5
   49598:	10aa6504 	addi	r2,r2,-22124
   4959c:	e0fffe17 	ldw	r3,-8(fp)
   495a0:	18c00324 	muli	r3,r3,12
   495a4:	10c5883a 	add	r2,r2,r3
   495a8:	10c00017 	ldw	r3,0(r2)
   495ac:	e0bfff17 	ldw	r2,-4(fp)
   495b0:	10800017 	ldw	r2,0(r2)
   495b4:	1880111e 	bne	r3,r2,495fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   495b8:	00800174 	movhi	r2,5
   495bc:	10aa6504 	addi	r2,r2,-22124
   495c0:	e0fffe17 	ldw	r3,-8(fp)
   495c4:	18c00324 	muli	r3,r3,12
   495c8:	10c5883a 	add	r2,r2,r3
   495cc:	10800204 	addi	r2,r2,8
   495d0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   495d4:	1000090e 	bge	r2,zero,495fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   495d8:	e0bffe17 	ldw	r2,-8(fp)
   495dc:	10c00324 	muli	r3,r2,12
   495e0:	00800174 	movhi	r2,5
   495e4:	10aa6504 	addi	r2,r2,-22124
   495e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   495ec:	e0bfff17 	ldw	r2,-4(fp)
   495f0:	18800226 	beq	r3,r2,495fc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   495f4:	00bffcc4 	movi	r2,-13
   495f8:	00000a06 	br	49624 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   495fc:	e0bffe17 	ldw	r2,-8(fp)
   49600:	10800044 	addi	r2,r2,1
   49604:	e0bffe15 	stw	r2,-8(fp)
   49608:	00800174 	movhi	r2,5
   4960c:	10aee604 	addi	r2,r2,-17512
   49610:	10800017 	ldw	r2,0(r2)
   49614:	1007883a 	mov	r3,r2
   49618:	e0bffe17 	ldw	r2,-8(fp)
   4961c:	18bfdd2e 	bgeu	r3,r2,49594 <__alt_data_end+0xfffe2494>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   49620:	0005883a 	mov	r2,zero
}
   49624:	e037883a 	mov	sp,fp
   49628:	df000017 	ldw	fp,0(sp)
   4962c:	dec00104 	addi	sp,sp,4
   49630:	f800283a 	ret

00049634 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   49634:	defff604 	addi	sp,sp,-40
   49638:	dfc00915 	stw	ra,36(sp)
   4963c:	df000815 	stw	fp,32(sp)
   49640:	df000804 	addi	fp,sp,32
   49644:	e13ffd15 	stw	r4,-12(fp)
   49648:	e17ffe15 	stw	r5,-8(fp)
   4964c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   49650:	00bfffc4 	movi	r2,-1
   49654:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   49658:	00bffb44 	movi	r2,-19
   4965c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   49660:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   49664:	01400174 	movhi	r5,5
   49668:	296ee404 	addi	r5,r5,-17520
   4966c:	e13ffd17 	ldw	r4,-12(fp)
   49670:	00499540 	call	49954 <alt_find_dev>
   49674:	e0bff815 	stw	r2,-32(fp)
   49678:	e0bff817 	ldw	r2,-32(fp)
   4967c:	1000051e 	bne	r2,zero,49694 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   49680:	e13ffd17 	ldw	r4,-12(fp)
   49684:	00499e40 	call	499e4 <alt_find_file>
   49688:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4968c:	00800044 	movi	r2,1
   49690:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   49694:	e0bff817 	ldw	r2,-32(fp)
   49698:	10002926 	beq	r2,zero,49740 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4969c:	e13ff817 	ldw	r4,-32(fp)
   496a0:	0049af80 	call	49af8 <alt_get_fd>
   496a4:	e0bff915 	stw	r2,-28(fp)
   496a8:	e0bff917 	ldw	r2,-28(fp)
   496ac:	1000030e 	bge	r2,zero,496bc <open+0x88>
    {
      status = index;
   496b0:	e0bff917 	ldw	r2,-28(fp)
   496b4:	e0bffa15 	stw	r2,-24(fp)
   496b8:	00002306 	br	49748 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   496bc:	e0bff917 	ldw	r2,-28(fp)
   496c0:	10c00324 	muli	r3,r2,12
   496c4:	00800174 	movhi	r2,5
   496c8:	10aa6504 	addi	r2,r2,-22124
   496cc:	1885883a 	add	r2,r3,r2
   496d0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   496d4:	e0fffe17 	ldw	r3,-8(fp)
   496d8:	00900034 	movhi	r2,16384
   496dc:	10bfffc4 	addi	r2,r2,-1
   496e0:	1886703a 	and	r3,r3,r2
   496e4:	e0bffc17 	ldw	r2,-16(fp)
   496e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   496ec:	e0bffb17 	ldw	r2,-20(fp)
   496f0:	1000051e 	bne	r2,zero,49708 <open+0xd4>
   496f4:	e13ffc17 	ldw	r4,-16(fp)
   496f8:	00495680 	call	49568 <alt_file_locked>
   496fc:	e0bffa15 	stw	r2,-24(fp)
   49700:	e0bffa17 	ldw	r2,-24(fp)
   49704:	10001016 	blt	r2,zero,49748 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   49708:	e0bff817 	ldw	r2,-32(fp)
   4970c:	10800317 	ldw	r2,12(r2)
   49710:	10000826 	beq	r2,zero,49734 <open+0x100>
   49714:	e0bff817 	ldw	r2,-32(fp)
   49718:	10800317 	ldw	r2,12(r2)
   4971c:	e1ffff17 	ldw	r7,-4(fp)
   49720:	e1bffe17 	ldw	r6,-8(fp)
   49724:	e17ffd17 	ldw	r5,-12(fp)
   49728:	e13ffc17 	ldw	r4,-16(fp)
   4972c:	103ee83a 	callr	r2
   49730:	00000106 	br	49738 <open+0x104>
   49734:	0005883a 	mov	r2,zero
   49738:	e0bffa15 	stw	r2,-24(fp)
   4973c:	00000206 	br	49748 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   49740:	00bffb44 	movi	r2,-19
   49744:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   49748:	e0bffa17 	ldw	r2,-24(fp)
   4974c:	1000090e 	bge	r2,zero,49774 <open+0x140>
  {
    alt_release_fd (index);  
   49750:	e13ff917 	ldw	r4,-28(fp)
   49754:	0047e800 	call	47e80 <alt_release_fd>
    ALT_ERRNO = -status;
   49758:	00495180 	call	49518 <alt_get_errno>
   4975c:	1007883a 	mov	r3,r2
   49760:	e0bffa17 	ldw	r2,-24(fp)
   49764:	0085c83a 	sub	r2,zero,r2
   49768:	18800015 	stw	r2,0(r3)
    return -1;
   4976c:	00bfffc4 	movi	r2,-1
   49770:	00000106 	br	49778 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   49774:	e0bff917 	ldw	r2,-28(fp)
}
   49778:	e037883a 	mov	sp,fp
   4977c:	dfc00117 	ldw	ra,4(sp)
   49780:	df000017 	ldw	fp,0(sp)
   49784:	dec00204 	addi	sp,sp,8
   49788:	f800283a 	ret

0004978c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4978c:	defffa04 	addi	sp,sp,-24
   49790:	df000515 	stw	fp,20(sp)
   49794:	df000504 	addi	fp,sp,20
   49798:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4979c:	0005303a 	rdctl	r2,status
   497a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   497a4:	e0fffc17 	ldw	r3,-16(fp)
   497a8:	00bfff84 	movi	r2,-2
   497ac:	1884703a 	and	r2,r3,r2
   497b0:	1001703a 	wrctl	status,r2
  
  return context;
   497b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   497b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   497bc:	e0bfff17 	ldw	r2,-4(fp)
   497c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   497c4:	e0bffd17 	ldw	r2,-12(fp)
   497c8:	10800017 	ldw	r2,0(r2)
   497cc:	e0fffd17 	ldw	r3,-12(fp)
   497d0:	18c00117 	ldw	r3,4(r3)
   497d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   497d8:	e0bffd17 	ldw	r2,-12(fp)
   497dc:	10800117 	ldw	r2,4(r2)
   497e0:	e0fffd17 	ldw	r3,-12(fp)
   497e4:	18c00017 	ldw	r3,0(r3)
   497e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   497ec:	e0bffd17 	ldw	r2,-12(fp)
   497f0:	e0fffd17 	ldw	r3,-12(fp)
   497f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   497f8:	e0bffd17 	ldw	r2,-12(fp)
   497fc:	e0fffd17 	ldw	r3,-12(fp)
   49800:	10c00015 	stw	r3,0(r2)
   49804:	e0bffb17 	ldw	r2,-20(fp)
   49808:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4980c:	e0bffe17 	ldw	r2,-8(fp)
   49810:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   49814:	0001883a 	nop
   49818:	e037883a 	mov	sp,fp
   4981c:	df000017 	ldw	fp,0(sp)
   49820:	dec00104 	addi	sp,sp,4
   49824:	f800283a 	ret

00049828 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   49828:	defffb04 	addi	sp,sp,-20
   4982c:	dfc00415 	stw	ra,16(sp)
   49830:	df000315 	stw	fp,12(sp)
   49834:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   49838:	d0a00d17 	ldw	r2,-32716(gp)
   4983c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   49840:	d0a6b417 	ldw	r2,-25904(gp)
   49844:	10800044 	addi	r2,r2,1
   49848:	d0a6b415 	stw	r2,-25904(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4984c:	00002e06 	br	49908 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   49850:	e0bffd17 	ldw	r2,-12(fp)
   49854:	10800017 	ldw	r2,0(r2)
   49858:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4985c:	e0bffd17 	ldw	r2,-12(fp)
   49860:	10800403 	ldbu	r2,16(r2)
   49864:	10803fcc 	andi	r2,r2,255
   49868:	10000426 	beq	r2,zero,4987c <alt_tick+0x54>
   4986c:	d0a6b417 	ldw	r2,-25904(gp)
   49870:	1000021e 	bne	r2,zero,4987c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   49874:	e0bffd17 	ldw	r2,-12(fp)
   49878:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4987c:	e0bffd17 	ldw	r2,-12(fp)
   49880:	10800217 	ldw	r2,8(r2)
   49884:	d0e6b417 	ldw	r3,-25904(gp)
   49888:	18801d36 	bltu	r3,r2,49900 <alt_tick+0xd8>
   4988c:	e0bffd17 	ldw	r2,-12(fp)
   49890:	10800403 	ldbu	r2,16(r2)
   49894:	10803fcc 	andi	r2,r2,255
   49898:	1000191e 	bne	r2,zero,49900 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4989c:	e0bffd17 	ldw	r2,-12(fp)
   498a0:	10800317 	ldw	r2,12(r2)
   498a4:	e0fffd17 	ldw	r3,-12(fp)
   498a8:	18c00517 	ldw	r3,20(r3)
   498ac:	1809883a 	mov	r4,r3
   498b0:	103ee83a 	callr	r2
   498b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   498b8:	e0bfff17 	ldw	r2,-4(fp)
   498bc:	1000031e 	bne	r2,zero,498cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   498c0:	e13ffd17 	ldw	r4,-12(fp)
   498c4:	004978c0 	call	4978c <alt_alarm_stop>
   498c8:	00000d06 	br	49900 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   498cc:	e0bffd17 	ldw	r2,-12(fp)
   498d0:	10c00217 	ldw	r3,8(r2)
   498d4:	e0bfff17 	ldw	r2,-4(fp)
   498d8:	1887883a 	add	r3,r3,r2
   498dc:	e0bffd17 	ldw	r2,-12(fp)
   498e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   498e4:	e0bffd17 	ldw	r2,-12(fp)
   498e8:	10c00217 	ldw	r3,8(r2)
   498ec:	d0a6b417 	ldw	r2,-25904(gp)
   498f0:	1880032e 	bgeu	r3,r2,49900 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   498f4:	e0bffd17 	ldw	r2,-12(fp)
   498f8:	00c00044 	movi	r3,1
   498fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   49900:	e0bffe17 	ldw	r2,-8(fp)
   49904:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   49908:	e0fffd17 	ldw	r3,-12(fp)
   4990c:	d0a00d04 	addi	r2,gp,-32716
   49910:	18bfcf1e 	bne	r3,r2,49850 <__alt_data_end+0xfffe2750>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   49914:	0001883a 	nop
}
   49918:	0001883a 	nop
   4991c:	e037883a 	mov	sp,fp
   49920:	dfc00117 	ldw	ra,4(sp)
   49924:	df000017 	ldw	fp,0(sp)
   49928:	dec00204 	addi	sp,sp,8
   4992c:	f800283a 	ret

00049930 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   49930:	deffff04 	addi	sp,sp,-4
   49934:	df000015 	stw	fp,0(sp)
   49938:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4993c:	000170fa 	wrctl	ienable,zero
}
   49940:	0001883a 	nop
   49944:	e037883a 	mov	sp,fp
   49948:	df000017 	ldw	fp,0(sp)
   4994c:	dec00104 	addi	sp,sp,4
   49950:	f800283a 	ret

00049954 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   49954:	defffa04 	addi	sp,sp,-24
   49958:	dfc00515 	stw	ra,20(sp)
   4995c:	df000415 	stw	fp,16(sp)
   49960:	df000404 	addi	fp,sp,16
   49964:	e13ffe15 	stw	r4,-8(fp)
   49968:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4996c:	e0bfff17 	ldw	r2,-4(fp)
   49970:	10800017 	ldw	r2,0(r2)
   49974:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   49978:	e13ffe17 	ldw	r4,-8(fp)
   4997c:	0044be00 	call	44be0 <strlen>
   49980:	10800044 	addi	r2,r2,1
   49984:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   49988:	00000d06 	br	499c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4998c:	e0bffc17 	ldw	r2,-16(fp)
   49990:	10800217 	ldw	r2,8(r2)
   49994:	e0fffd17 	ldw	r3,-12(fp)
   49998:	180d883a 	mov	r6,r3
   4999c:	e17ffe17 	ldw	r5,-8(fp)
   499a0:	1009883a 	mov	r4,r2
   499a4:	0049c880 	call	49c88 <memcmp>
   499a8:	1000021e 	bne	r2,zero,499b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   499ac:	e0bffc17 	ldw	r2,-16(fp)
   499b0:	00000706 	br	499d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   499b4:	e0bffc17 	ldw	r2,-16(fp)
   499b8:	10800017 	ldw	r2,0(r2)
   499bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   499c0:	e0fffc17 	ldw	r3,-16(fp)
   499c4:	e0bfff17 	ldw	r2,-4(fp)
   499c8:	18bff01e 	bne	r3,r2,4998c <__alt_data_end+0xfffe288c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   499cc:	0005883a 	mov	r2,zero
}
   499d0:	e037883a 	mov	sp,fp
   499d4:	dfc00117 	ldw	ra,4(sp)
   499d8:	df000017 	ldw	fp,0(sp)
   499dc:	dec00204 	addi	sp,sp,8
   499e0:	f800283a 	ret

000499e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   499e4:	defffb04 	addi	sp,sp,-20
   499e8:	dfc00415 	stw	ra,16(sp)
   499ec:	df000315 	stw	fp,12(sp)
   499f0:	df000304 	addi	fp,sp,12
   499f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   499f8:	00800174 	movhi	r2,5
   499fc:	10aee204 	addi	r2,r2,-17528
   49a00:	10800017 	ldw	r2,0(r2)
   49a04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   49a08:	00003106 	br	49ad0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   49a0c:	e0bffd17 	ldw	r2,-12(fp)
   49a10:	10800217 	ldw	r2,8(r2)
   49a14:	1009883a 	mov	r4,r2
   49a18:	0044be00 	call	44be0 <strlen>
   49a1c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   49a20:	e0bffd17 	ldw	r2,-12(fp)
   49a24:	10c00217 	ldw	r3,8(r2)
   49a28:	e0bffe17 	ldw	r2,-8(fp)
   49a2c:	10bfffc4 	addi	r2,r2,-1
   49a30:	1885883a 	add	r2,r3,r2
   49a34:	10800003 	ldbu	r2,0(r2)
   49a38:	10803fcc 	andi	r2,r2,255
   49a3c:	1080201c 	xori	r2,r2,128
   49a40:	10bfe004 	addi	r2,r2,-128
   49a44:	10800bd8 	cmpnei	r2,r2,47
   49a48:	1000031e 	bne	r2,zero,49a58 <alt_find_file+0x74>
    {
      len -= 1;
   49a4c:	e0bffe17 	ldw	r2,-8(fp)
   49a50:	10bfffc4 	addi	r2,r2,-1
   49a54:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   49a58:	e0bffe17 	ldw	r2,-8(fp)
   49a5c:	e0ffff17 	ldw	r3,-4(fp)
   49a60:	1885883a 	add	r2,r3,r2
   49a64:	10800003 	ldbu	r2,0(r2)
   49a68:	10803fcc 	andi	r2,r2,255
   49a6c:	1080201c 	xori	r2,r2,128
   49a70:	10bfe004 	addi	r2,r2,-128
   49a74:	10800be0 	cmpeqi	r2,r2,47
   49a78:	1000081e 	bne	r2,zero,49a9c <alt_find_file+0xb8>
   49a7c:	e0bffe17 	ldw	r2,-8(fp)
   49a80:	e0ffff17 	ldw	r3,-4(fp)
   49a84:	1885883a 	add	r2,r3,r2
   49a88:	10800003 	ldbu	r2,0(r2)
   49a8c:	10803fcc 	andi	r2,r2,255
   49a90:	1080201c 	xori	r2,r2,128
   49a94:	10bfe004 	addi	r2,r2,-128
   49a98:	10000a1e 	bne	r2,zero,49ac4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   49a9c:	e0bffd17 	ldw	r2,-12(fp)
   49aa0:	10800217 	ldw	r2,8(r2)
   49aa4:	e0fffe17 	ldw	r3,-8(fp)
   49aa8:	180d883a 	mov	r6,r3
   49aac:	e17fff17 	ldw	r5,-4(fp)
   49ab0:	1009883a 	mov	r4,r2
   49ab4:	0049c880 	call	49c88 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   49ab8:	1000021e 	bne	r2,zero,49ac4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   49abc:	e0bffd17 	ldw	r2,-12(fp)
   49ac0:	00000806 	br	49ae4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   49ac4:	e0bffd17 	ldw	r2,-12(fp)
   49ac8:	10800017 	ldw	r2,0(r2)
   49acc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   49ad0:	e0fffd17 	ldw	r3,-12(fp)
   49ad4:	00800174 	movhi	r2,5
   49ad8:	10aee204 	addi	r2,r2,-17528
   49adc:	18bfcb1e 	bne	r3,r2,49a0c <__alt_data_end+0xfffe290c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   49ae0:	0005883a 	mov	r2,zero
}
   49ae4:	e037883a 	mov	sp,fp
   49ae8:	dfc00117 	ldw	ra,4(sp)
   49aec:	df000017 	ldw	fp,0(sp)
   49af0:	dec00204 	addi	sp,sp,8
   49af4:	f800283a 	ret

00049af8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   49af8:	defffc04 	addi	sp,sp,-16
   49afc:	df000315 	stw	fp,12(sp)
   49b00:	df000304 	addi	fp,sp,12
   49b04:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   49b08:	00bffa04 	movi	r2,-24
   49b0c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   49b10:	e03ffd15 	stw	zero,-12(fp)
   49b14:	00001d06 	br	49b8c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   49b18:	00800174 	movhi	r2,5
   49b1c:	10aa6504 	addi	r2,r2,-22124
   49b20:	e0fffd17 	ldw	r3,-12(fp)
   49b24:	18c00324 	muli	r3,r3,12
   49b28:	10c5883a 	add	r2,r2,r3
   49b2c:	10800017 	ldw	r2,0(r2)
   49b30:	1000131e 	bne	r2,zero,49b80 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   49b34:	00800174 	movhi	r2,5
   49b38:	10aa6504 	addi	r2,r2,-22124
   49b3c:	e0fffd17 	ldw	r3,-12(fp)
   49b40:	18c00324 	muli	r3,r3,12
   49b44:	10c5883a 	add	r2,r2,r3
   49b48:	e0ffff17 	ldw	r3,-4(fp)
   49b4c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   49b50:	00800174 	movhi	r2,5
   49b54:	10aee604 	addi	r2,r2,-17512
   49b58:	10c00017 	ldw	r3,0(r2)
   49b5c:	e0bffd17 	ldw	r2,-12(fp)
   49b60:	1880040e 	bge	r3,r2,49b74 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   49b64:	00800174 	movhi	r2,5
   49b68:	10aee604 	addi	r2,r2,-17512
   49b6c:	e0fffd17 	ldw	r3,-12(fp)
   49b70:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   49b74:	e0bffd17 	ldw	r2,-12(fp)
   49b78:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   49b7c:	00000606 	br	49b98 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   49b80:	e0bffd17 	ldw	r2,-12(fp)
   49b84:	10800044 	addi	r2,r2,1
   49b88:	e0bffd15 	stw	r2,-12(fp)
   49b8c:	e0bffd17 	ldw	r2,-12(fp)
   49b90:	10800810 	cmplti	r2,r2,32
   49b94:	103fe01e 	bne	r2,zero,49b18 <__alt_data_end+0xfffe2a18>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   49b98:	e0bffe17 	ldw	r2,-8(fp)
}
   49b9c:	e037883a 	mov	sp,fp
   49ba0:	df000017 	ldw	fp,0(sp)
   49ba4:	dec00104 	addi	sp,sp,4
   49ba8:	f800283a 	ret

00049bac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   49bac:	defffb04 	addi	sp,sp,-20
   49bb0:	df000415 	stw	fp,16(sp)
   49bb4:	df000404 	addi	fp,sp,16
   49bb8:	e13ffe15 	stw	r4,-8(fp)
   49bbc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   49bc0:	e0bfff17 	ldw	r2,-4(fp)
   49bc4:	10840070 	cmpltui	r2,r2,4097
   49bc8:	1000021e 	bne	r2,zero,49bd4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   49bcc:	00840004 	movi	r2,4096
   49bd0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   49bd4:	e0fffe17 	ldw	r3,-8(fp)
   49bd8:	e0bfff17 	ldw	r2,-4(fp)
   49bdc:	1885883a 	add	r2,r3,r2
   49be0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   49be4:	e0bffe17 	ldw	r2,-8(fp)
   49be8:	e0bffc15 	stw	r2,-16(fp)
   49bec:	00000506 	br	49c04 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   49bf0:	e0bffc17 	ldw	r2,-16(fp)
   49bf4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   49bf8:	e0bffc17 	ldw	r2,-16(fp)
   49bfc:	10800804 	addi	r2,r2,32
   49c00:	e0bffc15 	stw	r2,-16(fp)
   49c04:	e0fffc17 	ldw	r3,-16(fp)
   49c08:	e0bffd17 	ldw	r2,-12(fp)
   49c0c:	18bff836 	bltu	r3,r2,49bf0 <__alt_data_end+0xfffe2af0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   49c10:	e0bffe17 	ldw	r2,-8(fp)
   49c14:	108007cc 	andi	r2,r2,31
   49c18:	10000226 	beq	r2,zero,49c24 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   49c1c:	e0bffc17 	ldw	r2,-16(fp)
   49c20:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   49c24:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   49c28:	0001883a 	nop
   49c2c:	e037883a 	mov	sp,fp
   49c30:	df000017 	ldw	fp,0(sp)
   49c34:	dec00104 	addi	sp,sp,4
   49c38:	f800283a 	ret

00049c3c <atexit>:
   49c3c:	200b883a 	mov	r5,r4
   49c40:	000f883a 	mov	r7,zero
   49c44:	000d883a 	mov	r6,zero
   49c48:	0009883a 	mov	r4,zero
   49c4c:	0049d041 	jmpi	49d04 <__register_exitproc>

00049c50 <exit>:
   49c50:	defffe04 	addi	sp,sp,-8
   49c54:	000b883a 	mov	r5,zero
   49c58:	dc000015 	stw	r16,0(sp)
   49c5c:	dfc00115 	stw	ra,4(sp)
   49c60:	2021883a 	mov	r16,r4
   49c64:	0049e1c0 	call	49e1c <__call_exitprocs>
   49c68:	00800174 	movhi	r2,5
   49c6c:	10aede04 	addi	r2,r2,-17544
   49c70:	11000017 	ldw	r4,0(r2)
   49c74:	20800f17 	ldw	r2,60(r4)
   49c78:	10000126 	beq	r2,zero,49c80 <exit+0x30>
   49c7c:	103ee83a 	callr	r2
   49c80:	8009883a 	mov	r4,r16
   49c84:	0049f9c0 	call	49f9c <_exit>

00049c88 <memcmp>:
   49c88:	01c000c4 	movi	r7,3
   49c8c:	3980192e 	bgeu	r7,r6,49cf4 <memcmp+0x6c>
   49c90:	2144b03a 	or	r2,r4,r5
   49c94:	11c4703a 	and	r2,r2,r7
   49c98:	10000f26 	beq	r2,zero,49cd8 <memcmp+0x50>
   49c9c:	20800003 	ldbu	r2,0(r4)
   49ca0:	28c00003 	ldbu	r3,0(r5)
   49ca4:	10c0151e 	bne	r2,r3,49cfc <memcmp+0x74>
   49ca8:	31bfff84 	addi	r6,r6,-2
   49cac:	01ffffc4 	movi	r7,-1
   49cb0:	00000406 	br	49cc4 <memcmp+0x3c>
   49cb4:	20800003 	ldbu	r2,0(r4)
   49cb8:	28c00003 	ldbu	r3,0(r5)
   49cbc:	31bfffc4 	addi	r6,r6,-1
   49cc0:	10c00e1e 	bne	r2,r3,49cfc <memcmp+0x74>
   49cc4:	21000044 	addi	r4,r4,1
   49cc8:	29400044 	addi	r5,r5,1
   49ccc:	31fff91e 	bne	r6,r7,49cb4 <__alt_data_end+0xfffe2bb4>
   49cd0:	0005883a 	mov	r2,zero
   49cd4:	f800283a 	ret
   49cd8:	20c00017 	ldw	r3,0(r4)
   49cdc:	28800017 	ldw	r2,0(r5)
   49ce0:	18bfee1e 	bne	r3,r2,49c9c <__alt_data_end+0xfffe2b9c>
   49ce4:	31bfff04 	addi	r6,r6,-4
   49ce8:	21000104 	addi	r4,r4,4
   49cec:	29400104 	addi	r5,r5,4
   49cf0:	39bff936 	bltu	r7,r6,49cd8 <__alt_data_end+0xfffe2bd8>
   49cf4:	303fe91e 	bne	r6,zero,49c9c <__alt_data_end+0xfffe2b9c>
   49cf8:	003ff506 	br	49cd0 <__alt_data_end+0xfffe2bd0>
   49cfc:	10c5c83a 	sub	r2,r2,r3
   49d00:	f800283a 	ret

00049d04 <__register_exitproc>:
   49d04:	defffa04 	addi	sp,sp,-24
   49d08:	dc000315 	stw	r16,12(sp)
   49d0c:	04000174 	movhi	r16,5
   49d10:	842ede04 	addi	r16,r16,-17544
   49d14:	80c00017 	ldw	r3,0(r16)
   49d18:	dc400415 	stw	r17,16(sp)
   49d1c:	dfc00515 	stw	ra,20(sp)
   49d20:	18805217 	ldw	r2,328(r3)
   49d24:	2023883a 	mov	r17,r4
   49d28:	10003726 	beq	r2,zero,49e08 <__register_exitproc+0x104>
   49d2c:	10c00117 	ldw	r3,4(r2)
   49d30:	010007c4 	movi	r4,31
   49d34:	20c00e16 	blt	r4,r3,49d70 <__register_exitproc+0x6c>
   49d38:	1a000044 	addi	r8,r3,1
   49d3c:	8800221e 	bne	r17,zero,49dc8 <__register_exitproc+0xc4>
   49d40:	18c00084 	addi	r3,r3,2
   49d44:	18c7883a 	add	r3,r3,r3
   49d48:	18c7883a 	add	r3,r3,r3
   49d4c:	12000115 	stw	r8,4(r2)
   49d50:	10c7883a 	add	r3,r2,r3
   49d54:	19400015 	stw	r5,0(r3)
   49d58:	0005883a 	mov	r2,zero
   49d5c:	dfc00517 	ldw	ra,20(sp)
   49d60:	dc400417 	ldw	r17,16(sp)
   49d64:	dc000317 	ldw	r16,12(sp)
   49d68:	dec00604 	addi	sp,sp,24
   49d6c:	f800283a 	ret
   49d70:	00800034 	movhi	r2,0
   49d74:	10800004 	addi	r2,r2,0
   49d78:	10002626 	beq	r2,zero,49e14 <__register_exitproc+0x110>
   49d7c:	01006404 	movi	r4,400
   49d80:	d9400015 	stw	r5,0(sp)
   49d84:	d9800115 	stw	r6,4(sp)
   49d88:	d9c00215 	stw	r7,8(sp)
   49d8c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   49d90:	d9400017 	ldw	r5,0(sp)
   49d94:	d9800117 	ldw	r6,4(sp)
   49d98:	d9c00217 	ldw	r7,8(sp)
   49d9c:	10001d26 	beq	r2,zero,49e14 <__register_exitproc+0x110>
   49da0:	81000017 	ldw	r4,0(r16)
   49da4:	10000115 	stw	zero,4(r2)
   49da8:	02000044 	movi	r8,1
   49dac:	22405217 	ldw	r9,328(r4)
   49db0:	0007883a 	mov	r3,zero
   49db4:	12400015 	stw	r9,0(r2)
   49db8:	20805215 	stw	r2,328(r4)
   49dbc:	10006215 	stw	zero,392(r2)
   49dc0:	10006315 	stw	zero,396(r2)
   49dc4:	883fde26 	beq	r17,zero,49d40 <__alt_data_end+0xfffe2c40>
   49dc8:	18c9883a 	add	r4,r3,r3
   49dcc:	2109883a 	add	r4,r4,r4
   49dd0:	1109883a 	add	r4,r2,r4
   49dd4:	21802215 	stw	r6,136(r4)
   49dd8:	01800044 	movi	r6,1
   49ddc:	12406217 	ldw	r9,392(r2)
   49de0:	30cc983a 	sll	r6,r6,r3
   49de4:	4992b03a 	or	r9,r9,r6
   49de8:	12406215 	stw	r9,392(r2)
   49dec:	21c04215 	stw	r7,264(r4)
   49df0:	01000084 	movi	r4,2
   49df4:	893fd21e 	bne	r17,r4,49d40 <__alt_data_end+0xfffe2c40>
   49df8:	11006317 	ldw	r4,396(r2)
   49dfc:	218cb03a 	or	r6,r4,r6
   49e00:	11806315 	stw	r6,396(r2)
   49e04:	003fce06 	br	49d40 <__alt_data_end+0xfffe2c40>
   49e08:	18805304 	addi	r2,r3,332
   49e0c:	18805215 	stw	r2,328(r3)
   49e10:	003fc606 	br	49d2c <__alt_data_end+0xfffe2c2c>
   49e14:	00bfffc4 	movi	r2,-1
   49e18:	003fd006 	br	49d5c <__alt_data_end+0xfffe2c5c>

00049e1c <__call_exitprocs>:
   49e1c:	defff504 	addi	sp,sp,-44
   49e20:	df000915 	stw	fp,36(sp)
   49e24:	dd400615 	stw	r21,24(sp)
   49e28:	dc800315 	stw	r18,12(sp)
   49e2c:	dfc00a15 	stw	ra,40(sp)
   49e30:	ddc00815 	stw	r23,32(sp)
   49e34:	dd800715 	stw	r22,28(sp)
   49e38:	dd000515 	stw	r20,20(sp)
   49e3c:	dcc00415 	stw	r19,16(sp)
   49e40:	dc400215 	stw	r17,8(sp)
   49e44:	dc000115 	stw	r16,4(sp)
   49e48:	d9000015 	stw	r4,0(sp)
   49e4c:	2839883a 	mov	fp,r5
   49e50:	04800044 	movi	r18,1
   49e54:	057fffc4 	movi	r21,-1
   49e58:	00800174 	movhi	r2,5
   49e5c:	10aede04 	addi	r2,r2,-17544
   49e60:	12000017 	ldw	r8,0(r2)
   49e64:	45005217 	ldw	r20,328(r8)
   49e68:	44c05204 	addi	r19,r8,328
   49e6c:	a0001c26 	beq	r20,zero,49ee0 <__call_exitprocs+0xc4>
   49e70:	a0800117 	ldw	r2,4(r20)
   49e74:	15ffffc4 	addi	r23,r2,-1
   49e78:	b8000d16 	blt	r23,zero,49eb0 <__call_exitprocs+0x94>
   49e7c:	14000044 	addi	r16,r2,1
   49e80:	8421883a 	add	r16,r16,r16
   49e84:	8421883a 	add	r16,r16,r16
   49e88:	84402004 	addi	r17,r16,128
   49e8c:	a463883a 	add	r17,r20,r17
   49e90:	a421883a 	add	r16,r20,r16
   49e94:	e0001e26 	beq	fp,zero,49f10 <__call_exitprocs+0xf4>
   49e98:	80804017 	ldw	r2,256(r16)
   49e9c:	e0801c26 	beq	fp,r2,49f10 <__call_exitprocs+0xf4>
   49ea0:	bdffffc4 	addi	r23,r23,-1
   49ea4:	843fff04 	addi	r16,r16,-4
   49ea8:	8c7fff04 	addi	r17,r17,-4
   49eac:	bd7ff91e 	bne	r23,r21,49e94 <__alt_data_end+0xfffe2d94>
   49eb0:	00800034 	movhi	r2,0
   49eb4:	10800004 	addi	r2,r2,0
   49eb8:	10000926 	beq	r2,zero,49ee0 <__call_exitprocs+0xc4>
   49ebc:	a0800117 	ldw	r2,4(r20)
   49ec0:	1000301e 	bne	r2,zero,49f84 <__call_exitprocs+0x168>
   49ec4:	a0800017 	ldw	r2,0(r20)
   49ec8:	10003226 	beq	r2,zero,49f94 <__call_exitprocs+0x178>
   49ecc:	a009883a 	mov	r4,r20
   49ed0:	98800015 	stw	r2,0(r19)
   49ed4:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   49ed8:	9d000017 	ldw	r20,0(r19)
   49edc:	a03fe41e 	bne	r20,zero,49e70 <__alt_data_end+0xfffe2d70>
   49ee0:	dfc00a17 	ldw	ra,40(sp)
   49ee4:	df000917 	ldw	fp,36(sp)
   49ee8:	ddc00817 	ldw	r23,32(sp)
   49eec:	dd800717 	ldw	r22,28(sp)
   49ef0:	dd400617 	ldw	r21,24(sp)
   49ef4:	dd000517 	ldw	r20,20(sp)
   49ef8:	dcc00417 	ldw	r19,16(sp)
   49efc:	dc800317 	ldw	r18,12(sp)
   49f00:	dc400217 	ldw	r17,8(sp)
   49f04:	dc000117 	ldw	r16,4(sp)
   49f08:	dec00b04 	addi	sp,sp,44
   49f0c:	f800283a 	ret
   49f10:	a0800117 	ldw	r2,4(r20)
   49f14:	80c00017 	ldw	r3,0(r16)
   49f18:	10bfffc4 	addi	r2,r2,-1
   49f1c:	15c01426 	beq	r2,r23,49f70 <__call_exitprocs+0x154>
   49f20:	80000015 	stw	zero,0(r16)
   49f24:	183fde26 	beq	r3,zero,49ea0 <__alt_data_end+0xfffe2da0>
   49f28:	95c8983a 	sll	r4,r18,r23
   49f2c:	a0806217 	ldw	r2,392(r20)
   49f30:	a5800117 	ldw	r22,4(r20)
   49f34:	2084703a 	and	r2,r4,r2
   49f38:	10000b26 	beq	r2,zero,49f68 <__call_exitprocs+0x14c>
   49f3c:	a0806317 	ldw	r2,396(r20)
   49f40:	2088703a 	and	r4,r4,r2
   49f44:	20000c1e 	bne	r4,zero,49f78 <__call_exitprocs+0x15c>
   49f48:	89400017 	ldw	r5,0(r17)
   49f4c:	d9000017 	ldw	r4,0(sp)
   49f50:	183ee83a 	callr	r3
   49f54:	a0800117 	ldw	r2,4(r20)
   49f58:	15bfbf1e 	bne	r2,r22,49e58 <__alt_data_end+0xfffe2d58>
   49f5c:	98800017 	ldw	r2,0(r19)
   49f60:	153fcf26 	beq	r2,r20,49ea0 <__alt_data_end+0xfffe2da0>
   49f64:	003fbc06 	br	49e58 <__alt_data_end+0xfffe2d58>
   49f68:	183ee83a 	callr	r3
   49f6c:	003ff906 	br	49f54 <__alt_data_end+0xfffe2e54>
   49f70:	a5c00115 	stw	r23,4(r20)
   49f74:	003feb06 	br	49f24 <__alt_data_end+0xfffe2e24>
   49f78:	89000017 	ldw	r4,0(r17)
   49f7c:	183ee83a 	callr	r3
   49f80:	003ff406 	br	49f54 <__alt_data_end+0xfffe2e54>
   49f84:	a0800017 	ldw	r2,0(r20)
   49f88:	a027883a 	mov	r19,r20
   49f8c:	1029883a 	mov	r20,r2
   49f90:	003fb606 	br	49e6c <__alt_data_end+0xfffe2d6c>
   49f94:	0005883a 	mov	r2,zero
   49f98:	003ffb06 	br	49f88 <__alt_data_end+0xfffe2e88>

00049f9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   49f9c:	defffd04 	addi	sp,sp,-12
   49fa0:	df000215 	stw	fp,8(sp)
   49fa4:	df000204 	addi	fp,sp,8
   49fa8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   49fac:	0001883a 	nop
   49fb0:	e0bfff17 	ldw	r2,-4(fp)
   49fb4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   49fb8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   49fbc:	10000226 	beq	r2,zero,49fc8 <_exit+0x2c>
    ALT_SIM_FAIL();
   49fc0:	002af070 	cmpltui	zero,zero,43969
   49fc4:	00000106 	br	49fcc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   49fc8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   49fcc:	003fff06 	br	49fcc <__alt_data_end+0xfffe2ecc>
